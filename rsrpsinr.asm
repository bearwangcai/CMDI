; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DH@CHGFPFCL@Internal?5class?5for?5passing?5memor@ ; `string'
PUBLIC	??_C@_0BK@CCMHKJAM@rsrpsinr?4_memoryviewslice?$AA@ ; `string'
PUBLIC	??_C@_0BE@GJNHAHPO@rsrpsinr?4memoryview?$AA@	; `string'
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_06KGLHCPOD@nbytes?$AA@			; `string'
PUBLIC	??_C@_08BFHIGMPA@itemsize?$AA@			; `string'
PUBLIC	??_C@_04DMMOEENP@ndim?$AA@			; `string'
PUBLIC	??_C@_0L@ELCNMNAH@suboffsets?$AA@		; `string'
PUBLIC	??_C@_07IMKHLIIB@strides?$AA@			; `string'
PUBLIC	??_C@_05KFCIHKGL@shape?$AA@			; `string'
PUBLIC	??_C@_04BHIIPFEC@base?$AA@			; `string'
PUBLIC	??_C@_01GAPBHFFA@T?$AA@				; `string'
PUBLIC	??_C@_0N@BCHOHOEO@copy_fortran?$AA@		; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_0M@FBGIIHKF@is_f_contig?$AA@		; `string'
PUBLIC	??_C@_0M@BLPPMCOK@is_c_contig?$AA@		; `string'
PUBLIC	??_C@_0O@LDCFFKPD@rsrpsinr?4Enum?$AA@		; `string'
PUBLIC	??_C@_0P@HHBKLIDN@rsrpsinr?4array?$AA@		; `string'
PUBLIC	??_C@_07KCAJKBCG@memview?$AA@			; `string'
PUBLIC	??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@	; `string'
PUBLIC	??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@	; `string'
PUBLIC	??_C@_0M@GIDJPAP@__getattr__?$AA@		; `string'
PUBLIC	??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@	; `string'
PUBLIC	??_C@_0N@NLCAJHNH@get_coverage?$AA@		; `string'
PUBLIC	??_C@_04CNCNIFFP@gain?$AA@			; `string'
PUBLIC	??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@	; `string'
PUBLIC	??_C@_0O@FNDOKFBP@rad_to_degree?$AA@		; `string'
PUBLIC	??_C@_0O@CNCFBNEJ@degree_to_rad?$AA@		; `string'
PUBLIC	??_C@_07GDNIBEMG@int64_t?$AA@			; `string'
PUBLIC	??_C@_07EHMDJLEA@uint8_t?$AA@			; `string'
PUBLIC	??_C@_07HDHLMKKB@DTYPE_t?$AA@			; `string'
PUBLIC	??_C@_08PNEKBLED@type?4pxd?$AA@			; `string'
PUBLIC	??_C@_0N@JDPHLOKK@stringsource?$AA@		; `string'
PUBLIC	??_C@_0N@MKALCPGB@__init__?4pxd?$AA@		; `string'
PUBLIC	??_C@_0N@BLBBADDG@rsrpsinr?4pyx?$AA@		; `string'
PUBLIC	??_C@_0L@DEABIHOI@rsrpsinr?4c?$AA@		; `string'
PUBLIC	__pyx_module_is_main_rsrpsinr
_BSS	SEGMENT
__pyx_n_s_zeros DQ 01H DUP (?)
__pyx_n_s_update DQ 01H DUP (?)
__pyx_n_s_unpack DQ 01H DUP (?)
__pyx_kp_u_unknown_dtype_code_in_numpy_pxd DQ 01H DUP (?)
__pyx_kp_s_unable_to_allocate_shape_and_str DQ 01H DUP (?)
__pyx_kp_s_unable_to_allocate_array_data DQ 01H DUP (?)
__pyx_n_s_uint8 DQ 01H DUP (?)
__pyx_n_s_test DQ 01H DUP (?)
__pyx_n_s_struct DQ 01H DUP (?)
__pyx_kp_s_stringsource DQ 01H DUP (?)
__pyx_kp_s_strided_and_indirect DQ 01H DUP (?)
__pyx_kp_s_strided_and_direct_or_indirect DQ 01H DUP (?)
__pyx_kp_s_strided_and_direct DQ 01H DUP (?)
__pyx_n_s_stop DQ 01H DUP (?)
__pyx_n_s_step DQ 01H DUP (?)
__pyx_n_s_start DQ 01H DUP (?)
__pyx_n_s_size DQ 01H DUP (?)
__pyx_n_s_setstate_cython DQ 01H DUP (?)
__pyx_n_s_setstate DQ 01H DUP (?)
__pyx_n_s_set_antenna_hv_vv DQ 01H DUP (?)
__pyx_kp_s_rsrpsinr_pyx DQ 01H DUP (?)
__pyx_n_s_rsrpsinr DQ 01H DUP (?)
__pyx_n_s_reshape DQ 01H DUP (?)
__pyx_n_s_reduce_ex DQ 01H DUP (?)
__pyx_n_s_reduce_cython DQ 01H DUP (?)
__pyx_n_s_reduce DQ 01H DUP (?)
__pyx_n_s_range DQ 01H DUP (?)
__pyx_n_s_rad_to_degree DQ 01H DUP (?)
__pyx_n_s_pyx_vtable DQ 01H DUP (?)
__pyx_n_s_pyx_unpickle_Enum DQ 01H DUP (?)
__pyx_n_s_pyx_result DQ 01H DUP (?)
__pyx_n_s_pyx_getbuffer DQ 01H DUP (?)
__pyx_n_s_pyx_PickleError DQ 01H DUP (?)
__pyx_n_s_pickle DQ 01H DUP (?)
__pyx_n_s_pack DQ 01H DUP (?)
__pyx_n_s_order DQ 01H DUP (?)
__pyx_n_s_ones DQ 01H DUP (?)
__pyx_kp_s_numpy_core_umath_failed_to_impor DQ 01H DUP (?)
__pyx_kp_s_numpy_core_multiarray_failed_to DQ 01H DUP (?)
__pyx_n_s_numpy DQ 01H DUP (?)
__pyx_n_s_np DQ	01H DUP (?)
__pyx_kp_s_no_default___reduce___due_to_non DQ 01H DUP (?)
__pyx_n_s_new DQ 01H DUP (?)
__pyx_n_s_ndim DQ 01H DUP (?)
__pyx_kp_u_ndarray_is_not_Fortran_contiguou DQ 01H DUP (?)
__pyx_kp_u_ndarray_is_not_C_contiguous DQ 01H DUP (?)
__pyx_n_s_name_2 DQ 01H DUP (?)
__pyx_n_s_memview DQ 01H DUP (?)
__pyx_n_s_main DQ 01H DUP (?)
__pyx_kp_s_itemsize_0_for_cython_array DQ 01H DUP (?)
__pyx_n_s_int64 DQ 01H DUP (?)
__pyx_n_s_import DQ 01H DUP (?)
__pyx_n_s_id DQ	01H DUP (?)
__pyx_kp_s_got_differing_extents_in_dimensi DQ 01H DUP (?)
__pyx_n_s_getstate DQ 01H DUP (?)
__pyx_n_s_get_coverage DQ 01H DUP (?)
__pyx_n_s_gain DQ 01H DUP (?)
__pyx_n_u_fortran DQ 01H DUP (?)
__pyx_n_s_fortran DQ 01H DUP (?)
__pyx_n_s_float64 DQ 01H DUP (?)
__pyx_n_s_error DQ 01H DUP (?)
__pyx_n_s_enumerate DQ 01H DUP (?)
__pyx_n_s_encode DQ 01H DUP (?)
__pyx_n_s_dtype DQ 01H DUP (?)
__pyx_n_s_dict DQ 01H DUP (?)
__pyx_n_s_degree_to_rad DQ 01H DUP (?)
__pyx_n_s_d DQ	01H DUP (?)
__pyx_kp_s_contiguous_and_indirect DQ 01H DUP (?)
__pyx_kp_s_contiguous_and_direct DQ 01H DUP (?)
__pyx_n_s_cline_in_traceback DQ 01H DUP (?)
__pyx_n_s_class DQ 01H DUP (?)
__pyx_n_u_c DQ	01H DUP (?)
__pyx_n_s_c DQ	01H DUP (?)
__pyx_n_s_base DQ 01H DUP (?)
__pyx_n_s_View_MemoryView DQ 01H DUP (?)
__pyx_n_s_ValueError DQ 01H DUP (?)
__pyx_kp_s_Unable_to_convert_item_to_object DQ 01H DUP (?)
__pyx_n_s_TypeError DQ 01H DUP (?)
__pyx_n_s_RuntimeError DQ 01H DUP (?)
__pyx_n_s_PickleError DQ 01H DUP (?)
__pyx_kp_s_Out_of_bounds_on_buffer_access_a DQ 01H DUP (?)
__pyx_n_b_O DQ	01H DUP (?)
__pyx_kp_u_Non_native_byte_order_not_suppor DQ 01H DUP (?)
__pyx_kp_s_MemoryView_of_r_object DQ 01H DUP (?)
__pyx_kp_s_MemoryView_of_r_at_0x_x DQ 01H DUP (?)
__pyx_n_s_MemoryError DQ 01H DUP (?)
__pyx_kp_s_Invalid_shape_in_axis_d_d DQ 01H DUP (?)
__pyx_kp_s_Invalid_mode_expected_c_or_fortr DQ 01H DUP (?)
__pyx_kp_s_Indirect_dimensions_not_supporte DQ 01H DUP (?)
__pyx_n_s_IndexError DQ 01H DUP (?)
__pyx_kp_s_Incompatible_checksums_s_vs_0xb0 DQ 01H DUP (?)
__pyx_n_s_ImportError DQ 01H DUP (?)
__pyx_kp_u_Format_string_allocated_too_shor_2 DQ 01H DUP (?)
__pyx_kp_u_Format_string_allocated_too_shor DQ 01H DUP (?)
__pyx_kp_s_Empty_shape_tuple_for_cython_arr DQ 01H DUP (?)
__pyx_n_s_Ellipsis DQ 01H DUP (?)
__pyx_n_s_DTYPE DQ 01H DUP (?)
__pyx_kp_s_Cannot_index_with_type_s DQ 01H DUP (?)
__pyx_kp_s_Can_only_create_a_buffer_that_is DQ 01H DUP (?)
__pyx_n_s_C DQ	01H DUP (?)
__pyx_kp_s_Buffer_view_does_not_expose_stri DQ 01H DUP (?)
__pyx_n_s_ASCII DQ 01H DUP (?)
__pyx_n_s_pyx_state DQ 01H DUP (?)
__pyx_n_s_pyx_checksum DQ 01H DUP (?)
__pyx_n_s_pyx_type DQ 01H DUP (?)
__pyx_n_s_dtype_is_object DQ 01H DUP (?)
__pyx_n_s_flags DQ 01H DUP (?)
__pyx_n_s_obj DQ 01H DUP (?)
__pyx_n_s_name DQ 01H DUP (?)
__pyx_n_s_allocate_buffer DQ 01H DUP (?)
__pyx_n_s_mode DQ 01H DUP (?)
__pyx_n_s_format DQ 01H DUP (?)
__pyx_n_s_itemsize DQ 01H DUP (?)
__pyx_n_s_shape DQ 01H DUP (?)
__pyx_n_s_NOISE DQ 01H DUP (?)
__pyx_n_s_FREQ DQ 01H DUP (?)
__pyx_n_s_TERM_HEIGHT DQ 01H DUP (?)
__pyx_n_s_SINR_TH DQ 01H DUP (?)
__pyx_n_s_RSRP_TH DQ 01H DUP (?)
__pyx_n_s_B_of_S DQ 01H DUP (?)
__pyx_n_s_B DQ	01H DUP (?)
__pyx_n_s_S DQ	01H DUP (?)
__pyx_n_s_beta DQ 01H DUP (?)
__pyx_n_s_alpha DQ 01H DUP (?)
__pyx_n_s_vv DQ	01H DUP (?)
__pyx_n_s_hv DQ	01H DUP (?)
PyArray_API DQ	01H DUP (?)
PyUFunc_API DQ	01H DUP (?)
__pyx_m	DQ	01H DUP (?)
__pyx_clineno DD 01H DUP (?)
	ALIGN	8

__Pyx_zeros DQ	08H DUP (?)
__pyx_code_cache DB 010H DUP (?)
__pyx_ptype_7cpython_4type_type DQ 01H DUP (?)
__pyx_ptype_5numpy_dtype DQ 01H DUP (?)
__pyx_ptype_5numpy_flatiter DQ 01H DUP (?)
__pyx_ptype_5numpy_broadcast DQ 01H DUP (?)
__pyx_ptype_5numpy_ndarray DQ 01H DUP (?)
__pyx_ptype_5numpy_ufunc DQ 01H DUP (?)
__pyx_array_type DQ 01H DUP (?)
__pyx_MemviewEnum_type DQ 01H DUP (?)
__pyx_memoryview_type DQ 01H DUP (?)
__pyx_memoryviewslice_type DQ 01H DUP (?)
__pyx_v_8rsrpsinr_ahv DB 0d0H DUP (?)
__pyx_v_8rsrpsinr_avv DB 0d0H DUP (?)
generic	DQ	01H DUP (?)
strided	DQ	01H DUP (?)
indirect DQ	01H DUP (?)
contiguous DQ	01H DUP (?)
indirect_contiguous DQ 01H DUP (?)
__pyx_module_is_main_rsrpsinr DD 01H DUP (?)
__pyx_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0DH@CHGFPFCL@Internal?5class?5for?5passing?5memor@
CONST	SEGMENT
??_C@_0DH@CHGFPFCL@Internal?5class?5for?5passing?5memor@ DB 'Internal cla'
	DB	'ss for passing memoryview slices to Python', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CCMHKJAM@rsrpsinr?4_memoryviewslice?$AA@
CONST	SEGMENT
??_C@_0BK@CCMHKJAM@rsrpsinr?4_memoryviewslice?$AA@ DB 'rsrpsinr._memoryvi'
	DB	'ewslice', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GJNHAHPO@rsrpsinr?4memoryview?$AA@
CONST	SEGMENT
??_C@_0BE@GJNHAHPO@rsrpsinr?4memoryview?$AA@ DB 'rsrpsinr.memoryview', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGLHCPOD@nbytes?$AA@
CONST	SEGMENT
??_C@_06KGLHCPOD@nbytes?$AA@ DB 'nbytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFHIGMPA@itemsize?$AA@
CONST	SEGMENT
??_C@_08BFHIGMPA@itemsize?$AA@ DB 'itemsize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMMOEENP@ndim?$AA@
CONST	SEGMENT
??_C@_04DMMOEENP@ndim?$AA@ DB 'ndim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ELCNMNAH@suboffsets?$AA@
CONST	SEGMENT
??_C@_0L@ELCNMNAH@suboffsets?$AA@ DB 'suboffsets', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IMKHLIIB@strides?$AA@
CONST	SEGMENT
??_C@_07IMKHLIIB@strides?$AA@ DB 'strides', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KFCIHKGL@shape?$AA@
CONST	SEGMENT
??_C@_05KFCIHKGL@shape?$AA@ DB 'shape', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BHIIPFEC@base?$AA@
CONST	SEGMENT
??_C@_04BHIIPFEC@base?$AA@ DB 'base', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T?$AA@
CONST	SEGMENT
??_C@_01GAPBHFFA@T?$AA@ DB 'T', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCHOHOEO@copy_fortran?$AA@
CONST	SEGMENT
??_C@_0N@BCHOHOEO@copy_fortran?$AA@ DB 'copy_fortran', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBGIIHKF@is_f_contig?$AA@
CONST	SEGMENT
??_C@_0M@FBGIIHKF@is_f_contig?$AA@ DB 'is_f_contig', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BLPPMCOK@is_c_contig?$AA@
CONST	SEGMENT
??_C@_0M@BLPPMCOK@is_c_contig?$AA@ DB 'is_c_contig', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDCFFKPD@rsrpsinr?4Enum?$AA@
CONST	SEGMENT
??_C@_0O@LDCFFKPD@rsrpsinr?4Enum?$AA@ DB 'rsrpsinr.Enum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HHBKLIDN@rsrpsinr?4array?$AA@
CONST	SEGMENT
??_C@_0P@HHBKLIDN@rsrpsinr?4array?$AA@ DB 'rsrpsinr.array', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KCAJKBCG@memview?$AA@
CONST	SEGMENT
??_C@_07KCAJKBCG@memview?$AA@ DB 'memview', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@
CONST	SEGMENT
??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@ DB '__setstate_cython__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@
CONST	SEGMENT
??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@ DB '__reduce_cython__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIDJPAP@__getattr__?$AA@
CONST	SEGMENT
??_C@_0M@GIDJPAP@__getattr__?$AA@ DB '__getattr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
CONST	SEGMENT
??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@ DB '__pyx_unpickle_Enum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLCAJHNH@get_coverage?$AA@
CONST	SEGMENT
??_C@_0N@NLCAJHNH@get_coverage?$AA@ DB 'get_coverage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNCNIFFP@gain?$AA@
CONST	SEGMENT
??_C@_04CNCNIFFP@gain?$AA@ DB 'gain', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@
CONST	SEGMENT
??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@ DB 'set_antenna_hv_vv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FNDOKFBP@rad_to_degree?$AA@
CONST	SEGMENT
??_C@_0O@FNDOKFBP@rad_to_degree?$AA@ DB 'rad_to_degree', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNCFBNEJ@degree_to_rad?$AA@
CONST	SEGMENT
??_C@_0O@CNCFBNEJ@degree_to_rad?$AA@ DB 'degree_to_rad', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
__pyx_k_B DB	'B', 00H
	ORG $+2
__pyx_k_C DB	'C', 00H
	ORG $+2
__pyx_k_O DB	'O', 00H
	ORG $+2
__pyx_k_S DB	'S', 00H
	ORG $+2
__pyx_k_c DB	'c', 00H
	ORG $+2
__pyx_k_d DB	'd', 00H
	ORG $+2
__pyx_k_hv DB	'hv', 00H
	ORG $+1
__pyx_k_id DB	'id', 00H
	ORG $+1
__pyx_k_np DB	'np', 00H
	ORG $+1
__pyx_k_vv DB	'vv', 00H
	ORG $+1
__pyx_k_new DB	'__new__', 00H
__pyx_k_obj DB	'obj', 00H
__pyx_k_FREQ DB	'FREQ', 00H
	ORG $+3
__pyx_k_base DB	'base', 00H
	ORG $+3
__pyx_k_beta DB	'beta', 00H
	ORG $+7
__pyx_k_dict DB	'__dict__', 00H
	ORG $+3
__pyx_k_gain DB	'gain', 00H
	ORG $+7
__pyx_k_main DB	'__main__', 00H
	ORG $+3
__pyx_k_mode DB	'mode', 00H
	ORG $+3
__pyx_k_name DB	'name', 00H
	ORG $+3
__pyx_k_ndim DB	'ndim', 00H
	ORG $+3
__pyx_k_ones DB	'ones', 00H
	ORG $+3
__pyx_k_pack DB	'pack', 00H
	ORG $+3
__pyx_k_size DB	'size', 00H
	ORG $+3
__pyx_k_step DB	'step', 00H
	ORG $+3
__pyx_k_stop DB	'stop', 00H
	ORG $+7
__pyx_k_test DB	'__test__', 00H
	ORG $+3
__pyx_k_ASCII DB 'ASCII', 00H
	ORG $+2
__pyx_k_DTYPE DB 'DTYPE', 00H
	ORG $+2
__pyx_k_NOISE DB 'NOISE', 00H
	ORG $+2
__pyx_k_alpha DB 'alpha', 00H
	ORG $+6
__pyx_k_class DB '__class__', 00H
	ORG $+2
__pyx_k_dtype DB 'dtype', 00H
	ORG $+2
__pyx_k_error DB 'error', 00H
	ORG $+2
__pyx_k_flags DB 'flags', 00H
	ORG $+2
__pyx_k_int64 DB 'int64', 00H
	ORG $+2
__pyx_k_numpy DB 'numpy', 00H
	ORG $+2
__pyx_k_order DB 'order', 00H
	ORG $+2
__pyx_k_range DB 'range', 00H
	ORG $+2
__pyx_k_shape DB 'shape', 00H
	ORG $+2
__pyx_k_start DB 'start', 00H
	ORG $+2
__pyx_k_uint8 DB 'uint8', 00H
	ORG $+2
__pyx_k_zeros DB 'zeros', 00H
	ORG $+2
__pyx_k_B_of_S DB 'B_of_S', 00H
	ORG $+1
__pyx_k_encode DB 'encode', 00H
	ORG $+1
__pyx_k_format DB 'format', 00H
	ORG $+5
__pyx_k_import DB '__import__', 00H
	ORG $+5
__pyx_k_name_2 DB '__name__', 00H
	ORG $+3
__pyx_k_pickle DB 'pickle', 00H
	ORG $+5
__pyx_k_reduce DB '__reduce__', 00H
	ORG $+1
__pyx_k_struct DB 'struct', 00H
	ORG $+1
__pyx_k_unpack DB 'unpack', 00H
	ORG $+1
__pyx_k_update DB 'update', 00H
	ORG $+5
__pyx_k_RSRP_TH DB 'RSRP_TH', 00H
__pyx_k_SINR_TH DB 'SINR_TH', 00H
__pyx_k_float64 DB 'float64', 00H
__pyx_k_fortran DB 'fortran', 00H
__pyx_k_memview DB 'memview', 00H
__pyx_k_reshape DB 'reshape', 00H
__pyx_k_Ellipsis DB 'Ellipsis', 00H
	ORG $+7
__pyx_k_getstate DB '__getstate__', 00H
	ORG $+3
__pyx_k_itemsize DB 'itemsize', 00H
	ORG $+7
__pyx_k_pyx_type DB '__pyx_type', 00H
	ORG $+5
__pyx_k_rsrpsinr DB 'rsrpsinr', 00H
	ORG $+7
__pyx_k_setstate DB '__setstate__', 00H
	ORG $+3
__pyx_k_TypeError DB 'TypeError', 00H
	ORG $+6
__pyx_k_enumerate DB 'enumerate', 00H
	ORG $+6
__pyx_k_pyx_state DB '__pyx_state', 00H
	ORG $+4
__pyx_k_reduce_ex DB '__reduce_ex__', 00H
	ORG $+2
__pyx_k_IndexError DB 'IndexError', 00H
	ORG $+5
__pyx_k_ValueError DB 'ValueError', 00H
	ORG $+5
__pyx_k_pyx_result DB '__pyx_result', 00H
	ORG $+3
__pyx_k_pyx_vtable DB '__pyx_vtable__', 00H
	ORG $+1
__pyx_k_ImportError DB 'ImportError', 00H
	ORG $+4
__pyx_k_MemoryError DB 'MemoryError', 00H
	ORG $+4
__pyx_k_PickleError DB 'PickleError', 00H
	ORG $+4
__pyx_k_TERM_HEIGHT DB 'TERM_HEIGHT', 00H
	ORG $+4
__pyx_k_RuntimeError DB 'RuntimeError', 00H
	ORG $+3
__pyx_k_get_coverage DB 'get_coverage', 00H
	ORG $+3
__pyx_k_pyx_checksum DB '__pyx_checksum', 00H
	ORG $+1
__pyx_k_rsrpsinr_pyx DB 'rsrpsinr.pyx', 00H
	ORG $+3
__pyx_k_stringsource DB 'stringsource', 00H
	ORG $+3
__pyx_k_degree_to_rad DB 'degree_to_rad', 00H
	ORG $+2
__pyx_k_pyx_getbuffer DB '__pyx_getbuffer', 00H
__pyx_k_rad_to_degree DB 'rad_to_degree', 00H
	ORG $+2
__pyx_k_reduce_cython DB '__reduce_cython__', 00H
	ORG $+6
__pyx_k_View_MemoryView DB 'View.MemoryView', 00H
__pyx_k_allocate_buffer DB 'allocate_buffer', 00H
__pyx_k_dtype_is_object DB 'dtype_is_object', 00H
__pyx_k_pyx_PickleError DB '__pyx_PickleError', 00H
	ORG $+6
__pyx_k_setstate_cython DB '__setstate_cython__', 00H
	ORG $+4
__pyx_k_pyx_unpickle_Enum DB '__pyx_unpickle_Enum', 00H
	ORG $+4
__pyx_k_set_antenna_hv_vv DB 'set_antenna_hv_vv', 00H
	ORG $+6
__pyx_k_cline_in_traceback DB 'cline_in_traceback', 00H
	ORG $+5
__pyx_k_strided_and_direct DB '<strided and direct>', 00H
	ORG $+3
__pyx_k_strided_and_indirect DB '<strided and indirect>', 00H
	ORG $+1
__pyx_k_contiguous_and_direct DB '<contiguous and direct>', 00H
__pyx_k_MemoryView_of_r_object DB '<MemoryView of %r object>', 00H
	ORG $+6
__pyx_k_MemoryView_of_r_at_0x_x DB '<MemoryView of %r at 0x%x>', 00H
	ORG $+5
__pyx_k_contiguous_and_indirect DB '<contiguous and indirect>', 00H
	ORG $+6
__pyx_k_Cannot_index_with_type_s DB 'Cannot index with type ''%s''', 00H
	ORG $+4
__pyx_k_Invalid_shape_in_axis_d_d DB 'Invalid shape in axis %d: %d.', 00H
	ORG $+2
__pyx_k_itemsize_0_for_cython_array DB 'itemsize <= 0 for cython.array', 00H
	ORG $+1
__pyx_k_ndarray_is_not_C_contiguous DB 'ndarray is not C contiguous', 00H
	ORG $+4
__pyx_k_unable_to_allocate_array_data DB 'unable to allocate array data.', 00H
	ORG $+1
__pyx_k_strided_and_direct_or_indirect DB '<strided and direct or indirec'
	DB	't>', 00H
	ORG $+7
__pyx_k_numpy_core_multiarray_failed_to DB 'numpy.core.multiarray failed '
	DB	'to import', 00H
	ORG $+1
__pyx_k_unknown_dtype_code_in_numpy_pxd DB 'unknown dtype code in numpy.p'
	DB	'xd (%d)', 00H
	ORG $+3
__pyx_k_Buffer_view_does_not_expose_stri DB 'Buffer view does not expose '
	DB	'strides', 00H
	ORG $+4
__pyx_k_Can_only_create_a_buffer_that_is DB 'Can only create a buffer tha'
	DB	't is contiguous in memory.', 00H
	ORG $+1
__pyx_k_Empty_shape_tuple_for_cython_arr DB 'Empty shape tuple for cython'
	DB	'.array', 00H
	ORG $+5
__pyx_k_Format_string_allocated_too_shor DB 'Format string allocated too '
	DB	'short, see comment in numpy.pxd', 00H
	ORG $+4
__pyx_k_Incompatible_checksums_s_vs_0xb0 DB 'Incompatible checksums (%s v'
	DB	's 0xb068931 = (name))', 00H
	ORG $+6
__pyx_k_Indirect_dimensions_not_supporte DB 'Indirect dimensions not supp'
	DB	'orted', 00H
	ORG $+6
__pyx_k_Invalid_mode_expected_c_or_fortr DB 'Invalid mode, expected ''c'''
	DB	' or ''fortran'', got %s', 00H
__pyx_k_Non_native_byte_order_not_suppor DB 'Non-native byte order not su'
	DB	'pported', 00H
	ORG $+4
__pyx_k_Out_of_bounds_on_buffer_access_a DB 'Out of bounds on buffer acce'
	DB	'ss (axis %d)', 00H
	ORG $+7
__pyx_k_Unable_to_convert_item_to_object DB 'Unable to convert item to ob'
	DB	'ject', 00H
	ORG $+7
__pyx_k_got_differing_extents_in_dimensi DB 'got differing extents in dim'
	DB	'ension %d (got %d and %d)', 00H
	ORG $+2
__pyx_k_ndarray_is_not_Fortran_contiguou DB 'ndarray is not Fortran conti'
	DB	'guous', 00H
	ORG $+6
__pyx_k_no_default___reduce___due_to_non DB 'no default __reduce__ due to'
	DB	' non-trivial __cinit__', 00H
	ORG $+5
__pyx_k_numpy_core_umath_failed_to_impor DB 'numpy.core.umath failed to i'
	DB	'mport', 00H
	ORG $+6
__pyx_k_unable_to_allocate_shape_and_str DB 'unable to allocate shape and'
	DB	' strides.', 00H
	ORG $+2
__pyx_k_Format_string_allocated_too_shor_2 DB 'Format string allocated to'
	DB	'o short.', 00H
CONST	ENDS
;	COMDAT ??_C@_07GDNIBEMG@int64_t?$AA@
CONST	SEGMENT
??_C@_07GDNIBEMG@int64_t?$AA@ DB 'int64_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHMDJLEA@uint8_t?$AA@
CONST	SEGMENT
??_C@_07EHMDJLEA@uint8_t?$AA@ DB 'uint8_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HDHLMKKB@DTYPE_t?$AA@
CONST	SEGMENT
??_C@_07HDHLMKKB@DTYPE_t?$AA@ DB 'DTYPE_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNEKBLED@type?4pxd?$AA@
CONST	SEGMENT
??_C@_08PNEKBLED@type?4pxd?$AA@ DB 'type.pxd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDPHLOKK@stringsource?$AA@
CONST	SEGMENT
??_C@_0N@JDPHLOKK@stringsource?$AA@ DB 'stringsource', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKALCPGB@__init__?4pxd?$AA@
CONST	SEGMENT
??_C@_0N@MKALCPGB@__init__?4pxd?$AA@ DB '__init__.pxd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BLBBADDG@rsrpsinr?4pyx?$AA@
CONST	SEGMENT
??_C@_0N@BLBBADDG@rsrpsinr?4pyx?$AA@ DB 'rsrpsinr.pyx', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
__pyx_cfilenm DQ FLAT:??_C@_0L@DEABIHOI@rsrpsinr?4c?$AA@
__pyx_f	DQ	FLAT:??_C@_0N@BLBBADDG@rsrpsinr?4pyx?$AA@
	DQ	FLAT:??_C@_0N@MKALCPGB@__init__?4pxd?$AA@
	DQ	FLAT:??_C@_0N@JDPHLOKK@stringsource?$AA@
	DQ	FLAT:??_C@_08PNEKBLED@type?4pxd?$AA@
?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_5set_antenna_hv_vv@@9@9 DQ FLAT:__pyx_n_s_hv ; `__pyx_pw_8rsrpsinr_5set_antenna_hv_vv'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_vv
	DQ	0000000000000000H
__Pyx_minusones DQ ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t DQ FLAT:??_C@_07HDHLMKKB@DTYPE_t?$AA@
	DQ	0000000000000000H
	DQ	0000000000000008H
	DQ	0000000000000000H
	ORG $+56
	DD	00H
	DB	052H
	DB	00H
	ORG $+2
	DD	00H
	ORG $+4
?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_7gain@@9@9 DQ FLAT:__pyx_n_s_alpha ; `__pyx_pw_8rsrpsinr_7gain'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_beta
	DQ	0000000000000000H
__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t DQ FLAT:??_C@_07EHMDJLEA@uint8_t?$AA@
	DQ	0000000000000000H
	DQ	0000000000000001H
	DQ	0000000000000000H
	ORG $+56
	DD	00H
	DB	055H
	DB	01H
	ORG $+2
	DD	00H
	ORG $+4
__pyx_tp_as_mapping_array DQ FLAT:__pyx_array___len__
	DQ	FLAT:__pyx_array___getitem__
	DQ	FLAT:__pyx_mp_ass_subscript_array
__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t DQ FLAT:??_C@_07GDNIBEMG@int64_t?$AA@
	DQ	0000000000000000H
	DQ	0000000000000008H
	DQ	0000000000000000H
	ORG $+56
	DD	00H
	DB	049H
	DB	00H
	ORG $+2
	DD	00H
	ORG $+4
__pyx_mdef_8rsrpsinr_1degree_to_rad DQ FLAT:??_C@_0O@CNCFBNEJ@degree_to_rad?$AA@
	DQ	FLAT:__pyx_pw_8rsrpsinr_1degree_to_rad
	DD	08H
	ORG $+4
	DQ	0000000000000000H
__pyx_mdef_8rsrpsinr_3rad_to_degree DQ FLAT:??_C@_0O@FNDOKFBP@rad_to_degree?$AA@
	DQ	FLAT:__pyx_pw_8rsrpsinr_3rad_to_degree
	DD	08H
	ORG $+4
	DQ	0000000000000000H
__pyx_mdef_8rsrpsinr_5set_antenna_hv_vv DQ FLAT:??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@
	DQ	FLAT:__pyx_pw_8rsrpsinr_5set_antenna_hv_vv
	DD	03H
	ORG $+4
	DQ	0000000000000000H
__pyx_mdef_8rsrpsinr_7gain DQ FLAT:??_C@_04CNCNIFFP@gain?$AA@
	DQ	FLAT:__pyx_pw_8rsrpsinr_7gain
	DD	03H
	ORG $+4
	DQ	0000000000000000H
__pyx_mdef_8rsrpsinr_9get_coverage DQ FLAT:??_C@_0N@NLCAJHNH@get_coverage?$AA@
	DQ	FLAT:__pyx_pw_8rsrpsinr_9get_coverage
	DD	03H
	ORG $+4
	DQ	0000000000000000H
__pyx_tp_as_mapping_memoryview DQ FLAT:__pyx_memoryview___len__
	DQ	FLAT:__pyx_memoryview___getitem__
	DQ	FLAT:__pyx_mp_ass_subscript_memoryview
?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_9get_coverage@@9@9 DQ FLAT:__pyx_n_s_S ; `__pyx_pw_8rsrpsinr_9get_coverage'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_B
	DQ	FLAT:__pyx_n_s_B_of_S
	DQ	FLAT:__pyx_n_s_RSRP_TH
	DQ	FLAT:__pyx_n_s_SINR_TH
	DQ	FLAT:__pyx_n_s_TERM_HEIGHT
	DQ	FLAT:__pyx_n_s_FREQ
	DQ	FLAT:__pyx_n_s_NOISE
	DQ	0000000000000000H
?__pyx_pyargnames@?2??__pyx_array___cinit__@@9@9 DQ FLAT:__pyx_n_s_shape ; `__pyx_array___cinit__'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_itemsize
	DQ	FLAT:__pyx_n_s_format
	DQ	FLAT:__pyx_n_s_mode
	DQ	FLAT:__pyx_n_s_allocate_buffer
	DQ	0000000000000000H
?__pyx_pyargnames@?2??__pyx_MemviewEnum___init__@@9@9 DQ FLAT:__pyx_n_s_name ; `__pyx_MemviewEnum___init__'::`3'::__pyx_pyargnames
	DQ	0000000000000000H
?__pyx_pyargnames@?2??__pyx_memoryview___cinit__@@9@9 DQ FLAT:__pyx_n_s_obj ; `__pyx_memoryview___cinit__'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_flags
	DQ	FLAT:__pyx_n_s_dtype_is_object
	DQ	0000000000000000H
__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum DQ FLAT:??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
	DQ	FLAT:__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum
	DD	03H
	ORG $+4
	DQ	0000000000000000H
?__pyx_pyargnames@?2??__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum@@9@9 DQ FLAT:__pyx_n_s_pyx_type ; `__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum'::`3'::__pyx_pyargnames
	DQ	FLAT:__pyx_n_s_pyx_checksum
	DQ	FLAT:__pyx_n_s_pyx_state
	DQ	0000000000000000H
	ORG $+8
__pyx_methods_array DQ FLAT:??_C@_0M@GIDJPAP@__getattr__?$AA@
	DQ	FLAT:__pyx_array___getattr__
	DD	048H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_array_1__reduce_cython__
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_array_3__setstate_cython__
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
__pyx_getsets_array DQ FLAT:??_C@_07KCAJKBCG@memview?$AA@
	DQ	FLAT:__pyx_getprop___pyx_array_memview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
__pyx_tp_as_sequence_array DQ FLAT:__pyx_array___len__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_sq_item_array
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
__pyx_tp_as_buffer_array DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_array_getbuffer
	DQ	0000000000000000H
__pyx_type___pyx_array DQ 0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0P@HHBKLIDN@rsrpsinr?4array?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_dealloc_array
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_as_sequence_array
	DQ	FLAT:__pyx_tp_as_mapping_array
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_getattro_array
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_as_buffer_array
	DD	02605fbH
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_methods_array
	DQ	0000000000000000H
	DQ	FLAT:__pyx_getsets_array
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_new_array
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	ORG $+8
__pyx_methods_Enum DQ FLAT:??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_MemviewEnum_1__reduce_cython__
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_MemviewEnum_3__setstate_cython__
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
__pyx_type___pyx_MemviewEnum DQ 0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0O@LDCFFKPD@rsrpsinr?4Enum?$AA@
	DQ	0000000000000018H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_dealloc_Enum
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_MemviewEnum___repr__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02645fbH
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_traverse_Enum
	DQ	FLAT:__pyx_tp_clear_Enum
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_methods_Enum
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_MemviewEnum___init__
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_new_Enum
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	ORG $+8
__pyx_methods_memoryview DQ FLAT:??_C@_0M@BLPPMCOK@is_c_contig?$AA@
	DQ	FLAT:__pyx_memoryview_is_c_contig
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0M@FBGIIHKF@is_f_contig?$AA@
	DQ	FLAT:__pyx_memoryview_is_f_contig
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:__pyx_memoryview_copy
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0N@BCHOHOEO@copy_fortran?$AA@
	DQ	FLAT:__pyx_memoryview_copy_fortran
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_memoryview_1__reduce_cython__
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_memoryview_3__setstate_cython__
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
__pyx_getsets_memoryview DQ FLAT:??_C@_01GAPBHFFA@T?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_T
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04BHIIPFEC@base?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_base
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05KFCIHKGL@shape?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_shape
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_07IMKHLIIB@strides?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_strides
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0L@ELCNMNAH@suboffsets?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_suboffsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04DMMOEENP@ndim?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_ndim
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08BFHIGMPA@itemsize?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_itemsize
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06KGLHCPOD@nbytes?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_nbytes
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04IAGNFIBA@size?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryview_size
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
__pyx_tp_as_sequence_memoryview DQ FLAT:__pyx_memoryview___len__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_sq_item_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
__pyx_tp_as_buffer_memoryview DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_memoryview_getbuffer
	DQ	0000000000000000H
__pyx_type___pyx_memoryview DQ 0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BE@GJNHAHPO@rsrpsinr?4memoryview?$AA@
	DQ	00000000000000b8H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_dealloc_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_memoryview___repr__
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_as_sequence_memoryview
	DQ	FLAT:__pyx_tp_as_mapping_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_memoryview___str__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_as_buffer_memoryview
	DD	02645fbH
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_traverse_memoryview
	DQ	FLAT:__pyx_tp_clear_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_methods_memoryview
	DQ	0000000000000000H
	DQ	FLAT:__pyx_getsets_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_new_memoryview
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	ORG $+8
__pyx_methods__memoryviewslice DQ FLAT:??_C@_0BC@OLIMIKGB@__reduce_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_memoryviewslice_1__reduce_cython__
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BE@CCNCIHLB@__setstate_cython__?$AA@
	DQ	FLAT:__pyx_pw___pyx_memoryviewslice_3__setstate_cython__
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
__pyx_getsets__memoryviewslice DQ FLAT:??_C@_04BHIIPFEC@base?$AA@
	DQ	FLAT:__pyx_getprop___pyx_memoryviewslice_base
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
__pyx_type___pyx_memoryviewslice DQ 0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BK@CCMHKJAM@rsrpsinr?4_memoryviewslice?$AA@
	DQ	00000000000001a0H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_dealloc__memoryviewslice
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02645fbH
	ORG $+4
	DQ	FLAT:??_C@_0DH@CHGFPFCL@Internal?5class?5for?5passing?5memor@
	DQ	FLAT:__pyx_tp_traverse__memoryviewslice
	DQ	FLAT:__pyx_tp_clear__memoryviewslice
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_methods__memoryviewslice
	DQ	0000000000000000H
	DQ	FLAT:__pyx_getsets__memoryviewslice
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:__pyx_tp_new__memoryviewslice
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	ORG $+8
__pyx_string_tab DQ FLAT:__pyx_n_s_ASCII
	DQ	FLAT:__pyx_k_ASCII
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_B
	DQ	FLAT:__pyx_k_B
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_B_of_S
	DQ	FLAT:__pyx_k_B_of_S
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Buffer_view_does_not_expose_stri
	DQ	FLAT:__pyx_k_Buffer_view_does_not_expose_stri
	DQ	0000000000000024H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_C
	DQ	FLAT:__pyx_k_C
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Can_only_create_a_buffer_that_is
	DQ	FLAT:__pyx_k_Can_only_create_a_buffer_that_is
	DQ	0000000000000037H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Cannot_index_with_type_s
	DQ	FLAT:__pyx_k_Cannot_index_with_type_s
	DQ	000000000000001cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_DTYPE
	DQ	FLAT:__pyx_k_DTYPE
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_Ellipsis
	DQ	FLAT:__pyx_k_Ellipsis
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Empty_shape_tuple_for_cython_arr
	DQ	FLAT:__pyx_k_Empty_shape_tuple_for_cython_arr
	DQ	0000000000000023H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_FREQ
	DQ	FLAT:__pyx_k_FREQ
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_Format_string_allocated_too_shor
	DQ	FLAT:__pyx_k_Format_string_allocated_too_shor
	DQ	000000000000003cH
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_Format_string_allocated_too_shor_2
	DQ	FLAT:__pyx_k_Format_string_allocated_too_shor_2
	DQ	0000000000000023H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_ImportError
	DQ	FLAT:__pyx_k_ImportError
	DQ	000000000000000cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Incompatible_checksums_s_vs_0xb0
	DQ	FLAT:__pyx_k_Incompatible_checksums_s_vs_0xb0
	DQ	0000000000000032H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_IndexError
	DQ	FLAT:__pyx_k_IndexError
	DQ	000000000000000bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Indirect_dimensions_not_supporte
	DQ	FLAT:__pyx_k_Indirect_dimensions_not_supporte
	DQ	0000000000000022H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Invalid_mode_expected_c_or_fortr
	DQ	FLAT:__pyx_k_Invalid_mode_expected_c_or_fortr
	DQ	0000000000000030H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Invalid_shape_in_axis_d_d
	DQ	FLAT:__pyx_k_Invalid_shape_in_axis_d_d
	DQ	000000000000001eH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_MemoryError
	DQ	FLAT:__pyx_k_MemoryError
	DQ	000000000000000cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_MemoryView_of_r_at_0x_x
	DQ	FLAT:__pyx_k_MemoryView_of_r_at_0x_x
	DQ	000000000000001bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_MemoryView_of_r_object
	DQ	FLAT:__pyx_k_MemoryView_of_r_object
	DQ	000000000000001aH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_NOISE
	DQ	FLAT:__pyx_k_NOISE
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_Non_native_byte_order_not_suppor
	DQ	FLAT:__pyx_k_Non_native_byte_order_not_suppor
	DQ	0000000000000024H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_b_O
	DQ	FLAT:__pyx_k_O
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	00H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Out_of_bounds_on_buffer_access_a
	DQ	FLAT:__pyx_k_Out_of_bounds_on_buffer_access_a
	DQ	0000000000000029H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_PickleError
	DQ	FLAT:__pyx_k_PickleError
	DQ	000000000000000cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_RSRP_TH
	DQ	FLAT:__pyx_k_RSRP_TH
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_RuntimeError
	DQ	FLAT:__pyx_k_RuntimeError
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_S
	DQ	FLAT:__pyx_k_S
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_SINR_TH
	DQ	FLAT:__pyx_k_SINR_TH
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_TERM_HEIGHT
	DQ	FLAT:__pyx_k_TERM_HEIGHT
	DQ	000000000000000cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_TypeError
	DQ	FLAT:__pyx_k_TypeError
	DQ	000000000000000aH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_Unable_to_convert_item_to_object
	DQ	FLAT:__pyx_k_Unable_to_convert_item_to_object
	DQ	0000000000000021H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_ValueError
	DQ	FLAT:__pyx_k_ValueError
	DQ	000000000000000bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_View_MemoryView
	DQ	FLAT:__pyx_k_View_MemoryView
	DQ	0000000000000010H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_allocate_buffer
	DQ	FLAT:__pyx_k_allocate_buffer
	DQ	0000000000000010H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_alpha
	DQ	FLAT:__pyx_k_alpha
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_base
	DQ	FLAT:__pyx_k_base
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_beta
	DQ	FLAT:__pyx_k_beta
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_c
	DQ	FLAT:__pyx_k_c
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_u_c
	DQ	FLAT:__pyx_k_c
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_class
	DQ	FLAT:__pyx_k_class
	DQ	000000000000000aH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_cline_in_traceback
	DQ	FLAT:__pyx_k_cline_in_traceback
	DQ	0000000000000013H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_contiguous_and_direct
	DQ	FLAT:__pyx_k_contiguous_and_direct
	DQ	0000000000000018H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_contiguous_and_indirect
	DQ	FLAT:__pyx_k_contiguous_and_indirect
	DQ	000000000000001aH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_d
	DQ	FLAT:__pyx_k_d
	DQ	0000000000000002H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_degree_to_rad
	DQ	FLAT:__pyx_k_degree_to_rad
	DQ	000000000000000eH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_dict
	DQ	FLAT:__pyx_k_dict
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_dtype
	DQ	FLAT:__pyx_k_dtype
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_dtype_is_object
	DQ	FLAT:__pyx_k_dtype_is_object
	DQ	0000000000000010H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_encode
	DQ	FLAT:__pyx_k_encode
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_enumerate
	DQ	FLAT:__pyx_k_enumerate
	DQ	000000000000000aH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_error
	DQ	FLAT:__pyx_k_error
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_flags
	DQ	FLAT:__pyx_k_flags
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_float64
	DQ	FLAT:__pyx_k_float64
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_format
	DQ	FLAT:__pyx_k_format
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_fortran
	DQ	FLAT:__pyx_k_fortran
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_u_fortran
	DQ	FLAT:__pyx_k_fortran
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_gain
	DQ	FLAT:__pyx_k_gain
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_get_coverage
	DQ	FLAT:__pyx_k_get_coverage
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_getstate
	DQ	FLAT:__pyx_k_getstate
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_got_differing_extents_in_dimensi
	DQ	FLAT:__pyx_k_got_differing_extents_in_dimensi
	DQ	0000000000000036H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_hv
	DQ	FLAT:__pyx_k_hv
	DQ	0000000000000003H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_id
	DQ	FLAT:__pyx_k_id
	DQ	0000000000000003H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_import
	DQ	FLAT:__pyx_k_import
	DQ	000000000000000bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_int64
	DQ	FLAT:__pyx_k_int64
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_itemsize
	DQ	FLAT:__pyx_k_itemsize
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_itemsize_0_for_cython_array
	DQ	FLAT:__pyx_k_itemsize_0_for_cython_array
	DQ	000000000000001fH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_main
	DQ	FLAT:__pyx_k_main
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_memview
	DQ	FLAT:__pyx_k_memview
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_mode
	DQ	FLAT:__pyx_k_mode
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_name
	DQ	FLAT:__pyx_k_name
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_name_2
	DQ	FLAT:__pyx_k_name_2
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_ndarray_is_not_C_contiguous
	DQ	FLAT:__pyx_k_ndarray_is_not_C_contiguous
	DQ	000000000000001cH
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_ndarray_is_not_Fortran_contiguou
	DQ	FLAT:__pyx_k_ndarray_is_not_Fortran_contiguou
	DQ	0000000000000022H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_ndim
	DQ	FLAT:__pyx_k_ndim
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_new
	DQ	FLAT:__pyx_k_new
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_no_default___reduce___due_to_non
	DQ	FLAT:__pyx_k_no_default___reduce___due_to_non
	DQ	0000000000000033H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_np
	DQ	FLAT:__pyx_k_np
	DQ	0000000000000003H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_numpy
	DQ	FLAT:__pyx_k_numpy
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_numpy_core_multiarray_failed_to
	DQ	FLAT:__pyx_k_numpy_core_multiarray_failed_to
	DQ	0000000000000027H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_numpy_core_umath_failed_to_impor
	DQ	FLAT:__pyx_k_numpy_core_umath_failed_to_impor
	DQ	0000000000000022H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_obj
	DQ	FLAT:__pyx_k_obj
	DQ	0000000000000004H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_ones
	DQ	FLAT:__pyx_k_ones
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_order
	DQ	FLAT:__pyx_k_order
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pack
	DQ	FLAT:__pyx_k_pack
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pickle
	DQ	FLAT:__pyx_k_pickle
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_PickleError
	DQ	FLAT:__pyx_k_pyx_PickleError
	DQ	0000000000000012H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_checksum
	DQ	FLAT:__pyx_k_pyx_checksum
	DQ	000000000000000fH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_getbuffer
	DQ	FLAT:__pyx_k_pyx_getbuffer
	DQ	0000000000000010H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_result
	DQ	FLAT:__pyx_k_pyx_result
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_state
	DQ	FLAT:__pyx_k_pyx_state
	DQ	000000000000000cH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_type
	DQ	FLAT:__pyx_k_pyx_type
	DQ	000000000000000bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_unpickle_Enum
	DQ	FLAT:__pyx_k_pyx_unpickle_Enum
	DQ	0000000000000014H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_pyx_vtable
	DQ	FLAT:__pyx_k_pyx_vtable
	DQ	000000000000000fH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_rad_to_degree
	DQ	FLAT:__pyx_k_rad_to_degree
	DQ	000000000000000eH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_range
	DQ	FLAT:__pyx_k_range
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_reduce
	DQ	FLAT:__pyx_k_reduce
	DQ	000000000000000bH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_reduce_cython
	DQ	FLAT:__pyx_k_reduce_cython
	DQ	0000000000000012H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_reduce_ex
	DQ	FLAT:__pyx_k_reduce_ex
	DQ	000000000000000eH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_reshape
	DQ	FLAT:__pyx_k_reshape
	DQ	0000000000000008H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_rsrpsinr
	DQ	FLAT:__pyx_k_rsrpsinr
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_rsrpsinr_pyx
	DQ	FLAT:__pyx_k_rsrpsinr_pyx
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_set_antenna_hv_vv
	DQ	FLAT:__pyx_k_set_antenna_hv_vv
	DQ	0000000000000012H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_setstate
	DQ	FLAT:__pyx_k_setstate
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_setstate_cython
	DQ	FLAT:__pyx_k_setstate_cython
	DQ	0000000000000014H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_shape
	DQ	FLAT:__pyx_k_shape
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_size
	DQ	FLAT:__pyx_k_size
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_start
	DQ	FLAT:__pyx_k_start
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_step
	DQ	FLAT:__pyx_k_step
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_stop
	DQ	FLAT:__pyx_k_stop
	DQ	0000000000000005H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_strided_and_direct
	DQ	FLAT:__pyx_k_strided_and_direct
	DQ	0000000000000015H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_strided_and_direct_or_indirect
	DQ	FLAT:__pyx_k_strided_and_direct_or_indirect
	DQ	0000000000000021H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_strided_and_indirect
	DQ	FLAT:__pyx_k_strided_and_indirect
	DQ	0000000000000017H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_stringsource
	DQ	FLAT:__pyx_k_stringsource
	DQ	000000000000000dH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_struct
	DQ	FLAT:__pyx_k_struct
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_test
	DQ	FLAT:__pyx_k_test
	DQ	0000000000000009H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_uint8
	DQ	FLAT:__pyx_k_uint8
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_unable_to_allocate_array_data
	DQ	FLAT:__pyx_k_unable_to_allocate_array_data
	DQ	000000000000001fH
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_s_unable_to_allocate_shape_and_str
	DQ	FLAT:__pyx_k_unable_to_allocate_shape_and_str
	DQ	0000000000000026H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_kp_u_unknown_dtype_code_in_numpy_pxd
	DQ	FLAT:__pyx_k_unknown_dtype_code_in_numpy_pxd
	DQ	0000000000000025H
	DQ	0000000000000000H
	DB	01H
	DB	00H
	DB	00H
	ORG $+5
	DQ	FLAT:__pyx_n_s_unpack
	DQ	FLAT:__pyx_k_unpack
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_update
	DQ	FLAT:__pyx_k_update
	DQ	0000000000000007H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_vv
	DQ	FLAT:__pyx_k_vv
	DQ	0000000000000003H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	FLAT:__pyx_n_s_zeros
	DQ	FLAT:__pyx_k_zeros
	DQ	0000000000000006H
	DQ	0000000000000000H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DB	00H
	DB	00H
	DB	00H
	ORG $+5
_DATA	ENDS
;	COMDAT ??_C@_0L@DEABIHOI@rsrpsinr?4c?$AA@
CONST	SEGMENT
??_C@_0L@DEABIHOI@rsrpsinr?4c?$AA@ DB 'rsrpsinr.c', 00H	; `string'
CONST	ENDS
EXTRN	__imp_PyObject_GetAttr:PROC
; Function compile flags: /Ogtpy
; File e:\2017.10.01.cmdi\2017.10.01.cmdi\rsrpsinr.c
;	COMDAT __Pyx_PyObject_GetAttrStr
_TEXT	SEGMENT
obj$ = 8
attr_name$ = 16
__Pyx_PyObject_GetAttrStr PROC				; COMDAT

; 1379 :     PyTypeObject* tp = Py_TYPE(obj);

	mov	rax, QWORD PTR [rcx+8]

; 1380 :     if (likely(tp->tp_getattro))

	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN2@Pyx_PyObje

; 1385 : #endif
; 1386 :     return PyObject_GetAttr(obj, attr_name);
; 1387 : }

	rex_jmp	r8
$LN2@Pyx_PyObje:

; 1381 :         return tp->tp_getattro(obj, attr_name);
; 1382 : #if PY_MAJOR_VERSION < 3
; 1383 :     if (likely(tp->tp_getattr))

	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN1@Pyx_PyObje

; 1384 :         return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));

	add	rdx, 32					; 00000020H

; 1385 : #endif
; 1386 :     return PyObject_GetAttr(obj, attr_name);
; 1387 : }

	rex_jmp	rax
$LN1@Pyx_PyObje:
	rex_jmp	QWORD PTR __imp_PyObject_GetAttr
__Pyx_PyObject_GetAttrStr ENDP
_TEXT	ENDS
EXTRN	__imp_PyList_Append:PROC
; Function compile flags: /Ogtpy
;	COMDAT __Pyx_ListComp_Append
_TEXT	SEGMENT
list$ = 8
x$ = 16
__Pyx_ListComp_Append PROC				; COMDAT

; 1682 :     PyListObject* L = (PyListObject*) list;
; 1683 :     Py_ssize_t len = Py_SIZE(list);

	mov	r8, QWORD PTR [rcx+16]

; 1684 :     if (likely(L->allocated > len)) {

	cmp	QWORD PTR [rcx+32], r8
	jle	SHORT $LN1@Pyx_ListCo

; 1685 :         Py_INCREF(x);

	inc	QWORD PTR [rdx]

; 1686 :         PyList_SET_ITEM(list, len, x);

	mov	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+r8*8], rdx

; 1687 :         Py_SIZE(list) = len+1;

	lea	rax, QWORD PTR [r8+1]
	mov	QWORD PTR [rcx+16], rax

; 1688 :         return 0;

	xor	eax, eax

; 1689 :     }
; 1690 :     return PyList_Append(list, x);
; 1691 : }

	ret	0
$LN1@Pyx_ListCo:
	rex_jmp	QWORD PTR __imp_PyList_Append
__Pyx_ListComp_Append ENDP
_TEXT	ENDS
EXTRN	__imp__PyList_Extend:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyList_Extend DD imagerel __Pyx_PyList_Extend
	DD	imagerel __Pyx_PyList_Extend+46
	DD	imagerel $unwind$__Pyx_PyList_Extend
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyList_Extend DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyList_Extend
_TEXT	SEGMENT
L$ = 48
v$ = 56
__Pyx_PyList_Extend PROC				; COMDAT

; 1705 : static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {

	sub	rsp, 40					; 00000028H

; 1706 : #if CYTHON_COMPILING_IN_CPYTHON
; 1707 :     PyObject* none = _PyList_Extend((PyListObject*)L, v);

	call	QWORD PTR __imp__PyList_Extend
	mov	rcx, rax

; 1708 :     if (unlikely(!none))

	test	rax, rax
	jne	SHORT $LN5@Pyx_PyList

; 1709 :         return -1;

	or	eax, -1

; 1712 : #else
; 1713 :     return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
; 1714 : #endif
; 1715 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@Pyx_PyList:

; 1710 :     Py_DECREF(none);

	add	QWORD PTR [rax], -1
	jne	SHORT $LN4@Pyx_PyList
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$LN4@Pyx_PyList:

; 1711 :     return 0;

	xor	eax, eax

; 1712 : #else
; 1713 :     return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
; 1714 : #endif
; 1715 : }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyList_Extend ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_PyList_Append
_TEXT	SEGMENT
list$ = 8
x$ = 16
__Pyx_PyList_Append PROC				; COMDAT

; 1720 :     PyListObject* L = (PyListObject*) list;
; 1721 :     Py_ssize_t len = Py_SIZE(list);
; 1722 :     if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {

	mov	r9, QWORD PTR [rcx+32]
	mov	r11, QWORD PTR [rcx+16]
	xor	r10d, r10d
	mov	r8d, r10d
	mov	rax, r9
	sar	rax, 1
	cmp	r11, rax
	setg	r8b
	cmp	r9, r11
	setg	r10b
	test	r8d, r10d
	je	SHORT $LN1@Pyx_PyList@2

; 1723 :         Py_INCREF(x);

	inc	QWORD PTR [rdx]

; 1724 :         PyList_SET_ITEM(list, len, x);

	mov	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+r11*8], rdx

; 1725 :         Py_SIZE(list) = len+1;

	lea	rax, QWORD PTR [r11+1]
	mov	QWORD PTR [rcx+16], rax

; 1726 :         return 0;

	xor	eax, eax

; 1727 :     }
; 1728 :     return PyList_Append(list, x);
; 1729 : }

	ret	0
$LN1@Pyx_PyList@2:
	rex_jmp	QWORD PTR __imp_PyList_Append
__Pyx_PyList_Append ENDP
_TEXT	ENDS
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@3ff8f5c28f5c28f6
PUBLIC	__real@4047266666666666
PUBLIC	__real@401a333333333333
PUBLIC	__real@4040f33333333333
PUBLIC	__real@402ba3d70a3d70a4
PUBLIC	__real@4046733333333333
PUBLIC	__real@4008000000000000
EXTRN	_fltused:DWORD
EXTRN	log10:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_8rsrpsinr_loss DD imagerel __pyx_f_8rsrpsinr_loss
	DD	imagerel __pyx_f_8rsrpsinr_loss+266
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_loss
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_8rsrpsinr_loss DD 0b2c01H
	DD	02a82cH
	DD	039826H
	DD	048820H
	DD	057816H
	DD	066811H
	DD	0e204H
xdata	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff8f5c28f5c28f6
CONST	SEGMENT
__real@3ff8f5c28f5c28f6 DQ 03ff8f5c28f5c28f6r	; 1.56
CONST	ENDS
;	COMDAT __real@4047266666666666
CONST	SEGMENT
__real@4047266666666666 DQ 04047266666666666r	; 46.3
CONST	ENDS
;	COMDAT __real@401a333333333333
CONST	SEGMENT
__real@401a333333333333 DQ 0401a333333333333r	; 6.55
CONST	ENDS
;	COMDAT __real@4040f33333333333
CONST	SEGMENT
__real@4040f33333333333 DQ 04040f33333333333r	; 33.9
CONST	ENDS
;	COMDAT __real@402ba3d70a3d70a4
CONST	SEGMENT
__real@402ba3d70a3d70a4 DQ 0402ba3d70a3d70a4r	; 13.82
CONST	ENDS
;	COMDAT __real@4046733333333333
CONST	SEGMENT
__real@4046733333333333 DQ 04046733333333333r	; 44.9
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_loss
_TEXT	SEGMENT
__pyx_v_d$ = 128
__pyx_v_hB$ = 136
__pyx_v_hR$ = 144
__pyx_v_f$ = 152
__pyx_optional_args$ = 160
__pyx_f_8rsrpsinr_loss PROC				; COMDAT

; 3207 : static CYTHON_INLINE double __pyx_f_8rsrpsinr_loss(double __pyx_v_d, double __pyx_v_hB, double __pyx_v_hR, double __pyx_v_f, struct __pyx_opt_args_8rsrpsinr_loss *__pyx_optional_args) {

	sub	rsp, 120				; 00000078H

; 3208 :   double __pyx_v_C = ((double)3.0);
; 3209 :   double __pyx_v_a;
; 3210 :   double __pyx_v_L;
; 3211 :   double __pyx_r;
; 3212 :   __Pyx_RefNannyDeclarations
; 3213 :   __Pyx_RefNannySetupContext("loss", 0);
; 3214 :   if (__pyx_optional_args) {

	mov	rax, QWORD PTR __pyx_optional_args$[rsp]
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	movapd	xmm6, xmm1
	movaps	XMMWORD PTR [rsp+64], xmm8
	movaps	XMMWORD PTR [rsp+48], xmm9
	movaps	XMMWORD PTR [rsp+32], xmm10
	movsdx	xmm8, QWORD PTR __real@4008000000000000
	movapd	xmm9, xmm2
	movapd	xmm10, xmm0
	test	rax, rax
	je	SHORT $LN1@pyx_f_8rsr

; 3215 :     if (__pyx_optional_args->__pyx_n > 0) {

	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN1@pyx_f_8rsr

; 3216 :       __pyx_v_C = __pyx_optional_args->C;

	movsdx	xmm8, QWORD PTR [rax+8]
$LN1@pyx_f_8rsr:

; 3217 :     }
; 3218 :   }
; 3219 : 
; 3220 :   /* "rsrpsinr.pyx":98
; 3221 :  *     @param C: C=3 for metropolitan areas
; 3222 :  *     """
; 3223 :  *     cdef double a = (1.1 * log10(f) - 0.7 ) * hR - (1.56 * log10(f) - 0.8)             # <<<<<<<<<<<<<<
; 3224 :  *     cdef double L = 46.3 + 33.9*log10(f) - 13.82*log10(hB) - a + (44.9-6.55*log10(hB))*log10(d) + C
; 3225 :  *     return L
; 3226 :  */
; 3227 :   __pyx_v_a = ((((1.1 * log10(__pyx_v_f)) - 0.7) * __pyx_v_hR) - ((1.56 * log10(__pyx_v_f)) - 0.8));
; 3228 : 
; 3229 :   /* "rsrpsinr.pyx":99
; 3230 :  *     """
; 3231 :  *     cdef double a = (1.1 * log10(f) - 0.7 ) * hR - (1.56 * log10(f) - 0.8)
; 3232 :  *     cdef double L = 46.3 + 33.9*log10(f) - 13.82*log10(hB) - a + (44.9-6.55*log10(hB))*log10(d) + C             # <<<<<<<<<<<<<<
; 3233 :  *     return L
; 3234 :  * 
; 3235 :  */
; 3236 :   __pyx_v_L = (((((46.3 + (33.9 * log10(__pyx_v_f))) - (13.82 * log10(__pyx_v_hB))) - __pyx_v_a) + ((44.9 - (6.55 * log10(__pyx_v_hB))) * log10(__pyx_v_d))) + __pyx_v_C);

	movapd	xmm0, xmm3
$__pyx_L0$14730:
	call	log10
	movapd	xmm7, xmm0
	movapd	xmm0, xmm6
	call	log10
	movapd	xmm6, xmm0
	movapd	xmm0, xmm10
	call	log10
	movsdx	xmm1, QWORD PTR __real@4046733333333333

; 3237 : 
; 3238 :   /* "rsrpsinr.pyx":100
; 3239 :  *     cdef double a = (1.1 * log10(f) - 0.7 ) * hR - (1.56 * log10(f) - 0.8)
; 3240 :  *     cdef double L = 46.3 + 33.9*log10(f) - 13.82*log10(hB) - a + (44.9-6.55*log10(hB))*log10(d) + C
; 3241 :  *     return L             # <<<<<<<<<<<<<<
; 3242 :  * 
; 3243 :  * # 10*log10(x) = 10*lg(x)/lg(10) = lg(x)*10/lg(10)
; 3244 :  */
; 3245 :   __pyx_r = __pyx_v_L;
; 3246 :   goto __pyx_L0;
; 3247 : 
; 3248 :   /* "rsrpsinr.pyx":91
; 3249 :  *     return antenna_h_rad(alpha) - C1 - C2
; 3250 :  * 
; 3251 :  * cdef inline double loss(double d, double hB, double hR, double f, double C=3):             # <<<<<<<<<<<<<<
; 3252 :  *     """
; 3253 :  *     @param d: km
; 3254 :  */
; 3255 : 
; 3256 :   /* function exit code */
; 3257 :   __pyx_L0:;
; 3258 :   __Pyx_RefNannyFinishContext();
; 3259 :   return __pyx_r;
; 3260 : }

	movaps	xmm10, XMMWORD PTR [rsp+32]
	movapd	xmm3, xmm7
	movapd	xmm2, xmm6
	mulsd	xmm6, QWORD PTR __real@402ba3d70a3d70a4
	mulsd	xmm3, QWORD PTR __real@4040f33333333333
	mulsd	xmm2, QWORD PTR __real@401a333333333333
	addsd	xmm3, QWORD PTR __real@4047266666666666
	subsd	xmm1, xmm2
	mulsd	xmm0, xmm1
	movapd	xmm1, xmm7
	mulsd	xmm7, QWORD PTR __real@3ff8f5c28f5c28f6
	subsd	xmm3, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+96]
	mulsd	xmm1, QWORD PTR __real@3ff199999999999a
	subsd	xmm7, QWORD PTR __real@3fe999999999999a
	subsd	xmm1, QWORD PTR __real@3fe6666666666666
	mulsd	xmm1, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+48]
	subsd	xmm1, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+80]
	subsd	xmm3, xmm1
	addsd	xmm0, xmm3
	addsd	xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+64]
	add	rsp, 120				; 00000078H
	ret	0
__pyx_f_8rsrpsinr_loss ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_5numpy_7ndarray_2__releasebuffer__ DD imagerel __pyx_pf_5numpy_7ndarray_2__releasebuffer__
	DD	imagerel __pyx_pf_5numpy_7ndarray_2__releasebuffer__+30
	DD	imagerel $unwind$__pyx_pf_5numpy_7ndarray_2__releasebuffer__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_5numpy_7ndarray_2__releasebuffer__ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pf_5numpy_7ndarray_2__releasebuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_info$ = 56
__pyx_pf_5numpy_7ndarray_2__releasebuffer__ PROC	; COMDAT

; 6167 : static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

	sub	rsp, 40					; 00000028H

; 6168 :   __Pyx_RefNannyDeclarations
; 6169 :   int __pyx_t_1;
; 6170 :   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
; 6171 : 
; 6172 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
; 6173 :  * 
; 6174 :  *         def __releasebuffer__(ndarray self, Py_buffer* info):
; 6175 :  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
; 6176 :  *                 PyObject_Free(info.format)
; 6177 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 6178 :  */
; 6179 :   __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);

	mov	rax, QWORD PTR [rcx+56]
	cmp	QWORD PTR [rax+56], 0

; 6180 :   if (__pyx_t_1) {

	je	SHORT $LN2@pyx_pf_5nu

; 6181 : 
; 6182 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
; 6183 :  *         def __releasebuffer__(ndarray self, Py_buffer* info):
; 6184 :  *             if PyArray_HASFIELDS(self):
; 6185 :  *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
; 6186 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 6187 :  *                 PyObject_Free(info.strides)
; 6188 :  */
; 6189 :     PyObject_Free(__pyx_v_info->format);

	mov	rcx, QWORD PTR [rdx+40]
	call	QWORD PTR __imp_PyObject_Free
$LN2@pyx_pf_5nu:

; 6190 : 
; 6191 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
; 6192 :  * 
; 6193 :  *         def __releasebuffer__(ndarray self, Py_buffer* info):
; 6194 :  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
; 6195 :  *                 PyObject_Free(info.format)
; 6196 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 6197 :  */
; 6198 :   }
; 6199 : 
; 6200 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
; 6201 :  *             if PyArray_HASFIELDS(self):
; 6202 :  *                 PyObject_Free(info.format)
; 6203 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
; 6204 :  *                 PyObject_Free(info.strides)
; 6205 :  *                 # info.shape was stored after info.strides in the same block
; 6206 :  */
; 6207 :   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
; 6208 :   if (__pyx_t_1) {
; 6209 : 
; 6210 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
; 6211 :  *                 PyObject_Free(info.format)
; 6212 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 6213 :  *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
; 6214 :  *                 # info.shape was stored after info.strides in the same block
; 6215 :  * 
; 6216 :  */
; 6217 :     PyObject_Free(__pyx_v_info->strides);
; 6218 : 
; 6219 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
; 6220 :  *             if PyArray_HASFIELDS(self):
; 6221 :  *                 PyObject_Free(info.format)
; 6222 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
; 6223 :  *                 PyObject_Free(info.strides)
; 6224 :  *                 # info.shape was stored after info.strides in the same block
; 6225 :  */
; 6226 :   }
; 6227 : 
; 6228 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
; 6229 :  *                 f[0] = c'\0' # Terminate format string
; 6230 :  * 
; 6231 :  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
; 6232 :  *             if PyArray_HASFIELDS(self):
; 6233 :  *                 PyObject_Free(info.format)
; 6234 :  */
; 6235 : 
; 6236 :   /* function exit code */
; 6237 :   __Pyx_RefNannyFinishContext();
; 6238 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_5numpy_7ndarray_2__releasebuffer__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__ PROC ; COMDAT

; 9191 :   Py_ssize_t __pyx_r;
; 9192 :   __Pyx_RefNannyDeclarations
; 9193 :   __Pyx_RefNannySetupContext("__len__", 0);
; 9194 : 
; 9195 :   /* "View.MemoryView":229
; 9196 :  * 
; 9197 :  *     def __len__(self):
; 9198 :  *         return self._shape[0]             # <<<<<<<<<<<<<<
; 9199 :  * 
; 9200 :  *     def __getattr__(self, attr):
; 9201 :  */
; 9202 :   __pyx_r = (__pyx_v_self->_shape[0]);

	mov	rax, QWORD PTR [rcx+56]
$__pyx_L0$19871:

; 9203 :   goto __pyx_L0;
; 9204 : 
; 9205 :   /* "View.MemoryView":228
; 9206 :  *         return  memoryview(self, flags, self.dtype_is_object)
; 9207 :  * 
; 9208 :  *     def __len__(self):             # <<<<<<<<<<<<<<
; 9209 :  *         return self._shape[0]
; 9210 :  * 
; 9211 :  */
; 9212 : 
; 9213 :   /* function exit code */
; 9214 :   __pyx_L0:;
; 9215 :   __Pyx_RefNannyFinishContext();
; 9216 :   return __pyx_r;

	mov	rax, QWORD PTR [rax]

; 9217 : }

	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__ DD imagerel __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__
	DD	imagerel __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__+77
	DD	imagerel $unwind$__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__ DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_name$ = 56
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__ PROC ; COMDAT

; 9745 : static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 9746 :   int __pyx_r;
; 9747 :   __Pyx_RefNannyDeclarations
; 9748 :   __Pyx_RefNannySetupContext("__init__", 0);
; 9749 : 
; 9750 :   /* "View.MemoryView":280
; 9751 :  *     cdef object name
; 9752 :  *     def __init__(self, name):
; 9753 :  *         self.name = name             # <<<<<<<<<<<<<<
; 9754 :  *     def __repr__(self):
; 9755 :  *         return self.name
; 9756 :  */
; 9757 :   __Pyx_INCREF(__pyx_v_name);

	inc	QWORD PTR [rdx]

; 9758 :   __Pyx_GIVEREF(__pyx_v_name);
; 9759 :   __Pyx_GOTREF(__pyx_v_self->name);
; 9760 :   __Pyx_DECREF(__pyx_v_self->name);

	mov	rax, QWORD PTR [rcx+16]
	mov	rdi, rcx
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rbx, rdx
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN8@pyx_Memvie
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 9761 :   __pyx_v_self->name = __pyx_v_name;

	mov	QWORD PTR [rdi+16], rbx

; 9762 : 
; 9763 :   /* "View.MemoryView":279
; 9764 :  * cdef class Enum(object):
; 9765 :  *     cdef object name
; 9766 :  *     def __init__(self, name):             # <<<<<<<<<<<<<<
; 9767 :  *         self.name = name
; 9768 :  *     def __repr__(self):
; 9769 :  */
; 9770 : 
; 9771 :   /* function exit code */
; 9772 :   __pyx_r = 0;
; 9773 :   __Pyx_RefNannyFinishContext();
; 9774 :   return __pyx_r;

	xor	eax, eax

; 9775 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@pyx_Memvie:
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi+16], rdx
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__ PROC ; COMDAT

; 9799 :   PyObject *__pyx_r = NULL;
; 9800 :   __Pyx_RefNannyDeclarations
; 9801 :   __Pyx_RefNannySetupContext("__repr__", 0);
; 9802 : 
; 9803 :   /* "View.MemoryView":282
; 9804 :  *         self.name = name
; 9805 :  *     def __repr__(self):
; 9806 :  *         return self.name             # <<<<<<<<<<<<<<
; 9807 :  * 
; 9808 :  * cdef generic = Enum("<strided and direct or indirect>")
; 9809 :  */
; 9810 :   __Pyx_XDECREF(__pyx_r);
; 9811 :   __Pyx_INCREF(__pyx_v_self->name);

	mov	rax, QWORD PTR [rcx+16]
$__pyx_L0$20509:
	inc	QWORD PTR [rax]

; 9812 :   __pyx_r = __pyx_v_self->name;
; 9813 :   goto __pyx_L0;
; 9814 : 
; 9815 :   /* "View.MemoryView":281
; 9816 :  *     def __init__(self, name):
; 9817 :  *         self.name = name
; 9818 :  *     def __repr__(self):             # <<<<<<<<<<<<<<
; 9819 :  *         return self.name
; 9820 :  * 
; 9821 :  */
; 9822 : 
; 9823 :   /* function exit code */
; 9824 :   __pyx_L0:;
; 9825 :   __Pyx_XGIVEREF(__pyx_r);
; 9826 :   __Pyx_RefNannyFinishContext();
; 9827 :   return __pyx_r;

	mov	rax, QWORD PTR [rcx+16]

; 9828 : }

	ret	0
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_align_pointer
_TEXT	SEGMENT
__pyx_v_memory$ = 8
__pyx_v_alignment$ = 16
__pyx_align_pointer PROC				; COMDAT

; 10125: static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {

	mov	r8, rdx

; 10126:   Py_intptr_t __pyx_v_aligned_p;
; 10127:   size_t __pyx_v_offset;
; 10128:   void *__pyx_r;
; 10129:   int __pyx_t_1;
; 10130: 
; 10131:   /* "View.MemoryView":298
; 10132:  * cdef void *align_pointer(void *memory, size_t alignment) nogil:
; 10133:  *     "Align pointer memory on a given boundary"
; 10134:  *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
; 10135:  *     cdef size_t offset
; 10136:  * 
; 10137:  */
; 10138:   __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);
; 10139: 
; 10140:   /* "View.MemoryView":302
; 10141:  * 
; 10142:  *     with cython.cdivision(True):
; 10143:  *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
; 10144:  * 
; 10145:  *     if offset > 0:
; 10146:  */
; 10147:   __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

	xor	edx, edx
	mov	rax, rcx
	div	r8

; 10148: 
; 10149:   /* "View.MemoryView":304
; 10150:  *         offset = aligned_p % alignment
; 10151:  * 
; 10152:  *     if offset > 0:             # <<<<<<<<<<<<<<
; 10153:  *         aligned_p += alignment - offset
; 10154:  * 
; 10155:  */
; 10156:   __pyx_t_1 = ((__pyx_v_offset > 0) != 0);

	test	rdx, rdx

; 10157:   if (__pyx_t_1) {

	je	SHORT $LN4@pyx_align_

; 10158: 
; 10159:     /* "View.MemoryView":305
; 10160:  * 
; 10161:  *     if offset > 0:
; 10162:  *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
; 10163:  * 
; 10164:  *     return <void *> aligned_p
; 10165:  */
; 10166:     __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

	sub	rcx, rdx
$__pyx_L0$20801:
	lea	rax, QWORD PTR [r8+rcx]

; 10198: }

	ret	0
$LN4@pyx_align_:
$__pyx_L0_1$20801:

; 10167: 
; 10168:     /* "View.MemoryView":304
; 10169:  *         offset = aligned_p % alignment
; 10170:  * 
; 10171:  *     if offset > 0:             # <<<<<<<<<<<<<<
; 10172:  *         aligned_p += alignment - offset
; 10173:  * 
; 10174:  */
; 10175:   }
; 10176: 
; 10177:   /* "View.MemoryView":307
; 10178:  *         aligned_p += alignment - offset
; 10179:  * 
; 10180:  *     return <void *> aligned_p             # <<<<<<<<<<<<<<
; 10181:  * 
; 10182:  * 
; 10183:  */
; 10184:   __pyx_r = ((void *)__pyx_v_aligned_p);
; 10185:   goto __pyx_L0;
; 10186: 
; 10187:   /* "View.MemoryView":296
; 10188:  * 
; 10189:  * @cname('__pyx_align_pointer')
; 10190:  * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
; 10191:  *     "Align pointer memory on a given boundary"
; 10192:  *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
; 10193:  */
; 10194: 
; 10195:   /* function exit code */
; 10196:   __pyx_L0:;
; 10197:   return __pyx_r;

	mov	rax, rcx

; 10198: }

	ret	0
__pyx_align_pointer ENDP
_TEXT	ENDS
EXTRN	__imp__Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__+256
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_info$ = 56
__pyx_v_flags$ = 64
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__ PROC ; COMDAT

; 12447: static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 12448:   int __pyx_r;
; 12449:   __Pyx_RefNannyDeclarations
; 12450:   int __pyx_t_1;
; 12451:   Py_ssize_t *__pyx_t_2;
; 12452:   char *__pyx_t_3;
; 12453:   void *__pyx_t_4;
; 12454:   int __pyx_t_5;
; 12455:   Py_ssize_t __pyx_t_6;
; 12456:   __Pyx_RefNannySetupContext("__getbuffer__", 0);
; 12457:   if (__pyx_v_info != NULL) {

	test	rdx, rdx
	je	SHORT $LN16@pyx_memory

; 12458:     __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
$LN16@pyx_memory:

; 12459:     __Pyx_GIVEREF(__pyx_v_info->obj);
; 12460:   }
; 12461: 
; 12462:   /* "View.MemoryView":510
; 12463:  *     @cname('getbuffer')
; 12464:  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 12465:  *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
; 12466:  *             info.shape = self.view.shape
; 12467:  *         else:
; 12468:  */
; 12469:   __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);

	mov	ecx, r8d
	xor	esi, esi
	and	ecx, 24

; 12470:   if (__pyx_t_1) {

	je	SHORT $LN15@pyx_memory

; 12471: 
; 12472:     /* "View.MemoryView":511
; 12473:  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 12474:  *         if flags & PyBUF_STRIDES:
; 12475:  *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
; 12476:  *         else:
; 12477:  *             info.shape = NULL
; 12478:  */
; 12479:     __pyx_t_2 = __pyx_v_self->view.shape;
; 12480:     __pyx_v_info->shape = __pyx_t_2;

	mov	rax, QWORD PTR [rdi+120]
	mov	QWORD PTR [rdx+48], rax

; 12481: 
; 12482:     /* "View.MemoryView":510
; 12483:  *     @cname('getbuffer')
; 12484:  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 12485:  *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
; 12486:  *             info.shape = self.view.shape
; 12487:  *         else:
; 12488:  */
; 12489:     goto __pyx_L3;

	jmp	SHORT $__pyx_L3$22872
$LN15@pyx_memory:

; 12490:   }
; 12491: 
; 12492:   /* "View.MemoryView":513
; 12493:  *             info.shape = self.view.shape
; 12494:  *         else:
; 12495:  *             info.shape = NULL             # <<<<<<<<<<<<<<
; 12496:  * 
; 12497:  *         if flags & PyBUF_STRIDES:
; 12498:  */
; 12499:   /*else*/ {
; 12500:     __pyx_v_info->shape = NULL;

	mov	QWORD PTR [rdx+48], rsi
$__pyx_L3$22872:

; 12501:   }
; 12502:   __pyx_L3:;
; 12503: 
; 12504:   /* "View.MemoryView":515
; 12505:  *             info.shape = NULL
; 12506:  * 
; 12507:  *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
; 12508:  *             info.strides = self.view.strides
; 12509:  *         else:
; 12510:  */
; 12511:   __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);

	test	ecx, ecx

; 12512:   if (__pyx_t_1) {

	je	SHORT $LN14@pyx_memory

; 12513: 
; 12514:     /* "View.MemoryView":516
; 12515:  * 
; 12516:  *         if flags & PyBUF_STRIDES:
; 12517:  *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
; 12518:  *         else:
; 12519:  *             info.strides = NULL
; 12520:  */
; 12521:     __pyx_t_2 = __pyx_v_self->view.strides;
; 12522:     __pyx_v_info->strides = __pyx_t_2;

	mov	rax, QWORD PTR [rdi+128]
	mov	QWORD PTR [rdx+56], rax

; 12523: 
; 12524:     /* "View.MemoryView":515
; 12525:  *             info.shape = NULL
; 12526:  * 
; 12527:  *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
; 12528:  *             info.strides = self.view.strides
; 12529:  *         else:
; 12530:  */
; 12531:     goto __pyx_L4;

	jmp	SHORT $__pyx_L4$22875
$LN14@pyx_memory:

; 12532:   }
; 12533: 
; 12534:   /* "View.MemoryView":518
; 12535:  *             info.strides = self.view.strides
; 12536:  *         else:
; 12537:  *             info.strides = NULL             # <<<<<<<<<<<<<<
; 12538:  * 
; 12539:  *         if flags & PyBUF_INDIRECT:
; 12540:  */
; 12541:   /*else*/ {
; 12542:     __pyx_v_info->strides = NULL;

	mov	QWORD PTR [rdx+56], rsi
$__pyx_L4$22875:

; 12543:   }
; 12544:   __pyx_L4:;
; 12545: 
; 12546:   /* "View.MemoryView":520
; 12547:  *             info.strides = NULL
; 12548:  * 
; 12549:  *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
; 12550:  *             info.suboffsets = self.view.suboffsets
; 12551:  *         else:
; 12552:  */
; 12553:   __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);

	test	r8d, 280				; 00000118H

; 12554:   if (__pyx_t_1) {

	je	SHORT $LN13@pyx_memory

; 12555: 
; 12556:     /* "View.MemoryView":521
; 12557:  * 
; 12558:  *         if flags & PyBUF_INDIRECT:
; 12559:  *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
; 12560:  *         else:
; 12561:  *             info.suboffsets = NULL
; 12562:  */
; 12563:     __pyx_t_2 = __pyx_v_self->view.suboffsets;
; 12564:     __pyx_v_info->suboffsets = __pyx_t_2;

	mov	rax, QWORD PTR [rdi+136]
	mov	QWORD PTR [rdx+64], rax

; 12565: 
; 12566:     /* "View.MemoryView":520
; 12567:  *             info.strides = NULL
; 12568:  * 
; 12569:  *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
; 12570:  *             info.suboffsets = self.view.suboffsets
; 12571:  *         else:
; 12572:  */
; 12573:     goto __pyx_L5;

	jmp	SHORT $__pyx_L5$22878
$LN13@pyx_memory:

; 12574:   }
; 12575: 
; 12576:   /* "View.MemoryView":523
; 12577:  *             info.suboffsets = self.view.suboffsets
; 12578:  *         else:
; 12579:  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
; 12580:  * 
; 12581:  *         if flags & PyBUF_FORMAT:
; 12582:  */
; 12583:   /*else*/ {
; 12584:     __pyx_v_info->suboffsets = NULL;

	mov	QWORD PTR [rdx+64], rsi
$__pyx_L5$22878:

; 12585:   }
; 12586:   __pyx_L5:;
; 12587: 
; 12588:   /* "View.MemoryView":525
; 12589:  *             info.suboffsets = NULL
; 12590:  * 
; 12591:  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 12592:  *             info.format = self.view.format
; 12593:  *         else:
; 12594:  */
; 12595:   __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
; 12596:   if (__pyx_t_1) {

	test	r8b, 4
	je	SHORT $LN12@pyx_memory

; 12597: 
; 12598:     /* "View.MemoryView":526
; 12599:  * 
; 12600:  *         if flags & PyBUF_FORMAT:
; 12601:  *             info.format = self.view.format             # <<<<<<<<<<<<<<
; 12602:  *         else:
; 12603:  *             info.format = NULL
; 12604:  */
; 12605:     __pyx_t_3 = __pyx_v_self->view.format;
; 12606:     __pyx_v_info->format = __pyx_t_3;

	mov	rax, QWORD PTR [rdi+112]
	mov	QWORD PTR [rdx+40], rax

; 12607: 
; 12608:     /* "View.MemoryView":525
; 12609:  *             info.suboffsets = NULL
; 12610:  * 
; 12611:  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 12612:  *             info.format = self.view.format
; 12613:  *         else:
; 12614:  */
; 12615:     goto __pyx_L6;

	jmp	SHORT $__pyx_L6$22881
$LN12@pyx_memory:

; 12616:   }
; 12617: 
; 12618:   /* "View.MemoryView":528
; 12619:  *             info.format = self.view.format
; 12620:  *         else:
; 12621:  *             info.format = NULL             # <<<<<<<<<<<<<<
; 12622:  * 
; 12623:  *         info.buf = self.view.buf
; 12624:  */
; 12625:   /*else*/ {
; 12626:     __pyx_v_info->format = NULL;

	mov	QWORD PTR [rdx+40], rsi
$__pyx_L6$22881:

; 12627:   }
; 12628:   __pyx_L6:;
; 12629: 
; 12630:   /* "View.MemoryView":530
; 12631:  *             info.format = NULL
; 12632:  * 
; 12633:  *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
; 12634:  *         info.ndim = self.view.ndim
; 12635:  *         info.itemsize = self.view.itemsize
; 12636:  */
; 12637:   __pyx_t_4 = __pyx_v_self->view.buf;
; 12638:   __pyx_v_info->buf = __pyx_t_4;

	mov	rax, QWORD PTR [rdi+72]
	mov	QWORD PTR [rdx], rax

; 12639: 
; 12640:   /* "View.MemoryView":531
; 12641:  * 
; 12642:  *         info.buf = self.view.buf
; 12643:  *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
; 12644:  *         info.itemsize = self.view.itemsize
; 12645:  *         info.len = self.view.len
; 12646:  */
; 12647:   __pyx_t_5 = __pyx_v_self->view.ndim;
; 12648:   __pyx_v_info->ndim = __pyx_t_5;

	mov	eax, DWORD PTR [rdi+108]
	mov	DWORD PTR [rdx+36], eax

; 12649: 
; 12650:   /* "View.MemoryView":532
; 12651:  *         info.buf = self.view.buf
; 12652:  *         info.ndim = self.view.ndim
; 12653:  *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
; 12654:  *         info.len = self.view.len
; 12655:  *         info.readonly = 0
; 12656:  */
; 12657:   __pyx_t_6 = __pyx_v_self->view.itemsize;
; 12658:   __pyx_v_info->itemsize = __pyx_t_6;

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rdx+24], rax

; 12659: 
; 12660:   /* "View.MemoryView":533
; 12661:  *         info.ndim = self.view.ndim
; 12662:  *         info.itemsize = self.view.itemsize
; 12663:  *         info.len = self.view.len             # <<<<<<<<<<<<<<
; 12664:  *         info.readonly = 0
; 12665:  *         info.obj = self
; 12666:  */
; 12667:   __pyx_t_6 = __pyx_v_self->view.len;
; 12668:   __pyx_v_info->len = __pyx_t_6;

	mov	rax, QWORD PTR [rdi+88]

; 12669: 
; 12670:   /* "View.MemoryView":534
; 12671:  *         info.itemsize = self.view.itemsize
; 12672:  *         info.len = self.view.len
; 12673:  *         info.readonly = 0             # <<<<<<<<<<<<<<
; 12674:  *         info.obj = self
; 12675:  * 
; 12676:  */
; 12677:   __pyx_v_info->readonly = 0;

	mov	DWORD PTR [rdx+32], esi
	mov	QWORD PTR [rdx+16], rax

; 12678: 
; 12679:   /* "View.MemoryView":535
; 12680:  *         info.len = self.view.len
; 12681:  *         info.readonly = 0
; 12682:  *         info.obj = self             # <<<<<<<<<<<<<<
; 12683:  * 
; 12684:  *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
; 12685:  */
; 12686:   __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rdi]

; 12687:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
; 12688:   __Pyx_GOTREF(__pyx_v_info->obj);
; 12689:   __Pyx_DECREF(__pyx_v_info->obj);

	mov	rax, QWORD PTR [rdx+8]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN10@pyx_memory
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN10@pyx_memory:

; 12690:   __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

	mov	QWORD PTR [rbx+8], rdi

; 12691: 
; 12692:   /* "View.MemoryView":509
; 12693:  * 
; 12694:  *     @cname('getbuffer')
; 12695:  *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
; 12696:  *         if flags & PyBUF_STRIDES:
; 12697:  *             info.shape = self.view.shape
; 12698:  */
; 12699: 
; 12700:   /* function exit code */
; 12701:   __pyx_r = 0;
; 12702:   if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	cmp	rdi, rax
	jne	SHORT $LN19@pyx_memory

; 12703:     __Pyx_GOTREF(Py_None);
; 12704:     __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN4@pyx_memory
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN4@pyx_memory:
	mov	QWORD PTR [rbx+8], rsi
$LN19@pyx_memory:

; 12705:   }
; 12706:   __Pyx_RefNannyFinishContext();
; 12707:   return __pyx_r;
; 12708: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__ PROC ; COMDAT

; 12815:   PyObject *__pyx_r = NULL;
; 12816:   __Pyx_RefNannyDeclarations
; 12817:   __Pyx_RefNannySetupContext("__get__", 0);
; 12818: 
; 12819:   /* "View.MemoryView":548
; 12820:  *     @property
; 12821:  *     def base(self):
; 12822:  *         return self.obj             # <<<<<<<<<<<<<<
; 12823:  * 
; 12824:  *     @property
; 12825:  */
; 12826:   __Pyx_XDECREF(__pyx_r);
; 12827:   __Pyx_INCREF(__pyx_v_self->obj);

	mov	rax, QWORD PTR [rcx+24]
$__pyx_L0$23020:
	inc	QWORD PTR [rax]

; 12828:   __pyx_r = __pyx_v_self->obj;
; 12829:   goto __pyx_L0;
; 12830: 
; 12831:   /* "View.MemoryView":547
; 12832:  * 
; 12833:  *     @property
; 12834:  *     def base(self):             # <<<<<<<<<<<<<<
; 12835:  *         return self.obj
; 12836:  * 
; 12837:  */
; 12838: 
; 12839:   /* function exit code */
; 12840:   __pyx_L0:;
; 12841:   __Pyx_XGIVEREF(__pyx_r);
; 12842:   __Pyx_RefNannyFinishContext();
; 12843:   return __pyx_r;

	mov	rax, QWORD PTR [rcx+24]

; 12844: }

	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__ PROC ; COMDAT

; 13500:   Py_ssize_t __pyx_r;
; 13501:   __Pyx_RefNannyDeclarations
; 13502:   int __pyx_t_1;
; 13503:   __Pyx_RefNannySetupContext("__len__", 0);
; 13504: 
; 13505:   /* "View.MemoryView":594
; 13506:  * 
; 13507:  *     def __len__(self):
; 13508:  *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
; 13509:  *             return self.view.shape[0]
; 13510:  * 
; 13511:  */
; 13512:   __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);

	cmp	DWORD PTR [rcx+108], 1

; 13513:   if (__pyx_t_1) {

	jl	SHORT $LN1@pyx_memory@2

; 13514: 
; 13515:     /* "View.MemoryView":595
; 13516:  *     def __len__(self):
; 13517:  *         if self.view.ndim >= 1:
; 13518:  *             return self.view.shape[0]             # <<<<<<<<<<<<<<
; 13519:  * 
; 13520:  *         return 0
; 13521:  */
; 13522:     __pyx_r = (__pyx_v_self->view.shape[0]);

	mov	rax, QWORD PTR [rcx+120]

; 13523:     goto __pyx_L0;
; 13524: 
; 13525:     /* "View.MemoryView":594
; 13526:  * 
; 13527:  *     def __len__(self):
; 13528:  *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
; 13529:  *             return self.view.shape[0]
; 13530:  * 
; 13531:  */
; 13532:   }
; 13533: 
; 13534:   /* "View.MemoryView":597
; 13535:  *             return self.view.shape[0]
; 13536:  * 
; 13537:  *         return 0             # <<<<<<<<<<<<<<
; 13538:  * 
; 13539:  *     def __repr__(self):
; 13540:  */
; 13541:   __pyx_r = 0;
; 13542:   goto __pyx_L0;
; 13543: 
; 13544:   /* "View.MemoryView":593
; 13545:  *         return self._size
; 13546:  * 
; 13547:  *     def __len__(self):             # <<<<<<<<<<<<<<
; 13548:  *         if self.view.ndim >= 1:
; 13549:  *             return self.view.shape[0]
; 13550:  */
; 13551: 
; 13552:   /* function exit code */
; 13553:   __pyx_L0:;
; 13554:   __Pyx_RefNannyFinishContext();
; 13555:   return __pyx_r;

	mov	rax, QWORD PTR [rax]

; 13556: }

	ret	0
$LN1@pyx_memory@2:

; 13523:     goto __pyx_L0;
; 13524: 
; 13525:     /* "View.MemoryView":594
; 13526:  * 
; 13527:  *     def __len__(self):
; 13528:  *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
; 13529:  *             return self.view.shape[0]
; 13530:  * 
; 13531:  */
; 13532:   }
; 13533: 
; 13534:   /* "View.MemoryView":597
; 13535:  *             return self.view.shape[0]
; 13536:  * 
; 13537:  *         return 0             # <<<<<<<<<<<<<<
; 13538:  * 
; 13539:  *     def __repr__(self):
; 13540:  */
; 13541:   __pyx_r = 0;
; 13542:   goto __pyx_L0;
; 13543: 
; 13544:   /* "View.MemoryView":593
; 13545:  *         return self._size
; 13546:  * 
; 13547:  *     def __len__(self):             # <<<<<<<<<<<<<<
; 13548:  *         if self.view.ndim >= 1:
; 13549:  *             return self.view.shape[0]
; 13550:  */
; 13551: 
; 13552:   /* function exit code */
; 13553:   __pyx_L0:;
; 13554:   __Pyx_RefNannyFinishContext();
; 13555:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$23749:

; 13556: }

	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__ PROC ; COMDAT

; 16914:   PyObject *__pyx_r = NULL;
; 16915:   __Pyx_RefNannyDeclarations
; 16916:   __Pyx_RefNannySetupContext("__get__", 0);
; 16917: 
; 16918:   /* "View.MemoryView":981
; 16919:  *     @property
; 16920:  *     def base(self):
; 16921:  *         return self.from_object             # <<<<<<<<<<<<<<
; 16922:  * 
; 16923:  *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
; 16924:  */
; 16925:   __Pyx_XDECREF(__pyx_r);
; 16926:   __Pyx_INCREF(__pyx_v_self->from_object);

	mov	rax, QWORD PTR [rcx+392]
$__pyx_L0$25745:
	inc	QWORD PTR [rax]

; 16927:   __pyx_r = __pyx_v_self->from_object;
; 16928:   goto __pyx_L0;
; 16929: 
; 16930:   /* "View.MemoryView":980
; 16931:  * 
; 16932:  *     @property
; 16933:  *     def base(self):             # <<<<<<<<<<<<<<
; 16934:  *         return self.from_object
; 16935:  * 
; 16936:  */
; 16937: 
; 16938:   /* function exit code */
; 16939:   __pyx_L0:;
; 16940:   __Pyx_XGIVEREF(__pyx_r);
; 16941:   __Pyx_RefNannyFinishContext();
; 16942:   return __pyx_r;

	mov	rax, QWORD PTR [rcx+392]

; 16943: }

	ret	0
__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_slice_copy
_TEXT	SEGMENT
__pyx_v_memview$ = 8
__pyx_v_dst$ = 16
__pyx_memoryview_slice_copy PROC			; COMDAT

; 17513:   int __pyx_v_dim;
; 17514:   Py_ssize_t *__pyx_v_shape;
; 17515:   Py_ssize_t *__pyx_v_strides;
; 17516:   Py_ssize_t *__pyx_v_suboffsets;
; 17517:   __Pyx_RefNannyDeclarations
; 17518:   Py_ssize_t *__pyx_t_1;
; 17519:   int __pyx_t_2;
; 17520:   int __pyx_t_3;
; 17521:   Py_ssize_t __pyx_t_4;
; 17522:   __Pyx_RefNannySetupContext("slice_copy", 0);
; 17523: 
; 17524:   /* "View.MemoryView":1052
; 17525:  *     cdef (Py_ssize_t*) shape, strides, suboffsets
; 17526:  * 
; 17527:  *     shape = memview.view.shape             # <<<<<<<<<<<<<<
; 17528:  *     strides = memview.view.strides
; 17529:  *     suboffsets = memview.view.suboffsets
; 17530:  */
; 17531:   __pyx_t_1 = __pyx_v_memview->view.shape;
; 17532:   __pyx_v_shape = __pyx_t_1;

	mov	r10, QWORD PTR [rcx+120]

; 17533: 
; 17534:   /* "View.MemoryView":1053
; 17535:  * 
; 17536:  *     shape = memview.view.shape
; 17537:  *     strides = memview.view.strides             # <<<<<<<<<<<<<<
; 17538:  *     suboffsets = memview.view.suboffsets
; 17539:  * 
; 17540:  */
; 17541:   __pyx_t_1 = __pyx_v_memview->view.strides;
; 17542:   __pyx_v_strides = __pyx_t_1;

	mov	r8, QWORD PTR [rcx+128]

; 17543: 
; 17544:   /* "View.MemoryView":1054
; 17545:  *     shape = memview.view.shape
; 17546:  *     strides = memview.view.strides
; 17547:  *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
; 17548:  * 
; 17549:  *     dst.memview = <__pyx_memoryview *> memview
; 17550:  */
; 17551:   __pyx_t_1 = __pyx_v_memview->view.suboffsets;
; 17552:   __pyx_v_suboffsets = __pyx_t_1;

	mov	r11, QWORD PTR [rcx+136]

; 17553: 
; 17554:   /* "View.MemoryView":1056
; 17555:  *     suboffsets = memview.view.suboffsets
; 17556:  * 
; 17557:  *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
; 17558:  *     dst.data = <char *> memview.view.buf
; 17559:  * 
; 17560:  */
; 17561:   __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

	mov	QWORD PTR [rdx], rcx

; 17562: 
; 17563:   /* "View.MemoryView":1057
; 17564:  * 
; 17565:  *     dst.memview = <__pyx_memoryview *> memview
; 17566:  *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
; 17567:  * 
; 17568:  *     for dim in range(memview.view.ndim):
; 17569:  */
; 17570:   __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

	mov	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rdx+8], rax

; 17571: 
; 17572:   /* "View.MemoryView":1059
; 17573:  *     dst.data = <char *> memview.view.buf
; 17574:  * 
; 17575:  *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
; 17576:  *         dst.shape[dim] = shape[dim]
; 17577:  *         dst.strides[dim] = strides[dim]
; 17578:  */
; 17579:   __pyx_t_2 = __pyx_v_memview->view.ndim;
; 17580:   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

	movsxd	r9, DWORD PTR [rcx+108]
	test	r9, r9
	jle	SHORT $LN3@pyx_memory@3
	lea	rcx, QWORD PTR [rdx+80]
	mov	rdx, r11
	sub	r10, r8
	sub	rdx, r8
	npad	13
$LL5@pyx_memory@3:

; 17581:     __pyx_v_dim = __pyx_t_3;
; 17582: 
; 17583:     /* "View.MemoryView":1060
; 17584:  * 
; 17585:  *     for dim in range(memview.view.ndim):
; 17586:  *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
; 17587:  *         dst.strides[dim] = strides[dim]
; 17588:  *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
; 17589:  */
; 17590:     (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

	mov	rax, QWORD PTR [r10+r8]
	mov	QWORD PTR [rcx-64], rax

; 17591: 
; 17592:     /* "View.MemoryView":1061
; 17593:  *     for dim in range(memview.view.ndim):
; 17594:  *         dst.shape[dim] = shape[dim]
; 17595:  *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
; 17596:  *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
; 17597:  * 
; 17598:  */
; 17599:     (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax

; 17600: 
; 17601:     /* "View.MemoryView":1062
; 17602:  *         dst.shape[dim] = shape[dim]
; 17603:  *         dst.strides[dim] = strides[dim]
; 17604:  *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
; 17605:  * 
; 17606:  * @cname('__pyx_memoryview_copy_object')
; 17607:  */
; 17608:     if ((__pyx_v_suboffsets != 0)) {

	test	r11, r11
	je	SHORT $LN2@pyx_memory@3

; 17609:       __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);

	mov	rax, QWORD PTR [rdx+r8]

; 17610:     } else {

	jmp	SHORT $LN1@pyx_memory@3
$LN2@pyx_memory@3:

; 17611:       __pyx_t_4 = -1L;

	or	rax, -1
$LN1@pyx_memory@3:

; 17612:     }
; 17613:     (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;

	mov	QWORD PTR [rcx+64], rax
	add	rcx, 8
	add	r8, 8
	sub	r9, 1
	jne	SHORT $LL5@pyx_memory@3
$LN3@pyx_memory@3:

; 17614:   }
; 17615: 
; 17616:   /* "View.MemoryView":1048
; 17617:  * 
; 17618:  * @cname('__pyx_memoryview_slice_copy')
; 17619:  * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
; 17620:  *     cdef int dim
; 17621:  *     cdef (Py_ssize_t*) shape, strides, suboffsets
; 17622:  */
; 17623: 
; 17624:   /* function exit code */
; 17625:   __Pyx_RefNannyFinishContext();
; 17626: }

	fatret	0
__pyx_memoryview_slice_copy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT abs_py_ssize_t
_TEXT	SEGMENT
__pyx_v_arg$ = 8
abs_py_ssize_t PROC					; COMDAT

; 17817:   Py_ssize_t __pyx_r;
; 17818:   int __pyx_t_1;
; 17819: 
; 17820:   /* "View.MemoryView":1095
; 17821:  * 
; 17822:  * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
; 17823:  *     if arg < 0:             # <<<<<<<<<<<<<<
; 17824:  *         return -arg
; 17825:  *     else:
; 17826:  */
; 17827:   __pyx_t_1 = ((__pyx_v_arg < 0) != 0);

	test	rcx, rcx

; 17828:   if (__pyx_t_1) {

	jns	SHORT $LN1@abs_py_ssi

; 17829: 
; 17830:     /* "View.MemoryView":1096
; 17831:  * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
; 17832:  *     if arg < 0:
; 17833:  *         return -arg             # <<<<<<<<<<<<<<
; 17834:  *     else:
; 17835:  *         return arg
; 17836:  */
; 17837:     __pyx_r = (-__pyx_v_arg);

	neg	rcx
$LN1@abs_py_ssi:

; 17838:     goto __pyx_L0;
; 17839: 
; 17840:     /* "View.MemoryView":1095
; 17841:  * 
; 17842:  * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
; 17843:  *     if arg < 0:             # <<<<<<<<<<<<<<
; 17844:  *         return -arg
; 17845:  *     else:
; 17846:  */
; 17847:   }
; 17848: 
; 17849:   /* "View.MemoryView":1098
; 17850:  *         return -arg
; 17851:  *     else:
; 17852:  *         return arg             # <<<<<<<<<<<<<<
; 17853:  * 
; 17854:  * @cname('__pyx_get_best_slice_order')
; 17855:  */
; 17856:   /*else*/ {
; 17857:     __pyx_r = __pyx_v_arg;
; 17858:     goto __pyx_L0;
; 17859:   }
; 17860: 
; 17861:   /* "View.MemoryView":1094
; 17862:  * 
; 17863:  * 
; 17864:  * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
; 17865:  *     if arg < 0:
; 17866:  *         return -arg
; 17867:  */
; 17868: 
; 17869:   /* function exit code */
; 17870:   __pyx_L0:;
; 17871:   return __pyx_r;

	mov	rax, rcx
$__pyx_L0$26285:

; 17872: }

	ret	0
abs_py_ssize_t ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_get_best_slice_order DD imagerel __pyx_get_best_slice_order
	DD	imagerel __pyx_get_best_slice_order+148
	DD	imagerel $unwind$__pyx_get_best_slice_order
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_get_best_slice_order DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_get_best_slice_order
_TEXT	SEGMENT
__pyx_v_mslice$ = 8
__pyx_v_ndim$ = 16
__pyx_get_best_slice_order PROC				; COMDAT

; 17882: static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {

	mov	QWORD PTR [rsp+8], rbx

; 17883:   int __pyx_v_i;
; 17884:   Py_ssize_t __pyx_v_c_stride;
; 17885:   Py_ssize_t __pyx_v_f_stride;
; 17886:   char __pyx_r;
; 17887:   int __pyx_t_1;
; 17888:   int __pyx_t_2;
; 17889:   int __pyx_t_3;
; 17890: 
; 17891:   /* "View.MemoryView":1106
; 17892:  *     """
; 17893:  *     cdef int i
; 17894:  *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
; 17895:  *     cdef Py_ssize_t f_stride = 0
; 17896:  * 
; 17897:  */
; 17898:   __pyx_v_c_stride = 0;

	xor	r9d, r9d
	movsxd	rbx, edx
	mov	r11, rcx

; 17899: 
; 17900:   /* "View.MemoryView":1107
; 17901:  *     cdef int i
; 17902:  *     cdef Py_ssize_t c_stride = 0
; 17903:  *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
; 17904:  * 
; 17905:  *     for i in range(ndim - 1, -1, -1):
; 17906:  */
; 17907:   __pyx_v_f_stride = 0;
; 17908: 
; 17909:   /* "View.MemoryView":1109
; 17910:  *     cdef Py_ssize_t f_stride = 0
; 17911:  * 
; 17912:  *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
; 17913:  *         if mslice.shape[i] > 1:
; 17914:  *             c_stride = mslice.strides[i]
; 17915:  */
; 17916:   for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {

	lea	r8d, DWORD PTR [rbx-1]
	mov	r10, r9
	cmp	r8d, -1
	movsxd	rax, r8d
	jle	SHORT $__pyx_L4_break$26302

; 17883:   int __pyx_v_i;
; 17884:   Py_ssize_t __pyx_v_c_stride;
; 17885:   Py_ssize_t __pyx_v_f_stride;
; 17886:   char __pyx_r;
; 17887:   int __pyx_t_1;
; 17888:   int __pyx_t_2;
; 17889:   int __pyx_t_3;
; 17890: 
; 17891:   /* "View.MemoryView":1106
; 17892:  *     """
; 17893:  *     cdef int i
; 17894:  *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
; 17895:  *     cdef Py_ssize_t f_stride = 0
; 17896:  * 
; 17897:  */
; 17898:   __pyx_v_c_stride = 0;

	lea	rax, QWORD PTR [rcx+rax*8+16]
$LL9@pyx_get_be:

; 17917:     __pyx_v_i = __pyx_t_1;
; 17918: 
; 17919:     /* "View.MemoryView":1110
; 17920:  * 
; 17921:  *     for i in range(ndim - 1, -1, -1):
; 17922:  *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
; 17923:  *             c_stride = mslice.strides[i]
; 17924:  *             break
; 17925:  */
; 17926:     __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);

	cmp	QWORD PTR [rax], 1

; 17927:     if (__pyx_t_2) {

	jg	SHORT $LN20@pyx_get_be
	dec	r8d
	sub	rax, 8
	cmp	r8d, -1
	jg	SHORT $LL9@pyx_get_be

; 17977:     if (__pyx_t_2) {

	jmp	SHORT $__pyx_L4_break$26302
$LN20@pyx_get_be:

; 17928: 
; 17929:       /* "View.MemoryView":1111
; 17930:  *     for i in range(ndim - 1, -1, -1):
; 17931:  *         if mslice.shape[i] > 1:
; 17932:  *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
; 17933:  *             break
; 17934:  * 
; 17935:  */
; 17936:       __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

	movsxd	rax, r8d
	mov	r10, QWORD PTR [rcx+rax*8+80]
$__pyx_L4_break$26302:

; 17937: 
; 17938:       /* "View.MemoryView":1112
; 17939:  *         if mslice.shape[i] > 1:
; 17940:  *             c_stride = mslice.strides[i]
; 17941:  *             break             # <<<<<<<<<<<<<<
; 17942:  * 
; 17943:  *     for i in range(ndim):
; 17944:  */
; 17945:       goto __pyx_L4_break;
; 17946: 
; 17947:       /* "View.MemoryView":1110
; 17948:  * 
; 17949:  *     for i in range(ndim - 1, -1, -1):
; 17950:  *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
; 17951:  *             c_stride = mslice.strides[i]
; 17952:  *             break
; 17953:  */
; 17954:     }
; 17955:   }
; 17956:   __pyx_L4_break:;
; 17957: 
; 17958:   /* "View.MemoryView":1114
; 17959:  *             break
; 17960:  * 
; 17961:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 17962:  *         if mslice.shape[i] > 1:
; 17963:  *             f_stride = mslice.strides[i]
; 17964:  */
; 17965:   __pyx_t_1 = __pyx_v_ndim;
; 17966:   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

	mov	edx, r9d
	mov	rcx, r9
	test	ebx, ebx
	jle	SHORT $__pyx_L7_break$26307
	lea	rax, QWORD PTR [r11+16]
	npad	2
$LL5@pyx_get_be:

; 17967:     __pyx_v_i = __pyx_t_3;
; 17968: 
; 17969:     /* "View.MemoryView":1115
; 17970:  * 
; 17971:  *     for i in range(ndim):
; 17972:  *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
; 17973:  *             f_stride = mslice.strides[i]
; 17974:  *             break
; 17975:  */
; 17976:     __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);

	cmp	QWORD PTR [rax], 1

; 17977:     if (__pyx_t_2) {

	jg	SHORT $LN21@pyx_get_be
	inc	rcx
	inc	edx
	add	rax, 8
	cmp	rcx, rbx
	jl	SHORT $LL5@pyx_get_be
	jmp	SHORT $__pyx_L7_break$26307
$LN21@pyx_get_be:

; 17978: 
; 17979:       /* "View.MemoryView":1116
; 17980:  *     for i in range(ndim):
; 17981:  *         if mslice.shape[i] > 1:
; 17982:  *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
; 17983:  *             break
; 17984:  * 
; 17985:  */
; 17986:       __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

	movsxd	rax, edx
	mov	r9, QWORD PTR [r11+rax*8+80]
$__pyx_L7_break$26307:

; 17987: 
; 17988:       /* "View.MemoryView":1117
; 17989:  *         if mslice.shape[i] > 1:
; 17990:  *             f_stride = mslice.strides[i]
; 17991:  *             break             # <<<<<<<<<<<<<<
; 17992:  * 
; 17993:  *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
; 17994:  */
; 17995:       goto __pyx_L7_break;
; 17996: 
; 17997:       /* "View.MemoryView":1115
; 17998:  * 
; 17999:  *     for i in range(ndim):
; 18000:  *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
; 18001:  *             f_stride = mslice.strides[i]
; 18002:  *             break
; 18003:  */
; 18004:     }
; 18005:   }
; 18006:   __pyx_L7_break:;
; 18007: 
; 18008:   /* "View.MemoryView":1119
; 18009:  *             break
; 18010:  * 
; 18011:  *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
; 18012:  *         return 'C'
; 18013:  *     else:
; 18014:  */
; 18015:   __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);

	test	r10, r10
	jns	SHORT $__pyx_L0$36353
	neg	r10
$__pyx_L0$36353:
	test	r9, r9
	jns	SHORT $__pyx_L0$36360
	neg	r9
$__pyx_L0$36360:

; 18016:   if (__pyx_t_2) {
; 18017: 
; 18018:     /* "View.MemoryView":1120
; 18019:  * 
; 18020:  *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
; 18021:  *         return 'C'             # <<<<<<<<<<<<<<
; 18022:  *     else:
; 18023:  *         return 'F'
; 18024:  */
; 18025:     __pyx_r = 'C';
; 18026:     goto __pyx_L0;
; 18027: 
; 18028:     /* "View.MemoryView":1119
; 18029:  *             break
; 18030:  * 
; 18031:  *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
; 18032:  *         return 'C'
; 18033:  *     else:
; 18034:  */
; 18035:   }
; 18036: 
; 18037:   /* "View.MemoryView":1122
; 18038:  *         return 'C'
; 18039:  *     else:
; 18040:  *         return 'F'             # <<<<<<<<<<<<<<
; 18041:  * 
; 18042:  * @cython.cdivision(True)
; 18043:  */
; 18044:   /*else*/ {
; 18045:     __pyx_r = 'F';
; 18046:     goto __pyx_L0;
; 18047:   }
; 18048: 
; 18049:   /* "View.MemoryView":1101
; 18050:  * 
; 18051:  * @cname('__pyx_get_best_slice_order')
; 18052:  * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
; 18053:  *     """
; 18054:  *     Figure out the best memory access order for a given slice.
; 18055:  */
; 18056: 
; 18057:   /* function exit code */
; 18058:   __pyx_L0:;
; 18059:   return __pyx_r;
; 18060: }

	mov	rbx, QWORD PTR [rsp+8]
	mov	eax, 70					; 00000046H
	mov	ecx, 67					; 00000043H
	cmp	r10, r9
$__pyx_L0$26309:
	cmovle	eax, ecx
	ret	0
__pyx_get_best_slice_order ENDP
_TEXT	ENDS
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_copy_strided_to_strided DD imagerel _copy_strided_to_strided
	DD	imagerel _copy_strided_to_strided+411
	DD	imagerel $unwind$_copy_strided_to_strided
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_copy_strided_to_strided DD 060c01H
	DD	0e340cH
	DD	07008920cH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _copy_strided_to_strided
_TEXT	SEGMENT
tv215 = 64
__pyx_v_src_data$ = 112
__pyx_v_dst_stride$1$ = 120
__pyx_v_src_strides$ = 120
__pyx_v_dst_data$ = 128
tv216 = 136
__pyx_v_dst_strides$ = 136
tv217 = 144
__pyx_v_src_shape$ = 144
tv218 = 152
__pyx_v_src_stride$1$ = 152
__pyx_v_dst_shape$ = 152
tv219 = 160
__pyx_v_ndim$ = 160
__pyx_v_itemsize$ = 168
_copy_strided_to_strided PROC				; COMDAT

; 18070: static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 80					; 00000050H

; 18071:   CYTHON_UNUSED Py_ssize_t __pyx_v_i;
; 18072:   CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
; 18073:   Py_ssize_t __pyx_v_dst_extent;
; 18074:   Py_ssize_t __pyx_v_src_stride;
; 18075:   Py_ssize_t __pyx_v_dst_stride;
; 18076:   int __pyx_t_1;
; 18077:   int __pyx_t_2;
; 18078:   int __pyx_t_3;
; 18079:   Py_ssize_t __pyx_t_4;
; 18080:   Py_ssize_t __pyx_t_5;
; 18081: 
; 18082:   /* "View.MemoryView":1132
; 18083:  * 
; 18084:  *     cdef Py_ssize_t i
; 18085:  *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
; 18086:  *     cdef Py_ssize_t dst_extent = dst_shape[0]
; 18087:  *     cdef Py_ssize_t src_stride = src_strides[0]
; 18088:  */
; 18089:   __pyx_v_src_extent = (__pyx_v_src_shape[0]);
; 18090: 
; 18091:   /* "View.MemoryView":1133
; 18092:  *     cdef Py_ssize_t i
; 18093:  *     cdef Py_ssize_t src_extent = src_shape[0]
; 18094:  *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
; 18095:  *     cdef Py_ssize_t src_stride = src_strides[0]
; 18096:  *     cdef Py_ssize_t dst_stride = dst_strides[0]
; 18097:  */
; 18098:   __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

	mov	rax, QWORD PTR __pyx_v_dst_shape$[rsp]

; 18099: 
; 18100:   /* "View.MemoryView":1134
; 18101:  *     cdef Py_ssize_t src_extent = src_shape[0]
; 18102:  *     cdef Py_ssize_t dst_extent = dst_shape[0]
; 18103:  *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
; 18104:  *     cdef Py_ssize_t dst_stride = dst_strides[0]
; 18105:  * 
; 18106:  */
; 18107:   __pyx_v_src_stride = (__pyx_v_src_strides[0]);

	mov	rbp, QWORD PTR [rdx]
	mov	rdi, rcx

; 18108: 
; 18109:   /* "View.MemoryView":1135
; 18110:  *     cdef Py_ssize_t dst_extent = dst_shape[0]
; 18111:  *     cdef Py_ssize_t src_stride = src_strides[0]
; 18112:  *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
; 18113:  * 
; 18114:  *     if ndim == 1:
; 18115:  */
; 18116:   __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);
; 18117: 
; 18118:   /* "View.MemoryView":1137
; 18119:  *     cdef Py_ssize_t dst_stride = dst_strides[0]
; 18120:  * 
; 18121:  *     if ndim == 1:             # <<<<<<<<<<<<<<
; 18122:  *        if (src_stride > 0 and dst_stride > 0 and
; 18123:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18124:  */
; 18125:   __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);

	mov	ecx, DWORD PTR __pyx_v_ndim$[rsp]
	mov	rsi, QWORD PTR [rax]
	mov	r10, rdx
	mov	rdx, QWORD PTR [r9]
	mov	rbx, r8
	mov	QWORD PTR __pyx_v_src_stride$1$[rsp], rbp
	mov	QWORD PTR __pyx_v_dst_stride$1$[rsp], rdx
	cmp	ecx, 1

; 18126:   if (__pyx_t_1) {

	jne	$LN13@copy_strid

; 18127: 
; 18128:     /* "View.MemoryView":1138
; 18129:  * 
; 18130:  *     if ndim == 1:
; 18131:  *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
; 18132:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18133:  *            memcpy(dst_data, src_data, itemsize * dst_extent)
; 18134:  */
; 18135:     __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);

	xor	ecx, ecx
	test	rbp, rbp

; 18136:     if (__pyx_t_2) {

	mov	rbp, QWORD PTR __pyx_v_itemsize$[rsp]
	mov	eax, ecx
	setg	al
	test	eax, eax
	je	SHORT $LN7@copy_strid

; 18137:     } else {
; 18138:       __pyx_t_1 = __pyx_t_2;
; 18139:       goto __pyx_L5_bool_binop_done;
; 18140:     }
; 18141:     __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);

	test	rdx, rdx
	mov	eax, ecx
	setg	al

; 18142:     if (__pyx_t_2) {

	test	eax, eax
	je	SHORT $LN7@copy_strid

; 18143:     } else {
; 18144:       __pyx_t_1 = __pyx_t_2;
; 18145:       goto __pyx_L5_bool_binop_done;
; 18146:     }
; 18147: 
; 18148:     /* "View.MemoryView":1139
; 18149:  *     if ndim == 1:
; 18150:  *        if (src_stride > 0 and dst_stride > 0 and
; 18151:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
; 18152:  *            memcpy(dst_data, src_data, itemsize * dst_extent)
; 18153:  *        else:
; 18154:  */
; 18155:     __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);

	cmp	QWORD PTR __pyx_v_src_stride$1$[rsp], rbp
	mov	eax, ecx
	sete	al

; 18156:     if (__pyx_t_2) {

	test	eax, eax
	je	SHORT $LN20@copy_strid

; 18157:       __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));

	cmp	rbp, rdx
	mov	eax, ecx
	sete	al

; 18158:     }
; 18159:     __pyx_t_3 = (__pyx_t_2 != 0);

	test	eax, eax
$LN20@copy_strid:
	setne	cl
$__pyx_L5_bool_binop_done$26340:

; 18160:     __pyx_t_1 = __pyx_t_3;
; 18161:     __pyx_L5_bool_binop_done:;
; 18162: 
; 18163:     /* "View.MemoryView":1138
; 18164:  * 
; 18165:  *     if ndim == 1:
; 18166:  *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
; 18167:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18168:  *            memcpy(dst_data, src_data, itemsize * dst_extent)
; 18169:  */
; 18170:     if (__pyx_t_1) {

	test	ecx, ecx
	je	SHORT $LN7@copy_strid

; 18171: 
; 18172:       /* "View.MemoryView":1140
; 18173:  *        if (src_stride > 0 and dst_stride > 0 and
; 18174:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18175:  *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
; 18176:  *        else:
; 18177:  *            for i in range(dst_extent):
; 18178:  */
; 18179:       memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));

	imul	rsi, rbp
	mov	rdx, rdi
	mov	rcx, rbx
	mov	r8, rsi

; 18281:     }
; 18282:   }
; 18283:   __pyx_L3:;
; 18284: 
; 18285:   /* "View.MemoryView":1125
; 18286:  * 
; 18287:  * @cython.cdivision(True)
; 18288:  * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
; 18289:  *                                    char *dst_data, Py_ssize_t *dst_strides,
; 18290:  *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
; 18291:  */
; 18292: 
; 18293:   /* function exit code */
; 18294: }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 80					; 00000050H
	pop	rdi
	pop	rsi
	pop	rbp
	jmp	memcpy
$LN7@copy_strid:

; 18180: 
; 18181:       /* "View.MemoryView":1138
; 18182:  * 
; 18183:  *     if ndim == 1:
; 18184:  *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
; 18185:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18186:  *            memcpy(dst_data, src_data, itemsize * dst_extent)
; 18187:  */
; 18188:       goto __pyx_L4;
; 18189:     }
; 18190: 
; 18191:     /* "View.MemoryView":1142
; 18192:  *            memcpy(dst_data, src_data, itemsize * dst_extent)
; 18193:  *        else:
; 18194:  *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
; 18195:  *                memcpy(dst_data, src_data, itemsize)
; 18196:  *                src_data += src_stride
; 18197:  */
; 18198:     /*else*/ {
; 18199:       __pyx_t_4 = __pyx_v_dst_extent;
; 18200:       for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

	test	rsi, rsi
	jle	$__pyx_L3$26351
	npad	2
$LL6@copy_strid:

; 18201:         __pyx_v_i = __pyx_t_5;
; 18202: 
; 18203:         /* "View.MemoryView":1143
; 18204:  *        else:
; 18205:  *            for i in range(dst_extent):
; 18206:  *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
; 18207:  *                src_data += src_stride
; 18208:  *                dst_data += dst_stride
; 18209:  */
; 18210:         memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

	mov	r8, rbp
	mov	rdx, rdi
	mov	rcx, rbx
	call	memcpy

; 18211: 
; 18212:         /* "View.MemoryView":1144
; 18213:  *            for i in range(dst_extent):
; 18214:  *                memcpy(dst_data, src_data, itemsize)
; 18215:  *                src_data += src_stride             # <<<<<<<<<<<<<<
; 18216:  *                dst_data += dst_stride
; 18217:  *     else:
; 18218:  */
; 18219:         __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

	add	rdi, QWORD PTR __pyx_v_src_stride$1$[rsp]

; 18220: 
; 18221:         /* "View.MemoryView":1145
; 18222:  *                memcpy(dst_data, src_data, itemsize)
; 18223:  *                src_data += src_stride
; 18224:  *                dst_data += dst_stride             # <<<<<<<<<<<<<<
; 18225:  *     else:
; 18226:  *         for i in range(dst_extent):
; 18227:  */
; 18228:         __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

	add	rbx, QWORD PTR __pyx_v_dst_stride$1$[rsp]
	sub	rsi, 1
	jne	SHORT $LL6@copy_strid
$__pyx_L4$26347:

; 18281:     }
; 18282:   }
; 18283:   __pyx_L3:;
; 18284: 
; 18285:   /* "View.MemoryView":1125
; 18286:  * 
; 18287:  * @cython.cdivision(True)
; 18288:  * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
; 18289:  *                                    char *dst_data, Py_ssize_t *dst_strides,
; 18290:  *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
; 18291:  */
; 18292: 
; 18293:   /* function exit code */
; 18294: }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 80					; 00000050H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN13@copy_strid:

; 18229:       }
; 18230:     }
; 18231:     __pyx_L4:;
; 18232: 
; 18233:     /* "View.MemoryView":1137
; 18234:  *     cdef Py_ssize_t dst_stride = dst_strides[0]
; 18235:  * 
; 18236:  *     if ndim == 1:             # <<<<<<<<<<<<<<
; 18237:  *        if (src_stride > 0 and dst_stride > 0 and
; 18238:  *            <size_t> src_stride == itemsize == <size_t> dst_stride):
; 18239:  */
; 18240:     goto __pyx_L3;
; 18241:   }
; 18242: 
; 18243:   /* "View.MemoryView":1147
; 18244:  *                dst_data += dst_stride
; 18245:  *     else:
; 18246:  *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
; 18247:  *             _copy_strided_to_strided(src_data, src_strides + 1,
; 18248:  *                                      dst_data, dst_strides + 1,
; 18249:  */
; 18250:   /*else*/ {
; 18251:     __pyx_t_4 = __pyx_v_dst_extent;
; 18252:     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

	test	rsi, rsi
	jle	$__pyx_L3$26351
	lea	rdx, QWORD PTR [rax+8]

; 18253:       __pyx_v_i = __pyx_t_5;
; 18254: 
; 18255:       /* "View.MemoryView":1148
; 18256:  *     else:
; 18257:  *         for i in range(dst_extent):
; 18258:  *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
; 18259:  *                                      dst_data, dst_strides + 1,
; 18260:  *                                      src_shape + 1, dst_shape + 1,
; 18261:  */
; 18262:       _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

	mov	rax, QWORD PTR __pyx_v_src_shape$[rsp]
	dec	ecx
	add	rax, 8
	lea	r8, QWORD PTR [r9+8]
	add	r10, 8
	mov	DWORD PTR tv219[rsp], ecx
	mov	QWORD PTR tv218[rsp], rdx
	mov	QWORD PTR tv215[rsp], r10
	mov	QWORD PTR tv217[rsp], rax
	mov	QWORD PTR tv216[rsp], r8
	npad	11
$LL3@copy_strid:
	mov	r9, QWORD PTR __pyx_v_itemsize$[rsp]
	mov	QWORD PTR [rsp+56], r9
	mov	DWORD PTR [rsp+48], ecx
	mov	QWORD PTR [rsp+40], rdx
	mov	r9, r8
	mov	rdx, r10
	mov	rcx, rdi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], rax
	call	_copy_strided_to_strided

; 18263: 
; 18264:       /* "View.MemoryView":1152
; 18265:  *                                      src_shape + 1, dst_shape + 1,
; 18266:  *                                      ndim - 1, itemsize)
; 18267:  *             src_data += src_stride             # <<<<<<<<<<<<<<
; 18268:  *             dst_data += dst_stride
; 18269:  * 
; 18270:  */
; 18271:       __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);
; 18272: 
; 18273:       /* "View.MemoryView":1153
; 18274:  *                                      ndim - 1, itemsize)
; 18275:  *             src_data += src_stride
; 18276:  *             dst_data += dst_stride             # <<<<<<<<<<<<<<
; 18277:  * 
; 18278:  * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
; 18279:  */
; 18280:       __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

	add	rbx, QWORD PTR __pyx_v_dst_stride$1$[rsp]
	mov	ecx, DWORD PTR tv219[rsp]
	mov	rdx, QWORD PTR tv218[rsp]
	mov	rax, QWORD PTR tv217[rsp]
	mov	r8, QWORD PTR tv216[rsp]
	mov	r10, QWORD PTR tv215[rsp]
	add	rdi, rbp
	sub	rsi, 1
	jne	SHORT $LL3@copy_strid
$__pyx_L3$26351:

; 18281:     }
; 18282:   }
; 18283:   __pyx_L3:;
; 18284: 
; 18285:   /* "View.MemoryView":1125
; 18286:  * 
; 18287:  * @cython.cdivision(True)
; 18288:  * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
; 18289:  *                                    char *dst_data, Py_ssize_t *dst_strides,
; 18290:  *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
; 18291:  */
; 18292: 
; 18293:   /* function exit code */
; 18294: }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 80					; 00000050H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_copy_strided_to_strided ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_strided_to_strided DD imagerel copy_strided_to_strided
	DD	imagerel copy_strided_to_strided+67
	DD	imagerel $unwind$copy_strided_to_strided
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_strided_to_strided DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT copy_strided_to_strided
_TEXT	SEGMENT
__pyx_v_src$ = 80
__pyx_v_dst$ = 88
__pyx_v_ndim$ = 96
__pyx_v_itemsize$ = 104
copy_strided_to_strided PROC				; COMDAT

; 18304: static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

	push	rbx
	sub	rsp, 64					; 00000040H
	mov	r11, r9
	mov	rbx, rdx

; 18305: 
; 18306:   /* "View.MemoryView":1158
; 18307:  *                                   __Pyx_memviewslice *dst,
; 18308:  *                                   int ndim, size_t itemsize) nogil:
; 18309:  *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
; 18310:  *                              src.shape, dst.shape, ndim, itemsize)
; 18311:  * 
; 18312:  */
; 18313:   _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

	lea	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [rsp+56], r11
	mov	DWORD PTR [rsp+48], r8d
	mov	r8, QWORD PTR [rbx+8]
	lea	r10, QWORD PTR [rcx+16]
	lea	r9, QWORD PTR [rdx+80]
	lea	rdx, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r10
	call	_copy_strided_to_strided

; 18314: 
; 18315:   /* "View.MemoryView":1155
; 18316:  *             dst_data += dst_stride
; 18317:  * 
; 18318:  * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
; 18319:  *                                   __Pyx_memviewslice *dst,
; 18320:  *                                   int ndim, size_t itemsize) nogil:
; 18321:  */
; 18322: 
; 18323:   /* function exit code */
; 18324: }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
copy_strided_to_strided ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_slice_get_size
_TEXT	SEGMENT
__pyx_v_src$ = 8
__pyx_v_ndim$ = 16
__pyx_memoryview_slice_get_size PROC			; COMDAT

; 18350:   __pyx_v_size = __pyx_t_1;

	mov	rax, QWORD PTR [rcx]
	movsxd	r8, edx
	mov	rax, QWORD PTR [rax+96]

; 18351: 
; 18352:   /* "View.MemoryView":1167
; 18353:  *     cdef Py_ssize_t size = src.memview.view.itemsize
; 18354:  * 
; 18355:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 18356:  *         size *= src.shape[i]
; 18357:  * 
; 18358:  */
; 18359:   __pyx_t_2 = __pyx_v_ndim;
; 18360:   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

	test	edx, edx
	jle	SHORT $LN8@pyx_memory@4

; 18335:   int __pyx_v_i;
; 18336:   Py_ssize_t __pyx_v_size;
; 18337:   Py_ssize_t __pyx_r;
; 18338:   Py_ssize_t __pyx_t_1;
; 18339:   int __pyx_t_2;
; 18340:   int __pyx_t_3;
; 18341: 
; 18342:   /* "View.MemoryView":1165
; 18343:  *     "Return the size of the memory occupied by the slice in number of bytes"
; 18344:  *     cdef int i
; 18345:  *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
; 18346:  * 
; 18347:  *     for i in range(ndim):
; 18348:  */
; 18349:   __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

	add	rcx, 16
$LL3@pyx_memory@4:

; 18361:     __pyx_v_i = __pyx_t_3;
; 18362: 
; 18363:     /* "View.MemoryView":1168
; 18364:  * 
; 18365:  *     for i in range(ndim):
; 18366:  *         size *= src.shape[i]             # <<<<<<<<<<<<<<
; 18367:  * 
; 18368:  *     return size
; 18369:  */
; 18370:     __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));

	imul	rax, QWORD PTR [rcx]
	add	rcx, 8
	sub	r8, 1
	jne	SHORT $LL3@pyx_memory@4
$__pyx_L0$26378:
$LN8@pyx_memory@4:
$__pyx_L0_1$26378:

; 18371:   }
; 18372: 
; 18373:   /* "View.MemoryView":1170
; 18374:  *         size *= src.shape[i]
; 18375:  * 
; 18376:  *     return size             # <<<<<<<<<<<<<<
; 18377:  * 
; 18378:  * @cname('__pyx_fill_contig_strides_array')
; 18379:  */
; 18380:   __pyx_r = __pyx_v_size;
; 18381:   goto __pyx_L0;
; 18382: 
; 18383:   /* "View.MemoryView":1162
; 18384:  * 
; 18385:  * @cname('__pyx_memoryview_slice_get_size')
; 18386:  * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
; 18387:  *     "Return the size of the memory occupied by the slice in number of bytes"
; 18388:  *     cdef int i
; 18389:  */
; 18390: 
; 18391:   /* function exit code */
; 18392:   __pyx_L0:;
; 18393:   return __pyx_r;
; 18394: }

	fatret	0
__pyx_memoryview_slice_get_size ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_fill_contig_strides_array
_TEXT	SEGMENT
__pyx_v_shape$ = 8
__pyx_v_strides$ = 16
__pyx_v_stride$ = 24
__pyx_v_ndim$ = 32
__pyx_v_order$ = 40
__pyx_fill_contig_strides_array PROC			; COMDAT

; 18405:   int __pyx_v_idx;
; 18406:   Py_ssize_t __pyx_r;
; 18407:   int __pyx_t_1;
; 18408:   int __pyx_t_2;
; 18409:   int __pyx_t_3;
; 18410: 
; 18411:   /* "View.MemoryView":1182
; 18412:  *     cdef int idx
; 18413:  * 
; 18414:  *     if order == 'F':             # <<<<<<<<<<<<<<
; 18415:  *         for idx in range(ndim):
; 18416:  *             strides[idx] = stride
; 18417:  */
; 18418:   __pyx_t_1 = ((__pyx_v_order == 'F') != 0);

	cmp	BYTE PTR __pyx_v_order$[rsp], 70	; 00000046H
	mov	r10, rdx

; 18419:   if (__pyx_t_1) {

	jne	SHORT $LN7@pyx_fill_c

; 18420: 
; 18421:     /* "View.MemoryView":1183
; 18422:  * 
; 18423:  *     if order == 'F':
; 18424:  *         for idx in range(ndim):             # <<<<<<<<<<<<<<
; 18425:  *             strides[idx] = stride
; 18426:  *             stride = stride * shape[idx]
; 18427:  */
; 18428:     __pyx_t_2 = __pyx_v_ndim;
; 18429:     for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

	movsxd	rax, r9d
	test	r9d, r9d
	jle	SHORT $LN14@pyx_fill_c
	sub	r10, rcx
	npad	11
$LL6@pyx_fill_c:

; 18430:       __pyx_v_idx = __pyx_t_3;
; 18431: 
; 18432:       /* "View.MemoryView":1184
; 18433:  *     if order == 'F':
; 18434:  *         for idx in range(ndim):
; 18435:  *             strides[idx] = stride             # <<<<<<<<<<<<<<
; 18436:  *             stride = stride * shape[idx]
; 18437:  *     else:
; 18438:  */
; 18439:       (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

	mov	QWORD PTR [r10+rcx], r8

; 18440: 
; 18441:       /* "View.MemoryView":1185
; 18442:  *         for idx in range(ndim):
; 18443:  *             strides[idx] = stride
; 18444:  *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
; 18445:  *     else:
; 18446:  *         for idx in range(ndim - 1, -1, -1):
; 18447:  */
; 18448:       __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

	imul	r8, QWORD PTR [rcx]
	add	rcx, 8
	sub	rax, 1
	jne	SHORT $LL6@pyx_fill_c
$__pyx_L0$26403:
$__pyx_L0_1$26403:

; 18489:     }
; 18490:   }
; 18491:   __pyx_L3:;
; 18492: 
; 18493:   /* "View.MemoryView":1191
; 18494:  *             stride = stride * shape[idx]
; 18495:  * 
; 18496:  *     return stride             # <<<<<<<<<<<<<<
; 18497:  * 
; 18498:  * @cname('__pyx_memoryview_copy_data_to_temp')
; 18499:  */
; 18500:   __pyx_r = __pyx_v_stride;
; 18501:   goto __pyx_L0;
; 18502: 
; 18503:   /* "View.MemoryView":1173
; 18504:  * 
; 18505:  * @cname('__pyx_fill_contig_strides_array')
; 18506:  * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
; 18507:  *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
; 18508:  *                 int ndim, char order) nogil:
; 18509:  */
; 18510: 
; 18511:   /* function exit code */
; 18512:   __pyx_L0:;
; 18513:   return __pyx_r;

	mov	rax, r8
$__pyx_L3$26399:

; 18514: }

	ret	0
$LN7@pyx_fill_c:

; 18449:     }
; 18450: 
; 18451:     /* "View.MemoryView":1182
; 18452:  *     cdef int idx
; 18453:  * 
; 18454:  *     if order == 'F':             # <<<<<<<<<<<<<<
; 18455:  *         for idx in range(ndim):
; 18456:  *             strides[idx] = stride
; 18457:  */
; 18458:     goto __pyx_L3;
; 18459:   }
; 18460: 
; 18461:   /* "View.MemoryView":1187
; 18462:  *             stride = stride * shape[idx]
; 18463:  *     else:
; 18464:  *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
; 18465:  *             strides[idx] = stride
; 18466:  *             stride = stride * shape[idx]
; 18467:  */
; 18468:   /*else*/ {
; 18469:     for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1L; __pyx_t_2-=1) {

	lea	eax, DWORD PTR [r9-1]
	cmp	eax, -1
	movsxd	rdx, eax
	jle	SHORT $LN14@pyx_fill_c
	lea	rdx, QWORD PTR [rcx+rdx*8]
	sub	r10, rcx
	lea	ecx, DWORD PTR [rax+1]
	npad	4
$LL3@pyx_fill_c:

; 18470:       __pyx_v_idx = __pyx_t_2;
; 18471: 
; 18472:       /* "View.MemoryView":1188
; 18473:  *     else:
; 18474:  *         for idx in range(ndim - 1, -1, -1):
; 18475:  *             strides[idx] = stride             # <<<<<<<<<<<<<<
; 18476:  *             stride = stride * shape[idx]
; 18477:  * 
; 18478:  */
; 18479:       (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

	mov	QWORD PTR [rdx+r10], r8

; 18480: 
; 18481:       /* "View.MemoryView":1189
; 18482:  *         for idx in range(ndim - 1, -1, -1):
; 18483:  *             strides[idx] = stride
; 18484:  *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
; 18485:  * 
; 18486:  *     return stride
; 18487:  */
; 18488:       __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

	imul	r8, QWORD PTR [rdx]
	sub	rdx, 8
	sub	rcx, 1
	jne	SHORT $LL3@pyx_fill_c
$__pyx_L0_2$26403:
$LN14@pyx_fill_c:
$__pyx_L0_3$26403:
$__pyx_L0_4$26403:

; 18489:     }
; 18490:   }
; 18491:   __pyx_L3:;
; 18492: 
; 18493:   /* "View.MemoryView":1191
; 18494:  *             stride = stride * shape[idx]
; 18495:  * 
; 18496:  *     return stride             # <<<<<<<<<<<<<<
; 18497:  * 
; 18498:  * @cname('__pyx_memoryview_copy_data_to_temp')
; 18499:  */
; 18500:   __pyx_r = __pyx_v_stride;
; 18501:   goto __pyx_L0;
; 18502: 
; 18503:   /* "View.MemoryView":1173
; 18504:  * 
; 18505:  * @cname('__pyx_fill_contig_strides_array')
; 18506:  * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
; 18507:  *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
; 18508:  *                 int ndim, char order) nogil:
; 18509:  */
; 18510: 
; 18511:   /* function exit code */
; 18512:   __pyx_L0:;
; 18513:   return __pyx_r;

	mov	rax, r8
$__pyx_L3_5$26399:

; 18514: }

	ret	0
__pyx_fill_contig_strides_array ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_broadcast_leading
_TEXT	SEGMENT
__pyx_v_mslice$ = 8
__pyx_v_ndim$ = 16
__pyx_v_ndim_other$ = 24
__pyx_memoryview_broadcast_leading PROC			; COMDAT

; 19690:   int __pyx_v_i;
; 19691:   int __pyx_v_offset;
; 19692:   int __pyx_t_1;
; 19693:   int __pyx_t_2;
; 19694: 
; 19695:   /* "View.MemoryView":1330
; 19696:  *                             int ndim_other) nogil:
; 19697:  *     cdef int i
; 19698:  *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
; 19699:  * 
; 19700:  *     for i in range(ndim - 1, -1, -1):
; 19701:  */
; 19702:   __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);
; 19703: 
; 19704:   /* "View.MemoryView":1332
; 19705:  *     cdef int offset = ndim_other - ndim
; 19706:  * 
; 19707:  *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
; 19708:  *         mslice.shape[i + offset] = mslice.shape[i]
; 19709:  *         mslice.strides[i + offset] = mslice.strides[i]
; 19710:  */
; 19711:   for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {

	lea	r11d, DWORD PTR [rdx-1]
	sub	r8d, edx
	mov	r10, rcx
	cmp	r11d, -1
	movsxd	rcx, r11d
	movsxd	r9, r8d
	jle	SHORT $LN4@pyx_memory@5
	lea	rax, QWORD PTR [rcx+r9]
	lea	r8, QWORD PTR [r10+rcx*8+80]
	lea	ecx, DWORD PTR [r11+1]
	lea	rdx, QWORD PTR [r10+rax*8+80]
	npad	8
$LL6@pyx_memory@5:

; 19712:     __pyx_v_i = __pyx_t_1;
; 19713: 
; 19714:     /* "View.MemoryView":1333
; 19715:  * 
; 19716:  *     for i in range(ndim - 1, -1, -1):
; 19717:  *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
; 19718:  *         mslice.strides[i + offset] = mslice.strides[i]
; 19719:  *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
; 19720:  */
; 19721:     (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

	mov	rax, QWORD PTR [r8-64]
	sub	rdx, 8
	sub	r8, 8
	sub	rcx, 1
	mov	QWORD PTR [rdx-56], rax

; 19722: 
; 19723:     /* "View.MemoryView":1334
; 19724:  *     for i in range(ndim - 1, -1, -1):
; 19725:  *         mslice.shape[i + offset] = mslice.shape[i]
; 19726:  *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
; 19727:  *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
; 19728:  * 
; 19729:  */
; 19730:     (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rdx+8], rax

; 19731: 
; 19732:     /* "View.MemoryView":1335
; 19733:  *         mslice.shape[i + offset] = mslice.shape[i]
; 19734:  *         mslice.strides[i + offset] = mslice.strides[i]
; 19735:  *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
; 19736:  * 
; 19737:  *     for i in range(offset):
; 19738:  */
; 19739:     (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);

	mov	rax, QWORD PTR [r8+72]
	mov	QWORD PTR [rdx+72], rax
	jne	SHORT $LL6@pyx_memory@5
$LN4@pyx_memory@5:

; 19740:   }
; 19741: 
; 19742:   /* "View.MemoryView":1337
; 19743:  *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
; 19744:  * 
; 19745:  *     for i in range(offset):             # <<<<<<<<<<<<<<
; 19746:  *         mslice.shape[i] = 1
; 19747:  *         mslice.strides[i] = mslice.strides[0]
; 19748:  */
; 19749:   __pyx_t_1 = __pyx_v_offset;
; 19750:   for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {

	test	r9, r9
	jle	SHORT $LN1@pyx_memory@5
	lea	rcx, QWORD PTR [r10+80]
	npad	1
$LL3@pyx_memory@5:

; 19751:     __pyx_v_i = __pyx_t_2;
; 19752: 
; 19753:     /* "View.MemoryView":1338
; 19754:  * 
; 19755:  *     for i in range(offset):
; 19756:  *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
; 19757:  *         mslice.strides[i] = mslice.strides[0]
; 19758:  *         mslice.suboffsets[i] = -1
; 19759:  */
; 19760:     (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

	mov	QWORD PTR [rcx-64], 1

; 19761: 
; 19762:     /* "View.MemoryView":1339
; 19763:  *     for i in range(offset):
; 19764:  *         mslice.shape[i] = 1
; 19765:  *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
; 19766:  *         mslice.suboffsets[i] = -1
; 19767:  * 
; 19768:  */
; 19769:     (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

	mov	rax, QWORD PTR [r10+80]

; 19770: 
; 19771:     /* "View.MemoryView":1340
; 19772:  *         mslice.shape[i] = 1
; 19773:  *         mslice.strides[i] = mslice.strides[0]
; 19774:  *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
; 19775:  * 
; 19776:  * 
; 19777:  */
; 19778:     (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;

	mov	QWORD PTR [rcx+64], -1
	mov	QWORD PTR [rcx], rax
	add	rcx, 8
	sub	r9, 1
	jne	SHORT $LL3@pyx_memory@5
$LN1@pyx_memory@5:

; 19779:   }
; 19780: 
; 19781:   /* "View.MemoryView":1326
; 19782:  * 
; 19783:  * @cname('__pyx_memoryview_broadcast_leading')
; 19784:  * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
; 19785:  *                             int ndim,
; 19786:  *                             int ndim_other) nogil:
; 19787:  */
; 19788: 
; 19789:   /* function exit code */
; 19790: }

	fatret	0
__pyx_memoryview_broadcast_leading ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_refcount_objects_in_slice DD imagerel __pyx_memoryview_refcount_objects_in_slice
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice+34
	DD	imagerel $unwind$__pyx_memoryview_refcount_objects_in_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_memoryview_refcount_objects_in_slice DD imagerel __pyx_memoryview_refcount_objects_in_slice+34
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice+142
	DD	imagerel $chain$0$__pyx_memoryview_refcount_objects_in_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_memoryview_refcount_objects_in_slice DD imagerel __pyx_memoryview_refcount_objects_in_slice+142
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice+150
	DD	imagerel $chain$1$__pyx_memoryview_refcount_objects_in_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_memoryview_refcount_objects_in_slice DD 021H
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice+34
	DD	imagerel $unwind$__pyx_memoryview_refcount_objects_in_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_memoryview_refcount_objects_in_slice DD 020521H
	DD	0a6405H
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice+34
	DD	imagerel $unwind$__pyx_memoryview_refcount_objects_in_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_refcount_objects_in_slice DD 041101H
	DD	0700d5211H
	DD	0300b500cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview_refcount_objects_in_slice
_TEXT	SEGMENT
__pyx_v_data$ = 80
__pyx_v_shape$ = 88
__pyx_v_strides$ = 96
__pyx_v_ndim$ = 104
__pyx_v_inc$ = 112
__pyx_memoryview_refcount_objects_in_slice PROC		; COMDAT

; 19889: static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 48					; 00000030H

; 19890:   CYTHON_UNUSED Py_ssize_t __pyx_v_i;
; 19891:   __Pyx_RefNannyDeclarations
; 19892:   Py_ssize_t __pyx_t_1;
; 19893:   Py_ssize_t __pyx_t_2;
; 19894:   int __pyx_t_3;
; 19895:   __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);
; 19896: 
; 19897:   /* "View.MemoryView":1367
; 19898:  *     cdef Py_ssize_t i
; 19899:  * 
; 19900:  *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
; 19901:  *         if ndim == 1:
; 19902:  *             if inc:
; 19903:  */
; 19904:   __pyx_t_1 = (__pyx_v_shape[0]);

	mov	rdi, QWORD PTR [rdx]
	mov	ebp, r9d
	mov	rax, r8
	mov	rbx, rcx

; 19905:   for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {

	test	rdi, rdi
	jle	SHORT $LN8@pyx_memory@6
	mov	QWORD PTR [rsp+80], rsi
	mov	esi, DWORD PTR __pyx_v_inc$[rsp]
	npad	5
$LL10@pyx_memory@6:

; 19906:     __pyx_v_i = __pyx_t_2;
; 19907: 
; 19908:     /* "View.MemoryView":1368
; 19909:  * 
; 19910:  *     for i in range(shape[0]):
; 19911:  *         if ndim == 1:             # <<<<<<<<<<<<<<
; 19912:  *             if inc:
; 19913:  *                 Py_INCREF((<PyObject **> data)[0])
; 19914:  */
; 19915:     __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);

	cmp	ebp, 1

; 19916:     if (__pyx_t_3) {

	jne	SHORT $LN7@pyx_memory@6

; 19917: 
; 19918:       /* "View.MemoryView":1369
; 19919:  *     for i in range(shape[0]):
; 19920:  *         if ndim == 1:
; 19921:  *             if inc:             # <<<<<<<<<<<<<<
; 19922:  *                 Py_INCREF((<PyObject **> data)[0])
; 19923:  *             else:
; 19924:  */
; 19925:       __pyx_t_3 = (__pyx_v_inc != 0);

	test	esi, esi

; 19926:       if (__pyx_t_3) {

	je	SHORT $LN5@pyx_memory@6

; 19927: 
; 19928:         /* "View.MemoryView":1370
; 19929:  *         if ndim == 1:
; 19930:  *             if inc:
; 19931:  *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
; 19932:  *             else:
; 19933:  *                 Py_DECREF((<PyObject **> data)[0])
; 19934:  */
; 19935:         Py_INCREF((((PyObject **)__pyx_v_data)[0]));

	mov	rax, QWORD PTR [rbx]
	inc	QWORD PTR [rax]

; 19936: 
; 19937:         /* "View.MemoryView":1369
; 19938:  *     for i in range(shape[0]):
; 19939:  *         if ndim == 1:
; 19940:  *             if inc:             # <<<<<<<<<<<<<<
; 19941:  *                 Py_INCREF((<PyObject **> data)[0])
; 19942:  *             else:
; 19943:  */
; 19944:         goto __pyx_L6;

	jmp	SHORT $__pyx_L5$27184
$LN5@pyx_memory@6:

; 19945:       }
; 19946: 
; 19947:       /* "View.MemoryView":1372
; 19948:  *                 Py_INCREF((<PyObject **> data)[0])
; 19949:  *             else:
; 19950:  *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
; 19951:  *         else:
; 19952:  *             refcount_objects_in_slice(data, shape + 1, strides + 1,
; 19953:  */
; 19954:       /*else*/ {
; 19955:         Py_DECREF((((PyObject **)__pyx_v_data)[0]));

	mov	rax, QWORD PTR [rbx]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $__pyx_L5$27184
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 19956:       }
; 19957:       __pyx_L6:;
; 19958: 
; 19959:       /* "View.MemoryView":1368
; 19960:  * 
; 19961:  *     for i in range(shape[0]):
; 19962:  *         if ndim == 1:             # <<<<<<<<<<<<<<
; 19963:  *             if inc:
; 19964:  *                 Py_INCREF((<PyObject **> data)[0])
; 19965:  */
; 19966:       goto __pyx_L5;

	mov	rdx, QWORD PTR __pyx_v_shape$[rsp]
$__pyx_L6$27170:
	jmp	SHORT $__pyx_L5$27184
$LN7@pyx_memory@6:

; 19967:     }
; 19968: 
; 19969:     /* "View.MemoryView":1374
; 19970:  *                 Py_DECREF((<PyObject **> data)[0])
; 19971:  *         else:
; 19972:  *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
; 19973:  *                                       ndim - 1, inc)
; 19974:  * 
; 19975:  */
; 19976:     /*else*/ {
; 19977: 
; 19978:       /* "View.MemoryView":1375
; 19979:  *         else:
; 19980:  *             refcount_objects_in_slice(data, shape + 1, strides + 1,
; 19981:  *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
; 19982:  * 
; 19983:  *         data += strides[0]
; 19984:  */
; 19985:       __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);

	lea	r9d, DWORD PTR [rbp-1]
	lea	r8, QWORD PTR [rax+8]
	add	rdx, 8
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], esi
	call	__pyx_memoryview_refcount_objects_in_slice
	mov	rdx, QWORD PTR __pyx_v_shape$[rsp]
$__pyx_L5$27184:

; 19986:     }
; 19987:     __pyx_L5:;
; 19988: 
; 19989:     /* "View.MemoryView":1377
; 19990:  *                                       ndim - 1, inc)
; 19991:  * 
; 19992:  *         data += strides[0]             # <<<<<<<<<<<<<<
; 19993:  * 
; 19994:  * 
; 19995:  */
; 19996:     __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));

	mov	rax, QWORD PTR __pyx_v_strides$[rsp]
	add	rbx, QWORD PTR [rax]
	sub	rdi, 1
	jne	SHORT $LL10@pyx_memory@6
	mov	rsi, QWORD PTR [rsp+80]
$LN8@pyx_memory@6:

; 19997:   }
; 19998: 
; 19999:   /* "View.MemoryView":1363
; 20000:  * 
; 20001:  * @cname('__pyx_memoryview_refcount_objects_in_slice')
; 20002:  * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
; 20003:  *                                     Py_ssize_t *strides, int ndim, bint inc):
; 20004:  *     cdef Py_ssize_t i
; 20005:  */
; 20006: 
; 20007:   /* function exit code */
; 20008:   __Pyx_RefNannyFinishContext();
; 20009: }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
__pyx_memoryview_refcount_objects_in_slice ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview__slice_assign_scalar DD imagerel __pyx_memoryview__slice_assign_scalar
	DD	imagerel __pyx_memoryview__slice_assign_scalar+213
	DD	imagerel $unwind$__pyx_memoryview__slice_assign_scalar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview__slice_assign_scalar DD 060c01H
	DD	0a340cH
	DD	07008520cH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview__slice_assign_scalar
_TEXT	SEGMENT
__pyx_v_data$ = 80
tv193 = 88
__pyx_v_stride$1$ = 88
__pyx_v_shape$ = 88
tv192 = 96
__pyx_v_strides$ = 96
__pyx_v_ndim$ = 104
__pyx_v_itemsize$ = 112
__pyx_v_item$ = 120
__pyx_memoryview__slice_assign_scalar PROC		; COMDAT

; 20067: static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 20068:   CYTHON_UNUSED Py_ssize_t __pyx_v_i;
; 20069:   Py_ssize_t __pyx_v_stride;
; 20070:   Py_ssize_t __pyx_v_extent;
; 20071:   int __pyx_t_1;
; 20072:   Py_ssize_t __pyx_t_2;
; 20073:   Py_ssize_t __pyx_t_3;
; 20074: 
; 20075:   /* "View.MemoryView":1397
; 20076:  *                               size_t itemsize, void *item) nogil:
; 20077:  *     cdef Py_ssize_t i
; 20078:  *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
; 20079:  *     cdef Py_ssize_t extent = shape[0]
; 20080:  * 
; 20081:  */
; 20082:   __pyx_v_stride = (__pyx_v_strides[0]);

	mov	rsi, QWORD PTR [r8]

; 20083: 
; 20084:   /* "View.MemoryView":1398
; 20085:  *     cdef Py_ssize_t i
; 20086:  *     cdef Py_ssize_t stride = strides[0]
; 20087:  *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
; 20088:  * 
; 20089:  *     if ndim == 1:
; 20090:  */
; 20091:   __pyx_v_extent = (__pyx_v_shape[0]);

	mov	rdi, QWORD PTR [rdx]
	mov	rbx, rcx
	mov	QWORD PTR __pyx_v_stride$1$[rsp], rsi

; 20092: 
; 20093:   /* "View.MemoryView":1400
; 20094:  *     cdef Py_ssize_t extent = shape[0]
; 20095:  * 
; 20096:  *     if ndim == 1:             # <<<<<<<<<<<<<<
; 20097:  *         for i in range(extent):
; 20098:  *             memcpy(data, item, itemsize)
; 20099:  */
; 20100:   __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);

	cmp	r9d, 1

; 20101:   if (__pyx_t_1) {

	jne	SHORT $LN7@pyx_memory@7

; 20102: 
; 20103:     /* "View.MemoryView":1401
; 20104:  * 
; 20105:  *     if ndim == 1:
; 20106:  *         for i in range(extent):             # <<<<<<<<<<<<<<
; 20107:  *             memcpy(data, item, itemsize)
; 20108:  *             data += stride
; 20109:  */
; 20110:     __pyx_t_2 = __pyx_v_extent;
; 20111:     for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

	test	rdi, rdi
	jle	$__pyx_L3$27219
	mov	rsi, QWORD PTR __pyx_v_item$[rsp]
	mov	rbp, QWORD PTR __pyx_v_itemsize$[rsp]
	npad	13
$LL6@pyx_memory@7:

; 20112:       __pyx_v_i = __pyx_t_3;
; 20113: 
; 20114:       /* "View.MemoryView":1402
; 20115:  *     if ndim == 1:
; 20116:  *         for i in range(extent):
; 20117:  *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
; 20118:  *             data += stride
; 20119:  *     else:
; 20120:  */
; 20121:       memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

	mov	r8, rbp
	mov	rdx, rsi
	mov	rcx, rbx
	call	memcpy

; 20122: 
; 20123:       /* "View.MemoryView":1403
; 20124:  *         for i in range(extent):
; 20125:  *             memcpy(data, item, itemsize)
; 20126:  *             data += stride             # <<<<<<<<<<<<<<
; 20127:  *     else:
; 20128:  *         for i in range(extent):
; 20129:  */
; 20130:       __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

	add	rbx, QWORD PTR __pyx_v_stride$1$[rsp]
	sub	rdi, 1
	jne	SHORT $LL6@pyx_memory@7

; 20172:     }
; 20173:   }
; 20174:   __pyx_L3:;
; 20175: 
; 20176:   /* "View.MemoryView":1393
; 20177:  * 
; 20178:  * @cname('__pyx_memoryview__slice_assign_scalar')
; 20179:  * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
; 20180:  *                               Py_ssize_t *strides, int ndim,
; 20181:  *                               size_t itemsize, void *item) nogil:
; 20182:  */
; 20183: 
; 20184:   /* function exit code */
; 20185: }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN7@pyx_memory@7:

; 20131:     }
; 20132: 
; 20133:     /* "View.MemoryView":1400
; 20134:  *     cdef Py_ssize_t extent = shape[0]
; 20135:  * 
; 20136:  *     if ndim == 1:             # <<<<<<<<<<<<<<
; 20137:  *         for i in range(extent):
; 20138:  *             memcpy(data, item, itemsize)
; 20139:  */
; 20140:     goto __pyx_L3;
; 20141:   }
; 20142: 
; 20143:   /* "View.MemoryView":1405
; 20144:  *             data += stride
; 20145:  *     else:
; 20146:  *         for i in range(extent):             # <<<<<<<<<<<<<<
; 20147:  *             _slice_assign_scalar(data, shape + 1, strides + 1,
; 20148:  *                                 ndim - 1, itemsize, item)
; 20149:  */
; 20150:   /*else*/ {
; 20151:     __pyx_t_2 = __pyx_v_extent;
; 20152:     for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

	test	rdi, rdi
	jle	SHORT $__pyx_L3$27219
	lea	rax, QWORD PTR [r8+8]
	lea	rcx, QWORD PTR [rdx+8]
	lea	ebp, DWORD PTR [r9-1]
	mov	QWORD PTR tv193[rsp], rax
	mov	QWORD PTR tv192[rsp], rcx
	npad	15
$LL3@pyx_memory@7:

; 20153:       __pyx_v_i = __pyx_t_3;
; 20154: 
; 20155:       /* "View.MemoryView":1406
; 20156:  *     else:
; 20157:  *         for i in range(extent):
; 20158:  *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
; 20159:  *                                 ndim - 1, itemsize, item)
; 20160:  *             data += stride
; 20161:  */
; 20162:       __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

	mov	rdx, QWORD PTR __pyx_v_item$[rsp]
	mov	r9d, ebp
	mov	r8, rax
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, QWORD PTR __pyx_v_itemsize$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	rdx, rcx
	mov	rcx, rbx
	call	__pyx_memoryview__slice_assign_scalar
	mov	rax, QWORD PTR tv193[rsp]
	mov	rcx, QWORD PTR tv192[rsp]

; 20163: 
; 20164:       /* "View.MemoryView":1408
; 20165:  *             _slice_assign_scalar(data, shape + 1, strides + 1,
; 20166:  *                                 ndim - 1, itemsize, item)
; 20167:  *             data += stride             # <<<<<<<<<<<<<<
; 20168:  * 
; 20169:  * 
; 20170:  */
; 20171:       __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

	add	rbx, rsi
	sub	rdi, 1
	jne	SHORT $LL3@pyx_memory@7
$__pyx_L3$27219:

; 20172:     }
; 20173:   }
; 20174:   __pyx_L3:;
; 20175: 
; 20176:   /* "View.MemoryView":1393
; 20177:  * 
; 20178:  * @cname('__pyx_memoryview__slice_assign_scalar')
; 20179:  * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
; 20180:  *                               Py_ssize_t *strides, int ndim,
; 20181:  *                               size_t itemsize, void *item) nogil:
; 20182:  */
; 20183: 
; 20184:   /* function exit code */
; 20185: }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
__pyx_memoryview__slice_assign_scalar ENDP
_TEXT	ENDS
EXTRN	__imp_PyInt_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_sq_item_array DD imagerel __pyx_sq_item_array
	DD	imagerel __pyx_sq_item_array+92
	DD	imagerel $unwind$__pyx_sq_item_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_sq_item_array DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_sq_item_array
_TEXT	SEGMENT
o$ = 48
i$ = 56
__pyx_sq_item_array PROC				; COMDAT

; 20705: static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 20706:   PyObject *r;
; 20707:   PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

	mov	rcx, rdx
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN6@pyx_sq_ite

; 20711: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@pyx_sq_ite:

; 20708:   r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

	mov	rax, QWORD PTR [rdi+8]
	mov	rdx, rbx
	mov	rcx, rdi
	mov	r8, QWORD PTR [rax+112]
	call	QWORD PTR [r8+8]

; 20709:   Py_DECREF(x);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN4@pyx_sq_ite
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@pyx_sq_ite:

; 20710:   return r;

	mov	rax, rdi

; 20711: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_sq_item_array ENDP
_TEXT	ENDS
EXTRN	__imp_PyBaseObject_Type:BYTE
_BSS	SEGMENT
	ALIGN	8

__pyx_empty_tuple DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_new_Enum DD imagerel __pyx_tp_new_Enum
	DD	imagerel __pyx_tp_new_Enum+92
	DD	imagerel $unwind$__pyx_tp_new_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_new_Enum DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_new_Enum
_TEXT	SEGMENT
t$ = 48
a$ = 56
k$ = 64
__pyx_tp_new_Enum PROC					; COMDAT

; 20843: static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

	sub	rsp, 40					; 00000028H

; 20844:   struct __pyx_MemviewEnum_obj *p;
; 20845:   PyObject *o;
; 20846:   if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

	bt	DWORD PTR [rcx+168], 20
	mov	rax, rcx
	jb	SHORT $LN3@pyx_tp_new

; 20847:     o = (*t->tp_alloc)(t, 0);

	xor	edx, edx
	call	QWORD PTR [rax+304]

; 20848:   } else {

	jmp	SHORT $LN6@pyx_tp_new
$LN3@pyx_tp_new:

; 20849:     o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

	mov	rax, QWORD PTR __imp_PyBaseObject_Type
	mov	rdx, QWORD PTR __pyx_empty_tuple
	xor	r8d, r8d
	call	QWORD PTR [rax+312]
$LN6@pyx_tp_new:
	mov	r11, rax

; 20850:   }
; 20851:   if (unlikely(!o)) return 0;

	test	rax, rax
	jne	SHORT $LN1@pyx_tp_new

; 20855: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@pyx_tp_new:

; 20852:   p = ((struct __pyx_MemviewEnum_obj *)o);
; 20853:   p->name = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [r11+16], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 20854:   return o;

	mov	rax, r11

; 20855: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_tp_new_Enum ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_dealloc_Enum DD imagerel __pyx_tp_dealloc_Enum
	DD	imagerel __pyx_tp_dealloc_Enum+64
	DD	imagerel $unwind$__pyx_tp_dealloc_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_dealloc_Enum DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_dealloc_Enum
_TEXT	SEGMENT
o$ = 48
__pyx_tp_dealloc_Enum PROC				; COMDAT

; 20857: static void __pyx_tp_dealloc_Enum(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 20858:   struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
; 20859:   #if CYTHON_USE_TP_FINALIZE
; 20860:   if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
; 20861:     if (PyObject_CallFinalizerFromDealloc(o)) return;
; 20862:   }
; 20863:   #endif
; 20864:   PyObject_GC_UnTrack(o);

	call	QWORD PTR __imp_PyObject_GC_UnTrack

; 20865:   Py_CLEAR(p->name);

	mov	rcx, QWORD PTR [rbx+16]
	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_dea
	mov	QWORD PTR [rbx+16], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN3@pyx_tp_dea
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@pyx_tp_dea:

; 20866:   (*Py_TYPE(o)->tp_free)(o);

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx

; 20867: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR [rax+320]
__pyx_tp_dealloc_Enum ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_traverse_Enum DD imagerel __pyx_tp_traverse_Enum
	DD	imagerel __pyx_tp_traverse_Enum+32
	DD	imagerel $unwind$__pyx_tp_traverse_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_traverse_Enum DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_traverse_Enum
_TEXT	SEGMENT
o$ = 48
v$ = 56
a$ = 64
__pyx_tp_traverse_Enum PROC				; COMDAT

; 20869: static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {

	sub	rsp, 40					; 00000028H

; 20870:   int e;
; 20871:   struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
; 20872:   if (p->name) {

	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, rdx
	test	rcx, rcx
	je	SHORT $LN1@pyx_tp_tra

; 20873:     e = (*v)(p->name, a); if (e) return e;

	mov	rdx, r8
	call	rax
	test	eax, eax
	jne	SHORT $LN3@pyx_tp_tra
$LN1@pyx_tp_tra:

; 20874:   }
; 20875:   return 0;

	xor	eax, eax
$LN3@pyx_tp_tra:

; 20876: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_tp_traverse_Enum ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_clear_Enum DD imagerel __pyx_tp_clear_Enum
	DD	imagerel __pyx_tp_clear_Enum+57
	DD	imagerel $unwind$__pyx_tp_clear_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_clear_Enum DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_clear_Enum
_TEXT	SEGMENT
o$ = 48
__pyx_tp_clear_Enum PROC				; COMDAT

; 20878: static int __pyx_tp_clear_Enum(PyObject *o) {

	sub	rsp, 40					; 00000028H

; 20879:   PyObject* tmp;
; 20880:   struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
; 20881:   tmp = ((PyObject*)p->name);
; 20882:   p->name = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rdx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 20883:   Py_XDECREF(tmp);

	test	rdx, rdx
	je	SHORT $LN13@pyx_tp_cle
	add	QWORD PTR [rdx], -1
	jne	SHORT $LN13@pyx_tp_cle
	mov	rax, QWORD PTR [rdx+8]
	mov	rcx, rdx
	call	QWORD PTR [rax+48]
$LN13@pyx_tp_cle:

; 20884:   return 0;

	xor	eax, eax

; 20885: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_tp_clear_Enum ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_traverse_memoryview DD imagerel __pyx_tp_traverse_memoryview
	DD	imagerel __pyx_tp_traverse_memoryview+114
	DD	imagerel $unwind$__pyx_tp_traverse_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_traverse_memoryview DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_traverse_memoryview
_TEXT	SEGMENT
o$ = 48
v$ = 56
a$ = 64
__pyx_tp_traverse_memoryview PROC			; COMDAT

; 20996: static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 20997:   int e;
; 20998:   struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
; 20999:   if (p->obj) {

	mov	rcx, QWORD PTR [rcx+24]
	mov	rdi, r8
	mov	rsi, rdx
	test	rcx, rcx
	je	SHORT $LN7@pyx_tp_tra@2

; 21000:     e = (*v)(p->obj, a); if (e) return e;

	mov	rdx, r8
	call	rsi
	test	eax, eax
	jne	SHORT $LN9@pyx_tp_tra@2
$LN7@pyx_tp_tra@2:

; 21001:   }
; 21002:   if (p->_size) {

	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN5@pyx_tp_tra@2

; 21003:     e = (*v)(p->_size, a); if (e) return e;

	mov	rdx, rdi
	call	rsi
	test	eax, eax
	jne	SHORT $LN9@pyx_tp_tra@2
$LN5@pyx_tp_tra@2:

; 21004:   }
; 21005:   if (p->_array_interface) {

	mov	rcx, QWORD PTR [rbx+40]
	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_tra@2

; 21006:     e = (*v)(p->_array_interface, a); if (e) return e;

	mov	rdx, rdi
	call	rsi
	test	eax, eax
	jne	SHORT $LN9@pyx_tp_tra@2
$LN3@pyx_tp_tra@2:

; 21007:   }
; 21008:   if (p->view.obj) {

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN1@pyx_tp_tra@2

; 21009:     e = (*v)(p->view.obj, a); if (e) return e;

	mov	rdx, rdi
	call	rsi
	test	eax, eax
	jne	SHORT $LN9@pyx_tp_tra@2
$LN1@pyx_tp_tra@2:

; 21010:   }
; 21011:   return 0;

	xor	eax, eax
$LN9@pyx_tp_tra@2:

; 21012: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_tp_traverse_memoryview ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_clear_memoryview DD imagerel __pyx_tp_clear_memoryview
	DD	imagerel __pyx_tp_clear_memoryview+176
	DD	imagerel $unwind$__pyx_tp_clear_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_clear_memoryview DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_clear_memoryview
_TEXT	SEGMENT
o$ = 48
__pyx_tp_clear_memoryview PROC				; COMDAT

; 21014: static int __pyx_tp_clear_memoryview(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 21015:   PyObject* tmp;
; 21016:   struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
; 21017:   tmp = ((PyObject*)p->obj);
; 21018:   p->obj = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rbx, rcx
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rbx+24], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 21019:   Py_XDECREF(tmp);

	test	rcx, rcx
	je	SHORT $LN32@pyx_tp_cle@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN32@pyx_tp_cle@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN32@pyx_tp_cle@2:

; 21020:   tmp = ((PyObject*)p->_size);
; 21021:   p->_size = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR [rbx+32]
	mov	QWORD PTR [rbx+32], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 21022:   Py_XDECREF(tmp);

	test	rcx, rcx
	je	SHORT $LN22@pyx_tp_cle@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN22@pyx_tp_cle@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN22@pyx_tp_cle@2:

; 21023:   tmp = ((PyObject*)p->_array_interface);
; 21024:   p->_array_interface = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR [rbx+40]
	mov	QWORD PTR [rbx+40], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 21025:   Py_XDECREF(tmp);

	test	rcx, rcx
	je	SHORT $LN12@pyx_tp_cle@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN12@pyx_tp_cle@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN12@pyx_tp_cle@2:

; 21026:   Py_CLEAR(p->view.obj);

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN42@pyx_tp_cle@2
	mov	QWORD PTR [rbx+80], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN42@pyx_tp_cle@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN42@pyx_tp_cle@2:

; 21027:   return 0;

	xor	eax, eax

; 21028: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_tp_clear_memoryview ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_sq_item_memoryview DD imagerel __pyx_sq_item_memoryview
	DD	imagerel __pyx_sq_item_memoryview+92
	DD	imagerel $unwind$__pyx_sq_item_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_sq_item_memoryview DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_sq_item_memoryview
_TEXT	SEGMENT
o$ = 48
i$ = 56
__pyx_sq_item_memoryview PROC				; COMDAT

; 21029: static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 21030:   PyObject *r;
; 21031:   PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

	mov	rcx, rdx
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN6@pyx_sq_ite@2

; 21035: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@pyx_sq_ite@2:

; 21032:   r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

	mov	rax, QWORD PTR [rdi+8]
	mov	rdx, rbx
	mov	rcx, rdi
	mov	r8, QWORD PTR [rax+112]
	call	QWORD PTR [r8+8]

; 21033:   Py_DECREF(x);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN4@pyx_sq_ite@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@pyx_sq_ite@2:

; 21034:   return r;

	mov	rax, rdi

; 21035: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_sq_item_memoryview ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_traverse__memoryviewslice DD imagerel __pyx_tp_traverse__memoryviewslice
	DD	imagerel __pyx_tp_traverse__memoryviewslice+72
	DD	imagerel $unwind$__pyx_tp_traverse__memoryviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_traverse__memoryviewslice DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_traverse__memoryviewslice
_TEXT	SEGMENT
o$ = 48
v$ = 56
a$ = 64
__pyx_tp_traverse__memoryviewslice PROC			; COMDAT

; 21234: static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 21235:   int e;
; 21236:   struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
; 21237:   e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;

	call	__pyx_tp_traverse_memoryview
	test	eax, eax
	jne	SHORT $LN4@pyx_tp_tra@3

; 21238:   if (p->from_object) {

	mov	rcx, QWORD PTR [rbx+392]
	test	rcx, rcx
	je	SHORT $LN1@pyx_tp_tra@3

; 21239:     e = (*v)(p->from_object, a); if (e) return e;

	mov	rdx, rdi
	call	rsi
	test	eax, eax
	jne	SHORT $LN4@pyx_tp_tra@3
$LN1@pyx_tp_tra@3:

; 21240:   }
; 21241:   return 0;

	xor	eax, eax
$LN4@pyx_tp_tra@3:

; 21242: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_tp_traverse__memoryviewslice ENDP
_TEXT	ENDS
EXTRN	__imp_PyCode_New:PROC
EXTRN	__imp_PyTuple_New:PROC
EXTRN	__imp_PyTuple_Pack:PROC
EXTRN	__imp_PySlice_New:PROC
_BSS	SEGMENT
__pyx_codeobj__47 DQ 01H DUP (?)
__pyx_tuple__46 DQ 01H DUP (?)
__pyx_tuple__45 DQ 01H DUP (?)
__pyx_tuple__44 DQ 01H DUP (?)
__pyx_tuple__43 DQ 01H DUP (?)
__pyx_tuple__42 DQ 01H DUP (?)
__pyx_tuple__41 DQ 01H DUP (?)
__pyx_codeobj__40 DQ 01H DUP (?)
__pyx_tuple__39 DQ 01H DUP (?)
__pyx_codeobj__38 DQ 01H DUP (?)
__pyx_tuple__37 DQ 01H DUP (?)
__pyx_codeobj__36 DQ 01H DUP (?)
__pyx_tuple__35 DQ 01H DUP (?)
__pyx_codeobj__34 DQ 01H DUP (?)
__pyx_tuple__33 DQ 01H DUP (?)
__pyx_codeobj__32 DQ 01H DUP (?)
__pyx_empty_bytes DQ 01H DUP (?)
__pyx_tuple__31 DQ 01H DUP (?)
__pyx_tuple__30 DQ 01H DUP (?)
__pyx_tuple__29 DQ 01H DUP (?)
__pyx_tuple__28 DQ 01H DUP (?)
__pyx_slice__27 DQ 01H DUP (?)
__pyx_slice__26 DQ 01H DUP (?)
__pyx_slice__25 DQ 01H DUP (?)
__pyx_tuple__24 DQ 01H DUP (?)
__pyx_tuple__23 DQ 01H DUP (?)
__pyx_int_neg_1 DQ 01H DUP (?)
__pyx_tuple__22 DQ 01H DUP (?)
__pyx_tuple__21 DQ 01H DUP (?)
__pyx_tuple__20 DQ 01H DUP (?)
__pyx_tuple__19 DQ 01H DUP (?)
__pyx_tuple__18 DQ 01H DUP (?)
__pyx_tuple__17 DQ 01H DUP (?)
__pyx_tuple__16 DQ 01H DUP (?)
__pyx_tuple__15 DQ 01H DUP (?)
__pyx_tuple__14 DQ 01H DUP (?)
__pyx_tuple__13 DQ 01H DUP (?)
__pyx_tuple__12 DQ 01H DUP (?)
__pyx_tuple__11 DQ 01H DUP (?)
__pyx_tuple__10 DQ 01H DUP (?)
__pyx_tuple__9 DQ 01H DUP (?)
__pyx_tuple__8 DQ 01H DUP (?)
__pyx_tuple__7 DQ 01H DUP (?)
__pyx_tuple__6 DQ 01H DUP (?)
__pyx_tuple__5 DQ 01H DUP (?)
__pyx_tuple__4 DQ 01H DUP (?)
__pyx_tuple__3 DQ 01H DUP (?)
__pyx_slice__2 DQ 01H DUP (?)
__pyx_filename DQ 01H DUP (?)
__pyx_lineno DD	01H DUP (?)
	ALIGN	8

__pyx_slice_ DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_InitCachedConstants DD imagerel __Pyx_InitCachedConstants
	DD	imagerel __Pyx_InitCachedConstants+3632
	DD	imagerel $unwind$__Pyx_InitCachedConstants
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_InitCachedConstants DD 010401H
	DD	0e204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_InitCachedConstants
_TEXT	SEGMENT
__Pyx_InitCachedConstants PROC				; COMDAT

; 21517: static int __Pyx_InitCachedConstants(void) {

	sub	rsp, 120				; 00000078H

; 21518:   __Pyx_RefNannyDeclarations
; 21519:   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
; 21520: 
; 21521:   /* "rsrpsinr.pyx":161
; 21522:  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')
; 21523:  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 21524:  *     bIndex[:] = -1             # <<<<<<<<<<<<<<
; 21525:  *     noise[:] = pow(10., NOISE/10.0)
; 21526:  * 
; 21527:  */
; 21528:   __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 161, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	r8, rcx
	mov	rdx, rcx
	call	QWORD PTR __imp_PySlice_New
	mov	QWORD PTR __pyx_slice_, rax
	test	rax, rax
	jne	SHORT $LN47@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 161		; 000000a1H
	mov	DWORD PTR __pyx_clineno, 21528		; 00005418H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN47@Pyx_InitCa:

; 21529:   __Pyx_GOTREF(__pyx_slice_);
; 21530:   __Pyx_GIVEREF(__pyx_slice_);
; 21531: 
; 21532:   /* "rsrpsinr.pyx":162
; 21533:  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 21534:  *     bIndex[:] = -1
; 21535:  *     noise[:] = pow(10., NOISE/10.0)             # <<<<<<<<<<<<<<
; 21536:  * 
; 21537:  *     cdef:
; 21538:  */
; 21539:   __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 162, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	r8, rcx
	mov	rdx, rcx
	call	QWORD PTR __imp_PySlice_New
	mov	QWORD PTR __pyx_slice__2, rax
	test	rax, rax
	jne	SHORT $LN46@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 21539		; 00005423H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_1$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN46@Pyx_InitCa:

; 21540:   __Pyx_GOTREF(__pyx_slice__2);
; 21541:   __Pyx_GIVEREF(__pyx_slice__2);
; 21542: 
; 21543:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
; 21544:  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
; 21545:  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
; 21546:  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
; 21547:  * 
; 21548:  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
; 21549:  */
; 21550:   __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 235, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_ndarray_is_not_C_contiguous
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__3, rax
	test	rax, rax
	jne	SHORT $LN45@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 235		; 000000ebH
	mov	DWORD PTR __pyx_clineno, 21550		; 0000542eH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_2$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN45@Pyx_InitCa:

; 21551:   __Pyx_GOTREF(__pyx_tuple__3);
; 21552:   __Pyx_GIVEREF(__pyx_tuple__3);
; 21553: 
; 21554:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
; 21555:  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
; 21556:  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
; 21557:  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
; 21558:  * 
; 21559:  *             info.buf = PyArray_DATA(self)
; 21560:  */
; 21561:   __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 239, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_ndarray_is_not_Fortran_contiguou
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__4, rax
	test	rax, rax
	jne	SHORT $LN44@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 239		; 000000efH
	mov	DWORD PTR __pyx_clineno, 21561		; 00005439H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_3$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN44@Pyx_InitCa:

; 21562:   __Pyx_GOTREF(__pyx_tuple__4);
; 21563:   __Pyx_GIVEREF(__pyx_tuple__4);
; 21564: 
; 21565:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
; 21566:  *                 if ((descr.byteorder == c'>' and little_endian) or
; 21567:  *                     (descr.byteorder == c'<' and not little_endian)):
; 21568:  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
; 21569:  *                 if   t == NPY_BYTE:        f = "b"
; 21570:  *                 elif t == NPY_UBYTE:       f = "B"
; 21571:  */
; 21572:   __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 276, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_Non_native_byte_order_not_suppor
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__5, rax
	test	rax, rax
	jne	SHORT $LN43@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 276		; 00000114H
	mov	DWORD PTR __pyx_clineno, 21572		; 00005444H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_4$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN43@Pyx_InitCa:

; 21573:   __Pyx_GOTREF(__pyx_tuple__5);
; 21574:   __Pyx_GIVEREF(__pyx_tuple__5);
; 21575: 
; 21576:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
; 21577:  * 
; 21578:  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
; 21579:  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
; 21580:  * 
; 21581:  *         if ((child.byteorder == c'>' and little_endian) or
; 21582:  */
; 21583:   __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 823, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_Format_string_allocated_too_shor
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__6, rax
	test	rax, rax
	jne	SHORT $LN42@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 823		; 00000337H
	mov	DWORD PTR __pyx_clineno, 21583		; 0000544fH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_5$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN42@Pyx_InitCa:

; 21584:   __Pyx_GOTREF(__pyx_tuple__6);
; 21585:   __Pyx_GIVEREF(__pyx_tuple__6);
; 21586: 
; 21587:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
; 21588:  *         if ((child.byteorder == c'>' and little_endian) or
; 21589:  *             (child.byteorder == c'<' and not little_endian)):
; 21590:  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
; 21591:  *             # One could encode it in the format string and have Cython
; 21592:  *             # complain instead, BUT: < and > in format strings also imply
; 21593:  */
; 21594:   __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 827, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_Non_native_byte_order_not_suppor
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__7, rax
	test	rax, rax
	jne	SHORT $LN41@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 827		; 0000033bH
	mov	DWORD PTR __pyx_clineno, 21594		; 0000545aH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_6$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN41@Pyx_InitCa:

; 21595:   __Pyx_GOTREF(__pyx_tuple__7);
; 21596:   __Pyx_GIVEREF(__pyx_tuple__7);
; 21597: 
; 21598:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
; 21599:  *             t = child.type_num
; 21600:  *             if end - f < 5:
; 21601:  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
; 21602:  * 
; 21603:  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 21604:  */
; 21605:   __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 847, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_u_Format_string_allocated_too_shor_2
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__8, rax
	test	rax, rax
	jne	SHORT $LN40@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 847		; 0000034fH
	mov	DWORD PTR __pyx_clineno, 21605		; 00005465H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_7$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN40@Pyx_InitCa:

; 21606:   __Pyx_GOTREF(__pyx_tuple__8);
; 21607:   __Pyx_GIVEREF(__pyx_tuple__8);
; 21608: 
; 21609:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1013
; 21610:  *         _import_array()
; 21611:  *     except Exception:
; 21612:  *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
; 21613:  * 
; 21614:  * cdef inline int import_umath() except -1:
; 21615:  */
; 21616:   __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1013, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_numpy_core_multiarray_failed_to
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__9, rax
	test	rax, rax
	jne	SHORT $LN39@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 1013		; 000003f5H
	mov	DWORD PTR __pyx_clineno, 21616		; 00005470H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_8$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN39@Pyx_InitCa:

; 21617:   __Pyx_GOTREF(__pyx_tuple__9);
; 21618:   __Pyx_GIVEREF(__pyx_tuple__9);
; 21619: 
; 21620:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1019
; 21621:  *         _import_umath()
; 21622:  *     except Exception:
; 21623:  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
; 21624:  * 
; 21625:  * cdef inline int import_ufunc() except -1:
; 21626:  */
; 21627:   __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 1019, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_numpy_core_umath_failed_to_impor
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__10, rax
	test	rax, rax
	jne	SHORT $LN38@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 1019		; 000003fbH
	mov	DWORD PTR __pyx_clineno, 21627		; 0000547bH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_9$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN38@Pyx_InitCa:

; 21628:   __Pyx_GOTREF(__pyx_tuple__10);
; 21629:   __Pyx_GIVEREF(__pyx_tuple__10);
; 21630: 
; 21631:   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1025
; 21632:  *         _import_umath()
; 21633:  *     except Exception:
; 21634:  *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
; 21635:  */
; 21636:   __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1025, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_numpy_core_umath_failed_to_impor
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__11, rax
	test	rax, rax
	jne	SHORT $LN37@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 1025		; 00000401H
	mov	DWORD PTR __pyx_clineno, 21636		; 00005484H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_10$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN37@Pyx_InitCa:

; 21637:   __Pyx_GOTREF(__pyx_tuple__11);
; 21638:   __Pyx_GIVEREF(__pyx_tuple__11);
; 21639: 
; 21640:   /* "View.MemoryView":131
; 21641:  * 
; 21642:  *         if not self.ndim:
; 21643:  *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
; 21644:  * 
; 21645:  *         if itemsize <= 0:
; 21646:  */
; 21647:   __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 131, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_Empty_shape_tuple_for_cython_arr
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__12, rax
	test	rax, rax
	jne	SHORT $LN36@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 131		; 00000083H
	mov	DWORD PTR __pyx_clineno, 21647		; 0000548fH
	jmp	$LN51@Pyx_InitCa
$LN36@Pyx_InitCa:

; 21648:   __Pyx_GOTREF(__pyx_tuple__12);
; 21649:   __Pyx_GIVEREF(__pyx_tuple__12);
; 21650: 
; 21651:   /* "View.MemoryView":134
; 21652:  * 
; 21653:  *         if itemsize <= 0:
; 21654:  *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
; 21655:  * 
; 21656:  *         if not isinstance(format, bytes):
; 21657:  */
; 21658:   __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 134, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_itemsize_0_for_cython_array
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__13, rax
	test	rax, rax
	jne	SHORT $LN35@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 134		; 00000086H
	mov	DWORD PTR __pyx_clineno, 21658		; 0000549aH
	jmp	$LN51@Pyx_InitCa
$LN35@Pyx_InitCa:

; 21659:   __Pyx_GOTREF(__pyx_tuple__13);
; 21660:   __Pyx_GIVEREF(__pyx_tuple__13);
; 21661: 
; 21662:   /* "View.MemoryView":137
; 21663:  * 
; 21664:  *         if not isinstance(format, bytes):
; 21665:  *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
; 21666:  *         self._format = format  # keep a reference to the byte string
; 21667:  *         self.format = self._format
; 21668:  */
; 21669:   __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 137, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_ASCII
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__14, rax
	test	rax, rax
	jne	SHORT $LN34@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 137		; 00000089H
	mov	DWORD PTR __pyx_clineno, 21669		; 000054a5H
	jmp	$LN51@Pyx_InitCa
$LN34@Pyx_InitCa:

; 21670:   __Pyx_GOTREF(__pyx_tuple__14);
; 21671:   __Pyx_GIVEREF(__pyx_tuple__14);
; 21672: 
; 21673:   /* "View.MemoryView":146
; 21674:  * 
; 21675:  *         if not self._shape:
; 21676:  *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
; 21677:  * 
; 21678:  * 
; 21679:  */
; 21680:   __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 146, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_unable_to_allocate_shape_and_str
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__15, rax
	test	rax, rax
	jne	SHORT $LN33@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 146		; 00000092H
	mov	DWORD PTR __pyx_clineno, 21680		; 000054b0H
	jmp	$LN51@Pyx_InitCa
$LN33@Pyx_InitCa:

; 21681:   __Pyx_GOTREF(__pyx_tuple__15);
; 21682:   __Pyx_GIVEREF(__pyx_tuple__15);
; 21683: 
; 21684:   /* "View.MemoryView":174
; 21685:  *             self.data = <char *>malloc(self.len)
; 21686:  *             if not self.data:
; 21687:  *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
; 21688:  * 
; 21689:  *             if self.dtype_is_object:
; 21690:  */
; 21691:   __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 174, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_unable_to_allocate_array_data
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__16, rax
	test	rax, rax
	jne	SHORT $LN32@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 174		; 000000aeH
	mov	DWORD PTR __pyx_clineno, 21691		; 000054bbH
	jmp	$LN51@Pyx_InitCa
$LN32@Pyx_InitCa:

; 21692:   __Pyx_GOTREF(__pyx_tuple__16);
; 21693:   __Pyx_GIVEREF(__pyx_tuple__16);
; 21694: 
; 21695:   /* "View.MemoryView":190
; 21696:  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 21697:  *         if not (flags & bufmode):
; 21698:  *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
; 21699:  *         info.buf = self.data
; 21700:  *         info.len = self.len
; 21701:  */
; 21702:   __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 190, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_Can_only_create_a_buffer_that_is
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__17, rax
	test	rax, rax
	jne	SHORT $LN31@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 190		; 000000beH
	mov	DWORD PTR __pyx_clineno, 21702		; 000054c6H
	jmp	$LN51@Pyx_InitCa
$LN31@Pyx_InitCa:

; 21703:   __Pyx_GOTREF(__pyx_tuple__17);
; 21704:   __Pyx_GIVEREF(__pyx_tuple__17);
; 21705: 
; 21706:   /* "(tree fragment)":2
; 21707:  * def __reduce_cython__(self):
; 21708:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21709:  * def __setstate_cython__(self, __pyx_state):
; 21710:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21711:  */
; 21712:   __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__18, rax
	test	rax, rax
	jne	SHORT $LN30@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 2
	mov	DWORD PTR __pyx_clineno, 21712		; 000054d0H
	jmp	$LN51@Pyx_InitCa
$LN30@Pyx_InitCa:

; 21713:   __Pyx_GOTREF(__pyx_tuple__18);
; 21714:   __Pyx_GIVEREF(__pyx_tuple__18);
; 21715: 
; 21716:   /* "(tree fragment)":4
; 21717:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21718:  * def __setstate_cython__(self, __pyx_state):
; 21719:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21720:  */
; 21721:   __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__19, rax
	test	rax, rax
	jne	SHORT $LN29@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 21721		; 000054d9H
	jmp	$LN51@Pyx_InitCa
$LN29@Pyx_InitCa:

; 21722:   __Pyx_GOTREF(__pyx_tuple__19);
; 21723:   __Pyx_GIVEREF(__pyx_tuple__19);
; 21724: 
; 21725:   /* "View.MemoryView":486
; 21726:  *             result = struct.unpack(self.view.format, bytesitem)
; 21727:  *         except struct.error:
; 21728:  *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
; 21729:  *         else:
; 21730:  *             if len(self.view.format) == 1:
; 21731:  */
; 21732:   __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 486, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_Unable_to_convert_item_to_object
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__20, rax
	test	rax, rax
	jne	SHORT $LN28@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 486		; 000001e6H
	mov	DWORD PTR __pyx_clineno, 21732		; 000054e4H
	jmp	$LN51@Pyx_InitCa
$LN28@Pyx_InitCa:

; 21733:   __Pyx_GOTREF(__pyx_tuple__20);
; 21734:   __Pyx_GIVEREF(__pyx_tuple__20);
; 21735: 
; 21736:   /* "View.MemoryView":558
; 21737:  *         if self.view.strides == NULL:
; 21738:  * 
; 21739:  *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
; 21740:  * 
; 21741:  *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
; 21742:  */
; 21743:   __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 558, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_Buffer_view_does_not_expose_stri
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__21, rax
	test	rax, rax
	jne	SHORT $LN27@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 558		; 0000022eH
	mov	DWORD PTR __pyx_clineno, 21743		; 000054efH
	jmp	$LN51@Pyx_InitCa
$LN27@Pyx_InitCa:

; 21744:   __Pyx_GOTREF(__pyx_tuple__21);
; 21745:   __Pyx_GIVEREF(__pyx_tuple__21);
; 21746: 
; 21747:   /* "View.MemoryView":565
; 21748:  *     def suboffsets(self):
; 21749:  *         if self.view.suboffsets == NULL:
; 21750:  *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
; 21751:  * 
; 21752:  *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
; 21753:  */
; 21754:   __pyx_tuple__22 = PyTuple_New(1); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 565, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__22, rax
	test	rax, rax
	jne	SHORT $LN26@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 565		; 00000235H
	mov	DWORD PTR __pyx_clineno, 21754		; 000054faH
	jmp	$LN51@Pyx_InitCa
$LN26@Pyx_InitCa:

; 21755:   __Pyx_GOTREF(__pyx_tuple__22);
; 21756:   __Pyx_INCREF(__pyx_int_neg_1);

	mov	rax, QWORD PTR __pyx_int_neg_1

; 21757:   __Pyx_GIVEREF(__pyx_int_neg_1);
; 21758:   PyTuple_SET_ITEM(__pyx_tuple__22, 0, __pyx_int_neg_1);
; 21759:   __Pyx_GIVEREF(__pyx_tuple__22);
; 21760: 
; 21761:   /* "(tree fragment)":2
; 21762:  * def __reduce_cython__(self):
; 21763:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21764:  * def __setstate_cython__(self, __pyx_state):
; 21765:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21766:  */
; 21767:   __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	ecx, 1
	inc	QWORD PTR [rax]
	mov	QWORD PTR [r11+24], rax
	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__23, rax
	test	rax, rax
	jne	SHORT $LN25@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 2
	mov	DWORD PTR __pyx_clineno, 21767		; 00005507H
	jmp	$LN51@Pyx_InitCa
$LN25@Pyx_InitCa:

; 21768:   __Pyx_GOTREF(__pyx_tuple__23);
; 21769:   __Pyx_GIVEREF(__pyx_tuple__23);
; 21770: 
; 21771:   /* "(tree fragment)":4
; 21772:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21773:  * def __setstate_cython__(self, __pyx_state):
; 21774:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21775:  */
; 21776:   __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__24, rax
	test	rax, rax
	jne	SHORT $LN24@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 21776		; 00005510H
	jmp	$LN51@Pyx_InitCa
$LN24@Pyx_InitCa:

; 21777:   __Pyx_GOTREF(__pyx_tuple__24);
; 21778:   __Pyx_GIVEREF(__pyx_tuple__24);
; 21779: 
; 21780:   /* "View.MemoryView":670
; 21781:  *         if item is Ellipsis:
; 21782:  *             if not seen_ellipsis:
; 21783:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
; 21784:  *                 seen_ellipsis = True
; 21785:  *             else:
; 21786:  */
; 21787:   __pyx_slice__25 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__25)) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	r8, rcx
	mov	rdx, rcx
	call	QWORD PTR __imp_PySlice_New
	mov	QWORD PTR __pyx_slice__25, rax
	test	rax, rax
	jne	SHORT $LN23@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 670		; 0000029eH
	mov	DWORD PTR __pyx_clineno, 21787		; 0000551bH
	jmp	$LN51@Pyx_InitCa
$LN23@Pyx_InitCa:

; 21788:   __Pyx_GOTREF(__pyx_slice__25);
; 21789:   __Pyx_GIVEREF(__pyx_slice__25);
; 21790: 
; 21791:   /* "View.MemoryView":673
; 21792:  *                 seen_ellipsis = True
; 21793:  *             else:
; 21794:  *                 result.append(slice(None))             # <<<<<<<<<<<<<<
; 21795:  *             have_slices = True
; 21796:  *         else:
; 21797:  */
; 21798:   __pyx_slice__26 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__26)) __PYX_ERR(2, 673, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	r8, rcx
	mov	rdx, rcx
	call	QWORD PTR __imp_PySlice_New
	mov	QWORD PTR __pyx_slice__26, rax
	test	rax, rax
	jne	SHORT $LN22@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 673		; 000002a1H
	mov	DWORD PTR __pyx_clineno, 21798		; 00005526H
	jmp	$LN51@Pyx_InitCa
$LN22@Pyx_InitCa:

; 21799:   __Pyx_GOTREF(__pyx_slice__26);
; 21800:   __Pyx_GIVEREF(__pyx_slice__26);
; 21801: 
; 21802:   /* "View.MemoryView":684
; 21803:  *     nslices = ndim - len(result)
; 21804:  *     if nslices:
; 21805:  *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
; 21806:  * 
; 21807:  *     return have_slices or nslices, tuple(result)
; 21808:  */
; 21809:   __pyx_slice__27 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__27)) __PYX_ERR(2, 684, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	r8, rcx
	mov	rdx, rcx
	call	QWORD PTR __imp_PySlice_New
	mov	QWORD PTR __pyx_slice__27, rax
	test	rax, rax
	jne	SHORT $LN21@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 684		; 000002acH
	mov	DWORD PTR __pyx_clineno, 21809		; 00005531H
	jmp	$LN51@Pyx_InitCa
$LN21@Pyx_InitCa:

; 21810:   __Pyx_GOTREF(__pyx_slice__27);
; 21811:   __Pyx_GIVEREF(__pyx_slice__27);
; 21812: 
; 21813:   /* "View.MemoryView":691
; 21814:  *     for suboffset in suboffsets[:ndim]:
; 21815:  *         if suboffset >= 0:
; 21816:  *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
; 21817:  * 
; 21818:  * 
; 21819:  */
; 21820:   __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 691, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_Indirect_dimensions_not_supporte
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__28, rax
	test	rax, rax
	jne	SHORT $LN20@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 691		; 000002b3H
	mov	DWORD PTR __pyx_clineno, 21820		; 0000553cH
	jmp	$LN51@Pyx_InitCa
$LN20@Pyx_InitCa:

; 21821:   __Pyx_GOTREF(__pyx_tuple__28);
; 21822:   __Pyx_GIVEREF(__pyx_tuple__28);
; 21823: 
; 21824:   /* "(tree fragment)":2
; 21825:  * def __reduce_cython__(self):
; 21826:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21827:  * def __setstate_cython__(self, __pyx_state):
; 21828:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21829:  */
; 21830:   __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__29, rax
	test	rax, rax
	jne	SHORT $LN19@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 2
	mov	DWORD PTR __pyx_clineno, 21830		; 00005546H
	jmp	$LN51@Pyx_InitCa
$LN19@Pyx_InitCa:

; 21831:   __Pyx_GOTREF(__pyx_tuple__29);
; 21832:   __Pyx_GIVEREF(__pyx_tuple__29);
; 21833: 
; 21834:   /* "(tree fragment)":4
; 21835:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 21836:  * def __setstate_cython__(self, __pyx_state):
; 21837:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 21838:  */
; 21839:   __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_no_default___reduce___due_to_non
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__30, rax
	test	rax, rax
	jne	SHORT $LN18@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 21839		; 0000554fH
	jmp	$LN51@Pyx_InitCa
$LN18@Pyx_InitCa:

; 21840:   __Pyx_GOTREF(__pyx_tuple__30);
; 21841:   __Pyx_GIVEREF(__pyx_tuple__30);
; 21842: 
; 21843:   /* "rsrpsinr.pyx":22
; 21844:  *     DTYPE_t[:] avv
; 21845:  * 
; 21846:  * def degree_to_rad(double d):             # <<<<<<<<<<<<<<
; 21847:  *     return d*pi180
; 21848:  * 
; 21849:  */
; 21850:   __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_d, __pyx_n_s_d); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 22, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_d
	mov	ecx, 2
	mov	r8, rdx
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__31, rax
	test	rax, rax
	jne	SHORT $LN17@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 22
	mov	DWORD PTR __pyx_clineno, 21850		; 0000555aH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_11$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN17@Pyx_InitCa:

; 21851:   __Pyx_GOTREF(__pyx_tuple__31);
; 21852:   __Pyx_GIVEREF(__pyx_tuple__31);
; 21853:   __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rsrpsinr_pyx, __pyx_n_s_degree_to_rad, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 22, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_degree_to_rad
	mov	r9d, 3
	mov	QWORD PTR [rsp+104], rcx
	mov	DWORD PTR [rsp+96], 22
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_rsrpsinr_pyx
	lea	edx, QWORD PTR [r9-1]
	xor	r8d, r8d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	lea	ecx, QWORD PTR [rdx-1]
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__32, rax
	test	rax, rax
	jne	SHORT $LN16@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 22
	mov	DWORD PTR __pyx_clineno, 21853		; 0000555dH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_12$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN16@Pyx_InitCa:

; 21854: 
; 21855:   /* "rsrpsinr.pyx":25
; 21856:  *     return d*pi180
; 21857:  * 
; 21858:  * def rad_to_degree(double d):             # <<<<<<<<<<<<<<
; 21859:  *     return d/pi180
; 21860:  * 
; 21861:  */
; 21862:   __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_d, __pyx_n_s_d); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 25, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_d
	mov	ecx, 2
	mov	r8, rdx
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__33, rax
	test	rax, rax
	jne	SHORT $LN15@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 25
	mov	DWORD PTR __pyx_clineno, 21862		; 00005566H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_13$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN15@Pyx_InitCa:

; 21863:   __Pyx_GOTREF(__pyx_tuple__33);
; 21864:   __Pyx_GIVEREF(__pyx_tuple__33);
; 21865:   __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rsrpsinr_pyx, __pyx_n_s_rad_to_degree, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 25, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_rad_to_degree
	mov	r9d, 3
	mov	QWORD PTR [rsp+104], rcx
	mov	DWORD PTR [rsp+96], 25
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_rsrpsinr_pyx
	lea	edx, QWORD PTR [r9-1]
	xor	r8d, r8d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	lea	ecx, QWORD PTR [rdx-1]
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__34, rax
	test	rax, rax
	jne	SHORT $LN14@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 25
	mov	DWORD PTR __pyx_clineno, 21865		; 00005569H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_14$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN14@Pyx_InitCa:

; 21866: 
; 21867:   /* "rsrpsinr.pyx":34
; 21868:  *     return d/pi180
; 21869:  * 
; 21870:  * def set_antenna_hv_vv(             # <<<<<<<<<<<<<<
; 21871:  *     np.ndarray[DTYPE_t, mode='c', ndim=1] hv,
; 21872:  *     np.ndarray[DTYPE_t, mode='c', ndim=1] vv):
; 21873:  */
; 21874:   __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_hv, __pyx_n_s_vv); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 34, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_vv
	mov	rdx, QWORD PTR __pyx_n_s_hv
	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__35, rax
	test	rax, rax
	jne	SHORT $LN13@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 21874		; 00005572H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_15$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN13@Pyx_InitCa:

; 21875:   __Pyx_GOTREF(__pyx_tuple__35);
; 21876:   __Pyx_GIVEREF(__pyx_tuple__35);
; 21877:   __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rsrpsinr_pyx, __pyx_n_s_set_antenna_hv_vv, 34, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 34, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_set_antenna_hv_vv
	mov	edx, 2
	mov	QWORD PTR [rsp+104], rcx
	mov	DWORD PTR [rsp+96], 34			; 00000022H
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_rsrpsinr_pyx
	mov	r9d, 3
	xor	r8d, r8d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	ecx, edx
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__36, rax
	test	rax, rax
	jne	SHORT $LN12@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 21877		; 00005575H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_16$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN12@Pyx_InitCa:

; 21878: 
; 21879:   /* "rsrpsinr.pyx":238
; 21880:  * Interface
; 21881:  * """
; 21882:  * def gain(double alpha, double beta):             # <<<<<<<<<<<<<<
; 21883:  *     return cgain(alpha, beta)
; 21884:  * 
; 21885:  */
; 21886:   __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_alpha, __pyx_n_s_beta); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 238, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_beta
	mov	rdx, QWORD PTR __pyx_n_s_alpha
	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__37, rax
	test	rax, rax
	jne	SHORT $LN11@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 238		; 000000eeH
	mov	DWORD PTR __pyx_clineno, 21886		; 0000557eH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_17$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN11@Pyx_InitCa:

; 21887:   __Pyx_GOTREF(__pyx_tuple__37);
; 21888:   __Pyx_GIVEREF(__pyx_tuple__37);
; 21889:   __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rsrpsinr_pyx, __pyx_n_s_gain, 238, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 238, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_gain
	mov	r9d, 3
	mov	QWORD PTR [rsp+104], rdx
	mov	DWORD PTR [rsp+96], 238			; 000000eeH
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_rsrpsinr_pyx
	xor	r8d, r8d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rdx
	mov	edx, 2
	mov	ecx, edx
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__38, rax
	test	rax, rax
	jne	SHORT $LN10@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 238		; 000000eeH
	mov	DWORD PTR __pyx_clineno, 21889		; 00005581H

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_18$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN10@Pyx_InitCa:

; 21890: 
; 21891:   /* "rsrpsinr.pyx":241
; 21892:  *     return cgain(alpha, beta)
; 21893:  * 
; 21894:  * def get_coverage(             # <<<<<<<<<<<<<<
; 21895:  *     np.ndarray[DTYPE_t, ndim=2] S,
; 21896:  *     np.ndarray[DTYPE_t, ndim=2] B,
; 21897:  */
; 21898:   __pyx_tuple__39 = PyTuple_Pack(8, __pyx_n_s_S, __pyx_n_s_B, __pyx_n_s_B_of_S, __pyx_n_s_RSRP_TH, __pyx_n_s_SINR_TH, __pyx_n_s_TERM_HEIGHT, __pyx_n_s_FREQ, __pyx_n_s_NOISE); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 241, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_n_s_NOISE
	mov	r9, QWORD PTR __pyx_n_s_B_of_S
	mov	r8, QWORD PTR __pyx_n_s_B
	mov	rdx, QWORD PTR __pyx_n_s_S
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR __pyx_n_s_FREQ
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR __pyx_n_s_TERM_HEIGHT
	mov	ecx, 8
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR __pyx_n_s_SINR_TH
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR __pyx_n_s_RSRP_TH
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__39, rax
	test	rax, rax
	jne	SHORT $LN9@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 21898		; 0000558aH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_19$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN9@Pyx_InitCa:

; 21899:   __Pyx_GOTREF(__pyx_tuple__39);
; 21900:   __Pyx_GIVEREF(__pyx_tuple__39);
; 21901:   __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_rsrpsinr_pyx, __pyx_n_s_get_coverage, 241, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 241, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_get_coverage
	mov	r9d, 3
	mov	QWORD PTR [rsp+104], rdx
	mov	DWORD PTR [rsp+96], 241			; 000000f1H
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_rsrpsinr_pyx
	xor	r8d, r8d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rdx
	mov	edx, 8
	mov	ecx, edx
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__40, rax
	test	rax, rax
	jne	SHORT $LN8@Pyx_InitCa
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 21901		; 0000558dH

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1
$__pyx_L1_error_20$28664:

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN8@Pyx_InitCa:

; 21902: 
; 21903:   /* "View.MemoryView":284
; 21904:  *         return self.name
; 21905:  * 
; 21906:  * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
; 21907:  * cdef strided = Enum("<strided and direct>") # default
; 21908:  * cdef indirect = Enum("<strided and indirect>")
; 21909:  */
; 21910:   __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 284, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_strided_and_direct_or_indirect
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__41, rax
	test	rax, rax
	jne	SHORT $LN7@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 284		; 0000011cH
	mov	DWORD PTR __pyx_clineno, 21910		; 00005596H
	jmp	$LN51@Pyx_InitCa
$LN7@Pyx_InitCa:

; 21911:   __Pyx_GOTREF(__pyx_tuple__41);
; 21912:   __Pyx_GIVEREF(__pyx_tuple__41);
; 21913: 
; 21914:   /* "View.MemoryView":285
; 21915:  * 
; 21916:  * cdef generic = Enum("<strided and direct or indirect>")
; 21917:  * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
; 21918:  * cdef indirect = Enum("<strided and indirect>")
; 21919:  * 
; 21920:  */
; 21921:   __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 285, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_strided_and_direct
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__42, rax
	test	rax, rax
	jne	SHORT $LN6@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 285		; 0000011dH
	mov	DWORD PTR __pyx_clineno, 21921		; 000055a1H
	jmp	$LN51@Pyx_InitCa
$LN6@Pyx_InitCa:

; 21922:   __Pyx_GOTREF(__pyx_tuple__42);
; 21923:   __Pyx_GIVEREF(__pyx_tuple__42);
; 21924: 
; 21925:   /* "View.MemoryView":286
; 21926:  * cdef generic = Enum("<strided and direct or indirect>")
; 21927:  * cdef strided = Enum("<strided and direct>") # default
; 21928:  * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
; 21929:  * 
; 21930:  * 
; 21931:  */
; 21932:   __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 286, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_strided_and_indirect
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__43, rax
	test	rax, rax
	jne	SHORT $LN5@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 286		; 0000011eH
	mov	DWORD PTR __pyx_clineno, 21932		; 000055acH
	jmp	$LN51@Pyx_InitCa
$LN5@Pyx_InitCa:

; 21933:   __Pyx_GOTREF(__pyx_tuple__43);
; 21934:   __Pyx_GIVEREF(__pyx_tuple__43);
; 21935: 
; 21936:   /* "View.MemoryView":289
; 21937:  * 
; 21938:  * 
; 21939:  * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
; 21940:  * cdef indirect_contiguous = Enum("<contiguous and indirect>")
; 21941:  * 
; 21942:  */
; 21943:   __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 289, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_contiguous_and_direct
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__44, rax
	test	rax, rax
	jne	SHORT $LN4@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 289		; 00000121H
	mov	DWORD PTR __pyx_clineno, 21943		; 000055b7H
	jmp	$LN51@Pyx_InitCa
$LN4@Pyx_InitCa:

; 21944:   __Pyx_GOTREF(__pyx_tuple__44);
; 21945:   __Pyx_GIVEREF(__pyx_tuple__44);
; 21946: 
; 21947:   /* "View.MemoryView":290
; 21948:  * 
; 21949:  * cdef contiguous = Enum("<contiguous and direct>")
; 21950:  * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
; 21951:  * 
; 21952:  * 
; 21953:  */
; 21954:   __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 290, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_kp_s_contiguous_and_indirect
	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_Pack
	mov	QWORD PTR __pyx_tuple__45, rax
	test	rax, rax
	jne	SHORT $LN3@Pyx_InitCa
	mov	DWORD PTR __pyx_lineno, 290		; 00000122H
	mov	DWORD PTR __pyx_clineno, 21954		; 000055c2H
	jmp	$LN51@Pyx_InitCa
$LN3@Pyx_InitCa:

; 21955:   __Pyx_GOTREF(__pyx_tuple__45);
; 21956:   __Pyx_GIVEREF(__pyx_tuple__45);
; 21957: 
; 21958:   /* "(tree fragment)":1
; 21959:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
; 21960:  *     if __pyx_checksum != 0xb068931:
; 21961:  *         from pickle import PickleError as __pyx_PickleError
; 21962:  */
; 21963:   __pyx_tuple__46 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_n_s_pyx_result
	mov	r9, QWORD PTR __pyx_n_s_pyx_state
	mov	r8, QWORD PTR __pyx_n_s_pyx_checksum
	mov	rdx, QWORD PTR __pyx_n_s_pyx_type
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR __pyx_n_s_pyx_PickleError
	mov	ecx, 5
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyTuple_Pack
	mov	r11, rax
	mov	QWORD PTR __pyx_tuple__46, rax
	test	rax, rax
	jne	SHORT $LN2@Pyx_InitCa
	mov	DWORD PTR __pyx_clineno, 21963		; 000055cbH
	jmp	SHORT $LN52@Pyx_InitCa
$LN2@Pyx_InitCa:

; 21964:   __Pyx_GOTREF(__pyx_tuple__46);
; 21965:   __Pyx_GIVEREF(__pyx_tuple__46);
; 21966:   __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_empty_bytes
	mov	rax, QWORD PTR __pyx_n_s_pyx_unpickle_Enum
	mov	r9d, 3
	mov	QWORD PTR [rsp+104], r8
	mov	DWORD PTR [rsp+96], 1
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR __pyx_kp_s_stringsource
	lea	edx, QWORD PTR [r9+2]
	mov	ecx, r9d
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], r11
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r8
	xor	r8d, r8d
	call	QWORD PTR __imp_PyCode_New
	mov	QWORD PTR __pyx_codeobj__47, rax
	test	rax, rax
	jne	SHORT $LN1@Pyx_InitCa
	mov	DWORD PTR __pyx_clineno, 21966		; 000055ceH
$LN52@Pyx_InitCa:
	mov	DWORD PTR __pyx_lineno, 1
$LN51@Pyx_InitCa:
	mov	rax, QWORD PTR __pyx_f+16
$__pyx_L1_error_21$28664:
	mov	QWORD PTR __pyx_filename, rax

; 21969:   __pyx_L1_error:;
; 21970:   __Pyx_RefNannyFinishContext();
; 21971:   return -1;

	or	eax, -1

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
$LN1@Pyx_InitCa:

; 21967:   __Pyx_RefNannyFinishContext();
; 21968:   return 0;

	xor	eax, eax

; 21972: }

	add	rsp, 120				; 00000078H
	ret	0
__Pyx_InitCachedConstants ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@ ; `string'
EXTRN	__imp_PyErr_Format:PROC
EXTRN	__imp_PyExc_NameError:QWORD
_BSS	SEGMENT
__pyx_b	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetBuiltinName DD imagerel __Pyx_GetBuiltinName
	DD	imagerel __Pyx_GetBuiltinName+120
	DD	imagerel $unwind$__Pyx_GetBuiltinName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetBuiltinName DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
CONST	SEGMENT
??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@ DB 'name '''
	DB	'%.200s'' is not defined', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_GetBuiltinName
_TEXT	SEGMENT
name$ = 48
__Pyx_GetBuiltinName PROC				; COMDAT

; 22505: static PyObject *__Pyx_GetBuiltinName(PyObject *name) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 22506:     PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);

	mov	rcx, QWORD PTR __pyx_b
	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN5@Pyx_GetBui
	mov	rdx, rdi
	call	r8
	jmp	SHORT $LN9@Pyx_GetBui
$LN5@Pyx_GetBui:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN4@Pyx_GetBui
	lea	rdx, QWORD PTR [rdi+32]
	call	r8
	jmp	SHORT $LN9@Pyx_GetBui
$LN4@Pyx_GetBui:
	mov	rdx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
$LN9@Pyx_GetBui:
	mov	rbx, rax

; 22507:     if (unlikely(!result)) {

	test	rax, rax
	jne	SHORT $LN8@Pyx_GetBui

; 22508:         PyErr_Format(PyExc_NameError,
; 22509: #if PY_MAJOR_VERSION >= 3
; 22510:             "name '%U' is not defined", name);
; 22511: #else
; 22512:             "name '%.200s' is not defined", PyString_AS_STRING(name));

	mov	rcx, QWORD PTR __imp_PyExc_NameError
	lea	r8, QWORD PTR [rdi+32]
	lea	rdx, OFFSET FLAT:??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
$LN8@Pyx_GetBui:

; 22513: #endif
; 22514:     }
; 22515:     return result;

	mov	rax, rbx

; 22516: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_GetBuiltinName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@ ; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_07JLAGAGFH@exactly?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_07IGBEEPOP@at?5most?$AA@			; `string'
PUBLIC	??_C@_08FNDBFMB@at?5least?$AA@			; `string'
EXTRN	__imp_PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_RaiseArgtupleInvalid DD imagerel __Pyx_RaiseArgtupleInvalid
	DD	imagerel __Pyx_RaiseArgtupleInvalid+114
	DD	imagerel $unwind$__Pyx_RaiseArgtupleInvalid
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_RaiseArgtupleInvalid DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
CONST	SEGMENT
??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@ DB '%'
	DB	'.200s() takes %.8s %zd positional argument%.1s (%zd given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JLAGAGFH@exactly?$AA@
CONST	SEGMENT
??_C@_07JLAGAGFH@exactly?$AA@ DB 'exactly', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07IGBEEPOP@at?5most?$AA@
CONST	SEGMENT
??_C@_07IGBEEPOP@at?5most?$AA@ DB 'at most', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNDBFMB@at?5least?$AA@
CONST	SEGMENT
??_C@_08FNDBFMB@at?5least?$AA@ DB 'at least', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseArgtupleInvalid
_TEXT	SEGMENT
func_name$ = 80
exact$ = 88
num_min$ = 96
num_max$ = 104
num_found$ = 112
__Pyx_RaiseArgtupleInvalid PROC				; COMDAT

; 22525: {

	sub	rsp, 72					; 00000048H

; 22526:     Py_ssize_t num_expected;
; 22527:     const char *more_or_less;
; 22528:     if (num_found < num_min) {

	mov	r10, QWORD PTR num_found$[rsp]
	cmp	r10, r8
	jge	SHORT $LN3@Pyx_RaiseA

; 22529:         num_expected = num_min;
; 22530:         more_or_less = "at least";

	lea	rax, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@

; 22531:     } else {

	jmp	SHORT $LN2@Pyx_RaiseA
$LN3@Pyx_RaiseA:

; 22532:         num_expected = num_max;

	mov	r8, r9

; 22533:         more_or_less = "at most";

	lea	rax, OFFSET FLAT:??_C@_07IGBEEPOP@at?5most?$AA@
$LN2@Pyx_RaiseA:

; 22534:     }
; 22535:     if (exact) {

	test	edx, edx

; 22536:         more_or_less = "exactly";
; 22537:     }
; 22538:     PyErr_Format(PyExc_TypeError,
; 22539:                  "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
; 22540:                  func_name, more_or_less, num_expected,
; 22541:                  (num_expected == 1) ? "" : "s", num_found);

	mov	QWORD PTR [rsp+48], r10
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	cmove	r9, rax
	cmp	r8, 1
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	cmove	rax, rdx
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r8
	mov	r8, rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22542: }

	add	rsp, 72					; 00000048H
	ret	0
__Pyx_RaiseArgtupleInvalid ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KBCIFDEA@?$CFs?$CI?$CJ?5got?5multiple?5values?5for?5key@ ; `string'
EXTRN	__imp_PyString_AsString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_RaiseDoubleKeywordsError DD imagerel __Pyx_RaiseDoubleKeywordsError
	DD	imagerel __Pyx_RaiseDoubleKeywordsError+53
	DD	imagerel $unwind$__Pyx_RaiseDoubleKeywordsError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_RaiseDoubleKeywordsError DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DD@KBCIFDEA@?$CFs?$CI?$CJ?5got?5multiple?5values?5for?5key@
CONST	SEGMENT
??_C@_0DD@KBCIFDEA@?$CFs?$CI?$CJ?5got?5multiple?5values?5for?5key@ DB '%s'
	DB	'() got multiple values for keyword argument ''%s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseDoubleKeywordsError
_TEXT	SEGMENT
func_name$ = 48
kw_name$ = 56
__Pyx_RaiseDoubleKeywordsError PROC			; COMDAT

; 22548: {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 22549:     PyErr_Format(PyExc_TypeError,
; 22550:         #if PY_MAJOR_VERSION >= 3
; 22551:         "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
; 22552:         #else
; 22553:         "%s() got multiple values for keyword argument '%s'", func_name,
; 22554:         PyString_AsString(kw_name));

	mov	rcx, rdx
	call	QWORD PTR __imp_PyString_AsString
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0DD@KBCIFDEA@?$CFs?$CI?$CJ?5got?5multiple?5values?5for?5key@
	mov	rcx, QWORD PTR [rcx]
	mov	r9, rax
	mov	r8, rbx

; 22555:         #endif
; 22556: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyErr_Format
__Pyx_RaiseDoubleKeywordsError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@PJIJCGHB@?$CF?4200s?$CI?$CJ?5got?5an?5unexpected?5keywo@ ; `string'
PUBLIC	??_C@_0CC@BDEEHALJ@?$CF?4200s?$CI?$CJ?5keywords?5must?5be?5string@ ; `string'
EXTRN	__imp_PyDict_SetItem:PROC
EXTRN	__imp__PyString_Eq:PROC
EXTRN	__imp_PyErr_Occurred:PROC
EXTRN	__imp_PyUnicodeUCS2_Compare:PROC
EXTRN	__imp_PyString_Type:BYTE
EXTRN	__imp_PyDict_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ParseOptionalKeywords DD imagerel __Pyx_ParseOptionalKeywords
	DD	imagerel __Pyx_ParseOptionalKeywords+731
	DD	imagerel $unwind$__Pyx_ParseOptionalKeywords
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ParseOptionalKeywords DD 0a1701H
	DD	0e5417H
	DD	0c3417H
	DD	0e0135217H
	DD	0c00fd011H
	DD	0600c700dH
xdata	ENDS
;	COMDAT ??_C@_0DF@PJIJCGHB@?$CF?4200s?$CI?$CJ?5got?5an?5unexpected?5keywo@
CONST	SEGMENT
??_C@_0DF@PJIJCGHB@?$CF?4200s?$CI?$CJ?5got?5an?5unexpected?5keywo@ DB '%.'
	DB	'200s() got an unexpected keyword argument ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BDEEHALJ@?$CF?4200s?$CI?$CJ?5keywords?5must?5be?5string@
CONST	SEGMENT
??_C@_0CC@BDEEHALJ@?$CF?4200s?$CI?$CJ?5keywords?5must?5be?5string@ DB '%.'
	DB	'200s() keywords must be strings', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_ParseOptionalKeywords
_TEXT	SEGMENT
value$ = 32
pos$ = 40
kwds$ = 96
key$ = 104
argnames$ = 104
kwds2$ = 112
values$ = 120
num_pos_args$ = 128
function_name$ = 136
__Pyx_ParseOptionalKeywords PROC			; COMDAT

; 22566: {

	mov	r11, rsp
	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 48					; 00000030H

; 22567:     PyObject *key = 0, *value = 0;

	xor	eax, eax
	mov	r12, r9
	mov	r13, r8
	mov	QWORD PTR [r11+16], rax
	mov	QWORD PTR [r11-56], rax

; 22568:     Py_ssize_t pos = 0;

	mov	QWORD PTR [r11-48], rax

; 22569:     PyObject*** name;
; 22570:     PyObject*** first_kw_arg = argnames + num_pos_args;

	mov	rax, QWORD PTR num_pos_args$[rsp]
	mov	rbp, rdx

; 22571:     while (PyDict_Next(kwds, &pos, &key, &value)) {

	lea	r9, QWORD PTR [r11-56]
	lea	rsi, QWORD PTR [rdx+rax*8]
	lea	r8, QWORD PTR [r11+16]
	lea	rdx, QWORD PTR [r11-48]
	mov	r14, rcx
	call	QWORD PTR __imp_PyDict_Next
	test	eax, eax
	je	$LN33@Pyx_ParseO
	npad	9
$LL34@Pyx_ParseO:

; 22572:         name = first_kw_arg;
; 22573:         while (*name && (**name != key)) name++;

	mov	r8, QWORD PTR [rsi]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, rsi
	test	r8, r8
	je	$LN31@Pyx_ParseO
	mov	rax, r8
$LL32@Pyx_ParseO:
	cmp	QWORD PTR [rax], rdx
	je	$LN31@Pyx_ParseO
	mov	rax, QWORD PTR [rcx+8]
	add	rcx, 8
	test	rax, rax
	jne	SHORT $LL32@Pyx_ParseO
$LN30@Pyx_ParseO:

; 22577:         }
; 22578:         name = first_kw_arg;
; 22579:         #if PY_MAJOR_VERSION < 3
; 22580:         if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {

	mov	rax, QWORD PTR __imp_PyString_Type
	mov	rbx, rsi
	cmp	QWORD PTR [rdx+8], rax
	je	$LN50@Pyx_ParseO
	mov	rax, QWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rax+168]
	bt	ecx, 27
	jb	$LN50@Pyx_ParseO

; 22599:                 }
; 22600:             }
; 22601:         } else
; 22602:         #endif
; 22603:         if (likely(PyUnicode_Check(key))) {

	bt	ecx, 28
	jae	$invalid_keyword_type$29253

; 22604:             while (*name) {

	test	r8, r8
	je	SHORT $LN71@Pyx_ParseO
$LL14@Pyx_ParseO:

; 22605:                 int cmp = (**name == key) ? 0 :
; 22606:                 #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
; 22607:                     (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
; 22608:                 #endif
; 22609:                     PyUnicode_Compare(**name, key);

	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], rdx
	je	SHORT $LN53@Pyx_ParseO
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyUnicodeUCS2_Compare
	mov	edi, eax

; 22610:                 if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;

	test	eax, eax
	jns	SHORT $LN12@Pyx_ParseO
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$bad$29241
$LN12@Pyx_ParseO:

; 22604:             while (*name) {

	mov	rdx, QWORD PTR key$[rsp]

; 22611:                 if (cmp == 0) {

	test	edi, edi
	je	SHORT $LN53@Pyx_ParseO

; 22613:                     break;
; 22614:                 }
; 22615:                 name++;

	add	rbx, 8
	cmp	QWORD PTR [rbx], 0
	jne	SHORT $LL14@Pyx_ParseO

; 22616:             }
; 22617:             if (*name) continue;

	jmp	SHORT $LN64@Pyx_ParseO
$LN31@Pyx_ParseO:

; 22574:         if (*name) {

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN30@Pyx_ParseO

; 22575:             values[name-argnames] = value;

	mov	rax, QWORD PTR value$[rsp]
	sub	rcx, rbp
	sar	rcx, 3
	mov	QWORD PTR [r12+rcx*8], rax

; 22576:             continue;

	jmp	$LN2@Pyx_ParseO
$LN53@Pyx_ParseO:

; 22612:                     values[name-argnames] = value;

	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, rbx
	sub	rcx, rbp
	sar	rcx, 3
	mov	QWORD PTR [r12+rcx*8], rax
$LN71@Pyx_ParseO:

; 22616:             }
; 22617:             if (*name) continue;

	cmp	QWORD PTR [rbx], 0
	jne	$LN2@Pyx_ParseO
$LN64@Pyx_ParseO:

; 22618:             else {
; 22619:                 PyObject*** argname = argnames;

	mov	rbx, rbp

; 22620:                 while (argname != first_kw_arg) {

	cmp	rbp, rsi
	je	$LN82@Pyx_ParseO
$LL8@Pyx_ParseO:

; 22621:                     int cmp = (**argname == key) ? 0 :
; 22622:                     #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
; 22623:                         (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
; 22624:                     #endif
; 22625:                         PyUnicode_Compare(**argname, key);

	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], rdx
	je	$arg_passed_twice$29232
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyUnicodeUCS2_Compare
	mov	edi, eax

; 22626:                     if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;

	test	eax, eax
	jns	SHORT $LN6@Pyx_ParseO
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$bad$29241
$LN6@Pyx_ParseO:

; 22627:                     if (cmp == 0) goto arg_passed_twice;

	test	edi, edi
	je	$LN75@Pyx_ParseO
	mov	rdx, QWORD PTR key$[rsp]

; 22628:                     argname++;

	add	rbx, 8
	cmp	rbx, rsi
	jne	SHORT $LL8@Pyx_ParseO

; 22629:                 }
; 22630:             }
; 22631:         } else

	jmp	$LN82@Pyx_ParseO
$LN50@Pyx_ParseO:

; 22581:             while (*name) {

	test	r8, r8
	je	SHORT $LN74@Pyx_ParseO
	npad	3
$LL27@Pyx_ParseO:

; 22582:                 if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
; 22583:                         && _PyString_Eq(**name, key)) {

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	jne	SHORT $LN25@Pyx_ParseO
	call	QWORD PTR __imp__PyString_Eq
	mov	rdx, QWORD PTR key$[rsp]
	test	eax, eax
	jne	SHORT $LN56@Pyx_ParseO
$LN25@Pyx_ParseO:

; 22585:                     break;
; 22586:                 }
; 22587:                 name++;

	add	rbx, 8
	cmp	QWORD PTR [rbx], 0
	jne	SHORT $LL27@Pyx_ParseO

; 22581:             while (*name) {

	jmp	SHORT $LN65@Pyx_ParseO
$LN56@Pyx_ParseO:

; 22584:                     values[name-argnames] = value;

	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, rbx
	sub	rcx, rbp
	sar	rcx, 3
	mov	QWORD PTR [r12+rcx*8], rax
$LN74@Pyx_ParseO:

; 22588:             }
; 22589:             if (*name) continue;

	cmp	QWORD PTR [rbx], 0
	jne	SHORT $LN2@Pyx_ParseO
$LN65@Pyx_ParseO:

; 22590:             else {
; 22591:                 PyObject*** argname = argnames;

	mov	rbx, rbp

; 22592:                 while (argname != first_kw_arg) {

	cmp	rbp, rsi
	je	SHORT $LN82@Pyx_ParseO
	npad	4
$LL21@Pyx_ParseO:

; 22593:                     if ((**argname == key) || (
; 22594:                             (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
; 22595:                              && _PyString_Eq(**argname, key))) {

	mov	rax, QWORD PTR [rbx]
	cmp	QWORD PTR [rax], rdx
	je	$arg_passed_twice$29232
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rdx+16]
	cmp	QWORD PTR [rcx+16], rax
	jne	SHORT $LN19@Pyx_ParseO
	call	QWORD PTR __imp__PyString_Eq
	test	eax, eax
	jne	$LN75@Pyx_ParseO
	mov	rdx, QWORD PTR key$[rsp]
$LN19@Pyx_ParseO:

; 22596:                         goto arg_passed_twice;
; 22597:                     }
; 22598:                     argname++;

	add	rbx, 8
	cmp	rbx, rsi
	jne	SHORT $LL21@Pyx_ParseO
$LN82@Pyx_ParseO:

; 22632:             goto invalid_keyword_type;
; 22633:         if (kwds2) {

	test	r13, r13
	je	$invalid_keyword$29257

; 22634:             if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;

	mov	r8, QWORD PTR value$[rsp]
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jne	$bad$29241
$LN2@Pyx_ParseO:

; 22571:     while (PyDict_Next(kwds, &pos, &key, &value)) {

	lea	r9, QWORD PTR value$[rsp]
	lea	r8, QWORD PTR key$[rsp]
	lea	rdx, QWORD PTR pos$[rsp]
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_Next
	test	eax, eax
	jne	$LL34@Pyx_ParseO
$LN33@Pyx_ParseO:

; 22635:         } else {
; 22636:             goto invalid_keyword;
; 22637:         }
; 22638:     }
; 22639:     return 0;

	xor	eax, eax
$LN35@Pyx_ParseO:

; 22658: }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
$invalid_keyword_type$29253:

; 22643: invalid_keyword_type:
; 22644:     PyErr_Format(PyExc_TypeError,
; 22645:         "%.200s() keywords must be strings", function_name);

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r8, QWORD PTR function_name$[rsp]
	lea	rdx, OFFSET FLAT:??_C@_0CC@BDEEHALJ@?$CF?4200s?$CI?$CJ?5keywords?5must?5be?5string@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22652:     #else
; 22653:         "%s() got an unexpected keyword argument '%U'",
; 22654:         function_name, key);
; 22655:     #endif
; 22656: bad:
; 22657:     return -1;

	or	eax, -1
	jmp	SHORT $LN35@Pyx_ParseO
$LN75@Pyx_ParseO:

; 22646:     goto bad;

	mov	rdx, QWORD PTR key$[rsp]
$arg_passed_twice$29232:

; 22640: arg_passed_twice:
; 22641:     __Pyx_RaiseDoubleKeywordsError(function_name, key);

	mov	rcx, rdx
	call	QWORD PTR __imp_PyString_AsString
	lea	rdx, OFFSET FLAT:??_C@_0DD@KBCIFDEA@?$CFs?$CI?$CJ?5got?5multiple?5values?5for?5key@

; 22642:     goto bad;

	jmp	SHORT $LN83@Pyx_ParseO
$invalid_keyword$29257:

; 22647: invalid_keyword:
; 22648:     PyErr_Format(PyExc_TypeError,
; 22649:     #if PY_MAJOR_VERSION < 3
; 22650:         "%.200s() got an unexpected keyword argument '%.200s'",
; 22651:         function_name, PyString_AsString(key));

	mov	rcx, rdx
	call	QWORD PTR __imp_PyString_AsString
	lea	rdx, OFFSET FLAT:??_C@_0DF@PJIJCGHB@?$CF?4200s?$CI?$CJ?5got?5an?5unexpected?5keywo@
$LN83@Pyx_ParseO:
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r8, QWORD PTR function_name$[rsp]
	mov	r9, rax
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
$bad$29241:

; 22652:     #else
; 22653:         "%s() got an unexpected keyword argument '%U'",
; 22654:         function_name, key);
; 22655:     #endif
; 22656: bad:
; 22657:     return -1;

	or	eax, -1
	jmp	$LN35@Pyx_ParseO
__Pyx_ParseOptionalKeywords ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_Is_Little_Endian
_TEXT	SEGMENT
__Pyx_Is_Little_Endian PROC				; COMDAT

; 22684:   union {
; 22685:     uint32_t u32;
; 22686:     uint8_t u8[4];
; 22687:   } S;
; 22688:   S.u32 = 0x01020304;
; 22689:   return S.u8[0] == 4;

	mov	eax, 1

; 22690: }

	ret	0
__Pyx_Is_Little_Endian ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LEBCHALN@buffer?5dtype?$AA@		; `string'
;	COMDAT ??_C@_0N@LEBCHALN@buffer?5dtype?$AA@
CONST	SEGMENT
??_C@_0N@LEBCHALN@buffer?5dtype?$AA@ DB 'buffer dtype', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_Init
_TEXT	SEGMENT
ctx$ = 8
stack$ = 16
type$ = 24
__Pyx_BufFmt_Init PROC					; COMDAT

; 22696:   stack[0].field = &ctx->root;
; 22697:   stack[0].parent_offset = 0;

	xor	r10d, r10d

; 22698:   ctx->root.type = type;
; 22699:   ctx->root.name = "buffer dtype";

	lea	rax, OFFSET FLAT:??_C@_0N@LEBCHALN@buffer?5dtype?$AA@
	mov	r9, rcx
	mov	QWORD PTR [rdx+8], r10
	mov	QWORD PTR [rcx+8], rax

; 22700:   ctx->root.offset = 0;
; 22701:   ctx->head = stack;

	mov	QWORD PTR [rcx+24], rdx
	mov	QWORD PTR [rcx], r8
	mov	QWORD PTR [rcx+16], r10

; 22702:   ctx->head->field = &ctx->root;

	mov	QWORD PTR [rdx], rcx

; 22703:   ctx->fmt_offset = 0;
; 22704:   ctx->head->parent_offset = 0;

	mov	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR [rcx+32], r10
	mov	QWORD PTR [rax+8], r10

; 22705:   ctx->new_packmode = '@';

	mov	BYTE PTR [rcx+69], 64			; 00000040H

; 22706:   ctx->enc_packmode = '@';

	mov	BYTE PTR [rcx+70], 64			; 00000040H

; 22707:   ctx->new_count = 1;

	mov	QWORD PTR [rcx+40], 1

; 22708:   ctx->enc_count = 0;

	mov	QWORD PTR [rcx+48], r10

; 22709:   ctx->enc_type = 0;

	mov	BYTE PTR [rcx+68], r10b

; 22710:   ctx->is_complex = 0;

	mov	DWORD PTR [rcx+64], r10d

; 22711:   ctx->is_valid_array = 0;

	mov	BYTE PTR [rcx+71], r10b

; 22712:   ctx->struct_alignment = 0;

	mov	QWORD PTR [rcx+56], r10

; 22713:   while (type->typegroup == 'S') {

	cmp	BYTE PTR [r8+92], 83			; 00000053H
	jne	SHORT $LN1@Pyx_BufFmt
	npad	6
$LL2@Pyx_BufFmt:

; 22714:     ++ctx->head;

	add	QWORD PTR [r9+24], 16

; 22715:     ctx->head->field = type->fields;

	mov	rax, QWORD PTR [r8+8]
	mov	rcx, QWORD PTR [r9+24]
	mov	QWORD PTR [rcx], rax

; 22716:     ctx->head->parent_offset = 0;

	mov	rax, QWORD PTR [r9+24]
	mov	QWORD PTR [rax+8], r10

; 22717:     type = type->fields->type;

	mov	rax, QWORD PTR [r8+8]
	mov	r8, QWORD PTR [rax]
	cmp	BYTE PTR [r8+92], 83			; 00000053H
	je	SHORT $LL2@Pyx_BufFmt
$LN1@Pyx_BufFmt:

; 22718:   }
; 22719: }

	fatret	0
__Pyx_BufFmt_Init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_BufFmt_ParseNumber
_TEXT	SEGMENT
ts$ = 8
__Pyx_BufFmt_ParseNumber PROC				; COMDAT

; 22721:     int count;
; 22722:     const char* t = *ts;

	mov	rdx, QWORD PTR [rcx]
	mov	r9, rcx

; 22723:     if (*t < '0' || *t > '9') {

	movzx	eax, BYTE PTR [rdx]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN4@Pyx_BufFmt@2
	cmp	al, 57					; 00000039H
	jg	SHORT $LN4@Pyx_BufFmt@2

; 22725:     } else {
; 22726:         count = *t++ - '0';

	inc	rdx
	movsx	r8d, al

; 22727:         while (*t >= '0' && *t < '9') {

	movzx	eax, BYTE PTR [rdx]
	sub	r8d, 48					; 00000030H
	cmp	al, 48					; 00000030H
	jl	SHORT $LN1@Pyx_BufFmt@2
$LL2@Pyx_BufFmt@2:
	cmp	al, 57					; 00000039H
	jge	SHORT $LN1@Pyx_BufFmt@2

; 22728:             count *= 10;
; 22729:             count += *t++ - '0';

	movsx	eax, al
	inc	rdx
	lea	ecx, DWORD PTR [r8+r8*4]
	lea	r8d, DWORD PTR [rax+rcx*2-48]
	mov	al, BYTE PTR [rdx]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL2@Pyx_BufFmt@2
$LN1@Pyx_BufFmt@2:

; 22730:         }
; 22731:     }
; 22732:     *ts = t;

	mov	QWORD PTR [r9], rdx

; 22733:     return count;

	mov	eax, r8d

; 22734: }

	ret	0
$LN4@Pyx_BufFmt@2:

; 22724:       return -1;

	or	eax, -1

; 22734: }

	ret	0
__Pyx_BufFmt_ParseNumber ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@ ; `string'
EXTRN	__imp_PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_ExpectNumber DD imagerel __Pyx_BufFmt_ExpectNumber
	DD	imagerel __Pyx_BufFmt_ExpectNumber+119
	DD	imagerel $unwind$__Pyx_BufFmt_ExpectNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_ExpectNumber DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@
CONST	SEGMENT
??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@ DB 'Does not unde'
	DB	'rstand character buffer dtype format string (''%c'')', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_ExpectNumber
_TEXT	SEGMENT
ts$ = 48
__Pyx_BufFmt_ExpectNumber PROC				; COMDAT

; 22735: static int __Pyx_BufFmt_ExpectNumber(const char **ts) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 22736:     int number = __Pyx_BufFmt_ParseNumber(ts);

	mov	rdx, QWORD PTR [rcx]
	mov	r8, rcx
	movzx	eax, BYTE PTR [rdx]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN7@Pyx_BufFmt@3
	cmp	al, 57					; 00000039H
	jg	SHORT $LN7@Pyx_BufFmt@3
	inc	rdx
	movsx	ebx, al
	movzx	eax, BYTE PTR [rdx]
	sub	ebx, 48					; 00000030H
	cmp	al, 48					; 00000030H
	jl	SHORT $LN15@Pyx_BufFmt@3
$LL5@Pyx_BufFmt@3:
	cmp	al, 57					; 00000039H
	jge	SHORT $LN15@Pyx_BufFmt@3
	movsx	eax, al
	inc	rdx
	lea	ecx, DWORD PTR [rbx+rbx*4]
	lea	ebx, DWORD PTR [rax+rcx*2-48]
	mov	al, BYTE PTR [rdx]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL5@Pyx_BufFmt@3
$LN15@Pyx_BufFmt@3:
	mov	QWORD PTR [r8], rdx

; 22737:     if (number == -1)

	cmp	ebx, -1
	je	SHORT $LN13@Pyx_BufFmt@3

; 22740:     return number;

	mov	eax, ebx

; 22741: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0

; 22736:     int number = __Pyx_BufFmt_ParseNumber(ts);

$LN7@Pyx_BufFmt@3:
	or	ebx, -1
$LN13@Pyx_BufFmt@3:

; 22738:         PyErr_Format(PyExc_ValueError,\
; 22739:                      "Does not understand character buffer dtype format string ('%c')", **ts);

	mov	rax, QWORD PTR [r8]
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@
	movsx	r8d, BYTE PTR [rax]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22740:     return number;

	mov	eax, ebx

; 22741: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_BufFmt_ExpectNumber ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@ ; `string'
;	COMDAT ??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
CONST	SEGMENT
??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@ DB 'Unexpected fo'
	DB	'rmat string character: ''%c''', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_RaiseUnexpectedChar
_TEXT	SEGMENT
ch$ = 8
__Pyx_BufFmt_RaiseUnexpectedChar PROC			; COMDAT

; 22743:   PyErr_Format(PyExc_ValueError,
; 22744:                "Unexpected format string character: '%c'", ch);

	movsx	r8d, cl
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]

; 22745: }

	rex_jmp	QWORD PTR __imp_PyErr_Format
__Pyx_BufFmt_RaiseUnexpectedChar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@GOBIFELO@unparseable?5format?5string?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_08ELGCIJON@a?5string?$AA@			; `string'
PUBLIC	??_C@_09MPLOGFDC@a?5pointer?$AA@		; `string'
PUBLIC	??_C@_0O@FCDEKCKJ@Python?5object?$AA@		; `string'
PUBLIC	??_C@_08DIJKLDAL@a?5struct?$AA@			; `string'
PUBLIC	??_C@_0O@IPGBDNGP@?8long?5double?8?$AA@		; `string'
PUBLIC	??_C@_0BG@MMCLHOFD@?8complex?5long?5double?8?$AA@ ; `string'
PUBLIC	??_C@_08ILANNNDM@?8double?8?$AA@		; `string'
PUBLIC	??_C@_0BB@KABCPJDF@?8complex?5double?8?$AA@	; `string'
PUBLIC	??_C@_07OPPLPPDE@?8float?8?$AA@			; `string'
PUBLIC	??_C@_0BA@EEIFGEIO@?8complex?5float?8?$AA@	; `string'
PUBLIC	??_C@_0BF@MMAPHNH@?8unsigned?5long?5long?8?$AA@	; `string'
PUBLIC	??_C@_0M@DLGDFKKA@?8long?5long?8?$AA@		; `string'
PUBLIC	??_C@_0BA@CKADOLPM@?8unsigned?5long?8?$AA@	; `string'
PUBLIC	??_C@_06EAHJOHNO@?8long?8?$AA@			; `string'
PUBLIC	??_C@_0P@FIFOFMCG@?8unsigned?5int?8?$AA@	; `string'
PUBLIC	??_C@_05JCHCIMDH@?8int?8?$AA@			; `string'
PUBLIC	??_C@_0BB@NGCKMNNC@?8unsigned?5short?8?$AA@	; `string'
PUBLIC	??_C@_07DCAPGDK@?8short?8?$AA@			; `string'
PUBLIC	??_C@_0BA@CLPLPEPE@?8unsigned?5char?8?$AA@	; `string'
PUBLIC	??_C@_0O@CGAJCJPI@?8signed?5char?8?$AA@		; `string'
PUBLIC	??_C@_06EBIBPING@?8char?8?$AA@			; `string'
EXTRN	__ImageBase:BYTE
;	COMDAT ??_C@_0BK@GOBIFELO@unparseable?5format?5string?$AA@
CONST	SEGMENT
??_C@_0BK@GOBIFELO@unparseable?5format?5string?$AA@ DB 'unparseable forma'
	DB	't string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ELGCIJON@a?5string?$AA@
CONST	SEGMENT
??_C@_08ELGCIJON@a?5string?$AA@ DB 'a string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MPLOGFDC@a?5pointer?$AA@
CONST	SEGMENT
??_C@_09MPLOGFDC@a?5pointer?$AA@ DB 'a pointer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCDEKCKJ@Python?5object?$AA@
CONST	SEGMENT
??_C@_0O@FCDEKCKJ@Python?5object?$AA@ DB 'Python object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIJKLDAL@a?5struct?$AA@
CONST	SEGMENT
??_C@_08DIJKLDAL@a?5struct?$AA@ DB 'a struct', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IPGBDNGP@?8long?5double?8?$AA@
CONST	SEGMENT
??_C@_0O@IPGBDNGP@?8long?5double?8?$AA@ DB '''long double''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MMCLHOFD@?8complex?5long?5double?8?$AA@
CONST	SEGMENT
??_C@_0BG@MMCLHOFD@?8complex?5long?5double?8?$AA@ DB '''complex long doub'
	DB	'le''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08ILANNNDM@?8double?8?$AA@
CONST	SEGMENT
??_C@_08ILANNNDM@?8double?8?$AA@ DB '''double''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KABCPJDF@?8complex?5double?8?$AA@
CONST	SEGMENT
??_C@_0BB@KABCPJDF@?8complex?5double?8?$AA@ DB '''complex double''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPPLPPDE@?8float?8?$AA@
CONST	SEGMENT
??_C@_07OPPLPPDE@?8float?8?$AA@ DB '''float''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEIFGEIO@?8complex?5float?8?$AA@
CONST	SEGMENT
??_C@_0BA@EEIFGEIO@?8complex?5float?8?$AA@ DB '''complex float''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMAPHNH@?8unsigned?5long?5long?8?$AA@
CONST	SEGMENT
??_C@_0BF@MMAPHNH@?8unsigned?5long?5long?8?$AA@ DB '''unsigned long long'''
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DLGDFKKA@?8long?5long?8?$AA@
CONST	SEGMENT
??_C@_0M@DLGDFKKA@?8long?5long?8?$AA@ DB '''long long''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CKADOLPM@?8unsigned?5long?8?$AA@
CONST	SEGMENT
??_C@_0BA@CKADOLPM@?8unsigned?5long?8?$AA@ DB '''unsigned long''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EAHJOHNO@?8long?8?$AA@
CONST	SEGMENT
??_C@_06EAHJOHNO@?8long?8?$AA@ DB '''long''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIFOFMCG@?8unsigned?5int?8?$AA@
CONST	SEGMENT
??_C@_0P@FIFOFMCG@?8unsigned?5int?8?$AA@ DB '''unsigned int''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JCHCIMDH@?8int?8?$AA@
CONST	SEGMENT
??_C@_05JCHCIMDH@?8int?8?$AA@ DB '''int''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGCKMNNC@?8unsigned?5short?8?$AA@
CONST	SEGMENT
??_C@_0BB@NGCKMNNC@?8unsigned?5short?8?$AA@ DB '''unsigned short''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCAPGDK@?8short?8?$AA@
CONST	SEGMENT
??_C@_07DCAPGDK@?8short?8?$AA@ DB '''short''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLPLPEPE@?8unsigned?5char?8?$AA@
CONST	SEGMENT
??_C@_0BA@CLPLPEPE@?8unsigned?5char?8?$AA@ DB '''unsigned char''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGAJCJPI@?8signed?5char?8?$AA@
CONST	SEGMENT
??_C@_0O@CGAJCJPI@?8signed?5char?8?$AA@ DB '''signed char''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBIBPING@?8char?8?$AA@
CONST	SEGMENT
??_C@_06EBIBPING@?8char?8?$AA@ DB '''char''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_DescribeTypeChar
_TEXT	SEGMENT
ch$ = 8
is_complex$ = 16
__Pyx_BufFmt_DescribeTypeChar PROC			; COMDAT

; 22747:   switch (ch) {

	movsx	rax, cl
	cmp	eax, 115				; 00000073H
	ja	$LN1@Pyx_BufFmt@4
	lea	r8, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN25@Pyx_BufFmt@4[r8+rax]
	mov	ecx, DWORD PTR $LN26@Pyx_BufFmt@4[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN20@Pyx_BufFmt@4:

; 22748:     case 'c': return "'char'";

	lea	rax, OFFSET FLAT:??_C@_06EBIBPING@?8char?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN19@Pyx_BufFmt@4:

; 22749:     case 'b': return "'signed char'";

	lea	rax, OFFSET FLAT:??_C@_0O@CGAJCJPI@?8signed?5char?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN18@Pyx_BufFmt@4:

; 22750:     case 'B': return "'unsigned char'";

	lea	rax, OFFSET FLAT:??_C@_0BA@CLPLPEPE@?8unsigned?5char?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN17@Pyx_BufFmt@4:

; 22751:     case 'h': return "'short'";

	lea	rax, OFFSET FLAT:??_C@_07DCAPGDK@?8short?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN16@Pyx_BufFmt@4:

; 22752:     case 'H': return "'unsigned short'";

	lea	rax, OFFSET FLAT:??_C@_0BB@NGCKMNNC@?8unsigned?5short?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN15@Pyx_BufFmt@4:

; 22753:     case 'i': return "'int'";

	lea	rax, OFFSET FLAT:??_C@_05JCHCIMDH@?8int?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN14@Pyx_BufFmt@4:

; 22754:     case 'I': return "'unsigned int'";

	lea	rax, OFFSET FLAT:??_C@_0P@FIFOFMCG@?8unsigned?5int?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN13@Pyx_BufFmt@4:

; 22755:     case 'l': return "'long'";

	lea	rax, OFFSET FLAT:??_C@_06EAHJOHNO@?8long?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN12@Pyx_BufFmt@4:

; 22756:     case 'L': return "'unsigned long'";

	lea	rax, OFFSET FLAT:??_C@_0BA@CKADOLPM@?8unsigned?5long?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN11@Pyx_BufFmt@4:

; 22757:     case 'q': return "'long long'";

	lea	rax, OFFSET FLAT:??_C@_0M@DLGDFKKA@?8long?5long?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN10@Pyx_BufFmt@4:

; 22758:     case 'Q': return "'unsigned long long'";

	lea	rax, OFFSET FLAT:??_C@_0BF@MMAPHNH@?8unsigned?5long?5long?8?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN9@Pyx_BufFmt@4:

; 22759:     case 'f': return (is_complex ? "'complex float'" : "'float'");

	lea	rcx, OFFSET FLAT:??_C@_0BA@EEIFGEIO@?8complex?5float?8?$AA@
	lea	rax, OFFSET FLAT:??_C@_07OPPLPPDE@?8float?8?$AA@
	test	edx, edx
	cmovne	rax, rcx

; 22768:   }
; 22769: }

	ret	0
$LN8@Pyx_BufFmt@4:

; 22760:     case 'd': return (is_complex ? "'complex double'" : "'double'");

	lea	rcx, OFFSET FLAT:??_C@_0BB@KABCPJDF@?8complex?5double?8?$AA@
	lea	rax, OFFSET FLAT:??_C@_08ILANNNDM@?8double?8?$AA@
	test	edx, edx
	cmovne	rax, rcx

; 22768:   }
; 22769: }

	ret	0
$LN7@Pyx_BufFmt@4:

; 22761:     case 'g': return (is_complex ? "'complex long double'" : "'long double'");

	lea	rcx, OFFSET FLAT:??_C@_0BG@MMCLHOFD@?8complex?5long?5double?8?$AA@
	lea	rax, OFFSET FLAT:??_C@_0O@IPGBDNGP@?8long?5double?8?$AA@
	test	edx, edx
	cmovne	rax, rcx

; 22768:   }
; 22769: }

	ret	0
$LN6@Pyx_BufFmt@4:

; 22762:     case 'T': return "a struct";

	lea	rax, OFFSET FLAT:??_C@_08DIJKLDAL@a?5struct?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN5@Pyx_BufFmt@4:

; 22763:     case 'O': return "Python object";

	lea	rax, OFFSET FLAT:??_C@_0O@FCDEKCKJ@Python?5object?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN4@Pyx_BufFmt@4:

; 22764:     case 'P': return "a pointer";

	lea	rax, OFFSET FLAT:??_C@_09MPLOGFDC@a?5pointer?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN3@Pyx_BufFmt@4:

; 22765:     case 's': case 'p': return "a string";

	lea	rax, OFFSET FLAT:??_C@_08ELGCIJON@a?5string?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN2@Pyx_BufFmt@4:

; 22766:     case 0: return "end";

	lea	rax, OFFSET FLAT:??_C@_03JBJLGPFL@end?$AA@

; 22768:   }
; 22769: }

	ret	0
$LN1@Pyx_BufFmt@4:

; 22767:     default: return "unparseable format string";

	lea	rax, OFFSET FLAT:??_C@_0BK@GOBIFELO@unparseable?5format?5string?$AA@

; 22768:   }
; 22769: }

	ret	0
	npad	3
$LN26@Pyx_BufFmt@4:
	DD	$LN2@Pyx_BufFmt@4
	DD	$LN18@Pyx_BufFmt@4
	DD	$LN16@Pyx_BufFmt@4
	DD	$LN14@Pyx_BufFmt@4
	DD	$LN12@Pyx_BufFmt@4
	DD	$LN5@Pyx_BufFmt@4
	DD	$LN4@Pyx_BufFmt@4
	DD	$LN10@Pyx_BufFmt@4
	DD	$LN6@Pyx_BufFmt@4
	DD	$LN19@Pyx_BufFmt@4
	DD	$LN20@Pyx_BufFmt@4
	DD	$LN8@Pyx_BufFmt@4
	DD	$LN9@Pyx_BufFmt@4
	DD	$LN7@Pyx_BufFmt@4
	DD	$LN17@Pyx_BufFmt@4
	DD	$LN15@Pyx_BufFmt@4
	DD	$LN13@Pyx_BufFmt@4
	DD	$LN3@Pyx_BufFmt@4
	DD	$LN11@Pyx_BufFmt@4
	DD	$LN1@Pyx_BufFmt@4
$LN25@Pyx_BufFmt@4:
	DB	0
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	1
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	2
	DB	3
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	19
	DB	19
	DB	8
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	19
	DB	19
	DB	17
	DB	18
	DB	19
	DB	17
__Pyx_BufFmt_DescribeTypeChar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@MFPHLAFN@Python?5does?5not?5define?5a?5standar@ ; `string'
EXTRN	__imp_PyErr_SetString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_TypeCharToStandardSize DD imagerel __Pyx_BufFmt_TypeCharToStandardSize
	DD	imagerel __Pyx_BufFmt_TypeCharToStandardSize+297
	DD	imagerel $unwind$__Pyx_BufFmt_TypeCharToStandardSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_TypeCharToStandardSize DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0EN@MFPHLAFN@Python?5does?5not?5define?5a?5standar@
CONST	SEGMENT
??_C@_0EN@MFPHLAFN@Python?5does?5not?5define?5a?5standar@ DB 'Python does'
	DB	' not define a standard format string size for long double ('''
	DB	'g'')..', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_TypeCharToStandardSize
_TEXT	SEGMENT
ch$ = 48
is_complex$ = 56
__Pyx_BufFmt_TypeCharToStandardSize PROC		; COMDAT

; 22770: static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {

	sub	rsp, 40					; 00000028H

; 22771:   switch (ch) {

	movsx	r8d, cl
	lea	eax, DWORD PTR [r8-63]
	cmp	eax, 52					; 00000034H
	ja	$LN1@Pyx_BufFmt@5
	lea	r9, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN16@Pyx_BufFmt@5[r9+rax]
	mov	ecx, DWORD PTR $LN17@Pyx_BufFmt@5[r9+rax*4]
	add	rcx, r9
	jmp	rcx
$LN9@Pyx_BufFmt@5:

; 22772:     case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;

	mov	rax, 1

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_BufFmt@5:

; 22773:     case 'h': case 'H': return 2;

	mov	rax, 2

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@Pyx_BufFmt@5:

; 22774:     case 'i': case 'I': case 'l': case 'L': return 4;

	mov	rax, 4

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_BufFmt@5:

; 22775:     case 'q': case 'Q': return 8;

	mov	eax, 8

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@Pyx_BufFmt@5:

; 22776:     case 'f': return (is_complex ? 8 : 4);

	mov	eax, 8
	mov	ecx, 4
	test	edx, edx
	cmovne	rcx, rax
	mov	rax, rcx

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@Pyx_BufFmt@5:

; 22777:     case 'd': return (is_complex ? 16 : 8);

	mov	eax, 8
	mov	ecx, 16
	test	edx, edx
	cmovne	rax, rcx

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN3@Pyx_BufFmt@5:

; 22778:     case 'g': {
; 22779:       PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0EN@MFPHLAFN@Python?5does?5not?5define?5a?5standar@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 22785:       return 0;

	xor	eax, eax

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_BufFmt@5:

; 22780:       return 0;
; 22781:     }
; 22782:     case 'O': case 'P': return sizeof(void*);
; 22783:     default:
; 22784:       __Pyx_BufFmt_RaiseUnexpectedChar(ch);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22785:       return 0;

	xor	eax, eax

; 22786:     }
; 22787: }

	add	rsp, 40					; 00000028H
	ret	0
$LN17@Pyx_BufFmt@5:
	DD	$LN9@Pyx_BufFmt@5
	DD	$LN8@Pyx_BufFmt@5
	DD	$LN7@Pyx_BufFmt@5
	DD	$LN6@Pyx_BufFmt@5
	DD	$LN4@Pyx_BufFmt@5
	DD	$LN5@Pyx_BufFmt@5
	DD	$LN3@Pyx_BufFmt@5
	DD	$LN1@Pyx_BufFmt@5
$LN16@Pyx_BufFmt@5:
	DB	0
	DB	7
	DB	7
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	2
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	3
	DB	3
	DB	3
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	0
	DB	0
	DB	4
	DB	7
	DB	5
	DB	6
	DB	1
	DB	2
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	0
	DB	3
	DB	7
	DB	0
__Pyx_BufFmt_TypeCharToStandardSize ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_TypeCharToNativeSize DD imagerel __Pyx_BufFmt_TypeCharToNativeSize
	DD	imagerel __Pyx_BufFmt_TypeCharToNativeSize+258
	DD	imagerel $unwind$__Pyx_BufFmt_TypeCharToNativeSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_TypeCharToNativeSize DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_BufFmt_TypeCharToNativeSize
_TEXT	SEGMENT
ch$ = 48
is_complex$ = 56
__Pyx_BufFmt_TypeCharToNativeSize PROC			; COMDAT

; 22788: static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {

	sub	rsp, 40					; 00000028H

; 22789:   switch (ch) {

	movsx	r8d, cl
	lea	eax, DWORD PTR [r8-66]
	cmp	eax, 49					; 00000031H
	ja	$LN1@Pyx_BufFmt@6
	lea	r9, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN17@Pyx_BufFmt@6[r9+rax]
	mov	ecx, DWORD PTR $LN18@Pyx_BufFmt@6[r9+rax*4]
	add	rcx, r9
	jmp	rcx
$LN10@Pyx_BufFmt@6:

; 22790:     case 'c': case 'b': case 'B': case 's': case 'p': return 1;

	mov	rax, 1

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@Pyx_BufFmt@6:

; 22791:     case 'h': case 'H': return sizeof(short);

	mov	rax, 2

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_BufFmt@6:

; 22792:     case 'i': case 'I': return sizeof(int);

	mov	rax, 4

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_BufFmt@6:

; 22793:     case 'l': case 'L': return sizeof(long);
; 22794:     #ifdef HAVE_LONG_LONG
; 22795:     case 'q': case 'Q': return sizeof(PY_LONG_LONG);

	mov	rax, 8

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@Pyx_BufFmt@6:

; 22796:     #endif
; 22797:     case 'f': return sizeof(float) * (is_complex ? 2 : 1);

	xor	eax, eax
	test	edx, edx
	setne	al
	inc	rax
	shl	rax, 2

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@Pyx_BufFmt@6:

; 22798:     case 'd': return sizeof(double) * (is_complex ? 2 : 1);

	xor	eax, eax
	test	edx, edx
	setne	al
	inc	rax
	shl	rax, 3

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_BufFmt@6:

; 22799:     case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
; 22800:     case 'O': case 'P': return sizeof(void*);
; 22801:     default: {
; 22802:       __Pyx_BufFmt_RaiseUnexpectedChar(ch);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22803:       return 0;

	xor	eax, eax

; 22804:     }
; 22805:   }
; 22806: }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@Pyx_BufFmt@6:
	DD	$LN10@Pyx_BufFmt@6
	DD	$LN9@Pyx_BufFmt@6
	DD	$LN8@Pyx_BufFmt@6
	DD	$LN6@Pyx_BufFmt@6
	DD	$LN4@Pyx_BufFmt@6
	DD	$LN5@Pyx_BufFmt@6
	DD	$LN1@Pyx_BufFmt@6
$LN17@Pyx_BufFmt@6:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	3
	DB	3
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	0
	DB	4
	DB	6
	DB	5
	DB	4
	DB	1
	DB	2
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	0
	DB	3
	DB	6
	DB	0
__Pyx_BufFmt_TypeCharToNativeSize ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_TypeCharToAlignment DD imagerel __Pyx_BufFmt_TypeCharToAlignment
	DD	imagerel __Pyx_BufFmt_TypeCharToAlignment+209
	DD	imagerel $unwind$__Pyx_BufFmt_TypeCharToAlignment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_TypeCharToAlignment DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_BufFmt_TypeCharToAlignment
_TEXT	SEGMENT
ch$ = 48
is_complex$ = 56
__Pyx_BufFmt_TypeCharToAlignment PROC			; COMDAT

; 22817: static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {

	sub	rsp, 40					; 00000028H

; 22818:   switch (ch) {

	movsx	r8d, cl
	lea	eax, DWORD PTR [r8-63]
	cmp	eax, 52					; 00000034H
	ja	SHORT $LN1@Pyx_BufFmt@7
	lea	rdx, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN17@Pyx_BufFmt@7[rdx+rax]
	mov	ecx, DWORD PTR $LN18@Pyx_BufFmt@7[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN10@Pyx_BufFmt@7:

; 22819:     case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;

	mov	rax, 1

; 22833:     }
; 22834: }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@Pyx_BufFmt@7:

; 22820:     case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);

	mov	rax, 2

; 22833:     }
; 22834: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_BufFmt@7:

; 22821:     case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);

	mov	rax, 4

; 22833:     }
; 22834: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_BufFmt@7:

; 22822:     case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
; 22823: #ifdef HAVE_LONG_LONG
; 22824:     case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);

	mov	rax, 8

; 22833:     }
; 22834: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_BufFmt@7:

; 22825: #endif
; 22826:     case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
; 22827:     case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
; 22828:     case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
; 22829:     case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
; 22830:     default:
; 22831:       __Pyx_BufFmt_RaiseUnexpectedChar(ch);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22832:       return 0;

	xor	eax, eax

; 22833:     }
; 22834: }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@Pyx_BufFmt@7:
	DD	$LN10@Pyx_BufFmt@7
	DD	$LN9@Pyx_BufFmt@7
	DD	$LN8@Pyx_BufFmt@7
	DD	$LN6@Pyx_BufFmt@7
	DD	$LN1@Pyx_BufFmt@7
$LN17@Pyx_BufFmt@7:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	3
	DB	3
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	3
	DB	4
	DB	2
	DB	3
	DB	1
	DB	2
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	0
	DB	3
	DB	4
	DB	0
__Pyx_BufFmt_TypeCharToAlignment ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_TypeCharToPadding DD imagerel __Pyx_BufFmt_TypeCharToPadding
	DD	imagerel __Pyx_BufFmt_TypeCharToPadding+209
	DD	imagerel $unwind$__Pyx_BufFmt_TypeCharToPadding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_TypeCharToPadding DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_BufFmt_TypeCharToPadding
_TEXT	SEGMENT
ch$ = 48
is_complex$ = 56
__Pyx_BufFmt_TypeCharToPadding PROC			; COMDAT

; 22849: static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {

	sub	rsp, 40					; 00000028H

; 22850:   switch (ch) {

	movsx	r8d, cl
	lea	eax, DWORD PTR [r8-63]
	cmp	eax, 52					; 00000034H
	ja	SHORT $LN1@Pyx_BufFmt@8
	lea	rdx, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN17@Pyx_BufFmt@8[rdx+rax]
	mov	ecx, DWORD PTR $LN18@Pyx_BufFmt@8[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN10@Pyx_BufFmt@8:

; 22851:     case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;

	mov	rax, 1

; 22865:     }
; 22866: }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@Pyx_BufFmt@8:

; 22852:     case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);

	mov	rax, 2

; 22865:     }
; 22866: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_BufFmt@8:

; 22853:     case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);

	mov	rax, 4

; 22865:     }
; 22866: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_BufFmt@8:

; 22854:     case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
; 22855: #ifdef HAVE_LONG_LONG
; 22856:     case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);

	mov	rax, 8

; 22865:     }
; 22866: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_BufFmt@8:

; 22857: #endif
; 22858:     case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
; 22859:     case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
; 22860:     case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
; 22861:     case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
; 22862:     default:
; 22863:       __Pyx_BufFmt_RaiseUnexpectedChar(ch);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22864:       return 0;

	xor	eax, eax

; 22865:     }
; 22866: }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@Pyx_BufFmt@8:
	DD	$LN10@Pyx_BufFmt@8
	DD	$LN9@Pyx_BufFmt@8
	DD	$LN8@Pyx_BufFmt@8
	DD	$LN6@Pyx_BufFmt@8
	DD	$LN1@Pyx_BufFmt@8
$LN17@Pyx_BufFmt@8:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	3
	DB	3
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	0
	DB	3
	DB	4
	DB	2
	DB	3
	DB	1
	DB	2
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	0
	DB	3
	DB	4
	DB	0
__Pyx_BufFmt_TypeCharToPadding ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_TypeCharToGroup DD imagerel __Pyx_BufFmt_TypeCharToGroup
	DD	imagerel __Pyx_BufFmt_TypeCharToGroup+214
	DD	imagerel $unwind$__Pyx_BufFmt_TypeCharToGroup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_TypeCharToGroup DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_BufFmt_TypeCharToGroup
_TEXT	SEGMENT
ch$ = 48
is_complex$ = 56
__Pyx_BufFmt_TypeCharToGroup PROC			; COMDAT

; 22867: static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {

	sub	rsp, 40					; 00000028H

; 22868:   switch (ch) {

	movsx	r8d, cl
	lea	eax, DWORD PTR [r8-66]
	cmp	eax, 49					; 00000031H
	ja	SHORT $LN1@Pyx_BufFmt@9
	lea	r9, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN14@Pyx_BufFmt@9[r9+rax]
	mov	ecx, DWORD PTR $LN15@Pyx_BufFmt@9[r9+rax*4]
	add	rcx, r9
	jmp	rcx
$LN7@Pyx_BufFmt@9:

; 22869:     case 'c':
; 22870:         return 'H';

	mov	al, 72					; 00000048H

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_BufFmt@9:

; 22871:     case 'b': case 'h': case 'i':
; 22872:     case 'l': case 'q': case 's': case 'p':
; 22873:         return 'I';

	mov	al, 73					; 00000049H

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@Pyx_BufFmt@9:

; 22874:     case 'B': case 'H': case 'I': case 'L': case 'Q':
; 22875:         return 'U';

	mov	al, 85					; 00000055H

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@Pyx_BufFmt@9:

; 22876:     case 'f': case 'd': case 'g':
; 22877:         return (is_complex ? 'C' : 'R');

	mov	eax, 82					; 00000052H
	mov	ecx, 67					; 00000043H
	test	edx, edx
	cmovne	eax, ecx

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN3@Pyx_BufFmt@9:

; 22878:     case 'O':
; 22879:         return 'O';

	mov	al, 79					; 0000004fH

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@Pyx_BufFmt@9:

; 22880:     case 'P':
; 22881:         return 'P';

	mov	al, 80					; 00000050H

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_BufFmt@9:

; 22882:     default: {
; 22883:       __Pyx_BufFmt_RaiseUnexpectedChar(ch);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22884:       return 0;

	xor	al, al

; 22885:     }
; 22886:   }
; 22887: }

	add	rsp, 40					; 00000028H
	ret	0
	npad	3
$LN15@Pyx_BufFmt@9:
	DD	$LN5@Pyx_BufFmt@9
	DD	$LN3@Pyx_BufFmt@9
	DD	$LN2@Pyx_BufFmt@9
	DD	$LN6@Pyx_BufFmt@9
	DD	$LN7@Pyx_BufFmt@9
	DD	$LN4@Pyx_BufFmt@9
	DD	$LN1@Pyx_BufFmt@9
$LN14@Pyx_BufFmt@9:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	0
	DB	6
	DB	6
	DB	0
	DB	6
	DB	6
	DB	1
	DB	2
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	4
	DB	5
	DB	6
	DB	5
	DB	5
	DB	3
	DB	3
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	3
	DB	3
	DB	6
	DB	3
__Pyx_BufFmt_TypeCharToGroup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@FNGCMNEO@Buffer?5dtype?5mismatch?0?5expected?5@ ; `string'
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_0DL@GDNEGACM@Buffer?5dtype?5mismatch?0?5expected?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_RaiseExpected DD imagerel __Pyx_BufFmt_RaiseExpected
	DD	imagerel __Pyx_BufFmt_RaiseExpected+170
	DD	imagerel $unwind$__Pyx_BufFmt_RaiseExpected
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_RaiseExpected DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0DC@FNGCMNEO@Buffer?5dtype?5mismatch?0?5expected?5@
CONST	SEGMENT
??_C@_0DC@FNGCMNEO@Buffer?5dtype?5mismatch?0?5expected?5@ DB 'Buffer dtyp'
	DB	'e mismatch, expected %s%s%s but got %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GDNEGACM@Buffer?5dtype?5mismatch?0?5expected?5@
CONST	SEGMENT
??_C@_0DL@GDNEGACM@Buffer?5dtype?5mismatch?0?5expected?5@ DB 'Buffer dtyp'
	DB	'e mismatch, expected ''%s'' but got %s in ''%s.%s''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_RaiseExpected
_TEXT	SEGMENT
ctx$ = 64
__Pyx_BufFmt_RaiseExpected PROC				; COMDAT

; 22888: static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {

	sub	rsp, 56					; 00000038H

; 22889:   if (ctx->head == NULL || ctx->head->field == &ctx->root) {

	mov	rax, QWORD PTR [rcx+24]
	mov	r8, rcx
	test	rax, rax
	je	SHORT $LN9@Pyx_BufFmt@10
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN4@Pyx_BufFmt@10

; 22903:   } else {
; 22904:     __Pyx_StructField* field = ctx->head->field;

	mov	r10, QWORD PTR [rax]

; 22905:     __Pyx_StructField* parent = (ctx->head - 1)->field;

	mov	rax, QWORD PTR [rax-16]

; 22906:     PyErr_Format(PyExc_ValueError,
; 22907:                  "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
; 22908:                  field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
; 22909:                  parent->type->name, field->name);

	mov	edx, DWORD PTR [rcx+64]
	movzx	ecx, BYTE PTR [rcx+68]
	mov	r11, QWORD PTR [rax]
	call	__Pyx_BufFmt_DescribeTypeChar
	mov	r8, QWORD PTR [r10]
	lea	rdx, OFFSET FLAT:??_C@_0DL@GDNEGACM@Buffer?5dtype?5mismatch?0?5expected?5@
	mov	r8, QWORD PTR [r8]
	mov	r9, rax
	mov	rax, QWORD PTR [r10+8]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR [r11]
	mov	QWORD PTR [rsp+32], rax
	jmp	SHORT $LN10@Pyx_BufFmt@10
$LN4@Pyx_BufFmt@10:

; 22890:     const char* expected;
; 22891:     const char* quote;
; 22892:     if (ctx->head == NULL) {

	test	rax, rax
	jne	SHORT $LN3@Pyx_BufFmt@10
$LN9@Pyx_BufFmt@10:

; 22893:       expected = "end";

	lea	r9, OFFSET FLAT:??_C@_03JBJLGPFL@end?$AA@

; 22894:       quote = "";

	lea	r10, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@

; 22895:     } else {

	jmp	SHORT $LN2@Pyx_BufFmt@10
$LN3@Pyx_BufFmt@10:

; 22896:       expected = ctx->head->field->type->name;

	mov	rax, QWORD PTR [rax]

; 22897:       quote = "'";

	lea	r10, OFFSET FLAT:??_C@_01GEODFPGF@?8?$AA@
	mov	rcx, QWORD PTR [rax]
	mov	r9, QWORD PTR [rcx]
$LN2@Pyx_BufFmt@10:

; 22898:     }
; 22899:     PyErr_Format(PyExc_ValueError,
; 22900:                  "Buffer dtype mismatch, expected %s%s%s but got %s",
; 22901:                  quote, expected, quote,
; 22902:                  __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));

	mov	edx, DWORD PTR [r8+64]
	movzx	ecx, BYTE PTR [r8+68]
	call	__Pyx_BufFmt_DescribeTypeChar
	mov	r8, r10
	lea	rdx, OFFSET FLAT:??_C@_0DC@FNGCMNEO@Buffer?5dtype?5mismatch?0?5expected?5@
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r10
$LN10@Pyx_BufFmt@10:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22910:   }
; 22911: }

	add	rsp, 56					; 00000038H
	ret	0
__Pyx_BufFmt_RaiseExpected ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@CKBHHLFB@Buffer?5dtype?5mismatch?$DL?5next?5fiel@ ; `string'
PUBLIC	??_C@_0BP@LMPIFDFM@Expected?5?$CFd?5dimensions?0?5got?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CK@MJGHJCED@Expected?5a?5dimension?5of?5size?5?$CFzu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_ProcessTypeChunk DD imagerel __Pyx_BufFmt_ProcessTypeChunk
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+41
	DD	imagerel $unwind$__Pyx_BufFmt_ProcessTypeChunk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_BufFmt_ProcessTypeChunk DD imagerel __Pyx_BufFmt_ProcessTypeChunk+41
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+165
	DD	imagerel $chain$0$__Pyx_BufFmt_ProcessTypeChunk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_BufFmt_ProcessTypeChunk DD imagerel __Pyx_BufFmt_ProcessTypeChunk+165
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+217
	DD	imagerel $chain$2$__Pyx_BufFmt_ProcessTypeChunk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__Pyx_BufFmt_ProcessTypeChunk DD imagerel __Pyx_BufFmt_ProcessTypeChunk+217
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+786
	DD	imagerel $chain$8$__Pyx_BufFmt_ProcessTypeChunk
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__Pyx_BufFmt_ProcessTypeChunk DD 0a5521H
	DD	085455H
	DD	0bd447H
	DD	0a7442H
	DD	096439H
	DD	04e400H
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+41
	DD	imagerel $unwind$__Pyx_BufFmt_ProcessTypeChunk
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_BufFmt_ProcessTypeChunk DD 020021H
	DD	04e400H
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+41
	DD	imagerel $unwind$__Pyx_BufFmt_ProcessTypeChunk
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_BufFmt_ProcessTypeChunk DD 020521H
	DD	04e405H
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk
	DD	imagerel __Pyx_BufFmt_ProcessTypeChunk+41
	DD	imagerel $unwind$__Pyx_BufFmt_ProcessTypeChunk
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_ProcessTypeChunk DD 030801H
	DD	0c0044208H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0EE@CKBHHLFB@Buffer?5dtype?5mismatch?$DL?5next?5fiel@
CONST	SEGMENT
??_C@_0EE@CKBHHLFB@Buffer?5dtype?5mismatch?$DL?5next?5fiel@ DB 'Buffer dt'
	DB	'ype mismatch; next field is at offset %zd but %zd expected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LMPIFDFM@Expected?5?$CFd?5dimensions?0?5got?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@LMPIFDFM@Expected?5?$CFd?5dimensions?0?5got?5?$CFd?$AA@ DB 'Exp'
	DB	'ected %d dimensions, got %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MJGHJCED@Expected?5a?5dimension?5of?5size?5?$CFzu@
CONST	SEGMENT
??_C@_0CK@MJGHJCED@Expected?5a?5dimension?5of?5size?5?$CFzu@ DB 'Expected'
	DB	' a dimension of size %zu, got %zu', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_ProcessTypeChunk
_TEXT	SEGMENT
ctx$ = 64
__Pyx_BufFmt_ProcessTypeChunk PROC			; COMDAT

; 22912: static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {

	push	rbx
	push	r12
	sub	rsp, 40					; 00000028H

; 22913:   char group;
; 22914:   size_t size, offset, arraysize = 1;
; 22915:   if (ctx->enc_type == 0) return 0;

	movzx	r9d, BYTE PTR [rcx+68]
	mov	rbx, rcx
	mov	r12d, 1
	test	r9b, r9b
	jne	SHORT $LN36@Pyx_BufFmt@11
	xor	eax, eax

; 23013: }

	add	rsp, 40					; 00000028H
	pop	r12
	pop	rbx
	ret	0
$LN36@Pyx_BufFmt@11:

; 22916:   if (ctx->head->field->type->arraysize[0]) {

	mov	r10, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsp+32], r14
	xor	r14d, r14d
	mov	rax, QWORD PTR [r10]
	mov	rcx, QWORD PTR [rax]
	cmp	QWORD PTR [rcx+24], r14
	lea	rdx, QWORD PTR [rcx+24]
	je	$LN35@Pyx_BufFmt@11

; 22917:     int i, ndim = 0;

	mov	r8d, r14d

; 22918:     if (ctx->enc_type == 's' || ctx->enc_type == 'p') {

	cmp	r9b, 115				; 00000073H
	je	SHORT $LN33@Pyx_BufFmt@11
	cmp	r9b, 112				; 00000070H
	jne	SHORT $LN32@Pyx_BufFmt@11
$LN33@Pyx_BufFmt@11:

; 22919:         ctx->is_valid_array = ctx->head->field->type->ndim == 1;

	cmp	DWORD PTR [rcx+88], r12d

; 22920:         ndim = 1;

	mov	r8d, r12d
	sete	al
	mov	BYTE PTR [rbx+71], al

; 22921:         if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {

	mov	rax, QWORD PTR [r10]
	mov	r10, QWORD PTR [rbx+48]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx+24]
	lea	rdx, QWORD PTR [rcx+24]
	cmp	r10, rax
	je	SHORT $LN32@Pyx_BufFmt@11

; 22922:             PyErr_Format(PyExc_ValueError,
; 22923:                          "Expected a dimension of size %zu, got %zu",
; 22924:                          ctx->head->field->type->arraysize[0], ctx->enc_count);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CK@MJGHJCED@Expected?5a?5dimension?5of?5size?5?$CFzu@
	mov	r9, r10
	mov	rcx, QWORD PTR [rcx]
	mov	r8, rax
	call	QWORD PTR __imp_PyErr_Format
	mov	r14, QWORD PTR [rsp+32]

; 22925:             return -1;

	or	eax, -1

; 23013: }

	add	rsp, 40					; 00000028H
	pop	r12
	pop	rbx
	ret	0
$LN32@Pyx_BufFmt@11:

; 22926:         }
; 22927:     }
; 22928:     if (!ctx->is_valid_array) {

	cmp	BYTE PTR [rbx+71], r14b
	jne	SHORT $LN31@Pyx_BufFmt@11

; 22929:       PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
; 22930:                    ctx->head->field->type->ndim, ndim);

	mov	r9d, r8d
	mov	r8d, DWORD PTR [rcx+88]
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BP@LMPIFDFM@Expected?5?$CFd?5dimensions?0?5got?5?$CFd?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	r14, QWORD PTR [rsp+32]

; 22931:       return -1;

	or	eax, -1

; 23013: }

	add	rsp, 40					; 00000028H
	pop	r12
	pop	rbx
	ret	0
$LN31@Pyx_BufFmt@11:

; 22932:     }
; 22933:     for (i = 0; i < ctx->head->field->type->ndim; i++) {

	cmp	DWORD PTR [rcx+88], r14d
	jle	SHORT $LN28@Pyx_BufFmt@11
	mov	rax, QWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	r8d, DWORD PTR [rax+88]
	npad	3
$LL30@Pyx_BufFmt@11:

; 22934:       arraysize *= ctx->head->field->type->arraysize[i];

	imul	r12, QWORD PTR [rdx]
	add	rdx, 8
	sub	r8, 1
	jne	SHORT $LL30@Pyx_BufFmt@11
$LN28@Pyx_BufFmt@11:

; 22935:     }
; 22936:     ctx->is_valid_array = 0;

	mov	BYTE PTR [rbx+71], r14b

; 22937:     ctx->enc_count = 1;

	mov	QWORD PTR [rbx+48], 1
$LN35@Pyx_BufFmt@11:

; 22938:   }
; 22939:   group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);

	mov	edx, DWORD PTR [rbx+64]
	mov	QWORD PTR [rsp+72], rsi
	movzx	ecx, r9b
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r13
	call	__Pyx_BufFmt_TypeCharToGroup
	movzx	r13d, al
	mov	QWORD PTR [rsp+64], rbp
	npad	2
$LL27@Pyx_BufFmt@11:

; 22940:   do {
; 22941:     __Pyx_StructField* field = ctx->head->field;

	mov	rcx, QWORD PTR [rbx+24]
	mov	rdi, QWORD PTR [rcx]

; 22942:     __Pyx_TypeInfo* type = field->type;
; 22943:     if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {

	movzx	ecx, BYTE PTR [rbx+70]
	mov	rsi, QWORD PTR [rdi]
	cmp	cl, 64					; 00000040H
	je	SHORT $LN23@Pyx_BufFmt@11
	cmp	cl, 94					; 0000005eH
	je	SHORT $LN23@Pyx_BufFmt@11

; 22945:     } else {
; 22946:       size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);

	mov	edx, DWORD PTR [rbx+64]
	movzx	ecx, BYTE PTR [rbx+68]
	call	__Pyx_BufFmt_TypeCharToStandardSize
	mov	rbp, rax
	jmp	SHORT $LN22@Pyx_BufFmt@11
$LN23@Pyx_BufFmt@11:

; 22944:       size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);

	mov	edx, DWORD PTR [rbx+64]
	movzx	ecx, BYTE PTR [rbx+68]
	call	__Pyx_BufFmt_TypeCharToNativeSize
	mov	rbp, rax
$LN22@Pyx_BufFmt@11:

; 22947:     }
; 22948:     if (ctx->enc_packmode == '@') {

	cmp	BYTE PTR [rbx+70], 64			; 00000040H
	jne	SHORT $LN18@Pyx_BufFmt@11

; 22949:       size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);

	mov	edx, DWORD PTR [rbx+64]
	movzx	ecx, BYTE PTR [rbx+68]
	call	__Pyx_BufFmt_TypeCharToAlignment
	mov	r11, rax

; 22950:       size_t align_mod_offset;
; 22951:       if (align_at == 0) return -1;

	test	rax, rax
	je	$LN44@Pyx_BufFmt@11

; 22952:       align_mod_offset = ctx->fmt_offset % align_at;

	mov	rcx, QWORD PTR [rbx+32]
	xor	edx, edx
	mov	rax, rcx
	div	r11

; 22953:       if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;

	test	rdx, rdx
	je	SHORT $LN19@Pyx_BufFmt@11
	sub	rcx, rdx
	add	rcx, r11
	mov	QWORD PTR [rbx+32], rcx
$LN19@Pyx_BufFmt@11:

; 22954:       if (ctx->struct_alignment == 0)

	cmp	QWORD PTR [rbx+56], r14
	jne	SHORT $LN18@Pyx_BufFmt@11

; 22955:           ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
; 22956:                                                                  ctx->is_complex);

	mov	edx, DWORD PTR [rbx+64]
	movzx	ecx, BYTE PTR [rbx+68]
	call	__Pyx_BufFmt_TypeCharToPadding
	mov	QWORD PTR [rbx+56], rax
$LN18@Pyx_BufFmt@11:

; 22957:     }
; 22958:     if (type->size != size || type->typegroup != group) {

	mov	rcx, QWORD PTR [rsi+16]
	cmp	rcx, rbp
	jne	SHORT $LN16@Pyx_BufFmt@11
	cmp	BYTE PTR [rsi+92], r13b
	je	SHORT $LN12@Pyx_BufFmt@11
$LN16@Pyx_BufFmt@11:

; 22959:       if (type->typegroup == 'C' && type->fields != NULL) {

	movzx	eax, BYTE PTR [rsi+92]
	cmp	al, 67					; 00000043H
	jne	SHORT $LN15@Pyx_BufFmt@11
	cmp	QWORD PTR [rsi+8], r14
	je	SHORT $LN15@Pyx_BufFmt@11

; 22960:         size_t parent_offset = ctx->head->parent_offset + field->offset;

	mov	rcx, QWORD PTR [rbx+24]
	mov	rdx, QWORD PTR [rcx+8]
	add	rdx, QWORD PTR [rdi+16]

; 22961:         ++ctx->head;

	add	rcx, 16
	mov	QWORD PTR [rbx+24], rcx

; 22962:         ctx->head->field = type->fields;

	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rcx], rax

; 22963:         ctx->head->parent_offset = parent_offset;

	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR [rax+8], rdx

; 22964:         continue;

	jmp	$LN26@Pyx_BufFmt@11
$LN15@Pyx_BufFmt@11:

; 22965:       }
; 22966:       if ((type->typegroup == 'H' || group == 'H') && type->size == size) {

	cmp	al, 72					; 00000048H
	je	SHORT $LN13@Pyx_BufFmt@11
	cmp	r13b, 72				; 00000048H
	jne	$LN14@Pyx_BufFmt@11
$LN13@Pyx_BufFmt@11:
	cmp	rcx, rbp
	jne	$LN14@Pyx_BufFmt@11
$LN12@Pyx_BufFmt@11:

; 22970:       }
; 22971:     }
; 22972:     offset = ctx->head->parent_offset + field->offset;

	mov	rax, QWORD PTR [rbx+24]
	mov	r9, QWORD PTR [rdi+16]
	add	r9, QWORD PTR [rax+8]

; 22973:     if (ctx->fmt_offset != offset) {

	mov	rax, QWORD PTR [rbx+32]
	cmp	rax, r9
	jne	$LN46@Pyx_BufFmt@11

; 22978:     }
; 22979:     ctx->fmt_offset += size;

	lea	rcx, QWORD PTR [rax+rbp]
	mov	QWORD PTR [rbx+32], rcx

; 22980:     if (arraysize)

	test	r12, r12
	je	SHORT $LN10@Pyx_BufFmt@11

; 22981:       ctx->fmt_offset += (arraysize - 1) * size;

	lea	rax, QWORD PTR [r12-1]
	imul	rax, rbp
	add	rax, rcx
	mov	QWORD PTR [rbx+32], rax
$LN10@Pyx_BufFmt@11:

; 22982:     --ctx->enc_count;

	dec	QWORD PTR [rbx+48]
	npad	3
$LL9@Pyx_BufFmt@11:

; 22983:     while (1) {
; 22984:       if (field == &ctx->root) {

	cmp	rdi, rbx
	je	SHORT $LN43@Pyx_BufFmt@11

; 22987:           __Pyx_BufFmt_RaiseExpected(ctx);
; 22988:           return -1;
; 22989:         }
; 22990:         break;
; 22991:       }
; 22992:       ctx->head->field = ++field;

	mov	rax, QWORD PTR [rbx+24]
	add	rdi, 24
	mov	QWORD PTR [rax], rdi

; 22993:       if (field->type == NULL) {

	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	jne	SHORT $LN5@Pyx_BufFmt@11

; 22994:         --ctx->head;

	add	QWORD PTR [rbx+24], -16
	mov	rax, QWORD PTR [rbx+24]

; 22995:         field = ctx->head->field;

	mov	rdi, QWORD PTR [rax]
	jmp	SHORT $LL9@Pyx_BufFmt@11
$LN5@Pyx_BufFmt@11:

; 22996:         continue;
; 22997:       } else if (field->type->typegroup == 'S') {

	cmp	BYTE PTR [rcx+92], 83			; 00000053H
	jne	SHORT $LN26@Pyx_BufFmt@11

; 22998:         size_t parent_offset = ctx->head->parent_offset + field->offset;

	mov	rax, QWORD PTR [rbx+24]
	mov	rdx, QWORD PTR [rdi+16]
	add	rdx, QWORD PTR [rax+8]

; 22999:         if (field->type->fields->type == NULL) continue;

	mov	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], r14
	je	SHORT $LL9@Pyx_BufFmt@11

; 23000:         field = field->type->fields;
; 23001:         ++ctx->head;

	add	QWORD PTR [rbx+24], 16
	mov	rcx, rax
	mov	rax, QWORD PTR [rbx+24]

; 23002:         ctx->head->field = field;

	mov	QWORD PTR [rax], rcx

; 23003:         ctx->head->parent_offset = parent_offset;

	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR [rax+8], rdx
	jmp	SHORT $LN26@Pyx_BufFmt@11
$LN43@Pyx_BufFmt@11:

; 22985:         ctx->head = NULL;

	mov	QWORD PTR [rbx+24], r14

; 22986:         if (ctx->enc_count != 0) {

	cmp	QWORD PTR [rbx+48], r14
	jne	SHORT $LN14@Pyx_BufFmt@11
$LN26@Pyx_BufFmt@11:

; 23004:         break;
; 23005:       } else {
; 23006:         break;
; 23007:       }
; 23008:     }
; 23009:   } while (ctx->enc_count);

	cmp	QWORD PTR [rbx+48], r14
	jne	$LL27@Pyx_BufFmt@11

; 23010:   ctx->enc_type = 0;

	mov	BYTE PTR [rbx+68], r14b

; 23011:   ctx->is_complex = 0;

	mov	DWORD PTR [rbx+64], r14d

; 23012:   return 0;

	xor	eax, eax
	jmp	SHORT $LN53@Pyx_BufFmt@11
$LN46@Pyx_BufFmt@11:

; 22974:       PyErr_Format(PyExc_ValueError,
; 22975:                    "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
; 22976:                    (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0EE@CKBHHLFB@Buffer?5dtype?5mismatch?$DL?5next?5fiel@
	mov	r8, rax
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22977:       return -1;

	jmp	SHORT $LN44@Pyx_BufFmt@11
$LN14@Pyx_BufFmt@11:

; 22967:       } else {
; 22968:           __Pyx_BufFmt_RaiseExpected(ctx);

	mov	rcx, rbx
	call	__Pyx_BufFmt_RaiseExpected
$LN44@Pyx_BufFmt@11:

; 22969:           return -1;

	or	eax, -1
$LN53@Pyx_BufFmt@11:
	mov	rbp, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+72]
	mov	r13, QWORD PTR [rsp+88]
	mov	r14, QWORD PTR [rsp+32]

; 23013: }

	add	rsp, 40					; 00000028H
	pop	r12
	pop	rbx
	ret	0
__Pyx_BufFmt_ProcessTypeChunk ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@BHBFKNFL@Unexpected?5end?5of?5format?5string?0@ ; `string'
PUBLIC	??_C@_0CB@JEIGCCAM@Expected?5?$CFd?5dimension?$CIs?$CJ?0?5got?5?$CFd@ ; `string'
PUBLIC	??_C@_0CJ@JPJMHPBP@Expected?5a?5dimension?5of?5size?5?$CFzu@ ; `string'
PUBLIC	??_C@_0CM@PBNJKCLC@Expected?5a?5comma?5in?5format?5strin@ ; `string'
PUBLIC	??_C@_0CP@JIMIDFNI@Cannot?5handle?5repeated?5arrays?5in@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_buffmt_parse_array DD imagerel __pyx_buffmt_parse_array
	DD	imagerel __pyx_buffmt_parse_array+541
	DD	imagerel $unwind$__pyx_buffmt_parse_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_buffmt_parse_array DD 0c7401H
	DD	0de474H
	DD	0cc46fH
	DD	0a646aH
	DD	0f00c3210H
	DD	07008d00aH
	DD	030065007H
xdata	ENDS
;	COMDAT ??_C@_0CO@BHBFKNFL@Unexpected?5end?5of?5format?5string?0@
CONST	SEGMENT
??_C@_0CO@BHBFKNFL@Unexpected?5end?5of?5format?5string?0@ DB 'Unexpected '
	DB	'end of format string, expected '')''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JEIGCCAM@Expected?5?$CFd?5dimension?$CIs?$CJ?0?5got?5?$CFd@
CONST	SEGMENT
??_C@_0CB@JEIGCCAM@Expected?5?$CFd?5dimension?$CIs?$CJ?0?5got?5?$CFd@ DB 'E'
	DB	'xpected %d dimension(s), got %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPJMHPBP@Expected?5a?5dimension?5of?5size?5?$CFzu@
CONST	SEGMENT
??_C@_0CJ@JPJMHPBP@Expected?5a?5dimension?5of?5size?5?$CFzu@ DB 'Expected'
	DB	' a dimension of size %zu, got %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PBNJKCLC@Expected?5a?5comma?5in?5format?5strin@
CONST	SEGMENT
??_C@_0CM@PBNJKCLC@Expected?5a?5comma?5in?5format?5strin@ DB 'Expected a '
	DB	'comma in format string, got ''%c''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JIMIDFNI@Cannot?5handle?5repeated?5arrays?5in@
CONST	SEGMENT
??_C@_0CP@JIMIDFNI@Cannot?5handle?5repeated?5arrays?5in@ DB 'Cannot handl'
	DB	'e repeated arrays in format string', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_buffmt_parse_array
_TEXT	SEGMENT
ctx$ = 80
tsp$ = 88
__pyx_buffmt_parse_array PROC				; COMDAT

; 23016: {

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rdi
	push	r13
	push	r15
	sub	rsp, 32					; 00000020H

; 23017:     const char *ts = *tsp;
; 23018:     int i = 0, number;
; 23019:     int ndim = ctx->head->field->type->ndim;

	mov	rax, QWORD PTR [rcx+24]

; 23020: ;
; 23021:     ++ts;

	mov	rbx, QWORD PTR [rdx]
	xor	ebp, ebp
	mov	r8, QWORD PTR [rax]
	inc	rbx

; 23022:     if (ctx->new_count != 1) {

	cmp	QWORD PTR [rcx+40], 1
	mov	rax, QWORD PTR [r8]
	mov	rdi, rdx
	mov	r13, rcx
	movsxd	r15, DWORD PTR [rax+88]
	je	SHORT $LN14@pyx_buffmt

; 23023:         PyErr_SetString(PyExc_ValueError,
; 23024:                         "Cannot handle repeated arrays in format string");

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CP@JIMIDFNI@Cannot?5handle?5repeated?5arrays?5in@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN44@pyx_buffmt:

; 23025:         return NULL;

	xor	eax, eax

; 23057: }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
$LN14@pyx_buffmt:

; 23026:     }
; 23027:     if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	SHORT $LN44@pyx_buffmt

; 23028:     while (*ts && *ts != ')') {

	movzx	eax, BYTE PTR [rbx]
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+96], r12
	mov	QWORD PTR [rsp+104], r14
	mov	rsi, rbp
	test	al, al
	je	$LN11@pyx_buffmt
	mov	r12d, 24
$LL12@pyx_buffmt:
	cmp	al, 41					; 00000029H
	je	$LN40@pyx_buffmt

; 23029:         switch (*ts) {

	cmp	al, 9
	mov	cl, al
	jl	SHORT $LN7@pyx_buffmt
	cmp	al, 13
	jle	$LN34@pyx_buffmt
	cmp	al, 32					; 00000020H

; 23030:             case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;

	je	$LN34@pyx_buffmt
$LN7@pyx_buffmt:

; 23031:             default:  break;
; 23032:         }
; 23033:         number = __Pyx_BufFmt_ExpectNumber(&ts);

	cmp	al, 48					; 00000030H
	jl	SHORT $LN23@pyx_buffmt
	cmp	al, 57					; 00000039H
	jg	SHORT $LN23@pyx_buffmt
	movsx	edi, al
	movzx	eax, BYTE PTR [rbx+1]
	sub	edi, 48					; 00000030H
	inc	rbx
	cmp	al, 48					; 00000030H
	jl	SHORT $LN39@pyx_buffmt
	npad	4
$LL21@pyx_buffmt:
	cmp	al, 57					; 00000039H
	jge	SHORT $LN39@pyx_buffmt
	movsx	eax, al
	inc	rbx
	lea	ecx, DWORD PTR [rdi+rdi*4]
	lea	edi, DWORD PTR [rax+rcx*2-48]
	mov	al, BYTE PTR [rbx]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL21@pyx_buffmt
$LN39@pyx_buffmt:
	cmp	edi, -1
	jne	SHORT $LN37@pyx_buffmt
	jmp	SHORT $LN35@pyx_buffmt
$LN23@pyx_buffmt:
	or	edi, -1
$LN35@pyx_buffmt:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	movsx	r8d, BYTE PTR [rbx]
	lea	rdx, OFFSET FLAT:??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 23034:         if (number == -1) return NULL;

	cmp	edi, -1
	je	$LN30@pyx_buffmt
$LN37@pyx_buffmt:

; 23035:         if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])

	cmp	rsi, r15
	jge	SHORT $LN5@pyx_buffmt
	mov	rax, QWORD PTR [r13+24]
	mov	rcx, QWORD PTR [rax]
	movsxd	rax, edi
	mov	rdx, QWORD PTR [rcx]
	cmp	rax, QWORD PTR [r12+rdx]
	jne	SHORT $LN31@pyx_buffmt
$LN5@pyx_buffmt:

; 23039:         if (*ts != ',' && *ts != ')')

	movzx	eax, BYTE PTR [rbx]
	cmp	al, 44					; 0000002cH
	je	SHORT $LN36@pyx_buffmt
	cmp	al, 41					; 00000029H
	je	SHORT $LN3@pyx_buffmt

; 23040:             return PyErr_Format(PyExc_ValueError,
; 23041:                                 "Expected a comma in format string, got '%c'", *ts);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CM@PBNJKCLC@Expected?5a?5comma?5in?5format?5strin@
	movsx	r8d, al
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	jmp	$LN43@pyx_buffmt
$LN36@pyx_buffmt:

; 23042:         if (*ts == ',') ts++;

	inc	rbx
$LN3@pyx_buffmt:

; 23043:         i++;

	inc	ebp
	inc	rsi
	add	r12, 8
$LN34@pyx_buffmt:
	mov	al, BYTE PTR [rbx]
	test	al, al
	jne	$LL12@pyx_buffmt

; 23039:         if (*ts != ',' && *ts != ')')

	mov	rdi, QWORD PTR tsp$[rsp]
	jmp	SHORT $LN11@pyx_buffmt
$LN31@pyx_buffmt:

; 23036:             return PyErr_Format(PyExc_ValueError,
; 23037:                         "Expected a dimension of size %zu, got %d",
; 23038:                         ctx->head->field->type->arraysize[i], number);

	mov	rax, QWORD PTR [r13+24]
	movsxd	rdx, ebp
	mov	r9d, edi
	mov	rcx, QWORD PTR [rax]
	mov	r8, QWORD PTR [rcx]
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	r8, QWORD PTR [r8+rdx*8+24]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0CJ@JPJMHPBP@Expected?5a?5dimension?5of?5size?5?$CFzu@
	call	QWORD PTR __imp_PyErr_Format
	jmp	SHORT $LN43@pyx_buffmt
$LN40@pyx_buffmt:

; 23039:         if (*ts != ',' && *ts != ')')

	mov	rdi, QWORD PTR tsp$[rsp]
$LN11@pyx_buffmt:

; 23044:     }
; 23045:     if (i != ndim)

	cmp	ebp, r15d
	je	SHORT $LN2@pyx_buffmt

; 23046:         return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
; 23047:                             ctx->head->field->type->ndim, i);

	mov	rax, QWORD PTR [r13+24]
	lea	rdx, OFFSET FLAT:??_C@_0CB@JEIGCCAM@Expected?5?$CFd?5dimension?$CIs?$CJ?0?5got?5?$CFd@
	mov	r9d, ebp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	mov	r8d, DWORD PTR [rax+88]
	call	QWORD PTR __imp_PyErr_Format
	jmp	SHORT $LN43@pyx_buffmt
$LN2@pyx_buffmt:

; 23048:     if (!*ts) {

	cmp	BYTE PTR [rbx], 0
	jne	SHORT $LN1@pyx_buffmt

; 23049:         PyErr_SetString(PyExc_ValueError,
; 23050:                         "Unexpected end of format string, expected ')'");

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CO@BHBFKNFL@Unexpected?5end?5of?5format?5string?0@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN30@pyx_buffmt:

; 23051:         return NULL;

	xor	eax, eax
	jmp	SHORT $LN43@pyx_buffmt
$LN1@pyx_buffmt:

; 23052:     }
; 23053:     ctx->is_valid_array = 1;
; 23054:     ctx->new_count = 1;
; 23055:     *tsp = ++ts;

	lea	rax, QWORD PTR [rbx+1]
	mov	BYTE PTR [r13+71], 1
	mov	QWORD PTR [r13+40], 1
	mov	QWORD PTR [rdi], rax

; 23056:     return Py_None;

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$LN43@pyx_buffmt:
	mov	r12, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+80]
	mov	r14, QWORD PTR [rsp+104]

; 23057: }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
__pyx_buffmt_parse_array ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@LECIMBGA@Big?9endian?5buffer?5not?5supported?5@ ; `string'
PUBLIC	??_C@_0CL@MPAHCAAC@Buffer?5acquisition?3?5Expected?5?8?$HL?8@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_BufFmt_CheckString DD imagerel __Pyx_BufFmt_CheckString
	DD	imagerel __Pyx_BufFmt_CheckString+1090
	DD	imagerel $unwind$__Pyx_BufFmt_CheckString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_BufFmt_CheckString DD 061101H
	DD	083411H
	DD	0700d3211H
	DD	0500b600cH
xdata	ENDS
;	COMDAT ??_C@_0DK@LECIMBGA@Big?9endian?5buffer?5not?5supported?5@
CONST	SEGMENT
??_C@_0DK@LECIMBGA@Big?9endian?5buffer?5not?5supported?5@ DB 'Big-endian '
	DB	'buffer not supported on little-endian compiler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MPAHCAAC@Buffer?5acquisition?3?5Expected?5?8?$HL?8@
CONST	SEGMENT
??_C@_0CL@MPAHCAAC@Buffer?5acquisition?3?5Expected?5?8?$HL?8@ DB 'Buffer '
	DB	'acquisition: Expected ''{'' after ''T''', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_BufFmt_CheckString
_TEXT	SEGMENT
ctx$ = 64
ts$ = 72
got_Z$1$ = 80
struct_alignment$1$ = 88
__Pyx_BufFmt_CheckString PROC				; COMDAT

; 23058: static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx
$LN83@Pyx_BufFmt@12:

; 23059:   int got_Z = 0;

	xor	ebp, ebp
	mov	DWORD PTR got_Z$1$[rsp], ebp
$LN82@Pyx_BufFmt@12:
	lea	r8, OFFSET FLAT:__ImageBase
	npad	12
$LL40@Pyx_BufFmt@12:

; 23060:   while (1) {
; 23061:     switch(*ts) {

	movsx	rdx, BYTE PTR [rbx]
	mov	rsi, rdx
	cmp	edx, 125				; 0000007dH
	ja	$LN2@Pyx_BufFmt@12
	movzx	eax, BYTE PTR $LN79@Pyx_BufFmt@12[r8+rdx]
	mov	ecx, DWORD PTR $LN80@Pyx_BufFmt@12[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN32@Pyx_BufFmt@12:

; 23073:       case ' ':
; 23074:       case '\r':
; 23075:       case '\n':
; 23076:         ++ts;

	inc	rbx
	mov	QWORD PTR ts$[rsp], rbx

; 23077:         break;

	jmp	SHORT $LL40@Pyx_BufFmt@12
$LN31@Pyx_BufFmt@12:

; 23078:       case '<':
; 23079:         if (!__Pyx_Is_Little_Endian()) {
; 23080:           PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
; 23081:           return NULL;
; 23082:         }
; 23083:         ctx->new_packmode = '=';
; 23084:         ++ts;

	inc	rbx
	mov	BYTE PTR [rdi+69], 61			; 0000003dH
	mov	QWORD PTR ts$[rsp], rbx

; 23085:         break;

	jmp	SHORT $LL40@Pyx_BufFmt@12
$LN27@Pyx_BufFmt@12:

; 23091:         }
; 23092:         ctx->new_packmode = '=';
; 23093:         ++ts;
; 23094:         break;
; 23095:       case '=':
; 23096:       case '@':
; 23097:       case '^':
; 23098:         ctx->new_packmode = *ts++;

	inc	rbx
	mov	BYTE PTR [rdi+69], dl
	mov	QWORD PTR ts$[rsp], rbx

; 23099:         break;

	jmp	SHORT $LL40@Pyx_BufFmt@12
$LN26@Pyx_BufFmt@12:

; 23100:       case 'T':
; 23101:         {
; 23102:           const char* ts_after_sub;
; 23103:           size_t i, struct_count = ctx->new_count;
; 23104:           size_t struct_alignment = ctx->struct_alignment;

	mov	rax, QWORD PTR [rdi+56]
	mov	rbp, QWORD PTR [rdi+40]

; 23105:           ctx->new_count = 1;

	mov	QWORD PTR [rdi+40], 1

; 23106:           ++ts;
; 23107:           if (*ts != '{') {

	cmp	BYTE PTR [rbx+1], 123			; 0000007bH
	mov	QWORD PTR struct_alignment$1$[rsp], rax
	jne	$LN67@Pyx_BufFmt@12

; 23109:             return NULL;
; 23110:           }
; 23111:           if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	mov	rcx, rdi
	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	$LN73@Pyx_BufFmt@12

; 23112:           ctx->enc_type = 0;
; 23113:           ctx->enc_count = 0;
; 23114:           ctx->struct_alignment = 0;
; 23115:           ++ts;
; 23116:           ts_after_sub = ts;
; 23117:           for (i = 0; i != struct_count; ++i) {

	xor	esi, esi
	mov	BYTE PTR [rdi+68], 0
	mov	QWORD PTR [rdi+48], 0
	mov	QWORD PTR [rdi+56], 0
	lea	rax, QWORD PTR [rbx+2]
	test	rbp, rbp
	je	SHORT $LN21@Pyx_BufFmt@12
	npad	6
$LL23@Pyx_BufFmt@12:

; 23118:             ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);

	lea	rdx, QWORD PTR [rbx+2]
	mov	rcx, rdi
	call	__Pyx_BufFmt_CheckString

; 23119:             if (!ts_after_sub) return NULL;

	test	rax, rax
	je	$LN73@Pyx_BufFmt@12
	inc	rsi
	cmp	rsi, rbp
	jne	SHORT $LL23@Pyx_BufFmt@12
$LN21@Pyx_BufFmt@12:

; 23120:           }
; 23121:           ts = ts_after_sub;
; 23122:           if (struct_alignment) ctx->struct_alignment = struct_alignment;

	mov	ebp, DWORD PTR got_Z$1$[rsp]
	mov	rbx, rax
	mov	QWORD PTR ts$[rsp], rax
	mov	rax, QWORD PTR struct_alignment$1$[rsp]
	lea	r8, OFFSET FLAT:__ImageBase
	test	rax, rax
	je	$LL40@Pyx_BufFmt@12
	mov	QWORD PTR [rdi+56], rax

; 23123:         }
; 23124:         break;

	jmp	$LN82@Pyx_BufFmt@12
$LN15@Pyx_BufFmt@12:

; 23136:       case 'x':
; 23137:         if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	mov	rcx, rdi
	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	$LN73@Pyx_BufFmt@12

; 23138:         ctx->fmt_offset += ctx->new_count;

	mov	rax, QWORD PTR [rdi+40]

; 23139:         ctx->new_count = 1;
; 23140:         ctx->enc_count = 0;

	mov	QWORD PTR [rdi+48], 0

; 23141:         ctx->enc_type = 0;

	mov	BYTE PTR [rdi+68], 0
	add	QWORD PTR [rdi+32], rax

; 23142:         ctx->enc_packmode = ctx->new_packmode;

	movzx	eax, BYTE PTR [rdi+69]

; 23143:         ++ts;

	inc	rbx
	mov	QWORD PTR [rdi+40], 1
	mov	QWORD PTR ts$[rsp], rbx
	mov	BYTE PTR [rdi+70], al

; 23144:         break;

	jmp	$LN82@Pyx_BufFmt@12
$LN13@Pyx_BufFmt@12:

; 23145:       case 'Z':
; 23146:         got_Z = 1;
; 23147:         ++ts;
; 23148:         if (*ts != 'f' && *ts != 'd' && *ts != 'g') {

	mov	dl, BYTE PTR [rbx+1]
	inc	rbx
	mov	ebp, 1
	cmp	dl, 102					; 00000066H
	je	SHORT $LN12@Pyx_BufFmt@12
	cmp	dl, 100					; 00000064H
	je	SHORT $LN12@Pyx_BufFmt@12
	cmp	dl, 103					; 00000067H
	jne	$LN70@Pyx_BufFmt@12
$LN12@Pyx_BufFmt@12:

; 23150:           return NULL;
; 23151:         }
; 23152:       case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
; 23153:       case 'l': case 'L': case 'q': case 'Q':
; 23154:       case 'f': case 'd': case 'g':
; 23155:       case 'O': case 'p':
; 23156:         if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
; 23157:             ctx->enc_packmode == ctx->new_packmode) {

	cmp	BYTE PTR [rdi+68], dl
	jne	SHORT $LN10@Pyx_BufFmt@12
	cmp	ebp, DWORD PTR [rdi+64]
	jne	SHORT $LN10@Pyx_BufFmt@12
	movzx	eax, BYTE PTR [rdi+69]
	cmp	BYTE PTR [rdi+70], al
	jne	SHORT $LN10@Pyx_BufFmt@12

; 23158:           ctx->enc_count += ctx->new_count;

	mov	rax, QWORD PTR [rdi+40]

; 23159:           ctx->new_count = 1;
; 23160:           got_Z = 0;

	xor	ebp, ebp
	mov	QWORD PTR [rdi+40], 1
	add	QWORD PTR [rdi+48], rax

; 23161:           ++ts;

	inc	rbx
	mov	DWORD PTR got_Z$1$[rsp], ebp
	mov	QWORD PTR ts$[rsp], rbx

; 23162:           break;

	jmp	$LL40@Pyx_BufFmt@12
$LN10@Pyx_BufFmt@12:

; 23163:         }
; 23164:       case 's':
; 23165:         if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	mov	rcx, rdi
	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	$LN73@Pyx_BufFmt@12

; 23166:         ctx->enc_count = ctx->new_count;

	mov	rax, QWORD PTR [rdi+40]

; 23167:         ctx->enc_packmode = ctx->new_packmode;
; 23168:         ctx->enc_type = *ts;
; 23169:         ctx->is_complex = got_Z;
; 23170:         ++ts;

	inc	rbx
	mov	QWORD PTR [rdi+48], rax
	movzx	eax, BYTE PTR [rdi+69]
	mov	QWORD PTR ts$[rsp], rbx
	mov	BYTE PTR [rdi+70], al
	movzx	eax, BYTE PTR [rbx-1]
	mov	DWORD PTR [rdi+64], ebp
	mov	BYTE PTR [rdi+68], al

; 23171:         ctx->new_count = 1;

	mov	QWORD PTR [rdi+40], 1

; 23172:         got_Z = 0;
; 23173:         break;

	jmp	$LN83@Pyx_BufFmt@12
$LN7@Pyx_BufFmt@12:

; 23174:       case ':':
; 23175:         ++ts;

	inc	rbx

; 23176:         while(*ts != ':') ++ts;

	cmp	BYTE PTR [rbx], 58			; 0000003aH
	je	SHORT $LN5@Pyx_BufFmt@12
$LL6@Pyx_BufFmt@12:
	inc	rbx
	cmp	BYTE PTR [rbx], 58			; 0000003aH
	jne	SHORT $LL6@Pyx_BufFmt@12
$LN5@Pyx_BufFmt@12:

; 23177:         ++ts;

	inc	rbx
	mov	QWORD PTR ts$[rsp], rbx

; 23178:         break;

	jmp	$LL40@Pyx_BufFmt@12
$LN4@Pyx_BufFmt@12:

; 23179:       case '(':
; 23180:         if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;

	lea	rdx, QWORD PTR ts$[rsp]
	mov	rcx, rdi
	call	__pyx_buffmt_parse_array
	test	rax, rax
	je	$LN73@Pyx_BufFmt@12

; 23181:         break;

	mov	rbx, QWORD PTR ts$[rsp]
	jmp	$LN82@Pyx_BufFmt@12
$LN2@Pyx_BufFmt@12:

; 23182:       default:
; 23183:         {
; 23184:           int number = __Pyx_BufFmt_ExpectNumber(&ts);

	cmp	dl, 48					; 00000030H
	jl	SHORT $LN55@Pyx_BufFmt@12
	cmp	dl, 57					; 00000039H
	jg	SHORT $LN55@Pyx_BufFmt@12
	movzx	eax, BYTE PTR [rbx+1]
	add	esi, -48				; ffffffffffffffd0H
	inc	rbx
	cmp	al, 48					; 00000030H
	jl	SHORT $LN81@Pyx_BufFmt@12
$LL53@Pyx_BufFmt@12:
	cmp	al, 57					; 00000039H
	jge	SHORT $LN81@Pyx_BufFmt@12
	movsx	eax, al
	inc	rbx
	lea	ecx, DWORD PTR [rsi+rsi*4]
	lea	esi, DWORD PTR [rax+rcx*2-48]
	mov	al, BYTE PTR [rbx]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL53@Pyx_BufFmt@12
$LN81@Pyx_BufFmt@12:
	mov	QWORD PTR ts$[rsp], rbx
	cmp	esi, -1
	jne	SHORT $LN78@Pyx_BufFmt@12
	jmp	SHORT $LN77@Pyx_BufFmt@12
$LN55@Pyx_BufFmt@12:
	or	esi, -1
$LN77@Pyx_BufFmt@12:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	movsx	r8d, BYTE PTR [rbx]
	lea	rdx, OFFSET FLAT:??_C@_0EA@BFJMIGF@Does?5not?5understand?5character?5bu@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 23185:           if (number == -1) return NULL;

	cmp	esi, -1
	je	SHORT $LN73@Pyx_BufFmt@12
	lea	r8, OFFSET FLAT:__ImageBase
$LN78@Pyx_BufFmt@12:

; 23186:           ctx->new_count = (size_t)number;

	movsxd	rax, esi
	mov	QWORD PTR [rdi+40], rax

; 23187:         }
; 23188:     }
; 23189:   }

	jmp	$LL40@Pyx_BufFmt@12
$LN67@Pyx_BufFmt@12:

; 23108:             PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");

	lea	rdx, OFFSET FLAT:??_C@_0CL@MPAHCAAC@Buffer?5acquisition?3?5Expected?5?8?$HL?8@
$LN84@Pyx_BufFmt@12:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN73@Pyx_BufFmt@12:

; 23185:           if (number == -1) return NULL;

	xor	eax, eax

; 23190: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN70@Pyx_BufFmt@12:

; 23149:           __Pyx_BufFmt_RaiseUnexpectedChar('Z');

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@MOHDEEDP@Unexpected?5format?5string?5charact@
	mov	r8d, 90					; 0000005aH
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 23185:           if (number == -1) return NULL;

	xor	eax, eax

; 23190: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN36@Pyx_BufFmt@12:

; 23062:       case 0:
; 23063:         if (ctx->enc_type != 0 && ctx->head == NULL) {

	cmp	BYTE PTR [rdi+68], 0
	je	SHORT $LN35@Pyx_BufFmt@12
	cmp	QWORD PTR [rdi+24], 0
	jne	SHORT $LN35@Pyx_BufFmt@12
$LN85@Pyx_BufFmt@12:

; 23064:           __Pyx_BufFmt_RaiseExpected(ctx);

	mov	rcx, rdi
	call	__Pyx_BufFmt_RaiseExpected

; 23185:           if (number == -1) return NULL;

	xor	eax, eax

; 23190: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN35@Pyx_BufFmt@12:

; 23065:           return NULL;
; 23066:         }
; 23067:         if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	mov	rcx, rdi
	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	SHORT $LN73@Pyx_BufFmt@12

; 23068:         if (ctx->head != NULL) {

	cmp	QWORD PTR [rdi+24], 0

; 23069:           __Pyx_BufFmt_RaiseExpected(ctx);
; 23070:           return NULL;

	jne	SHORT $LN85@Pyx_BufFmt@12

; 23071:         }
; 23072:         return ts;

	mov	rax, rbx

; 23190: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN66@Pyx_BufFmt@12:

; 23086:       case '>':
; 23087:       case '!':
; 23088:         if (__Pyx_Is_Little_Endian()) {
; 23089:           PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");

	lea	rdx, OFFSET FLAT:??_C@_0DK@LECIMBGA@Big?9endian?5buffer?5not?5supported?5@

; 23090:           return NULL;

	jmp	$LN84@Pyx_BufFmt@12
$LN18@Pyx_BufFmt@12:

; 23125:       case '}':
; 23126:         {
; 23127:           size_t alignment = ctx->struct_alignment;

	mov	rsi, QWORD PTR [rdi+56]

; 23128:           ++ts;
; 23129:           if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;

	mov	rcx, rdi
	call	__Pyx_BufFmt_ProcessTypeChunk
	cmp	eax, -1
	je	$LN73@Pyx_BufFmt@12

; 23130:           ctx->enc_type = 0;

	mov	BYTE PTR [rdi+68], 0

; 23131:           if (alignment && ctx->fmt_offset % alignment) {

	test	rsi, rsi
	je	SHORT $LN16@Pyx_BufFmt@12
	mov	rcx, QWORD PTR [rdi+32]
	xor	edx, edx
	mov	rax, rcx
	div	rsi
	test	rdx, rdx
	je	SHORT $LN16@Pyx_BufFmt@12

; 23132:             ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);

	sub	rcx, rdx
	add	rcx, rsi
	mov	QWORD PTR [rdi+32], rcx
$LN16@Pyx_BufFmt@12:

; 23133:           }
; 23134:         }
; 23135:         return ts;

	lea	rax, QWORD PTR [rbx+1]

; 23190: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
	npad	3
$LN80@Pyx_BufFmt@12:
	DD	$LN36@Pyx_BufFmt@12
	DD	$LN32@Pyx_BufFmt@12
	DD	$LN66@Pyx_BufFmt@12
	DD	$LN4@Pyx_BufFmt@12
	DD	$LN7@Pyx_BufFmt@12
	DD	$LN31@Pyx_BufFmt@12
	DD	$LN27@Pyx_BufFmt@12
	DD	$LN12@Pyx_BufFmt@12
	DD	$LN26@Pyx_BufFmt@12
	DD	$LN13@Pyx_BufFmt@12
	DD	$LN10@Pyx_BufFmt@12
	DD	$LN15@Pyx_BufFmt@12
	DD	$LN18@Pyx_BufFmt@12
	DD	$LN2@Pyx_BufFmt@12
$LN79@Pyx_BufFmt@12:
	DB	0
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	1
	DB	13
	DB	13
	DB	1
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	1
	DB	2
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	3
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	4
	DB	13
	DB	5
	DB	6
	DB	2
	DB	13
	DB	6
	DB	13
	DB	7
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	7
	DB	7
	DB	13
	DB	13
	DB	7
	DB	13
	DB	13
	DB	7
	DB	13
	DB	7
	DB	13
	DB	13
	DB	8
	DB	13
	DB	13
	DB	13
	DB	13
	DB	13
	DB	9
	DB	13
	DB	13
	DB	13
	DB	6
	DB	13
	DB	13
	DB	13
	DB	7
	DB	7
	DB	7
	DB	13
	DB	7
	DB	7
	DB	7
	DB	7
	DB	13
	DB	13
	DB	7
	DB	13
	DB	13
	DB	13
	DB	7
	DB	7
	DB	13
	DB	10
	DB	13
	DB	13
	DB	13
	DB	13
	DB	11
	DB	13
	DB	13
	DB	13
	DB	13
	DB	12
__Pyx_BufFmt_CheckString ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_ZeroBuffer
_TEXT	SEGMENT
buf$ = 8
__Pyx_ZeroBuffer PROC					; COMDAT

; 23199:   buf->buf = NULL;

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 23200:   buf->obj = NULL;

	mov	QWORD PTR [rcx+8], rax

; 23201:   buf->strides = __Pyx_zeros;

	lea	rax, OFFSET FLAT:__Pyx_zeros
	mov	QWORD PTR [rcx+56], rax

; 23202:   buf->shape = __Pyx_zeros;

	mov	QWORD PTR [rcx+48], rax

; 23203:   buf->suboffsets = __Pyx_minusones;

	lea	rax, OFFSET FLAT:__Pyx_minusones
	mov	QWORD PTR [rcx+64], rax

; 23204: }

	ret	0
__Pyx_ZeroBuffer ENDP
_TEXT	ENDS
EXTRN	__imp_Py_FatalError:PROC
EXTRN	__imp__vsnprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_fatalerror DD imagerel __pyx_fatalerror
	DD	imagerel __pyx_fatalerror+68
	DD	imagerel $unwind$__pyx_fatalerror
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_fatalerror DD 021a01H
	DD	01f011aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_fatalerror
_TEXT	SEGMENT
msg$ = 32
fmt$ = 256
__pyx_fatalerror PROC					; COMDAT

; 23296: static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+32], r9
	sub	rsp, 248				; 000000f8H

; 23297:     va_list vargs;
; 23298:     char msg[200];
; 23299: #ifdef HAVE_STDARG_PROTOTYPES
; 23300:     va_start(vargs, fmt);
; 23301: #else
; 23302:     va_start(vargs);
; 23303: #endif
; 23304:     vsnprintf(msg, 200, fmt, vargs);

	mov	r8, rcx
	lea	r9, QWORD PTR [rax+16]
	lea	rcx, QWORD PTR msg$[rsp]
	mov	edx, 200				; 000000c8H
	call	QWORD PTR __imp__vsnprintf

; 23305:     va_end(vargs);
; 23306:     Py_FatalError(msg);

	lea	rcx, QWORD PTR msg$[rsp]
	call	QWORD PTR __imp_Py_FatalError

; 23307: }

	add	rsp, 248				; 000000f8H
	ret	0
__pyx_fatalerror ENDP
_TEXT	ENDS
EXTRN	__imp_PyThread_release_lock:PROC
EXTRN	__imp_PyThread_acquire_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_add_acquisition_count_locked DD imagerel __pyx_add_acquisition_count_locked
	DD	imagerel __pyx_add_acquisition_count_locked+66
	DD	imagerel $unwind$__pyx_add_acquisition_count_locked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_add_acquisition_count_locked DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_add_acquisition_count_locked
_TEXT	SEGMENT
acquisition_count$ = 48
lock$ = 56
__pyx_add_acquisition_count_locked PROC			; COMDAT

; 23311: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
	mov	rdi, rcx

; 23312:     int result;
; 23313:     PyThread_acquire_lock(lock, 1);

	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock

; 23314:     result = (*acquisition_count)++;

	mov	ebx, DWORD PTR [rdi]
	inc	DWORD PTR [rdi]

; 23315:     PyThread_release_lock(lock);

	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock

; 23316:     return result;
; 23317: }

	mov	rsi, QWORD PTR [rsp+56]
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_add_acquisition_count_locked ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_sub_acquisition_count_locked DD imagerel __pyx_sub_acquisition_count_locked
	DD	imagerel __pyx_sub_acquisition_count_locked+66
	DD	imagerel $unwind$__pyx_sub_acquisition_count_locked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_sub_acquisition_count_locked DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_sub_acquisition_count_locked
_TEXT	SEGMENT
acquisition_count$ = 48
lock$ = 56
__pyx_sub_acquisition_count_locked PROC			; COMDAT

; 23321: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
	mov	rdi, rcx

; 23322:     int result;
; 23323:     PyThread_acquire_lock(lock, 1);

	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock

; 23324:     result = (*acquisition_count)--;

	mov	ebx, DWORD PTR [rdi]
	dec	DWORD PTR [rdi]

; 23325:     PyThread_release_lock(lock);

	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock

; 23326:     return result;
; 23327: }

	mov	rsi, QWORD PTR [rsp+56]
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_sub_acquisition_count_locked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@ ; `string'
EXTRN	__imp_PyGILState_Release:PROC
EXTRN	__imp_PyGILState_Ensure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_INC_MEMVIEW DD imagerel __Pyx_INC_MEMVIEW
	DD	imagerel __Pyx_INC_MEMVIEW+43
	DD	imagerel $unwind$__Pyx_INC_MEMVIEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_INC_MEMVIEW DD imagerel __Pyx_INC_MEMVIEW+43
	DD	imagerel __Pyx_INC_MEMVIEW+136
	DD	imagerel $chain$2$__Pyx_INC_MEMVIEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_INC_MEMVIEW DD imagerel __Pyx_INC_MEMVIEW+136
	DD	imagerel __Pyx_INC_MEMVIEW+187
	DD	imagerel $chain$3$__Pyx_INC_MEMVIEW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_INC_MEMVIEW DD 021H
	DD	imagerel __Pyx_INC_MEMVIEW
	DD	imagerel __Pyx_INC_MEMVIEW+43
	DD	imagerel $unwind$__Pyx_INC_MEMVIEW
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_INC_MEMVIEW DD 061121H
	DD	087411H
	DD	07640aH
	DD	063405H
	DD	imagerel __Pyx_INC_MEMVIEW
	DD	imagerel __Pyx_INC_MEMVIEW+43
	DD	imagerel $unwind$__Pyx_INC_MEMVIEW
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_INC_MEMVIEW DD 040b01H
	DD	09540bH
	DD	0c007320bH
xdata	ENDS
;	COMDAT ??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
CONST	SEGMENT
??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@ DB 'Ac'
	DB	'quisition count is %d (line %d)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_INC_MEMVIEW
_TEXT	SEGMENT
memslice$ = 48
have_gil$ = 56
lineno$ = 64
__Pyx_INC_MEMVIEW PROC					; COMDAT

; 23330: {

	mov	QWORD PTR [rsp+32], rbp
	push	r12
	sub	rsp, 32					; 00000020H

; 23331:     int first_time;
; 23332:     struct __pyx_memoryview_obj *memview = memslice->memview;

	mov	rbp, QWORD PTR [rcx]
	mov	r12d, edx

; 23333:     if (!memview || (PyObject *) memview == Py_None)

	test	rbp, rbp
	je	$LN5@Pyx_INC_ME
	cmp	rbp, QWORD PTR __imp__Py_NoneStruct
	je	$LN5@Pyx_INC_ME

; 23334:         return;
; 23335:     if (__pyx_get_slice_count(memview) < 0)

	mov	rax, QWORD PTR [rbp+64]
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rsi
	mov	ecx, DWORD PTR [rax]
	mov	QWORD PTR [rsp+64], rdi
	test	ecx, ecx
	jns	SHORT $LN4@Pyx_INC_ME

; 23336:         __pyx_fatalerror("Acquisition count is %d (line %d)",
; 23337:                          __pyx_get_slice_count(memview), lineno);

	mov	rax, QWORD PTR [rbp+64]
	lea	rcx, OFFSET FLAT:??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
	mov	edx, DWORD PTR [rax]
	call	__pyx_fatalerror
$LN4@Pyx_INC_ME:

; 23338:     first_time = __pyx_add_acquisition_count(memview) == 0;

	mov	rsi, QWORD PTR [rbp+48]
	mov	rdi, QWORD PTR [rbp+64]
	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	ebx, DWORD PTR [rdi]
	inc	DWORD PTR [rdi]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	mov	rdi, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	test	ebx, ebx
	mov	rbx, QWORD PTR [rsp+48]

; 23339:     if (first_time) {

	jne	SHORT $LN5@Pyx_INC_ME

; 23340:         if (have_gil) {

	test	r12d, r12d
	je	SHORT $LN2@Pyx_INC_ME

; 23341:             Py_INCREF((PyObject *) memview);

	inc	QWORD PTR [rbp]

; 23346:         }
; 23347:     }
; 23348: }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
$LN2@Pyx_INC_ME:

; 23342:         } else {
; 23343:             PyGILState_STATE _gilstate = PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 23344:             Py_INCREF((PyObject *) memview);

	inc	QWORD PTR [rbp]

; 23345:             PyGILState_Release(_gilstate);

	mov	ecx, eax
	call	QWORD PTR __imp_PyGILState_Release
$LN5@Pyx_INC_ME:

; 23346:         }
; 23347:     }
; 23348: }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
__Pyx_INC_MEMVIEW ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_XDEC_MEMVIEW DD imagerel __Pyx_XDEC_MEMVIEW
	DD	imagerel __Pyx_XDEC_MEMVIEW+69
	DD	imagerel $unwind$__Pyx_XDEC_MEMVIEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_XDEC_MEMVIEW DD imagerel __Pyx_XDEC_MEMVIEW+69
	DD	imagerel __Pyx_XDEC_MEMVIEW+154
	DD	imagerel $chain$1$__Pyx_XDEC_MEMVIEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_XDEC_MEMVIEW DD imagerel __Pyx_XDEC_MEMVIEW+154
	DD	imagerel __Pyx_XDEC_MEMVIEW+240
	DD	imagerel $chain$2$__Pyx_XDEC_MEMVIEW
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_XDEC_MEMVIEW DD imagerel __Pyx_XDEC_MEMVIEW+240
	DD	imagerel __Pyx_XDEC_MEMVIEW+257
	DD	imagerel $chain$3$__Pyx_XDEC_MEMVIEW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_XDEC_MEMVIEW DD 021H
	DD	imagerel __Pyx_XDEC_MEMVIEW
	DD	imagerel __Pyx_XDEC_MEMVIEW+69
	DD	imagerel $unwind$__Pyx_XDEC_MEMVIEW
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_XDEC_MEMVIEW DD 020021H
	DD	077400H
	DD	imagerel __Pyx_XDEC_MEMVIEW
	DD	imagerel __Pyx_XDEC_MEMVIEW+69
	DD	imagerel $unwind$__Pyx_XDEC_MEMVIEW
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_XDEC_MEMVIEW DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel __Pyx_XDEC_MEMVIEW
	DD	imagerel __Pyx_XDEC_MEMVIEW+69
	DD	imagerel $unwind$__Pyx_XDEC_MEMVIEW
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_XDEC_MEMVIEW DD 061001H
	DD	095410H
	DD	083410H
	DD	0c00c3210H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_XDEC_MEMVIEW
_TEXT	SEGMENT
memslice$ = 48
have_gil$ = 56
lineno$ = 64
__Pyx_XDEC_MEMVIEW PROC					; COMDAT

; 23350:                                              int have_gil, int lineno) {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	r12
	sub	rsp, 32					; 00000020H

; 23351:     int last_time;
; 23352:     struct __pyx_memoryview_obj *memview = memslice->memview;

	mov	rbx, QWORD PTR [rcx]
	mov	r12d, edx
	mov	rbp, rcx

; 23353:     if (!memview ) {

	test	rbx, rbx
	je	$LN1@Pyx_XDEC_M

; 23354:         return;
; 23355:     } else if ((PyObject *) memview == Py_None) {

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN24@Pyx_XDEC_M

; 23356:         memslice->memview = NULL;

	xor	ebx, ebx
	mov	QWORD PTR [rcx], rbx

; 23374:     }
; 23375: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
$LN24@Pyx_XDEC_M:

; 23357:         return;
; 23358:     }
; 23359:     if (__pyx_get_slice_count(memview) <= 0)

	mov	rax, QWORD PTR [rbx+64]
	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+56], rdi
	mov	ecx, DWORD PTR [rax]
	test	ecx, ecx
	jg	SHORT $LN23@Pyx_XDEC_M

; 23360:         __pyx_fatalerror("Acquisition count is %d (line %d)",
; 23361:                          __pyx_get_slice_count(memview), lineno);

	mov	rax, QWORD PTR [rbx+64]
	lea	rcx, OFFSET FLAT:??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
	mov	edx, DWORD PTR [rax]
	call	__pyx_fatalerror
$LN23@Pyx_XDEC_M:

; 23362:     last_time = __pyx_sub_acquisition_count(memview) == 1;

	mov	rsi, QWORD PTR [rbx+48]
	mov	rbx, QWORD PTR [rbx+64]
	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	edi, DWORD PTR [rbx]
	dec	DWORD PTR [rbx]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	mov	rsi, QWORD PTR [rsp+48]

; 23363:     memslice->data = NULL;

	xor	ebx, ebx
	mov	QWORD PTR [rbp+8], rbx
	cmp	edi, 1

; 23364:     if (last_time) {

	jne	SHORT $LN22@Pyx_XDEC_M

; 23365:         if (have_gil) {

	test	r12d, r12d
	je	SHORT $LN21@Pyx_XDEC_M

; 23366:             Py_CLEAR(memslice->memview);

	mov	rcx, QWORD PTR [rbp]
	test	rcx, rcx
	je	SHORT $LN31@Pyx_XDEC_M
	mov	QWORD PTR [rbp], rbx
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN31@Pyx_XDEC_M
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 23367:         } else {

	jmp	SHORT $LN31@Pyx_XDEC_M
$LN21@Pyx_XDEC_M:

; 23368:             PyGILState_STATE _gilstate = PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 23369:             Py_CLEAR(memslice->memview);

	mov	rcx, QWORD PTR [rbp]
	mov	edi, eax
	test	rcx, rcx
	je	SHORT $LN4@Pyx_XDEC_M
	mov	QWORD PTR [rbp], rbx
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN4@Pyx_XDEC_M
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN4@Pyx_XDEC_M:

; 23370:             PyGILState_Release(_gilstate);

	mov	ecx, edi
	call	QWORD PTR __imp_PyGILState_Release

; 23371:         }
; 23372:     } else {

	jmp	SHORT $LN31@Pyx_XDEC_M
$LN22@Pyx_XDEC_M:

; 23373:         memslice->memview = NULL;

	mov	QWORD PTR [rbp], rbx
$LN31@Pyx_XDEC_M:
	mov	rdi, QWORD PTR [rsp+56]
$LN1@Pyx_XDEC_M:

; 23374:     }
; 23375: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
__Pyx_XDEC_MEMVIEW ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ErrRestoreInState DD imagerel __Pyx_ErrRestoreInState
	DD	imagerel __Pyx_ErrRestoreInState+108
	DD	imagerel $unwind$__Pyx_ErrRestoreInState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ErrRestoreInState DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_ErrRestoreInState
_TEXT	SEGMENT
tstate$ = 48
type$ = 56
value$ = 64
tb$ = 72
__Pyx_ErrRestoreInState PROC				; COMDAT

; 23379: static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 23380:     PyObject *tmp_type, *tmp_value, *tmp_tb;
; 23381:     tmp_type = tstate->curexc_type;

	mov	r10, QWORD PTR [rcx+72]

; 23382:     tmp_value = tstate->curexc_value;

	mov	rdi, QWORD PTR [rcx+80]

; 23383:     tmp_tb = tstate->curexc_traceback;

	mov	rbx, QWORD PTR [rcx+88]

; 23384:     tstate->curexc_type = type;

	mov	QWORD PTR [rcx+72], rdx

; 23385:     tstate->curexc_value = value;

	mov	QWORD PTR [rcx+80], r8

; 23386:     tstate->curexc_traceback = tb;

	mov	QWORD PTR [rcx+88], r9

; 23387:     Py_XDECREF(tmp_type);

	test	r10, r10
	je	SHORT $LN23@Pyx_ErrRes
	add	QWORD PTR [r10], -1
	jne	SHORT $LN23@Pyx_ErrRes
	mov	rax, QWORD PTR [r10+8]
	mov	rcx, r10
	call	QWORD PTR [rax+48]
$LN23@Pyx_ErrRes:

; 23388:     Py_XDECREF(tmp_value);

	test	rdi, rdi
	je	SHORT $LN13@Pyx_ErrRes
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN13@Pyx_ErrRes
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN13@Pyx_ErrRes:

; 23389:     Py_XDECREF(tmp_tb);

	test	rbx, rbx
	je	SHORT $LN3@Pyx_ErrRes
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_ErrRes
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx_ErrRes:

; 23390: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_ErrRestoreInState ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_ErrFetchInState
_TEXT	SEGMENT
tstate$ = 8
type$ = 16
value$ = 24
tb$ = 32
__Pyx_ErrFetchInState PROC				; COMDAT

; 23392:     *type = tstate->curexc_type;

	mov	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rdx], rax

; 23393:     *value = tstate->curexc_value;

	mov	rax, QWORD PTR [rcx+80]
	mov	QWORD PTR [r8], rax

; 23394:     *tb = tstate->curexc_traceback;

	mov	rax, QWORD PTR [rcx+88]
	mov	QWORD PTR [r9], rax

; 23395:     tstate->curexc_type = 0;

	xor	eax, eax
	mov	QWORD PTR [rcx+72], rax

; 23396:     tstate->curexc_value = 0;

	mov	QWORD PTR [rcx+80], rax

; 23397:     tstate->curexc_traceback = 0;

	mov	QWORD PTR [rcx+88], rax

; 23398: }

	ret	0
__Pyx_ErrFetchInState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@ ; `string'
EXTRN	__imp_PyExc_UnboundLocalError:QWORD
;	COMDAT ??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@
CONST	SEGMENT
??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@ DB 'local v'
	DB	'ariable ''%s'' referenced before assignment', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseUnboundLocalError
_TEXT	SEGMENT
varname$ = 8
__Pyx_RaiseUnboundLocalError PROC			; COMDAT

; 23403:     PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);

	mov	r8, rcx
	mov	rcx, QWORD PTR __imp_PyExc_UnboundLocalError
	lea	rdx, OFFSET FLAT:??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@
	mov	rcx, QWORD PTR [rcx]

; 23404: }

	rex_jmp	QWORD PTR __imp_PyErr_Format
__Pyx_RaiseUnboundLocalError ENDP
_TEXT	ENDS
EXTRN	__imp_PyErr_WriteUnraisable:PROC
EXTRN	__imp_PyString_FromString:PROC
EXTRN	__imp_PyErr_PrintEx:PROC
EXTRN	__imp__PyThreadState_Current:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel $unwind$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+14
	DD	imagerel __Pyx_WriteUnraisable+18
	DD	imagerel $chain$0$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+18
	DD	imagerel __Pyx_WriteUnraisable+219
	DD	imagerel $chain$6$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+219
	DD	imagerel __Pyx_WriteUnraisable+263
	DD	imagerel $chain$7$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+263
	DD	imagerel __Pyx_WriteUnraisable+289
	DD	imagerel $chain$8$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+289
	DD	imagerel __Pyx_WriteUnraisable+341
	DD	imagerel $chain$9$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$__Pyx_WriteUnraisable DD imagerel __Pyx_WriteUnraisable+341
	DD	imagerel __Pyx_WriteUnraisable+357
	DD	imagerel $chain$10$__Pyx_WriteUnraisable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$__Pyx_WriteUnraisable DD 021H
	DD	imagerel __Pyx_WriteUnraisable
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel $unwind$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$__Pyx_WriteUnraisable DD 021H
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel __Pyx_WriteUnraisable+18
	DD	imagerel $chain$0$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__Pyx_WriteUnraisable DD 020021H
	DD	077400H
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel __Pyx_WriteUnraisable+18
	DD	imagerel $chain$0$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__Pyx_WriteUnraisable DD 040021H
	DD	077400H
	DD	0c6400H
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel __Pyx_WriteUnraisable+18
	DD	imagerel $chain$0$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__Pyx_WriteUnraisable DD 0c1b21H
	DD	04e41bH
	DD	05d414H
	DD	06c410H
	DD	07740cH
	DD	0c6408H
	DD	0b5404H
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel __Pyx_WriteUnraisable+18
	DD	imagerel $chain$0$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_WriteUnraisable DD 020421H
	DD	0a3404H
	DD	imagerel __Pyx_WriteUnraisable
	DD	imagerel __Pyx_WriteUnraisable+14
	DD	imagerel $unwind$__Pyx_WriteUnraisable
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_WriteUnraisable DD 020901H
	DD	0f0057209H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_WriteUnraisable
_TEXT	SEGMENT
name$ = 80
clineno$ = 88
lineno$ = 96
filename$ = 104
full_traceback$ = 112
nogil$ = 120
__Pyx_WriteUnraisable PROC				; COMDAT

; 23409:                                   int full_traceback, CYTHON_UNUSED int nogil) {

	mov	rax, rsp
	push	r15
	sub	rsp, 64					; 00000040H

; 23410:     PyObject *old_exc, *old_val, *old_tb;
; 23411:     PyObject *ctx;
; 23412:     __Pyx_PyThreadState_declare
; 23413: #ifdef WITH_THREAD
; 23414:     PyGILState_STATE state;
; 23415:     if (nogil)

	cmp	DWORD PTR nogil$[rsp], 0
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax-16], rdi
	mov	QWORD PTR [rax-24], r12
	mov	QWORD PTR [rax-32], r13
	mov	rbx, rcx
	mov	QWORD PTR [rax-40], r14
	je	SHORT $LN26@Pyx_WriteU

; 23416:         state = PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure
	mov	r15d, eax
	jmp	SHORT $LN25@Pyx_WriteU
$LN26@Pyx_WriteU:

; 23417: #ifdef _MSC_VER
; 23418:     else state = (PyGILState_STATE)-1;

	or	r15d, -1
$LN25@Pyx_WriteU:

; 23419: #endif
; 23420: #endif
; 23421:     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rbp, QWORD PTR [rax]

; 23422:     __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);

	xor	eax, eax
	mov	r12, QWORD PTR [rbp+72]
	mov	r13, QWORD PTR [rbp+80]
	mov	r14, QWORD PTR [rbp+88]
	mov	QWORD PTR [rbp+72], rax
	mov	QWORD PTR [rbp+80], rax
	mov	QWORD PTR [rbp+88], rax

; 23423:     if (full_traceback) {

	cmp	DWORD PTR full_traceback$[rsp], eax
	je	SHORT $LN24@Pyx_WriteU

; 23424:         Py_XINCREF(old_exc);

	test	r12, r12
	je	SHORT $LN22@Pyx_WriteU
	inc	QWORD PTR [r12]
$LN22@Pyx_WriteU:

; 23425:         Py_XINCREF(old_val);

	test	r13, r13
	je	SHORT $LN17@Pyx_WriteU
	inc	QWORD PTR [r13]
$LN17@Pyx_WriteU:

; 23426:         Py_XINCREF(old_tb);

	test	r14, r14
	je	SHORT $LN12@Pyx_WriteU
	inc	QWORD PTR [r14]
$LN12@Pyx_WriteU:

; 23427:         __Pyx_ErrRestore(old_exc, old_val, old_tb);

	mov	r9, r14
	mov	r8, r13
	mov	rdx, r12
	mov	rcx, rbp
	call	__Pyx_ErrRestoreInState

; 23428:         PyErr_PrintEx(1);

	mov	ecx, 1
	call	QWORD PTR __imp_PyErr_PrintEx
$LN24@Pyx_WriteU:

; 23429:     }
; 23430:     #if PY_MAJOR_VERSION < 3
; 23431:     ctx = PyString_FromString(name);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyString_FromString

; 23432:     #else
; 23433:     ctx = PyUnicode_FromString(name);
; 23434:     #endif
; 23435:     __Pyx_ErrRestore(old_exc, old_val, old_tb);

	mov	rcx, QWORD PTR [rbp+72]
	mov	rsi, QWORD PTR [rbp+80]
	mov	rdi, QWORD PTR [rbp+88]
	mov	QWORD PTR [rbp+72], r12
	mov	r12, QWORD PTR [rsp+48]
	mov	QWORD PTR [rbp+80], r13
	mov	r13, QWORD PTR [rsp+40]
	mov	QWORD PTR [rbp+88], r14
	mov	r14, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rbx, rax
	test	rcx, rcx
	je	SHORT $LN53@Pyx_WriteU
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN53@Pyx_WriteU
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN53@Pyx_WriteU:
	test	rsi, rsi
	je	SHORT $LN43@Pyx_WriteU
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN43@Pyx_WriteU
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN43@Pyx_WriteU:
	mov	rsi, QWORD PTR [rsp+96]
	test	rdi, rdi
	je	SHORT $LN33@Pyx_WriteU
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN33@Pyx_WriteU
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN33@Pyx_WriteU:
	mov	rdi, QWORD PTR [rsp+56]

; 23436:     if (!ctx) {

	test	rbx, rbx
	jne	SHORT $LN8@Pyx_WriteU

; 23437:         PyErr_WriteUnraisable(Py_None);

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	call	QWORD PTR __imp_PyErr_WriteUnraisable

; 23438:     } else {

	jmp	SHORT $LN4@Pyx_WriteU
$LN8@Pyx_WriteU:

; 23439:         PyErr_WriteUnraisable(ctx);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyErr_WriteUnraisable

; 23440:         Py_DECREF(ctx);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN4@Pyx_WriteU
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN4@Pyx_WriteU:

; 23441:     }
; 23442: #ifdef WITH_THREAD
; 23443:     if (nogil)

	cmp	DWORD PTR nogil$[rsp], 0
	mov	rbx, QWORD PTR [rsp+80]
	je	SHORT $LN1@Pyx_WriteU

; 23444:         PyGILState_Release(state);

	mov	ecx, r15d
	call	QWORD PTR __imp_PyGILState_Release
$LN1@Pyx_WriteU:

; 23445: #endif
; 23446: }

	add	rsp, 64					; 00000040H
	pop	r15
	ret	0
__Pyx_WriteUnraisable ENDP
_TEXT	ENDS
EXTRN	__imp_PyDict_GetItem:PROC
_BSS	SEGMENT
__pyx_d	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetModuleGlobalName DD imagerel __Pyx_GetModuleGlobalName
	DD	imagerel __Pyx_GetModuleGlobalName+52
	DD	imagerel $unwind$__Pyx_GetModuleGlobalName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetModuleGlobalName DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetModuleGlobalName
_TEXT	SEGMENT
name$ = 48
__Pyx_GetModuleGlobalName PROC				; COMDAT

; 23449:   static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 23450:     PyObject *result;
; 23451: #if !CYTHON_AVOID_BORROWED_REFS
; 23452:     result = PyDict_GetItem(__pyx_d, name);

	mov	rdx, rcx
	mov	rcx, QWORD PTR __pyx_d
	call	QWORD PTR __imp_PyDict_GetItem

; 23453:     if (likely(result)) {

	test	rax, rax
	je	SHORT $LN2@Pyx_GetMod

; 23454:         Py_INCREF(result);

	inc	QWORD PTR [rax]

; 23462:     }
; 23463:     return result;
; 23464: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@Pyx_GetMod:

; 23455:     } else {
; 23456: #else
; 23457:     result = PyObject_GetItem(__pyx_d, name);
; 23458:     if (!result) {
; 23459:         PyErr_Clear();
; 23460: #endif
; 23461:         result = __Pyx_GetBuiltinName(name);

	mov	rcx, rbx

; 23462:     }
; 23463:     return result;
; 23464: }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	__Pyx_GetBuiltinName
__Pyx_GetModuleGlobalName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@FLDCAKFI@NULL?5result?5without?5error?5in?5PyO@ ; `string'
PUBLIC	??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@ ; `string'
EXTRN	__imp_PyExc_SystemError:QWORD
EXTRN	__imp__Py_CheckRecursiveCall:PROC
EXTRN	__imp__Py_CheckRecursionLimit:DWORD
EXTRN	__imp_PyObject_Call:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyObject_Call DD imagerel __Pyx_PyObject_Call
	DD	imagerel __Pyx_PyObject_Call+201
	DD	imagerel $unwind$__Pyx_PyObject_Call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyObject_Call DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CL@FLDCAKFI@NULL?5result?5without?5error?5in?5PyO@
CONST	SEGMENT
??_C@_0CL@FLDCAKFI@NULL?5result?5without?5error?5in?5PyO@ DB 'NULL result'
	DB	' without error in PyObject_Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@
CONST	SEGMENT
??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@ DB ' while ca'
	DB	'lling a Python object', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_PyObject_Call
_TEXT	SEGMENT
func$ = 48
arg$ = 56
kw$ = 64
__Pyx_PyObject_Call PROC				; COMDAT

; 23468: static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 23469:     PyObject *result;
; 23470:     ternaryfunc call = func->ob_type->tp_call;

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, QWORD PTR [rax+128]
	mov	rbx, rcx

; 23471:     if (unlikely(!call))

	test	rbp, rbp
	jne	SHORT $LN3@Pyx_PyObje@2

; 23472:         return PyObject_Call(func, arg, kw);

	call	QWORD PTR __imp_PyObject_Call
	jmp	SHORT $LN4@Pyx_PyObje@2
$LN3@Pyx_PyObje@2:

; 23473:     if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rcx, QWORD PTR [rax]
	inc	DWORD PTR [rcx+24]
	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_CheckRecursionLimit
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx+24], ecx
	jle	SHORT $LN2@Pyx_PyObje@2
	lea	rcx, OFFSET FLAT:??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@
	call	QWORD PTR __imp__Py_CheckRecursiveCall
	test	eax, eax
	je	SHORT $LN2@Pyx_PyObje@2

; 23474:         return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@Pyx_PyObje@2
$LN2@Pyx_PyObje@2:

; 23475:     result = (*call)(func, arg, kw);

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx
	call	rbp

; 23476:     Py_LeaveRecursiveCall();

	mov	rcx, QWORD PTR __imp__PyThreadState_Current
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rax
	dec	DWORD PTR [rdx+24]

; 23477:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {

	test	rax, rax
	jne	SHORT $LN1@Pyx_PyObje@2
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN1@Pyx_PyObje@2

; 23478:         PyErr_SetString(
; 23479:             PyExc_SystemError,
; 23480:             "NULL result without error in PyObject_Call");

	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0CL@FLDCAKFI@NULL?5result?5without?5error?5in?5PyO@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN1@Pyx_PyObje@2:

; 23481:     }
; 23482:     return result;

	mov	rax, rbx
$LN4@Pyx_PyObje@2:

; 23483: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_PyObject_Call ENDP
_TEXT	ENDS
EXTRN	__imp_PyEval_EvalFrameEx:PROC
EXTRN	__imp_PyFrame_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyFunction_FastCallNoKw DD imagerel __Pyx_PyFunction_FastCallNoKw
	DD	imagerel __Pyx_PyFunction_FastCallNoKw+170
	DD	imagerel $unwind$__Pyx_PyFunction_FastCallNoKw
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyFunction_FastCallNoKw DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyFunction_FastCallNoKw
_TEXT	SEGMENT
co$ = 48
args$ = 56
na$ = 64
globals$ = 72
__Pyx_PyFunction_FastCallNoKw PROC			; COMDAT

; 23490:                                                PyObject *globals) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 23491:     PyFrameObject *f;
; 23492:     PyThreadState *tstate = __Pyx_PyThreadState_Current;

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	r10, r9
	mov	rbx, rdx
	mov	rbp, QWORD PTR [rax]
	mov	rsi, r8

; 23493:     PyObject **fastlocals;
; 23494:     Py_ssize_t i;
; 23495:     PyObject *result;
; 23496:     assert(globals != NULL);
; 23497:     /* XXX Perhaps we should create a specialized
; 23498:        PyFrame_New() that doesn't take locals, but does
; 23499:        take builtins without sanity checking them.
; 23500:        */
; 23501:     assert(tstate != NULL);
; 23502:     f = PyFrame_New(tstate, co, globals, NULL);

	mov	rdx, rcx
	xor	r9d, r9d
	mov	r8, r10
	mov	rcx, rbp
	call	QWORD PTR __imp_PyFrame_New
	mov	rdi, rax

; 23503:     if (f == NULL) {

	test	rax, rax
	je	SHORT $LN10@Pyx_PyFunc
$LN9@Pyx_PyFunc:

; 23504:         return NULL;
; 23505:     }
; 23506:     fastlocals = f->f_localsplus;
; 23507:     for (i = 0; i < na; i++) {

	xor	ecx, ecx
	test	rsi, rsi
	jle	SHORT $LN6@Pyx_PyFunc
	npad	8
$LL8@Pyx_PyFunc:

; 23508:         Py_INCREF(*args);

	mov	rax, QWORD PTR [rbx]
	inc	rcx

; 23509:         fastlocals[i] = *args++;

	add	rbx, 8
	inc	QWORD PTR [rax]
	cmp	rcx, rsi
	mov	rax, QWORD PTR [rbx-8]
	mov	QWORD PTR [rdi+rcx*8+368], rax
	jl	SHORT $LL8@Pyx_PyFunc
$LN6@Pyx_PyFunc:

; 23510:     }
; 23511:     result = PyEval_EvalFrameEx(f,0);

	xor	edx, edx
	mov	rcx, rdi
	call	QWORD PTR __imp_PyEval_EvalFrameEx

; 23512:     ++tstate->recursion_depth;

	inc	DWORD PTR [rbp+24]

; 23513:     Py_DECREF(f);

	add	QWORD PTR [rdi], -1
	mov	rbx, rax
	jne	SHORT $LN4@Pyx_PyFunc
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyFunc:

; 23514:     --tstate->recursion_depth;

	dec	DWORD PTR [rbp+24]

; 23515:     return result;

	mov	rax, rbx
$LN10@Pyx_PyFunc:

; 23516: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_PyFunction_FastCallNoKw ENDP
_TEXT	ENDS
EXTRN	__imp_PyEval_EvalCodeEx:PROC
EXTRN	__imp_PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyFunction_FastCallDict DD imagerel __Pyx_PyFunction_FastCallDict
	DD	imagerel __Pyx_PyFunction_FastCallDict+564
	DD	imagerel $unwind$__Pyx_PyFunction_FastCallDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyFunction_FastCallDict DD 091f01H
	DD	0f01bc21fH
	DD	0d017e019H
	DD	07013c015H
	DD	050116012H
	DD	03010H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyFunction_FastCallDict
_TEXT	SEGMENT
co$1$ = 80
globals$1$ = 88
func$ = 176
args$ = 184
nargs$ = 192
pos$30229 = 200
kwargs$ = 200
__Pyx_PyFunction_FastCallDict PROC			; COMDAT

; 23518: static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 23519:     PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);

	mov	r13, QWORD PTR [rcx+16]

; 23520:     PyObject *globals = PyFunction_GET_GLOBALS(func);

	mov	rdi, QWORD PTR [rcx+24]

; 23521:     PyObject *argdefs = PyFunction_GET_DEFAULTS(func);

	mov	rsi, QWORD PTR [rcx+32]

; 23522:     PyObject *closure;
; 23523: #if PY_MAJOR_VERSION >= 3
; 23524:     PyObject *kwdefs;
; 23525: #endif
; 23526:     PyObject *kwtuple, **k;
; 23527:     PyObject **d;
; 23528:     Py_ssize_t nd;
; 23529:     Py_ssize_t nk;
; 23530:     PyObject *result;
; 23531:     assert(kwargs == NULL || PyDict_Check(kwargs));
; 23532:     nk = kwargs ? PyDict_Size(kwargs) : 0;

	xor	ebx, ebx
	mov	QWORD PTR co$1$[rsp], r13
	mov	QWORD PTR globals$1$[rsp], rdi
	mov	rbp, r9
	movsxd	r15, r8d
	mov	r14, rdx
	test	r9, r9
	je	SHORT $LN26@Pyx_PyFunc@2
	mov	rcx, r9
	call	QWORD PTR __imp_PyDict_Size
	mov	r12, rax
	jmp	SHORT $LN27@Pyx_PyFunc@2
$LN26@Pyx_PyFunc@2:
	mov	r12, rbx
$LN27@Pyx_PyFunc@2:

; 23533:     if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rcx, QWORD PTR [rax]
	inc	DWORD PTR [rcx+24]
	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_CheckRecursionLimit
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx+24], ecx
	jle	SHORT $LN23@Pyx_PyFunc@2
	lea	rcx, OFFSET FLAT:??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@
	call	QWORD PTR __imp__Py_CheckRecursiveCall
	test	eax, eax
	je	SHORT $LN23@Pyx_PyFunc@2

; 23534:         return NULL;

	xor	eax, eax
	jmp	$LN24@Pyx_PyFunc@2
$LN23@Pyx_PyFunc@2:

; 23535:     }
; 23536:     if (
; 23537: #if PY_MAJOR_VERSION >= 3
; 23538:             co->co_kwonlyargcount == 0 &&
; 23539: #endif
; 23540:             likely(kwargs == NULL || nk == 0) &&
; 23541:             co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {

	test	rbp, rbp
	je	SHORT $LN21@Pyx_PyFunc@2
	test	r12, r12
	jne	SHORT $LN18@Pyx_PyFunc@2
$LN21@Pyx_PyFunc@2:
	cmp	DWORD PTR [r13+28], 67			; 00000043H
	jne	SHORT $LN18@Pyx_PyFunc@2

; 23542:         if (argdefs == NULL && co->co_argcount == nargs) {

	test	rsi, rsi
	jne	SHORT $LN20@Pyx_PyFunc@2
	cmp	DWORD PTR [r13+16], r15d
	jne	SHORT $LN20@Pyx_PyFunc@2

; 23543:             result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);

	mov	r8, r15
	mov	r9, rdi
	mov	rdx, r14
	mov	rcx, r13
	call	__Pyx_PyFunction_FastCallNoKw
	mov	rbx, rax

; 23544:             goto done;

	jmp	$done$30220
$LN20@Pyx_PyFunc@2:

; 23545:         }
; 23546:         else if (nargs == 0 && argdefs != NULL
; 23547:                  && co->co_argcount == Py_SIZE(argdefs)) {

	test	r15d, r15d
	jne	SHORT $LN18@Pyx_PyFunc@2
	test	rsi, rsi
	je	SHORT $LN18@Pyx_PyFunc@2
	mov	r8, QWORD PTR [rsi+16]
	movsxd	rax, DWORD PTR [r13+16]
	cmp	rax, r8
	jne	SHORT $LN18@Pyx_PyFunc@2

; 23548:             /* function called with no arguments, but all parameters have
; 23549:                a default value: use default values as arguments .*/
; 23550:             args = &PyTuple_GET_ITEM(argdefs, 0);

	lea	rdx, QWORD PTR [rsi+24]

; 23551:             result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);

	mov	r9, rdi
	mov	rcx, r13
	call	__Pyx_PyFunction_FastCallNoKw
	mov	rbx, rax

; 23552:             goto done;

	jmp	$done$30220
$LN18@Pyx_PyFunc@2:

; 23553:         }
; 23554:     }
; 23555:     if (kwargs != NULL) {

	test	rbp, rbp
	je	$LN17@Pyx_PyFunc@2

; 23556:         Py_ssize_t pos, i;
; 23557:         kwtuple = PyTuple_New(2 * nk);

	lea	rcx, QWORD PTR [r12+r12]
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax

; 23558:         if (kwtuple == NULL) {

	test	rax, rax
	je	$done$30220

; 23559:             result = NULL;
; 23560:             goto done;
; 23561:         }
; 23562:         k = &PyTuple_GET_ITEM(kwtuple, 0);

	lea	r14, QWORD PTR [rax+24]

; 23563:         pos = i = 0;
; 23564:         while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {

	lea	rdx, QWORD PTR pos$30229[rsp]
	mov	rcx, rbp
	lea	r9, QWORD PTR [r14+8]
	mov	r8, r14
	mov	r12, rbx
	mov	QWORD PTR pos$30229[rsp], rbx
	call	QWORD PTR __imp_PyDict_Next
	test	eax, eax
	je	SHORT $LN14@Pyx_PyFunc@2
	mov	r13, r14
	lea	r15, QWORD PTR [r14+8]
	npad	9
$LL15@Pyx_PyFunc@2:

; 23565:             Py_INCREF(k[i]);

	mov	rax, QWORD PTR [r13]

; 23566:             Py_INCREF(k[i+1]);
; 23567:             i += 2;

	add	r12, 2
	lea	rdx, QWORD PTR pos$30229[rsp]
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [r15]
	lea	r13, QWORD PTR [r14+r12*8]
	inc	QWORD PTR [rax]
	lea	r15, QWORD PTR [r13+8]
	mov	r8, r13
	mov	r9, r15
	mov	rcx, rbp
	call	QWORD PTR __imp_PyDict_Next
	test	eax, eax
	jne	SHORT $LL15@Pyx_PyFunc@2
	mov	r13, QWORD PTR co$1$[rsp]
	mov	r15d, DWORD PTR nargs$[rsp]
$LN14@Pyx_PyFunc@2:

; 23568:         }
; 23569:         nk = i / 2;

	mov	rax, r12
	cdq
	sub	rax, rdx
	sar	rax, 1
	mov	r12, rax

; 23570:     }
; 23571:     else {

	jmp	SHORT $LN13@Pyx_PyFunc@2
$LN17@Pyx_PyFunc@2:

; 23572:         kwtuple = NULL;

	mov	rdi, rbx

; 23573:         k = NULL;

	mov	r14, rbx
$LN13@Pyx_PyFunc@2:

; 23574:     }
; 23575:     closure = PyFunction_GET_CLOSURE(func);

	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+40]

; 23576: #if PY_MAJOR_VERSION >= 3
; 23577:     kwdefs = PyFunction_GET_KW_DEFAULTS(func);
; 23578: #endif
; 23579:     if (argdefs != NULL) {

	test	rsi, rsi
	je	SHORT $LN12@Pyx_PyFunc@2

; 23580:         d = &PyTuple_GET_ITEM(argdefs, 0);
; 23581:         nd = Py_SIZE(argdefs);

	mov	rax, QWORD PTR [rsi+16]
	lea	rbx, QWORD PTR [rsi+24]

; 23582:     }
; 23583:     else {

	jmp	SHORT $LN11@Pyx_PyFunc@2
$LN12@Pyx_PyFunc@2:

; 23584:         d = NULL;
; 23585:         nd = 0;

	mov	rax, rbx
$LN11@Pyx_PyFunc@2:

; 23586:     }
; 23587: #if PY_MAJOR_VERSION >= 3
; 23588:     result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
; 23589:                                args, nargs,
; 23590:                                k, (int)nk,
; 23591:                                d, (int)nd, kwdefs, closure);
; 23592: #else
; 23593:     result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
; 23594:                                args, nargs,
; 23595:                                k, (int)nk,
; 23596:                                d, (int)nd, closure);

	mov	r9, QWORD PTR args$[rsp]
	mov	rdx, QWORD PTR globals$1$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	DWORD PTR [rsp+64], eax
	mov	QWORD PTR [rsp+56], rbx
	mov	DWORD PTR [rsp+48], r12d
	xor	r8d, r8d
	mov	rcx, r13
	mov	QWORD PTR [rsp+40], r14
	mov	DWORD PTR [rsp+32], r15d
	call	QWORD PTR __imp_PyEval_EvalCodeEx
	mov	rbx, rax

; 23597: #endif
; 23598:     Py_XDECREF(kwtuple);

	test	rdi, rdi
	je	SHORT $done$30220
	add	QWORD PTR [rdi], -1
	jne	SHORT $done$30220
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$done$30220:

; 23599: done:
; 23600:     Py_LeaveRecursiveCall();

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rcx, QWORD PTR [rax]

; 23601:     return result;

	mov	rax, rbx
	dec	DWORD PTR [rcx+24]
$LN24@Pyx_PyFunc@2:

; 23602: }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
__Pyx_PyFunction_FastCallDict ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetItemInt_Generic DD imagerel __Pyx_GetItemInt_Generic
	DD	imagerel __Pyx_GetItemInt_Generic+66
	DD	imagerel $unwind$__Pyx_GetItemInt_Generic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetItemInt_Generic DD 041b01H
	DD	06741bH
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetItemInt_Generic
_TEXT	SEGMENT
o$ = 48
j$ = 56
__Pyx_GetItemInt_Generic PROC				; COMDAT

; 23643:     static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 23644:     PyObject *r;
; 23645:     if (!j) return NULL;

	test	rdx, rdx
	jne	SHORT $LN6@Pyx_GetIte
	xor	eax, eax

; 23649: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN6@Pyx_GetIte:
	mov	QWORD PTR [rsp+48], rdi

; 23646:     r = PyObject_GetItem(o, j);

	call	QWORD PTR __imp_PyObject_GetItem

; 23647:     Py_DECREF(j);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN4@Pyx_GetIte
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_GetIte:

; 23648:     return r;

	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]

; 23649: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_GetItemInt_Generic ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetItemInt_Tuple_Fast DD imagerel __Pyx_GetItemInt_Tuple_Fast
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast+68
	DD	imagerel $unwind$__Pyx_GetItemInt_Tuple_Fast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_GetItemInt_Tuple_Fast DD imagerel __Pyx_GetItemInt_Tuple_Fast+68
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast+137
	DD	imagerel $chain$0$__Pyx_GetItemInt_Tuple_Fast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_GetItemInt_Tuple_Fast DD imagerel __Pyx_GetItemInt_Tuple_Fast+137
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast+156
	DD	imagerel $chain$1$__Pyx_GetItemInt_Tuple_Fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_GetItemInt_Tuple_Fast DD 021H
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast+68
	DD	imagerel $unwind$__Pyx_GetItemInt_Tuple_Fast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_GetItemInt_Tuple_Fast DD 020521H
	DD	063405H
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast
	DD	imagerel __Pyx_GetItemInt_Tuple_Fast+68
	DD	imagerel $unwind$__Pyx_GetItemInt_Tuple_Fast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetItemInt_Tuple_Fast DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetItemInt_Tuple_Fast
_TEXT	SEGMENT
o$ = 48
i$ = 56
wraparound$ = 64
boundscheck$ = 72
__Pyx_GetItemInt_Tuple_Fast PROC			; COMDAT

; 23670:                                                               CYTHON_NCP_UNUSED int boundscheck) {

	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 23671: #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 23672:     Py_ssize_t wrapped_i = i;
; 23673:     if (wraparound & unlikely(i < 0)) {

	xor	edi, edi
	test	rdx, rdx
	mov	rsi, rcx
	mov	eax, edi
	sets	al
	mov	r10, rdx
	test	eax, r8d
	je	SHORT $LN3@Pyx_GetIte@2

; 23674:         wrapped_i += PyTuple_GET_SIZE(o);

	mov	rax, QWORD PTR [rcx+16]
	lea	r10, QWORD PTR [rdx+rax]
$LN3@Pyx_GetIte@2:

; 23675:     }
; 23676:     if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {

	test	r9d, r9d
	je	SHORT $LN1@Pyx_GetIte@2
	cmp	r10, QWORD PTR [rsi+16]
	mov	ecx, edi
	mov	eax, edi
	setl	cl
	test	r10, r10
	setns	al
	test	ecx, eax
	jne	SHORT $LN1@Pyx_GetIte@2

; 23678:         Py_INCREF(r);
; 23679:         return r;
; 23680:     }
; 23681:     return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));

	mov	rcx, rdx
	mov	QWORD PTR [rsp+48], rbx
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN9@Pyx_GetIte@2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_GetItem
	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN9@Pyx_GetIte@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN9@Pyx_GetIte@2:
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]

; 23682: #else
; 23683:     return PySequence_GetItem(o, i);
; 23684: #endif
; 23685: }

	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN1@Pyx_GetIte@2:

; 23677:         PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);

	mov	rax, QWORD PTR [rsi+r10*8+24]

; 23682: #else
; 23683:     return PySequence_GetItem(o, i);
; 23684: #endif
; 23685: }

	mov	rsi, QWORD PTR [rsp+56]
	inc	QWORD PTR [rax]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_GetItemInt_Tuple_Fast ENDP
_TEXT	ENDS
EXTRN	__imp_PyErr_Clear:PROC
EXTRN	__imp_PyErr_ExceptionMatches:PROC
EXTRN	__imp_PyExc_OverflowError:QWORD
EXTRN	__imp_PyTuple_Type:BYTE
EXTRN	__imp_PyList_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetItemInt_Fast DD imagerel __Pyx_GetItemInt_Fast
	DD	imagerel __Pyx_GetItemInt_Fast+377
	DD	imagerel $unwind$__Pyx_GetItemInt_Fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetItemInt_Fast DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetItemInt_Fast
_TEXT	SEGMENT
o$ = 48
i$ = 56
is_list$ = 64
wraparound$ = 72
boundscheck$ = 80
__Pyx_GetItemInt_Fast PROC				; COMDAT

; 23688:                                                      CYTHON_NCP_UNUSED int boundscheck) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 23689: #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
; 23690:     if (is_list || PyList_CheckExact(o)) {

	xor	esi, esi
	mov	rbx, rdx
	mov	rdi, rcx
	test	r8d, r8d
	jne	$LN13@Pyx_GetIte@3
	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyList_Type
	je	$LN13@Pyx_GetIte@3

; 23695:             return r;
; 23696:         }
; 23697:     }
; 23698:     else if (PyTuple_CheckExact(o)) {

	cmp	rax, QWORD PTR __imp_PyTuple_Type
	jne	SHORT $LN9@Pyx_GetIte@3

; 23699:         Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);

	test	rdx, rdx
	mov	r8d, esi
	mov	eax, esi
	setns	r8b
	test	r9d, r9d
	sete	al
	or	r8d, eax
	jne	SHORT $LN20@Pyx_GetIte@3
	add	rdx, QWORD PTR [rcx+16]
$LN20@Pyx_GetIte@3:

; 23700:         if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {

	cmp	DWORD PTR boundscheck$[rsp], esi
	je	SHORT $LN7@Pyx_GetIte@3
	cmp	rdx, QWORD PTR [rdi+16]
	mov	ecx, esi
	mov	eax, esi
	setl	cl
	test	rdx, rdx
	setns	al
	test	ecx, eax
	je	$LN12@Pyx_GetIte@3
$LN7@Pyx_GetIte@3:

; 23701:             PyObject *r = PyTuple_GET_ITEM(o, n);

	mov	rax, QWORD PTR [rdi+rdx*8+24]

; 23702:             Py_INCREF(r);
; 23703:             return r;

	jmp	$LN29@Pyx_GetIte@3
$LN9@Pyx_GetIte@3:

; 23704:         }
; 23705:     } else {
; 23706:         PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;

	mov	rbp, QWORD PTR [rax+104]

; 23707:         if (likely(m && m->sq_item)) {

	test	rbp, rbp
	je	$LN12@Pyx_GetIte@3
	cmp	QWORD PTR [rbp+24], rsi
	je	$LN12@Pyx_GetIte@3

; 23708:             if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {

	test	r9d, r9d
	je	SHORT $LN2@Pyx_GetIte@3
	test	rdx, rdx
	jns	SHORT $LN2@Pyx_GetIte@3
	mov	rax, QWORD PTR [rbp]
	test	rax, rax
	je	SHORT $LN2@Pyx_GetIte@3

; 23709:                 Py_ssize_t l = m->sq_length(o);

	call	rax

; 23710:                 if (likely(l >= 0)) {

	test	rax, rax
	js	SHORT $LN3@Pyx_GetIte@3

; 23711:                     i += l;

	add	rbx, rax

; 23716:                 }
; 23717:             }
; 23718:             return m->sq_item(o, i);

	mov	rcx, rdi
	mov	rdx, rbx
	call	QWORD PTR [rbp+24]
	jmp	$LN15@Pyx_GetIte@3
$LN3@Pyx_GetIte@3:

; 23712:                 } else {
; 23713:                     if (!PyErr_ExceptionMatches(PyExc_OverflowError))

	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_ExceptionMatches
	test	eax, eax
	jne	SHORT $LN1@Pyx_GetIte@3

; 23714:                         return NULL;

	xor	eax, eax
	jmp	$LN15@Pyx_GetIte@3
$LN1@Pyx_GetIte@3:

; 23715:                     PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear
$LN2@Pyx_GetIte@3:

; 23716:                 }
; 23717:             }
; 23718:             return m->sq_item(o, i);

	mov	rdx, rbx
	mov	rcx, rdi
	call	QWORD PTR [rbp+24]
	jmp	SHORT $LN15@Pyx_GetIte@3
$LN13@Pyx_GetIte@3:

; 23691:         Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);

	test	rdx, rdx
	mov	ecx, esi
	mov	eax, esi
	setns	cl
	test	r9d, r9d
	sete	al
	or	ecx, eax
	jne	SHORT $LN18@Pyx_GetIte@3
	add	rdx, QWORD PTR [rdi+16]
$LN18@Pyx_GetIte@3:

; 23692:         if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {

	cmp	DWORD PTR boundscheck$[rsp], esi
	je	SHORT $LN11@Pyx_GetIte@3
	cmp	rdx, QWORD PTR [rdi+16]
	mov	ecx, esi
	mov	eax, esi
	setl	cl
	test	rdx, rdx
	setns	al
	test	ecx, eax
	jne	SHORT $LN11@Pyx_GetIte@3
$LN12@Pyx_GetIte@3:

; 23719:         }
; 23720:     }
; 23721: #else
; 23722:     if (is_list || PySequence_Check(o)) {
; 23723:         return PySequence_GetItem(o, i);
; 23724:     }
; 23725: #endif
; 23726:     return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));

	mov	rcx, rbx
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN24@Pyx_GetIte@3
	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetItem
	add	QWORD PTR [rbx], -1
	mov	rsi, rax
	jne	SHORT $LN24@Pyx_GetIte@3
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN24@Pyx_GetIte@3:
	mov	rax, rsi
	jmp	SHORT $LN15@Pyx_GetIte@3
$LN11@Pyx_GetIte@3:

; 23693:             PyObject *r = PyList_GET_ITEM(o, n);

	mov	rax, QWORD PTR [rdi+24]
	mov	rax, QWORD PTR [rax+rdx*8]
$LN29@Pyx_GetIte@3:

; 23694:             Py_INCREF(r);

	inc	QWORD PTR [rax]
$LN15@Pyx_GetIte@3:

; 23727: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_GetItemInt_Fast ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@MAOLEHIP@raise?3?5exception?5class?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ ; `string'
PUBLIC	??_C@_0CJ@EBAPJJOI@raise?3?5arg?53?5must?5be?5a?5traceback@ ; `string'
EXTRN	__imp_PyType_IsSubtype:PROC
EXTRN	__imp_PyExc_BaseException:QWORD
EXTRN	__imp_PyErr_NormalizeException:PROC
EXTRN	__imp_PyTraceBack_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_Raise DD imagerel __Pyx_Raise
	DD	imagerel __Pyx_Raise+226
	DD	imagerel $unwind$__Pyx_Raise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_Raise DD imagerel __Pyx_Raise+226
	DD	imagerel __Pyx_Raise+239
	DD	imagerel $chain$0$__Pyx_Raise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_Raise DD imagerel __Pyx_Raise+239
	DD	imagerel __Pyx_Raise+309
	DD	imagerel $chain$1$__Pyx_Raise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_Raise DD imagerel __Pyx_Raise+309
	DD	imagerel __Pyx_Raise+330
	DD	imagerel $chain$2$__Pyx_Raise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_Raise DD imagerel __Pyx_Raise+330
	DD	imagerel __Pyx_Raise+542
	DD	imagerel $chain$3$__Pyx_Raise
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_Raise DD 021H
	DD	imagerel __Pyx_Raise
	DD	imagerel __Pyx_Raise+226
	DD	imagerel $unwind$__Pyx_Raise
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_Raise DD 021H
	DD	imagerel __Pyx_Raise+226
	DD	imagerel __Pyx_Raise+239
	DD	imagerel $chain$0$__Pyx_Raise
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_Raise DD 020521H
	DD	047405H
	DD	imagerel __Pyx_Raise+226
	DD	imagerel __Pyx_Raise+239
	DD	imagerel $chain$0$__Pyx_Raise
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_Raise DD 020521H
	DD	093405H
	DD	imagerel __Pyx_Raise
	DD	imagerel __Pyx_Raise+226
	DD	imagerel $unwind$__Pyx_Raise
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_Raise DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0DL@MAOLEHIP@raise?3?5exception?5class?5must?5be?5a@
CONST	SEGMENT
??_C@_0DL@MAOLEHIP@raise?3?5exception?5class?5must?5be?5a@ DB 'raise: exc'
	DB	'eption class must be a subclass of BaseException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
CONST	SEGMENT
??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ DB 'instance ex'
	DB	'ception may not have a separate value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EBAPJJOI@raise?3?5arg?53?5must?5be?5a?5traceback@
CONST	SEGMENT
??_C@_0CJ@EBAPJJOI@raise?3?5arg?53?5must?5be?5a?5traceback@ DB 'raise: ar'
	DB	'g 3 must be a traceback or None', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_Raise
_TEXT	SEGMENT
type$ = 48
value$ = 56
tb$ = 64
cause$ = 72
__Pyx_Raise PROC					; COMDAT

; 23732:                         CYTHON_UNUSED PyObject *cause) {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 23733:     __Pyx_PyThreadState_declare
; 23734:     Py_XINCREF(type);

	test	rcx, rcx
	je	SHORT $LN45@Pyx_Raise
	inc	QWORD PTR [rcx]
	mov	r8, QWORD PTR tb$[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
$LN45@Pyx_Raise:

; 23735:     if (!value || value == Py_None)

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	xor	r9d, r9d
	test	rdx, rdx
	je	SHORT $LN40@Pyx_Raise
	cmp	rdx, rax
	je	SHORT $LN40@Pyx_Raise

; 23737:     else
; 23738:         Py_INCREF(value);

	inc	QWORD PTR [rdx]
	mov	r8, QWORD PTR tb$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	jmp	SHORT $LN39@Pyx_Raise
$LN40@Pyx_Raise:

; 23736:         value = NULL;

	mov	QWORD PTR value$[rsp], r9
$LN39@Pyx_Raise:

; 23739:     if (!tb || tb == Py_None)

	test	r8, r8
	je	SHORT $LN37@Pyx_Raise
	cmp	r8, rax
	je	SHORT $LN37@Pyx_Raise

; 23741:     else {
; 23742:         Py_INCREF(tb);

	inc	QWORD PTR [r8]

; 23743:         if (!PyTraceBack_Check(tb)) {

	mov	rcx, QWORD PTR tb$[rsp]
	mov	rax, QWORD PTR __imp_PyTraceBack_Type
	cmp	QWORD PTR [rcx+8], rax
	je	SHORT $LN81@Pyx_Raise

; 23744:             PyErr_SetString(PyExc_TypeError,
; 23745:                 "raise: arg 3 must be a traceback or None");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@EBAPJJOI@raise?3?5arg?53?5must?5be?5a?5traceback@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 23746:             goto raise_error;

	jmp	$raise_error$30408
$LN81@Pyx_Raise:

; 23740:         tb = NULL;

	mov	rcx, QWORD PTR type$[rsp]
	jmp	SHORT $LN35@Pyx_Raise
$LN37@Pyx_Raise:
	mov	QWORD PTR tb$[rsp], r9
$LN35@Pyx_Raise:

; 23747:         }
; 23748:     }
; 23749:     if (PyType_Check(type)) {

	mov	rax, QWORD PTR [rcx+8]
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	$LN34@Pyx_Raise

; 23750: #if CYTHON_COMPILING_IN_PYPY
; 23751:         if (!value) {
; 23752:             Py_INCREF(Py_None);
; 23753:             value = Py_None;
; 23754:         }
; 23755: #endif
; 23756:         PyErr_NormalizeException(&type, &value, &tb);

	lea	r8, QWORD PTR tb$[rsp]
	lea	rdx, QWORD PTR value$[rsp]
	lea	rcx, QWORD PTR type$[rsp]
	call	QWORD PTR __imp_PyErr_NormalizeException
$LN31@Pyx_Raise:

; 23769:             goto raise_error;
; 23770:         }
; 23771:     }
; 23772:     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current

; 23773:     __Pyx_ErrRestore(type, value, tb);

	mov	r8, QWORD PTR tb$[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	rax, QWORD PTR type$[rsp]
	mov	QWORD PTR [rsp+72], rbx
	mov	rcx, QWORD PTR [r9+72]
	mov	rbx, QWORD PTR [r9+88]
	mov	QWORD PTR [rsp+32], rdi
	mov	rdi, QWORD PTR [r9+80]
	mov	QWORD PTR [r9+72], rax
	mov	QWORD PTR [r9+88], r8
	mov	QWORD PTR [r9+80], rdx
	test	rcx, rcx
	je	SHORT $LN71@Pyx_Raise
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN71@Pyx_Raise
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN71@Pyx_Raise:
	test	rdi, rdi
	je	SHORT $LN61@Pyx_Raise
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN61@Pyx_Raise
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN61@Pyx_Raise:
	mov	rdi, QWORD PTR [rsp+32]
	test	rbx, rbx
	je	SHORT $LN51@Pyx_Raise
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN51@Pyx_Raise
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN51@Pyx_Raise:
	mov	rbx, QWORD PTR [rsp+72]
$LN8@Pyx_Raise:

; 23779:     return;
; 23780: }

	add	rsp, 40					; 00000028H
	ret	0
$LN34@Pyx_Raise:

; 23757:     } else {
; 23758:         if (value) {

	cmp	QWORD PTR value$[rsp], r9
	je	SHORT $LN32@Pyx_Raise

; 23759:             PyErr_SetString(PyExc_TypeError,
; 23760:                 "instance exception may not have a separate value");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 23761:             goto raise_error;

	jmp	SHORT $raise_error$30408
$LN32@Pyx_Raise:

; 23762:         }
; 23763:         value = type;

	mov	QWORD PTR value$[rsp], rcx

; 23764:         type = (PyObject*) Py_TYPE(type);

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR type$[rsp], rax

; 23765:         Py_INCREF(type);

	inc	QWORD PTR [rax]

; 23766:         if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {

	mov	rdx, QWORD PTR __imp_PyExc_BaseException
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR type$[rsp]
	call	QWORD PTR __imp_PyType_IsSubtype
	test	eax, eax
	jne	$LN31@Pyx_Raise

; 23767:             PyErr_SetString(PyExc_TypeError,
; 23768:                 "raise: exception class must be a subclass of BaseException");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0DL@MAOLEHIP@raise?3?5exception?5class?5must?5be?5a@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$raise_error$30408:

; 23774:     return;
; 23775: raise_error:
; 23776:     Py_XDECREF(value);

	mov	rax, QWORD PTR value$[rsp]
	test	rax, rax
	je	SHORT $LN23@Pyx_Raise
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN23@Pyx_Raise
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN23@Pyx_Raise:

; 23777:     Py_XDECREF(type);

	mov	rax, QWORD PTR type$[rsp]
	test	rax, rax
	je	SHORT $LN13@Pyx_Raise
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN13@Pyx_Raise
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@Pyx_Raise:

; 23778:     Py_XDECREF(tb);

	mov	rax, QWORD PTR tb$[rsp]
	test	rax, rax
	je	$LN8@Pyx_Raise
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR tb$[rsp]
	cmp	QWORD PTR [rcx], 0
	jne	$LN8@Pyx_Raise
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 23779:     return;
; 23780: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_Raise ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@ ; `string'
;	COMDAT ??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@
CONST	SEGMENT
??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@ DB 'too many'
	DB	' values to unpack (expected %zd)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseTooManyValuesError
_TEXT	SEGMENT
expected$ = 8
__Pyx_RaiseTooManyValuesError PROC			; COMDAT

; 23890:     PyErr_Format(PyExc_ValueError,
; 23891:                  "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);

	mov	r8, rcx
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@
	mov	rcx, QWORD PTR [rcx]

; 23892: }

	rex_jmp	QWORD PTR __imp_PyErr_Format
__Pyx_RaiseTooManyValuesError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@INOJCKOP@need?5more?5than?5?$CFzd?5value?$CF?41s?5to?5@ ; `string'
;	COMDAT ??_C@_0CH@INOJCKOP@need?5more?5than?5?$CFzd?5value?$CF?41s?5to?5@
CONST	SEGMENT
??_C@_0CH@INOJCKOP@need?5more?5than?5?$CFzd?5value?$CF?41s?5to?5@ DB 'nee'
	DB	'd more than %zd value%.1s to unpack', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseNeedMoreValuesError
_TEXT	SEGMENT
index$ = 8
__Pyx_RaiseNeedMoreValuesError PROC			; COMDAT

; 23896:     PyErr_Format(PyExc_ValueError,
; 23897:                  "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
; 23898:                  index, (index == 1) ? "" : "s");

	cmp	rcx, 1
	mov	r8, rcx
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	lea	r9, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0CH@INOJCKOP@need?5more?5than?5?$CFzd?5value?$CF?41s?5to?5@
	cmove	r9, rax

; 23899: }

	rex_jmp	QWORD PTR __imp_PyErr_Format
__Pyx_RaiseNeedMoreValuesError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@ ; `string'
;	COMDAT ??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
CONST	SEGMENT
??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@ DB '''NoneType'
	DB	''' object is not iterable', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_RaiseNoneNotIterableError
_TEXT	SEGMENT
__Pyx_RaiseNoneNotIterableError PROC			; COMDAT

; 23903:     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
	mov	rcx, QWORD PTR [rcx]

; 23904: }

	rex_jmp	QWORD PTR __imp_PyErr_SetString
__Pyx_RaiseNoneNotIterableError ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx__ExceptionSave
_TEXT	SEGMENT
tstate$ = 8
type$ = 16
value$ = 24
tb$ = 32
__Pyx__ExceptionSave PROC				; COMDAT

; 23909:     #if PY_VERSION_HEX >= 0x030700A2
; 23910:     *type = tstate->exc_state.exc_type;
; 23911:     *value = tstate->exc_state.exc_value;
; 23912:     *tb = tstate->exc_state.exc_traceback;
; 23913:     #else
; 23914:     *type = tstate->exc_type;

	mov	rax, QWORD PTR [rcx+96]
	mov	QWORD PTR [rdx], rax

; 23915:     *value = tstate->exc_value;

	mov	rax, QWORD PTR [rcx+104]
	mov	QWORD PTR [r8], rax

; 23916:     *tb = tstate->exc_traceback;

	mov	rax, QWORD PTR [rcx+112]
	mov	QWORD PTR [r9], rax

; 23917:     #endif
; 23918:     Py_XINCREF(*type);

	mov	rax, QWORD PTR [rdx]
	test	rax, rax
	je	SHORT $LN14@Pyx__Excep
	inc	QWORD PTR [rax]
$LN14@Pyx__Excep:

; 23919:     Py_XINCREF(*value);

	mov	rax, QWORD PTR [r8]
	test	rax, rax
	je	SHORT $LN9@Pyx__Excep
	inc	QWORD PTR [rax]
$LN9@Pyx__Excep:

; 23920:     Py_XINCREF(*tb);

	mov	rax, QWORD PTR [r9]
	test	rax, rax
	je	SHORT $LN4@Pyx__Excep
	inc	QWORD PTR [rax]
$LN4@Pyx__Excep:

; 23921: }

	fatret	0
__Pyx__ExceptionSave ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__ExceptionReset DD imagerel __Pyx__ExceptionReset
	DD	imagerel __Pyx__ExceptionReset+108
	DD	imagerel $unwind$__Pyx__ExceptionReset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__ExceptionReset DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx__ExceptionReset
_TEXT	SEGMENT
tstate$ = 48
type$ = 56
value$ = 64
tb$ = 72
__Pyx__ExceptionReset PROC				; COMDAT

; 23922: static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 23923:     PyObject *tmp_type, *tmp_value, *tmp_tb;
; 23924:     #if PY_VERSION_HEX >= 0x030700A2
; 23925:     tmp_type = tstate->exc_state.exc_type;
; 23926:     tmp_value = tstate->exc_state.exc_value;
; 23927:     tmp_tb = tstate->exc_state.exc_traceback;
; 23928:     tstate->exc_state.exc_type = type;
; 23929:     tstate->exc_state.exc_value = value;
; 23930:     tstate->exc_state.exc_traceback = tb;
; 23931:     #else
; 23932:     tmp_type = tstate->exc_type;

	mov	r10, QWORD PTR [rcx+96]

; 23933:     tmp_value = tstate->exc_value;

	mov	rdi, QWORD PTR [rcx+104]

; 23934:     tmp_tb = tstate->exc_traceback;

	mov	rbx, QWORD PTR [rcx+112]

; 23935:     tstate->exc_type = type;

	mov	QWORD PTR [rcx+96], rdx

; 23936:     tstate->exc_value = value;

	mov	QWORD PTR [rcx+104], r8

; 23937:     tstate->exc_traceback = tb;

	mov	QWORD PTR [rcx+112], r9

; 23938:     #endif
; 23939:     Py_XDECREF(tmp_type);

	test	r10, r10
	je	SHORT $LN23@Pyx__Excep@2
	add	QWORD PTR [r10], -1
	jne	SHORT $LN23@Pyx__Excep@2
	mov	rax, QWORD PTR [r10+8]
	mov	rcx, r10
	call	QWORD PTR [rax+48]
$LN23@Pyx__Excep@2:

; 23940:     Py_XDECREF(tmp_value);

	test	rdi, rdi
	je	SHORT $LN13@Pyx__Excep@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN13@Pyx__Excep@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN13@Pyx__Excep@2:

; 23941:     Py_XDECREF(tmp_tb);

	test	rbx, rbx
	je	SHORT $LN3@Pyx__Excep@2
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx__Excep@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx__Excep@2:

; 23942: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx__ExceptionReset ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__GetException DD imagerel __Pyx__GetException
	DD	imagerel __Pyx__GetException+389
	DD	imagerel $unwind$__Pyx__GetException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__GetException DD 081301H
	DD	0c5413H
	DD	0b3413H
	DD	0c00f5213H
	DD	0600c700dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx__GetException
_TEXT	SEGMENT
local_type$ = 32
local_value$ = 40
local_tb$ = 80
tstate$ = 80
type$ = 88
value$ = 96
tb$ = 104
__Pyx__GetException PROC				; COMDAT

; 23972: static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {

	mov	r11, rsp
	mov	QWORD PTR [r11+16], rbx
	mov	QWORD PTR [r11+24], rbp
	push	rsi
	push	rdi
	push	r12
	sub	rsp, 48					; 00000030H

; 23973: #else
; 23974: static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
; 23975: #endif
; 23976:     PyObject *local_type, *local_value, *local_tb;
; 23977: #if CYTHON_FAST_THREAD_STATE
; 23978:     PyObject *tmp_type, *tmp_value, *tmp_tb;
; 23979:     local_type = tstate->curexc_type;

	mov	rax, QWORD PTR [rcx+72]

; 23980:     local_value = tstate->curexc_value;
; 23981:     local_tb = tstate->curexc_traceback;
; 23982:     tstate->curexc_type = 0;

	xor	r12d, r12d
	mov	rdi, r8
	mov	QWORD PTR [r11-40], rax
	mov	rax, QWORD PTR [rcx+80]
	mov	rbp, rdx
	mov	QWORD PTR [r11-32], rax
	mov	rax, QWORD PTR [rcx+88]
	mov	rsi, rcx

; 23983:     tstate->curexc_value = 0;
; 23984:     tstate->curexc_traceback = 0;

	mov	QWORD PTR [rcx+88], r12
	mov	QWORD PTR [rcx+72], r12
	mov	QWORD PTR [rcx+80], r12

; 23985: #else
; 23986:     PyErr_Fetch(&local_type, &local_value, &local_tb);
; 23987: #endif
; 23988:     PyErr_NormalizeException(&local_type, &local_value, &local_tb);

	lea	rcx, QWORD PTR [r11-40]
	lea	r8, QWORD PTR [r11+8]
	lea	rdx, QWORD PTR [r11-32]
	mov	QWORD PTR [r11+8], rax
	mov	rbx, r9
	call	QWORD PTR __imp_PyErr_NormalizeException

; 23989: #if CYTHON_FAST_THREAD_STATE
; 23990:     if (unlikely(tstate->curexc_type))

	cmp	QWORD PTR [rsi+72], r12
	je	SHORT $LN75@Pyx__GetEx

; 24030: bad:
; 24031:     *type = 0;
; 24032:     *value = 0;
; 24033:     *tb = 0;
; 24034:     Py_XDECREF(local_type);

	mov	rax, QWORD PTR local_type$[rsp]
	mov	QWORD PTR [rbp], r12
	mov	QWORD PTR [rdi], r12
$bad$30609:
	mov	QWORD PTR [rbx], r12
	test	rax, rax
	je	SHORT $LN23@Pyx__GetEx
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR local_type$[rsp]
	cmp	QWORD PTR [rcx], r12
	jne	SHORT $LN23@Pyx__GetEx
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN23@Pyx__GetEx:

; 24035:     Py_XDECREF(local_value);

	mov	rax, QWORD PTR local_value$[rsp]
	test	rax, rax
	je	SHORT $LN13@Pyx__GetEx
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR local_value$[rsp]
	cmp	QWORD PTR [rcx], r12
	jne	SHORT $LN13@Pyx__GetEx
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@Pyx__GetEx:

; 24036:     Py_XDECREF(local_tb);

	mov	rax, QWORD PTR local_tb$[rsp]
	test	rax, rax
	je	SHORT $LN3@Pyx__GetEx
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR local_tb$[rsp]
	cmp	QWORD PTR [rcx], r12
	jne	SHORT $LN3@Pyx__GetEx
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@Pyx__GetEx:

; 24037:     return -1;

	or	eax, -1
	jmp	$LN77@Pyx__GetEx
$LN75@Pyx__GetEx:

; 23991: #else
; 23992:     if (unlikely(PyErr_Occurred()))
; 23993: #endif
; 23994:         goto bad;
; 23995:     #if PY_MAJOR_VERSION >= 3
; 23996:     if (local_tb) {
; 23997:         if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
; 23998:             goto bad;
; 23999:     }
; 24000:     #endif
; 24001:     Py_XINCREF(local_tb);

	mov	rax, QWORD PTR local_tb$[rsp]
	test	rax, rax
	je	SHORT $LN74@Pyx__GetEx
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR local_tb$[rsp]
$LN74@Pyx__GetEx:

; 24002:     Py_XINCREF(local_type);

	mov	rcx, QWORD PTR local_type$[rsp]
	test	rcx, rcx
	je	SHORT $LN69@Pyx__GetEx
	inc	QWORD PTR [rcx]
	mov	rcx, QWORD PTR local_type$[rsp]
	mov	rax, QWORD PTR local_tb$[rsp]
$LN69@Pyx__GetEx:

; 24003:     Py_XINCREF(local_value);

	mov	r8, QWORD PTR local_value$[rsp]
	test	r8, r8
	je	SHORT $LN64@Pyx__GetEx
	inc	QWORD PTR [r8]
	mov	rcx, QWORD PTR local_type$[rsp]
	mov	r8, QWORD PTR local_value$[rsp]
	mov	rax, QWORD PTR local_tb$[rsp]
$LN64@Pyx__GetEx:

; 24004:     *type = local_type;

	mov	QWORD PTR [rbp], rcx

; 24005:     *value = local_value;

	mov	QWORD PTR [rdi], r8

; 24006:     *tb = local_tb;

	mov	QWORD PTR [rbx], rax

; 24007: #if CYTHON_FAST_THREAD_STATE
; 24008:     #if PY_VERSION_HEX >= 0x030700A2
; 24009:     tmp_type = tstate->exc_state.exc_type;
; 24010:     tmp_value = tstate->exc_state.exc_value;
; 24011:     tmp_tb = tstate->exc_state.exc_traceback;
; 24012:     tstate->exc_state.exc_type = local_type;
; 24013:     tstate->exc_state.exc_value = local_value;
; 24014:     tstate->exc_state.exc_traceback = local_tb;
; 24015:     #else
; 24016:     tmp_type = tstate->exc_type;

	mov	rdx, QWORD PTR [rsi+96]

; 24017:     tmp_value = tstate->exc_value;

	mov	rdi, QWORD PTR [rsi+104]

; 24018:     tmp_tb = tstate->exc_traceback;

	mov	rbx, QWORD PTR [rsi+112]

; 24019:     tstate->exc_type = local_type;

	mov	QWORD PTR [rsi+96], rcx

; 24020:     tstate->exc_value = local_value;

	mov	QWORD PTR [rsi+104], r8

; 24021:     tstate->exc_traceback = local_tb;

	mov	QWORD PTR [rsi+112], rax

; 24022:     #endif
; 24023:     Py_XDECREF(tmp_type);

	test	rdx, rdx
	je	SHORT $LN53@Pyx__GetEx
	add	QWORD PTR [rdx], -1
	jne	SHORT $LN53@Pyx__GetEx
	mov	rax, QWORD PTR [rdx+8]
	mov	rcx, rdx
	call	QWORD PTR [rax+48]
$LN53@Pyx__GetEx:

; 24024:     Py_XDECREF(tmp_value);

	test	rdi, rdi
	je	SHORT $LN43@Pyx__GetEx
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN43@Pyx__GetEx
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN43@Pyx__GetEx:

; 24025:     Py_XDECREF(tmp_tb);

	test	rbx, rbx
	je	SHORT $LN33@Pyx__GetEx
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN33@Pyx__GetEx
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN33@Pyx__GetEx:

; 24026: #else
; 24027:     PyErr_SetExcInfo(local_type, local_value, local_tb);
; 24028: #endif
; 24029:     return 0;

	xor	eax, eax
$LN77@Pyx__GetEx:

; 24038: }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
__Pyx__GetException ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_GetAttr
_TEXT	SEGMENT
o$ = 8
n$ = 16
__Pyx_GetAttr PROC					; COMDAT

; 24188: #if CYTHON_USE_TYPE_SLOTS
; 24189: #if PY_MAJOR_VERSION >= 3
; 24190:     if (likely(PyUnicode_Check(n)))
; 24191: #else
; 24192:     if (likely(PyString_Check(n)))

	mov	rax, QWORD PTR [rdx+8]
	bt	DWORD PTR [rax+168], 27
	jae	SHORT $LN1@Pyx_GetAtt

; 24193: #endif
; 24194:         return __Pyx_PyObject_GetAttrStr(o, n);

	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	jne	SHORT $LN8@Pyx_GetAtt
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1@Pyx_GetAtt
	add	rdx, 32					; 00000020H
$LN8@Pyx_GetAtt:

; 24195: #endif
; 24196:     return PyObject_GetAttr(o, n);
; 24197: }

	rex_jmp	r8
$LN1@Pyx_GetAtt:
	rex_jmp	QWORD PTR __imp_PyObject_GetAttr
__Pyx_GetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@ ; `string'
EXTRN	__imp_PyUnicodeUCS2_Decode:PROC
EXTRN	__imp_PyUnicodeUCS2_FromUnicode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_decode_c_string DD imagerel __Pyx_decode_c_string
	DD	imagerel __Pyx_decode_c_string+44
	DD	imagerel $unwind$__Pyx_decode_c_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_decode_c_string DD imagerel __Pyx_decode_c_string+44
	DD	imagerel __Pyx_decode_c_string+82
	DD	imagerel $chain$0$__Pyx_decode_c_string
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_decode_c_string DD imagerel __Pyx_decode_c_string+82
	DD	imagerel __Pyx_decode_c_string+215
	DD	imagerel $chain$1$__Pyx_decode_c_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_decode_c_string DD 021H
	DD	imagerel __Pyx_decode_c_string
	DD	imagerel __Pyx_decode_c_string+44
	DD	imagerel $unwind$__Pyx_decode_c_string
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_decode_c_string DD 020521H
	DD	067405H
	DD	imagerel __Pyx_decode_c_string
	DD	imagerel __Pyx_decode_c_string+44
	DD	imagerel $unwind$__Pyx_decode_c_string
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_decode_c_string DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
CONST	SEGMENT
??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@ DB 'c-string '
	DB	'too long to convert to Python', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_decode_c_string
_TEXT	SEGMENT
cstring$ = 48
start$ = 56
stop$ = 64
encoding$ = 72
errors$ = 80
decode_func$ = 88
__Pyx_decode_c_string PROC				; COMDAT

; 24203:          PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	r11, rcx
	mov	r10, r8

; 24204:     Py_ssize_t length;
; 24205:     if (unlikely((start < 0) | (stop < 0))) {

	xor	r8d, r8d
	test	rdx, rdx
	mov	ecx, r8d
	mov	eax, r8d
	sets	cl
	test	r10, r10
	mov	rbx, r9
	sets	al
	or	ecx, eax
	je	SHORT $LN4@Pyx_decode

; 24206:         size_t slen = strlen(cstring);

	or	rcx, -1
	mov	QWORD PTR [rsp+48], rdi
	xor	eax, eax
	mov	rdi, r11
	repne scasb
	mov	rdi, QWORD PTR [rsp+48]

; 24207:         if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {

	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	not	rcx
	dec	rcx
	cmp	rcx, rax
	jbe	SHORT $LN7@Pyx_decode

; 24208:             PyErr_SetString(PyExc_OverflowError,
; 24209:                             "c-string too long to convert to Python");

	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 24210:             return NULL;

	xor	eax, eax

; 24229:     }
; 24230: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN7@Pyx_decode:

; 24211:         }
; 24212:         length = (Py_ssize_t) slen;
; 24213:         if (start < 0) {

	test	rdx, rdx
	jns	SHORT $LN5@Pyx_decode

; 24214:             start += length;

	add	rdx, rcx

; 24215:             if (start < 0)

	cmovs	rdx, r8
$LN5@Pyx_decode:

; 24216:                 start = 0;
; 24217:         }
; 24218:         if (stop < 0)

	test	r10, r10
	jns	SHORT $LN4@Pyx_decode

; 24219:             stop += length;

	add	r10, rcx
$LN4@Pyx_decode:

; 24220:     }
; 24221:     length = stop - start;

	sub	r10, rdx

; 24222:     if (unlikely(length <= 0))

	test	r10, r10
	jg	SHORT $LN3@Pyx_decode

; 24223:         return PyUnicode_FromUnicode(NULL, 0);

	xor	edx, edx
	xor	ecx, ecx

; 24229:     }
; 24230: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyUnicodeUCS2_FromUnicode
$LN3@Pyx_decode:

; 24224:     cstring += start;
; 24225:     if (decode_func) {

	mov	rax, QWORD PTR decode_func$[rsp]
	add	r11, rdx
	test	rax, rax
	je	SHORT $LN2@Pyx_decode

; 24226:         return decode_func(cstring, length, errors);

	mov	r8, QWORD PTR errors$[rsp]
	mov	rdx, r10
	mov	rcx, r11

; 24229:     }
; 24230: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	rax
$LN2@Pyx_decode:

; 24227:     } else {
; 24228:         return PyUnicode_Decode(cstring, length, encoding, errors);

	mov	r9, QWORD PTR errors$[rsp]
	mov	r8, rbx
	mov	rdx, r10
	mov	rcx, r11

; 24229:     }
; 24230: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyUnicodeUCS2_Decode
__Pyx_decode_c_string ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__ExceptionSwap DD imagerel __Pyx__ExceptionSwap
	DD	imagerel __Pyx__ExceptionSwap+65
	DD	imagerel $unwind$__Pyx__ExceptionSwap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__ExceptionSwap DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx__ExceptionSwap
_TEXT	SEGMENT
tstate$ = 8
type$ = 16
value$ = 24
tb$ = 32
__Pyx__ExceptionSwap PROC				; COMDAT

; 24249: static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {

	mov	QWORD PTR [rsp+8], rbx
	mov	rbx, r9
	mov	r9, r8
	mov	r8, rdx

; 24250:     PyObject *tmp_type, *tmp_value, *tmp_tb;
; 24251:     #if PY_VERSION_HEX >= 0x030700A2
; 24252:     tmp_type = tstate->exc_state.exc_type;
; 24253:     tmp_value = tstate->exc_state.exc_value;
; 24254:     tmp_tb = tstate->exc_state.exc_traceback;
; 24255:     tstate->exc_state.exc_type = *type;
; 24256:     tstate->exc_state.exc_value = *value;
; 24257:     tstate->exc_state.exc_traceback = *tb;
; 24258:     #else
; 24259:     tmp_type = tstate->exc_type;
; 24260:     tmp_value = tstate->exc_value;
; 24261:     tmp_tb = tstate->exc_traceback;
; 24262:     tstate->exc_type = *type;

	mov	rax, QWORD PTR [r8]
	mov	rdx, rcx
	mov	rcx, QWORD PTR [rcx+96]
	mov	r11, QWORD PTR [rdx+104]
	mov	r10, QWORD PTR [rdx+112]
	mov	QWORD PTR [rdx+96], rax

; 24263:     tstate->exc_value = *value;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rdx+104], rax

; 24264:     tstate->exc_traceback = *tb;

	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rdx+112], rax

; 24265:     #endif
; 24266:     *type = tmp_type;

	mov	QWORD PTR [r8], rcx

; 24267:     *value = tmp_value;

	mov	QWORD PTR [r9], r11

; 24268:     *tb = tmp_tb;

	mov	QWORD PTR [rbx], r10

; 24269: }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
__Pyx__ExceptionSwap ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_CallFunctionObjArgs:PROC
EXTRN	__imp_PyInt_FromLong:PROC
EXTRN	__imp_PyDict_New:PROC
EXTRN	__imp_PyModule_GetDict:PROC
EXTRN	__imp_PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_Import DD imagerel __Pyx_Import
	DD	imagerel __Pyx_Import+160
	DD	imagerel $unwind$__Pyx_Import
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_Import DD imagerel __Pyx_Import+160
	DD	imagerel __Pyx_Import+269
	DD	imagerel $chain$0$__Pyx_Import
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_Import DD imagerel __Pyx_Import+269
	DD	imagerel __Pyx_Import+356
	DD	imagerel $chain$1$__Pyx_Import
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_Import DD 021H
	DD	imagerel __Pyx_Import
	DD	imagerel __Pyx_Import+160
	DD	imagerel $unwind$__Pyx_Import
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_Import DD 020521H
	DD	0ed405H
	DD	imagerel __Pyx_Import
	DD	imagerel __Pyx_Import+160
	DD	imagerel $unwind$__Pyx_Import
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_Import DD 0a1601H
	DD	0105416H
	DD	0f3416H
	DD	0f0127216H
	DD	0c00ee010H
	DD	0600b700cH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_Import
_TEXT	SEGMENT
name$ = 112
from_list$ = 120
level$ = 128
__Pyx_Import PROC					; COMDAT

; 24282:       static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 24283:     PyObject *empty_list = 0;

	xor	ebp, ebp
	mov	r15, rcx

; 24284:     PyObject *module = 0;
; 24285:     PyObject *global_dict = 0;
; 24286:     PyObject *empty_dict = 0;
; 24287:     PyObject *list;
; 24288:     #if PY_MAJOR_VERSION < 3
; 24289:     PyObject *py_import;
; 24290:     py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);

	mov	rcx, QWORD PTR __pyx_b
	mov	rax, QWORD PTR [rcx+8]
	mov	r12d, r8d
	mov	r14, rdx
	mov	r9, QWORD PTR [rax+144]
	mov	rbx, rbp
	mov	rdi, rbp
	test	r9, r9
	je	SHORT $LN47@Pyx_Import
	mov	rdx, QWORD PTR __pyx_n_s_import
	call	r9
	mov	rsi, rax
	jmp	SHORT $LN48@Pyx_Import
$LN47@Pyx_Import:
	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN46@Pyx_Import
	mov	rdx, QWORD PTR __pyx_n_s_import
	add	rdx, 32					; 00000020H
	call	rax
	mov	rsi, rax
	jmp	SHORT $LN48@Pyx_Import
$LN46@Pyx_Import:
	mov	rdx, QWORD PTR __pyx_n_s_import
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rsi, rax
$LN48@Pyx_Import:

; 24291:     if (!py_import)

	test	rsi, rsi
	je	$LN52@Pyx_Import

; 24292:         goto bad;
; 24293:     #endif
; 24294:     if (from_list)

	test	r14, r14
	jne	SHORT $LN41@Pyx_Import

; 24295:         list = from_list;
; 24296:     else {
; 24297:         empty_list = PyList_New(0);

	xor	ecx, ecx
	call	QWORD PTR __imp_PyList_New
	mov	rbx, rax

; 24298:         if (!empty_list)

	test	rax, rax
	je	SHORT $bad$30990

; 24299:             goto bad;
; 24300:         list = empty_list;

	mov	r14, rax
$LN41@Pyx_Import:

; 24301:     }
; 24302:     global_dict = PyModule_GetDict(__pyx_m);

	mov	rcx, QWORD PTR __pyx_m
	mov	QWORD PTR [rsp+112], r13
	call	QWORD PTR __imp_PyModule_GetDict
	mov	r13, rax

; 24303:     if (!global_dict)

	test	rax, rax
	je	SHORT $LN53@Pyx_Import

; 24304:         goto bad;
; 24305:     empty_dict = PyDict_New();

	call	QWORD PTR __imp_PyDict_New
	mov	rdi, rax

; 24306:     if (!empty_dict)

	test	rax, rax
	je	SHORT $LN53@Pyx_Import

; 24307:         goto bad;
; 24308:     {
; 24309:         #if PY_MAJOR_VERSION >= 3
; 24310:         if (level == -1) {
; 24311:             if (strchr(__Pyx_MODULE_NAME, '.')) {
; 24312:                 module = PyImport_ImportModuleLevelObject(
; 24313:                     name, global_dict, empty_dict, list, 1);
; 24314:                 if (!module) {
; 24315:                     if (!PyErr_ExceptionMatches(PyExc_ImportError))
; 24316:                         goto bad;
; 24317:                     PyErr_Clear();
; 24318:                 }
; 24319:             }
; 24320:             level = 0;
; 24321:         }
; 24322:         #endif
; 24323:         if (!module) {
; 24324:             #if PY_MAJOR_VERSION < 3
; 24325:             PyObject *py_level = PyInt_FromLong(level);

	mov	ecx, r12d
	call	QWORD PTR __imp_PyInt_FromLong
	mov	r12, rax

; 24326:             if (!py_level)

	test	rax, rax
	je	SHORT $LN53@Pyx_Import

; 24327:                 goto bad;
; 24328:             module = PyObject_CallFunctionObjArgs(py_import,
; 24329:                 name, global_dict, empty_dict, list, py_level, NULL);

	mov	QWORD PTR [rsp+48], rbp
	mov	QWORD PTR [rsp+40], rax
	mov	r9, rdi
	mov	r8, r13
	mov	rdx, r15
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], r14
	call	QWORD PTR __imp_PyObject_CallFunctionObjArgs

; 24330:             Py_DECREF(py_level);

	add	QWORD PTR [r12], -1
	mov	rbp, rax
	jne	SHORT $LN53@Pyx_Import
	mov	rdx, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rdx+48]
$LN53@Pyx_Import:
	mov	r13, QWORD PTR [rsp+112]
$bad$30990:

; 24331:             #else
; 24332:             module = PyImport_ImportModuleLevelObject(
; 24333:                 name, global_dict, empty_dict, list, level);
; 24334:             #endif
; 24335:         }
; 24336:     }
; 24337: bad:
; 24338:     #if PY_MAJOR_VERSION < 3
; 24339:     Py_XDECREF(py_import);

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN24@Pyx_Import
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN24@Pyx_Import:

; 24340:     #endif
; 24341:     Py_XDECREF(empty_list);

	test	rbx, rbx
	je	SHORT $LN13@Pyx_Import
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@Pyx_Import
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@Pyx_Import:

; 24342:     Py_XDECREF(empty_dict);

	test	rdi, rdi
	je	SHORT $LN52@Pyx_Import
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN52@Pyx_Import
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN52@Pyx_Import:

; 24343:     return module;
; 24344: }

	mov	rbx, QWORD PTR [rsp+120]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+128]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
__Pyx_Import ENDP
_TEXT	ENDS
EXTRN	__imp_PyNumber_InPlaceAdd:PROC
EXTRN	__imp_PyNumber_Add:PROC
EXTRN	__imp_PyFloat_FromDouble:PROC
EXTRN	__imp_PyFloat_Type:BYTE
EXTRN	__imp_PyLong_FromLongLong:PROC
EXTRN	__imp_PyLong_FromLong:PROC
EXTRN	__imp_PyLong_Type:BYTE
EXTRN	__imp_PyInt_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_AddObjC DD imagerel __Pyx_PyInt_AddObjC
	DD	imagerel __Pyx_PyInt_AddObjC+384
	DD	imagerel $unwind$__Pyx_PyInt_AddObjC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_AddObjC DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_AddObjC
_TEXT	SEGMENT
op1$ = 48
op2$ = 56
intval$ = 64
inplace$ = 72
__Pyx_PyInt_AddObjC PROC				; COMDAT

; 24348: static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 24349:     #if PY_MAJOR_VERSION < 3
; 24350:     if (likely(PyInt_CheckExact(op1))) {

	mov	rax, QWORD PTR [rcx+8]
	mov	ebx, r9d
	mov	r11, rdx
	mov	r10, rcx
	cmp	rax, QWORD PTR __imp_PyInt_Type
	jne	SHORT $LN35@Pyx_PyInt_

; 24351:         const long b = intval;
; 24352:         long x;
; 24353:         long a = PyInt_AS_LONG(op1);

	mov	r9d, DWORD PTR [rcx+16]

; 24354:             x = (long)((unsigned long)a + b);

	lea	ecx, DWORD PTR [r9+r8]

; 24355:             if (likely((x^a) >= 0 || (x^b) >= 0))

	mov	eax, ecx
	xor	eax, r9d
	jge	SHORT $LN33@Pyx_PyInt_
	mov	eax, ecx
	xor	eax, r8d
	jge	SHORT $LN33@Pyx_PyInt_

; 24356:                 return PyInt_FromLong(x);
; 24357:             return PyLong_Type.tp_as_number->nb_add(op1, op2);

	mov	rax, QWORD PTR __imp_PyLong_Type
	mov	rcx, r10
	mov	r8, QWORD PTR [rax+96]

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR [r8]
$LN33@Pyx_PyInt_:
	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyInt_FromLong
$LN35@Pyx_PyInt_:

; 24358:     }
; 24359:     #endif
; 24360:     #if CYTHON_USE_PYLONG_INTERNALS
; 24361:     if (likely(PyLong_CheckExact(op1))) {

	mov	r9, QWORD PTR __imp_PyLong_Type
	cmp	rax, r9
	jne	$LN32@Pyx_PyInt_

; 24362:         const long b = intval;
; 24363:         long a, x;
; 24364: #ifdef HAVE_LONG_LONG
; 24365:         const PY_LONG_LONG llb = intval;
; 24366:         PY_LONG_LONG lla, llx;
; 24367: #endif
; 24368:         const digit* digits = ((PyLongObject*)op1)->ob_digit;
; 24369:         const Py_ssize_t size = Py_SIZE(op1);

	mov	rcx, QWORD PTR [rcx+16]
	movsxd	rbx, r8d

; 24370:         if (likely(__Pyx_sst_abs(size) <= 1)) {

	mov	rax, rcx
	cdq
	xor	rax, rdx
	sub	rax, rdx
	cmp	rax, 1
	jg	SHORT $LN31@Pyx_PyInt_

; 24371:             a = likely(size) ? digits[0] : 0;

	test	rcx, rcx
	je	SHORT $LN38@Pyx_PyInt_
	mov	eax, DWORD PTR [r10+24]

; 24372:             if (size == -1) a = -a;

	cmp	rcx, -1
	jne	SHORT $LN30@Pyx_PyInt_
	neg	eax

; 24436:             }
; 24437:         }
; 24438:                 x = a + b;

	lea	ecx, DWORD PTR [rax+r8]

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyLong_FromLong
$LN38@Pyx_PyInt_:

; 24371:             a = likely(size) ? digits[0] : 0;

	xor	eax, eax
$LN30@Pyx_PyInt_:

; 24436:             }
; 24437:         }
; 24438:                 x = a + b;

	lea	ecx, DWORD PTR [rax+r8]

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyLong_FromLong
$LN31@Pyx_PyInt_:

; 24373:         } else {
; 24374:             switch (size) {

	add	rcx, 4
	cmp	rcx, 8
	ja	SHORT $LN19@Pyx_PyInt_
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN40@Pyx_PyInt_[rdx+rcx*4]
	add	rax, rdx
	jmp	rax
$LN26@Pyx_PyInt_:

; 24375:                 case -2:
; 24376:                     if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
; 24377:                         a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24378:                         break;
; 24379: #ifdef HAVE_LONG_LONG
; 24380:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
; 24381:                         lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));

	mov	ecx, DWORD PTR [r10+28]
	mov	eax, DWORD PTR [r10+24]
	shl	rcx, 30
	or	rcx, rax
	neg	rcx

; 24439:             return PyLong_FromLong(x);
; 24440: #ifdef HAVE_LONG_LONG
; 24441:         long_long:
; 24442:                 llx = lla + llb;

	add	rcx, rbx

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyLong_FromLongLong
$LN23@Pyx_PyInt_:

; 24382:                         goto long_long;
; 24383: #endif
; 24384:                     }
; 24385:                 case 2:
; 24386:                     if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
; 24387:                         a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24388:                         break;
; 24389: #ifdef HAVE_LONG_LONG
; 24390:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
; 24391:                         lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));

	mov	ecx, DWORD PTR [r10+28]
	mov	eax, DWORD PTR [r10+24]
$long_long$31108:
	shl	rcx, 30
	or	rcx, rax

; 24439:             return PyLong_FromLong(x);
; 24440: #ifdef HAVE_LONG_LONG
; 24441:         long_long:
; 24442:                 llx = lla + llb;

	add	rcx, rbx

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyLong_FromLongLong
$LN19@Pyx_PyInt_:

; 24392:                         goto long_long;
; 24393: #endif
; 24394:                     }
; 24395:                 case -3:
; 24396:                     if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
; 24397:                         a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24398:                         break;
; 24399: #ifdef HAVE_LONG_LONG
; 24400:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
; 24401:                         lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
; 24402:                         goto long_long;
; 24403: #endif
; 24404:                     }
; 24405:                 case 3:
; 24406:                     if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
; 24407:                         a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24408:                         break;
; 24409: #ifdef HAVE_LONG_LONG
; 24410:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
; 24411:                         lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
; 24412:                         goto long_long;
; 24413: #endif
; 24414:                     }
; 24415:                 case -4:
; 24416:                     if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
; 24417:                         a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24418:                         break;
; 24419: #ifdef HAVE_LONG_LONG
; 24420:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
; 24421:                         lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
; 24422:                         goto long_long;
; 24423: #endif
; 24424:                     }
; 24425:                 case 4:
; 24426:                     if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
; 24427:                         a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
; 24428:                         break;
; 24429: #ifdef HAVE_LONG_LONG
; 24430:                     } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
; 24431:                         lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
; 24432:                         goto long_long;
; 24433: #endif
; 24434:                     }
; 24435:                 default: return PyLong_Type.tp_as_number->nb_add(op1, op2);

	mov	rax, QWORD PTR [r9+96]
	mov	rdx, r11
	mov	rcx, r10

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR [rax]
$LN32@Pyx_PyInt_:

; 24443:             return PyLong_FromLongLong(llx);
; 24444: #endif
; 24445:         
; 24446:         
; 24447:     }
; 24448:     #endif
; 24449:     if (PyFloat_CheckExact(op1)) {

	cmp	rax, QWORD PTR __imp_PyFloat_Type
	jne	SHORT $LN1@Pyx_PyInt_

; 24450:         const long b = intval;
; 24451:         double a = PyFloat_AS_DOUBLE(op1);
; 24452:             double result;
; 24453:             PyFPE_START_PROTECT("add", return NULL)
; 24454:             result = ((double)a) + (double)b;

	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR [rcx+16]

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyFloat_FromDouble
$LN1@Pyx_PyInt_:

; 24455:             PyFPE_END_PROTECT(result)
; 24456:             return PyFloat_FromDouble(result);
; 24457:     }
; 24458:     return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);

	mov	rax, QWORD PTR __imp_PyNumber_Add
	test	ebx, ebx
	cmovne	rax, QWORD PTR __imp_PyNumber_InPlaceAdd

; 24459: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	rax
	npad	3
$LN40@Pyx_PyInt_:
	DD	$LN19@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
	DD	$LN26@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
	DD	$LN23@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
	DD	$LN19@Pyx_PyInt_
__Pyx_PyInt_AddObjC ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyObject_CallMethO DD imagerel __Pyx_PyObject_CallMethO
	DD	imagerel __Pyx_PyObject_CallMethO+185
	DD	imagerel $unwind$__Pyx_PyObject_CallMethO
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyObject_CallMethO DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyObject_CallMethO
_TEXT	SEGMENT
func$ = 48
arg$ = 56
__Pyx_PyObject_CallMethO PROC				; COMDAT

; 24464: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 24465:     PyObject *self, *result;
; 24466:     PyCFunction cfunc;
; 24467:     cfunc = PyCFunction_GET_FUNCTION(func);

	mov	rax, QWORD PTR [rcx+16]

; 24468:     self = PyCFunction_GET_SELF(func);

	mov	rsi, QWORD PTR [rcx+24]
	mov	rbx, rdx
	mov	rdi, QWORD PTR [rax+8]

; 24469:     if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rcx, QWORD PTR [rax]
	inc	DWORD PTR [rcx+24]
	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_CheckRecursionLimit
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [r8+24], ecx
	jle	SHORT $LN2@Pyx_PyObje@3
	lea	rcx, OFFSET FLAT:??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@
	call	QWORD PTR __imp__Py_CheckRecursiveCall
	test	eax, eax
	je	SHORT $LN2@Pyx_PyObje@3

; 24470:         return NULL;

	xor	eax, eax

; 24477:     }
; 24478:     return result;
; 24479: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@Pyx_PyObje@3:

; 24471:     result = cfunc(self, arg);

	mov	rdx, rbx
	mov	rcx, rsi
	call	rdi

; 24472:     Py_LeaveRecursiveCall();

	mov	rcx, QWORD PTR __imp__PyThreadState_Current
	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rax
	dec	DWORD PTR [rdx+24]

; 24473:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {

	test	rax, rax
	jne	SHORT $LN1@Pyx_PyObje@3
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN1@Pyx_PyObje@3

; 24474:         PyErr_SetString(
; 24475:             PyExc_SystemError,
; 24476:             "NULL result without error in PyObject_Call");

	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0CL@FLDCAKFI@NULL?5result?5without?5error?5in?5PyO@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN1@Pyx_PyObje@3:

; 24477:     }
; 24478:     return result;
; 24479: }

	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_PyObject_CallMethO ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__PyObject_CallOneArg DD imagerel __Pyx__PyObject_CallOneArg
	DD	imagerel __Pyx__PyObject_CallOneArg+115
	DD	imagerel $unwind$__Pyx__PyObject_CallOneArg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__PyObject_CallOneArg DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx__PyObject_CallOneArg
_TEXT	SEGMENT
func$ = 48
arg$ = 56
__Pyx__PyObject_CallOneArg PROC				; COMDAT

; 24484: static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx

; 24485:     PyObject *result;
; 24486:     PyObject *args = PyTuple_New(1);

	mov	ecx, 1
	mov	rdi, rdx
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax

; 24487:     if (unlikely(!args)) return NULL;

	test	rax, rax
	jne	SHORT $LN6@Pyx__PyObj

; 24492:     return result;
; 24493: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@Pyx__PyObj:

; 24488:     Py_INCREF(arg);

	inc	QWORD PTR [rdi]

; 24489:     PyTuple_SET_ITEM(args, 0, arg);
; 24490:     result = __Pyx_PyObject_Call(func, args, NULL);

	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, rsi
	mov	QWORD PTR [rax+24], rdi
	call	__Pyx_PyObject_Call

; 24491:     Py_DECREF(args);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN4@Pyx__PyObj
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx__PyObj:

; 24492:     return result;
; 24493: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx__PyObject_CallOneArg ENDP
_TEXT	ENDS
EXTRN	__imp_PyCFunction_Type:BYTE
EXTRN	__imp_PyFunction_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyObject_CallOneArg DD imagerel __Pyx_PyObject_CallOneArg
	DD	imagerel __Pyx_PyObject_CallOneArg+61
	DD	imagerel $unwind$__Pyx_PyObject_CallOneArg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyObject_CallOneArg DD imagerel __Pyx_PyObject_CallOneArg+61
	DD	imagerel __Pyx_PyObject_CallOneArg+140
	DD	imagerel $chain$0$__Pyx_PyObject_CallOneArg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_PyObject_CallOneArg DD imagerel __Pyx_PyObject_CallOneArg+140
	DD	imagerel __Pyx_PyObject_CallOneArg+300
	DD	imagerel $chain$2$__Pyx_PyObject_CallOneArg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyObject_CallOneArg DD imagerel __Pyx_PyObject_CallOneArg+300
	DD	imagerel __Pyx_PyObject_CallOneArg+439
	DD	imagerel $chain$3$__Pyx_PyObject_CallOneArg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyObject_CallOneArg DD 021H
	DD	imagerel __Pyx_PyObject_CallOneArg
	DD	imagerel __Pyx_PyObject_CallOneArg+61
	DD	imagerel $unwind$__Pyx_PyObject_CallOneArg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_PyObject_CallOneArg DD 020021H
	DD	0c5400H
	DD	imagerel __Pyx_PyObject_CallOneArg
	DD	imagerel __Pyx_PyObject_CallOneArg+61
	DD	imagerel $unwind$__Pyx_PyObject_CallOneArg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyObject_CallOneArg DD 020521H
	DD	0c5405H
	DD	imagerel __Pyx_PyObject_CallOneArg
	DD	imagerel __Pyx_PyObject_CallOneArg+61
	DD	imagerel $unwind$__Pyx_PyObject_CallOneArg
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyObject_CallOneArg DD 061401H
	DD	0f6414H
	DD	0e3414H
	DD	070109214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyObject_CallOneArg
_TEXT	SEGMENT
func$ = 96
arg$ = 104
__Pyx_PyObject_CallOneArg PROC				; COMDAT

; 24494: static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+16], rdx
	push	rdi
	sub	rsp, 80					; 00000050H

; 24495: #if CYTHON_FAST_PYCALL
; 24496:     if (PyFunction_Check(func)) {

	mov	rax, QWORD PTR [rcx+8]
	mov	rsi, rdx
	mov	rbx, rcx
	cmp	rax, QWORD PTR __imp_PyFunction_Type
	jne	$LN3@Pyx_PyObje@4

; 24497:         return __Pyx_PyFunction_FastCall(func, &arg, 1);

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rsi, QWORD PTR [rcx+16]
	mov	rdi, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [rsp+96], rbp
	mov	rbp, QWORD PTR [rcx+24]
	inc	DWORD PTR [rdx+24]
	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_CheckRecursionLimit
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx+24], ecx
	jle	SHORT $LN28@Pyx_PyObje@4
	lea	rcx, OFFSET FLAT:??_C@_0BP@PDBBPPOK@?5while?5calling?5a?5Python?5object?$AA@
	call	QWORD PTR __imp__Py_CheckRecursiveCall
	test	eax, eax
	je	SHORT $LN28@Pyx_PyObje@4
	mov	rbp, QWORD PTR [rsp+96]
	xor	ebx, ebx

; 24503: #if CYTHON_FAST_PYCCALL
; 24504:         } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
; 24505:             return __Pyx_PyCFunction_FastCall(func, &arg, 1);
; 24506: #endif
; 24507:         }
; 24508:     }
; 24509:     return __Pyx__PyObject_CallOneArg(func, arg);

	mov	rax, rbx

; 24510: }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0

; 24497:         return __Pyx_PyFunction_FastCall(func, &arg, 1);

$LN28@Pyx_PyObje@4:
	cmp	DWORD PTR [rsi+28], 67			; 00000043H
	jne	SHORT $LN25@Pyx_PyObje@4
	test	rdi, rdi
	jne	SHORT $LN25@Pyx_PyObje@4
	cmp	DWORD PTR [rsi+16], 1
	jne	SHORT $LN25@Pyx_PyObje@4
	lea	r8d, QWORD PTR [rdi+1]
	lea	rdx, QWORD PTR arg$[rsp]
	mov	r9, rbp
	mov	rcx, rsi
	call	__Pyx_PyFunction_FastCallNoKw
	mov	rbx, rax
	jmp	SHORT $done$37762
$LN25@Pyx_PyObje@4:
	mov	rdx, QWORD PTR [rbx+40]
	xor	ebx, ebx
	test	rdi, rdi
	je	SHORT $LN17@Pyx_PyObje@4
	mov	rcx, QWORD PTR [rdi+16]
	lea	rax, QWORD PTR [rdi+24]
	jmp	SHORT $LN16@Pyx_PyObje@4
$LN17@Pyx_PyObje@4:
	mov	rax, rbx
	mov	rcx, rbx
$LN16@Pyx_PyObje@4:
	mov	QWORD PTR [rsp+72], rdx
	mov	DWORD PTR [rsp+64], ecx
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], ebx
	lea	r9, QWORD PTR arg$[rsp]
	xor	r8d, r8d
	mov	rdx, rbp
	mov	rcx, rsi
	mov	QWORD PTR [rsp+40], rbx
	mov	DWORD PTR [rsp+32], 1
	call	QWORD PTR __imp_PyEval_EvalCodeEx
	mov	rbx, rax
$done$37762:
	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rbp, QWORD PTR [rsp+96]
	mov	rcx, QWORD PTR [rax]

; 24503: #if CYTHON_FAST_PYCCALL
; 24504:         } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
; 24505:             return __Pyx_PyCFunction_FastCall(func, &arg, 1);
; 24506: #endif
; 24507:         }
; 24508:     }
; 24509:     return __Pyx__PyObject_CallOneArg(func, arg);

	mov	rax, rbx
	dec	DWORD PTR [rcx+24]

; 24510: }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN3@Pyx_PyObje@4:

; 24498:     }
; 24499: #endif
; 24500:     if (likely(PyCFunction_Check(func))) {

	cmp	rax, QWORD PTR __imp_PyCFunction_Type
	jne	SHORT $LN1@Pyx_PyObje@4

; 24501:         if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {

	mov	rax, QWORD PTR [rcx+16]
	test	BYTE PTR [rax+16], 8
	je	SHORT $LN1@Pyx_PyObje@4

; 24502:             return __Pyx_PyObject_CallMethO(func, arg);

	call	__Pyx_PyObject_CallMethO

; 24510: }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN1@Pyx_PyObje@4:

; 24503: #if CYTHON_FAST_PYCCALL
; 24504:         } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
; 24505:             return __Pyx_PyCFunction_FastCall(func, &arg, 1);
; 24506: #endif
; 24507:         }
; 24508:     }
; 24509:     return __Pyx__PyObject_CallOneArg(func, arg);

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN38@Pyx_PyObje@4
	xor	ebx, ebx
	mov	rax, rbx

; 24510: }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0

; 24503: #if CYTHON_FAST_PYCCALL
; 24504:         } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
; 24505:             return __Pyx_PyCFunction_FastCall(func, &arg, 1);
; 24506: #endif
; 24507:         }
; 24508:     }
; 24509:     return __Pyx__PyObject_CallOneArg(func, arg);

$LN38@Pyx_PyObje@4:
	inc	QWORD PTR [rsi]
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, rbx
	mov	QWORD PTR [rax+24], rsi
	call	__Pyx_PyObject_Call
	add	QWORD PTR [rdi], -1
	mov	rbx, rax
	jne	SHORT $LN36@Pyx_PyObje@4
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN36@Pyx_PyObje@4:

; 24510: }

	mov	rsi, QWORD PTR [rsp+120]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
__Pyx_PyObject_CallOneArg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BHHGBBII@cannot?5import?5name?5?$CF?4230s?$AA@ ; `string'
EXTRN	__imp_PyExc_ImportError:QWORD
EXTRN	__imp_PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ImportFrom DD imagerel __Pyx_ImportFrom
	DD	imagerel __Pyx_ImportFrom+126
	DD	imagerel $unwind$__Pyx_ImportFrom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ImportFrom DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BK@BHHGBBII@cannot?5import?5name?5?$CF?4230s?$AA@
CONST	SEGMENT
??_C@_0BK@BHHGBBII@cannot?5import?5name?5?$CF?4230s?$AA@ DB 'cannot impor'
	DB	't name %.230s', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_ImportFrom
_TEXT	SEGMENT
module$ = 48
name$ = 56
__Pyx_ImportFrom PROC					; COMDAT

; 24523:       static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 24524:     PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN5@Pyx_Import@2
	call	r8
	jmp	SHORT $LN10@Pyx_Import@2
$LN5@Pyx_Import@2:
	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN4@Pyx_Import@2
	add	rdx, 32					; 00000020H
	call	rax
	jmp	SHORT $LN10@Pyx_Import@2
$LN4@Pyx_Import@2:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN10@Pyx_Import@2:
	mov	rbx, rax

; 24525:     if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {

	test	rax, rax
	jne	SHORT $LN8@Pyx_Import@2
	mov	rcx, QWORD PTR __imp_PyExc_AttributeError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_ExceptionMatches
	test	eax, eax
	je	SHORT $LN8@Pyx_Import@2

; 24526:         PyErr_Format(PyExc_ImportError,
; 24527:         #if PY_MAJOR_VERSION < 3
; 24528:             "cannot import name %.230s", PyString_AS_STRING(name));

	mov	rcx, QWORD PTR __imp_PyExc_ImportError
	lea	r8, QWORD PTR [rdi+32]
	lea	rdx, OFFSET FLAT:??_C@_0BK@BHHGBBII@cannot?5import?5name?5?$CF?4230s?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
$LN8@Pyx_Import@2:

; 24529:         #else
; 24530:             "cannot import name %S", name);
; 24531:         #endif
; 24532:     }
; 24533:     return value;

	mov	rax, rbx

; 24534: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_ImportFrom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_HasAttr DD imagerel __Pyx_HasAttr
	DD	imagerel __Pyx_HasAttr+156
	DD	imagerel $unwind$__Pyx_HasAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_HasAttr DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
CONST	SEGMENT
??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@ DB 'hasat'
	DB	'tr(): attribute name must be string', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_HasAttr
_TEXT	SEGMENT
o$ = 48
n$ = 56
__Pyx_HasAttr PROC					; COMDAT

; 24537:       static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {

	sub	rsp, 40					; 00000028H

; 24538:     PyObject *r;
; 24539:     if (unlikely(!__Pyx_PyBaseString_Check(n))) {

	mov	rax, QWORD PTR [rdx+8]
	mov	r8d, DWORD PTR [rax+168]
	mov	eax, r8d
	and	eax, 134217728				; 08000000H
	jne	SHORT $LN8@Pyx_HasAtt
	bt	r8d, 28
	jb	SHORT $LN8@Pyx_HasAtt

; 24540:         PyErr_SetString(PyExc_TypeError,
; 24541:                         "hasattr(): attribute name must be string");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@JDBFCNOH@hasattr?$CI?$CJ?3?5attribute?5name?5must?5b@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 24542:         return -1;

	or	eax, -1

; 24551:     }
; 24552: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_HasAtt:

; 24543:     }
; 24544:     r = __Pyx_GetAttr(o, n);

	test	eax, eax
	je	SHORT $LN11@Pyx_HasAtt
	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN15@Pyx_HasAtt
	call	r8
	jmp	SHORT $LN18@Pyx_HasAtt
$LN15@Pyx_HasAtt:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN11@Pyx_HasAtt
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN18@Pyx_HasAtt
$LN11@Pyx_HasAtt:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN18@Pyx_HasAtt:
	mov	rcx, rax

; 24545:     if (unlikely(!r)) {

	test	rax, rax
	jne	SHORT $LN5@Pyx_HasAtt

; 24546:         PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear

; 24547:         return 0;

	xor	eax, eax

; 24551:     }
; 24552: }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@Pyx_HasAtt:

; 24548:     } else {
; 24549:         Py_DECREF(r);

	add	QWORD PTR [rcx], -1
	jne	SHORT $LN4@Pyx_HasAtt
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN4@Pyx_HasAtt:

; 24550:         return 1;

	mov	eax, 1

; 24551:     }
; 24552: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_HasAttr ENDP
_TEXT	ENDS
EXTRN	__imp_PyCapsule_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_SetVtable DD imagerel __Pyx_SetVtable
	DD	imagerel __Pyx_SetVtable+120
	DD	imagerel $unwind$__Pyx_SetVtable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_SetVtable DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_SetVtable
_TEXT	SEGMENT
dict$ = 48
vtable$ = 56
__Pyx_SetVtable PROC					; COMDAT

; 24555:       static int __Pyx_SetVtable(PyObject *dict, void *vtable) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, rdx
	mov	rdi, rcx

; 24556: #if PY_VERSION_HEX >= 0x02070000
; 24557:     PyObject *ob = PyCapsule_New(vtable, 0, 0);

	xor	r8d, r8d
	mov	rcx, rax
	xor	edx, edx
	call	QWORD PTR __imp_PyCapsule_New
	mov	rbx, rax

; 24558: #else
; 24559:     PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
; 24560: #endif
; 24561:     if (!ob)

	test	rax, rax
	je	SHORT $LN3@Pyx_SetVta

; 24562:         goto bad;
; 24563:     if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)

	mov	rdx, QWORD PTR __pyx_n_s_pyx_vtable
	mov	r8, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN15@Pyx_SetVta
$bad$31277:

; 24567: bad:
; 24568:     Py_XDECREF(ob);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_SetVta
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx_SetVta:

; 24569:     return -1;

	or	eax, -1

; 24570: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN15@Pyx_SetVta:

; 24564:         goto bad;
; 24565:     Py_DECREF(ob);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@Pyx_SetVta
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@Pyx_SetVta:

; 24566:     return 0;

	xor	eax, eax

; 24570: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_SetVtable ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_setup_reduce_is_named DD imagerel __Pyx_setup_reduce_is_named
	DD	imagerel __Pyx_setup_reduce_is_named+139
	DD	imagerel $unwind$__Pyx_setup_reduce_is_named
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_setup_reduce_is_named DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_setup_reduce_is_named
_TEXT	SEGMENT
meth$ = 48
name$ = 56
__Pyx_setup_reduce_is_named PROC			; COMDAT

; 24573:       static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 24574:   int ret;
; 24575:   PyObject *name_attr;
; 24576:   name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN17@Pyx_setup_
	call	r8
	jmp	SHORT $LN22@Pyx_setup_
$LN17@Pyx_setup_:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN16@Pyx_setup_
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN22@Pyx_setup_
$LN16@Pyx_setup_:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN22@Pyx_setup_:
	mov	rbx, rax

; 24577:   if (likely(name_attr)) {

	test	rax, rax
	je	SHORT $LN20@Pyx_setup_

; 24578:       ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);

	mov	r8d, 2
	mov	rdx, rdi
	mov	rcx, rax
	call	QWORD PTR __imp_PyObject_RichCompareBool
	mov	edi, eax

; 24579:   } else {
; 24580:       ret = -1;
; 24581:   }
; 24582:   if (unlikely(ret < 0)) {

	test	eax, eax
	jns	SHORT $LN10@Pyx_setup_
$LN20@Pyx_setup_:

; 24583:       PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear

; 24584:       ret = 0;

	xor	edi, edi
$LN10@Pyx_setup_:

; 24585:   }
; 24586:   Py_XDECREF(name_attr);

	test	rbx, rbx
	je	SHORT $LN21@Pyx_setup_
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN21@Pyx_setup_
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN21@Pyx_setup_:

; 24587:   return ret;

	mov	eax, edi

; 24588: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_setup_reduce_is_named ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@IMPIDPDB@Unable?5to?5initialize?5pickling?5fo@ ; `string'
EXTRN	__imp_PyExc_RuntimeError:QWORD
EXTRN	__imp_PyType_Modified:PROC
EXTRN	__imp_PyDict_DelItem:PROC
EXTRN	__imp__PyType_Lookup:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_setup_reduce DD imagerel __Pyx_setup_reduce
	DD	imagerel __Pyx_setup_reduce+78
	DD	imagerel $unwind$__Pyx_setup_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_setup_reduce DD imagerel __Pyx_setup_reduce+78
	DD	imagerel __Pyx_setup_reduce+856
	DD	imagerel $chain$0$__Pyx_setup_reduce
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_setup_reduce DD imagerel __Pyx_setup_reduce+856
	DD	imagerel __Pyx_setup_reduce+962
	DD	imagerel $chain$1$__Pyx_setup_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_setup_reduce DD 021H
	DD	imagerel __Pyx_setup_reduce
	DD	imagerel __Pyx_setup_reduce+78
	DD	imagerel $unwind$__Pyx_setup_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_setup_reduce DD 020521H
	DD	0af405H
	DD	imagerel __Pyx_setup_reduce
	DD	imagerel __Pyx_setup_reduce+78
	DD	imagerel $unwind$__Pyx_setup_reduce
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_setup_reduce DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0e0123216H
	DD	0c00ed010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CF@IMPIDPDB@Unable?5to?5initialize?5pickling?5fo@
CONST	SEGMENT
??_C@_0CF@IMPIDPDB@Unable?5to?5initialize?5pickling?5fo@ DB 'Unable to in'
	DB	'itialize pickling for %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_setup_reduce
_TEXT	SEGMENT
type_obj$ = 80
__Pyx_setup_reduce PROC					; COMDAT

; 24589: static int __Pyx_setup_reduce(PyObject* type_obj) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 24590:     int ret = 0;
; 24591:     PyObject *object_reduce = NULL;
; 24592:     PyObject *object_reduce_ex = NULL;
; 24593:     PyObject *reduce = NULL;
; 24594:     PyObject *reduce_ex = NULL;
; 24595:     PyObject *reduce_cython = NULL;
; 24596:     PyObject *setstate = NULL;
; 24597:     PyObject *setstate_cython = NULL;
; 24598: #if CYTHON_USE_PYTYPE_LOOKUP
; 24599:     if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;

	mov	rdx, QWORD PTR __pyx_n_s_getstate
	xor	edi, edi
	mov	rbx, rcx
	mov	r12, rdi
	mov	r14, rdi
	mov	rbp, rdi
	mov	r13, rdi
	mov	rsi, rdi
	call	QWORD PTR __imp__PyType_Lookup
	test	rax, rax
	jne	$LN93@Pyx_setup_@2

; 24600: #else
; 24601:     if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
; 24602: #endif
; 24603: #if CYTHON_USE_PYTYPE_LOOKUP
; 24604:     object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_reduce_ex
	mov	rcx, QWORD PTR __imp_PyBaseObject_Type
	mov	QWORD PTR [rsp+80], r15
	call	QWORD PTR __imp__PyType_Lookup
	mov	r15, rax
	test	rax, rax
	je	$BAD$31354

; 24605: #else
; 24606:     object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
; 24607: #endif
; 24608:     reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN72@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce_ex
	mov	rcx, rbx
	call	r8
	mov	r14, rax
	jmp	SHORT $LN73@Pyx_setup_@2
$LN72@Pyx_setup_@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN71@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce_ex
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	r14, rax
	jmp	SHORT $LN73@Pyx_setup_@2
$LN71@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_reduce_ex
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r14, rax
$LN73@Pyx_setup_@2:
	test	r14, r14
	je	$BAD$31354

; 24609:     if (reduce_ex == object_reduce_ex) {

	cmp	r14, r15
	jne	$LN43@Pyx_setup_@2

; 24610: #if CYTHON_USE_PYTYPE_LOOKUP
; 24611:         object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_reduce
	mov	rcx, QWORD PTR __imp_PyBaseObject_Type
	call	QWORD PTR __imp__PyType_Lookup
	mov	r15, rax
	test	rax, rax
	je	$BAD$31354

; 24612: #else
; 24613:         object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
; 24614: #endif
; 24615:         reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;

	mov	rcx, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rcx+144]
	test	r8, r8
	je	SHORT $LN76@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce
	mov	rcx, rbx
	call	r8
	mov	r12, rax
	jmp	SHORT $LN77@Pyx_setup_@2
$LN76@Pyx_setup_@2:
	mov	rax, QWORD PTR [rcx+64]
	test	rax, rax
	je	SHORT $LN75@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	rax
	mov	r12, rax
	jmp	SHORT $LN77@Pyx_setup_@2
$LN75@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_reduce
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r12, rax
$LN77@Pyx_setup_@2:
	test	r12, r12
	je	$BAD$31354

; 24616:         if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {

	cmp	r12, r15
	je	SHORT $LN61@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce_cython
	mov	rcx, r12
	call	__Pyx_setup_reduce_is_named
	test	eax, eax
	je	$GOOD$31352
$LN61@Pyx_setup_@2:

; 24617:             reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN80@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce_cython
	mov	rcx, rbx
	call	r8
	mov	rbp, rax
	jmp	SHORT $LN81@Pyx_setup_@2
$LN80@Pyx_setup_@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN79@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_reduce_cython
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbp, rax
	jmp	SHORT $LN81@Pyx_setup_@2
$LN79@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_reduce_cython
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbp, rax
$LN81@Pyx_setup_@2:
	test	rbp, rbp
	je	$BAD$31354

; 24618:             ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_reduce
	mov	rcx, QWORD PTR [rbx+264]
	mov	r8, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	js	$BAD$31354

; 24619:             ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_reduce_cython
	mov	rcx, QWORD PTR [rbx+264]
	call	QWORD PTR __imp_PyDict_DelItem
	mov	edi, eax
	test	eax, eax
	js	$BAD$31354

; 24620:             setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN84@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_setstate
	mov	rcx, rbx
	call	r8
	mov	r13, rax
	jmp	SHORT $LN85@Pyx_setup_@2
$LN84@Pyx_setup_@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN83@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_setstate
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	r13, rax
	jmp	SHORT $LN85@Pyx_setup_@2
$LN83@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_setstate
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r13, rax
$LN85@Pyx_setup_@2:

; 24621:             if (!setstate) PyErr_Clear();

	test	r13, r13
	jne	SHORT $LN91@Pyx_setup_@2
	call	QWORD PTR __imp_PyErr_Clear

; 24622:             if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {

	jmp	SHORT $LN55@Pyx_setup_@2
$LN91@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_setstate_cython
	mov	rcx, r13
	call	__Pyx_setup_reduce_is_named
	test	eax, eax
	je	$LN52@Pyx_setup_@2
$LN55@Pyx_setup_@2:

; 24623:                 setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN88@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_setstate_cython
	mov	rcx, rbx
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN89@Pyx_setup_@2
$LN88@Pyx_setup_@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN87@Pyx_setup_@2
	mov	rdx, QWORD PTR __pyx_n_s_setstate_cython
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN89@Pyx_setup_@2
$LN87@Pyx_setup_@2:
	mov	rdx, QWORD PTR __pyx_n_s_setstate_cython
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rsi, rax
$LN89@Pyx_setup_@2:
	test	rsi, rsi
	je	SHORT $BAD$31354

; 24624:                 ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_setstate
	mov	rcx, QWORD PTR [rbx+264]
	mov	r8, rsi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	js	SHORT $BAD$31354

; 24625:                 ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;

	mov	rdx, QWORD PTR __pyx_n_s_setstate_cython
	mov	rcx, QWORD PTR [rbx+264]
	call	QWORD PTR __imp_PyDict_DelItem
	mov	edi, eax
	test	eax, eax
	js	SHORT $BAD$31354
$LN52@Pyx_setup_@2:

; 24626:             }
; 24627:             PyType_Modified((PyTypeObject*)type_obj);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyType_Modified
	jmp	SHORT $GOOD$31352
$BAD$31354:

; 24628:         }
; 24629:     }
; 24630:     goto GOOD;
; 24631: BAD:
; 24632:     if (!PyErr_Occurred())

	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN51@Pyx_setup_@2

; 24633:         PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);

	mov	rcx, QWORD PTR __imp_PyExc_RuntimeError
	mov	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0CF@IMPIDPDB@Unable?5to?5initialize?5pickling?5fo@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
$LN51@Pyx_setup_@2:

; 24634:     ret = -1;

	or	edi, -1
$GOOD$31352:

; 24635: GOOD:
; 24636: #if !CYTHON_USE_PYTYPE_LOOKUP
; 24637:     Py_XDECREF(object_reduce);
; 24638:     Py_XDECREF(object_reduce_ex);
; 24639: #endif
; 24640:     Py_XDECREF(reduce);

	test	r12, r12
	je	SHORT $LN43@Pyx_setup_@2
	add	QWORD PTR [r12], -1
	jne	SHORT $LN43@Pyx_setup_@2
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN43@Pyx_setup_@2:
	mov	r15, QWORD PTR [rsp+80]

; 24641:     Py_XDECREF(reduce_ex);

	test	r14, r14
	je	SHORT $LN33@Pyx_setup_@2
	add	QWORD PTR [r14], -1
	jne	SHORT $LN33@Pyx_setup_@2
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN33@Pyx_setup_@2:

; 24642:     Py_XDECREF(reduce_cython);

	test	rbp, rbp
	je	SHORT $LN23@Pyx_setup_@2
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN23@Pyx_setup_@2
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN23@Pyx_setup_@2:

; 24643:     Py_XDECREF(setstate);

	test	r13, r13
	je	SHORT $LN13@Pyx_setup_@2
	add	QWORD PTR [r13], -1
	jne	SHORT $LN13@Pyx_setup_@2
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN13@Pyx_setup_@2:

; 24644:     Py_XDECREF(setstate_cython);

	test	rsi, rsi
	je	SHORT $LN93@Pyx_setup_@2
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN93@Pyx_setup_@2
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN93@Pyx_setup_@2:

; 24645:     return ret;
; 24646: }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	eax, edi
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
__Pyx_setup_reduce ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_SetAttr:PROC
EXTRN	__imp__Py_ZeroStruct:BYTE
EXTRN	__imp__Py_TrueStruct:BYTE
EXTRN	__imp_PyObject_Not:PROC
EXTRN	__imp__PyObject_GetDictPtr:PROC
_BSS	SEGMENT
__pyx_cython_runtime DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_CLineForTraceback DD imagerel __Pyx_CLineForTraceback
	DD	imagerel __Pyx_CLineForTraceback+374
	DD	imagerel $unwind$__Pyx_CLineForTraceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_CLineForTraceback DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_CLineForTraceback
_TEXT	SEGMENT
tstate$ = 80
c_line$ = 88
__Pyx_CLineForTraceback PROC				; COMDAT

; 24650: static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 24651:     PyObject *use_cline;
; 24652:     PyObject *ptype, *pvalue, *ptraceback;
; 24653: #if CYTHON_COMPILING_IN_CPYTHON
; 24654:     PyObject **cython_runtime_dict;
; 24655: #endif
; 24656:     __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);

	mov	r12, QWORD PTR [rcx+72]
	mov	r13, QWORD PTR [rcx+80]
	mov	r14, QWORD PTR [rcx+88]
	xor	r15d, r15d
	mov	rsi, rcx
	mov	ebp, edx
	mov	QWORD PTR [rcx+72], r15
	mov	QWORD PTR [rcx+80], r15
	mov	QWORD PTR [rcx+88], r15

; 24657: #if CYTHON_COMPILING_IN_CPYTHON
; 24658:     cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);

	mov	rcx, QWORD PTR __pyx_cython_runtime
	call	QWORD PTR __imp__PyObject_GetDictPtr

; 24659:     if (likely(cython_runtime_dict)) {
; 24660:       use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);

	mov	rdx, QWORD PTR __pyx_n_s_cline_in_traceback
	test	rax, rax
	je	SHORT $LN12@Pyx_CLineF
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rdi, rax

; 24661:     } else

	jmp	SHORT $LN4@Pyx_CLineF
$LN12@Pyx_CLineF:

; 24662: #endif
; 24663:     {
; 24664:       PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);

	mov	rcx, QWORD PTR __pyx_cython_runtime
	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN18@Pyx_CLineF
	call	r8
	jmp	SHORT $LN55@Pyx_CLineF
$LN18@Pyx_CLineF:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN17@Pyx_CLineF
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN55@Pyx_CLineF
$LN17@Pyx_CLineF:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN55@Pyx_CLineF:
	mov	rbx, rax

; 24665:       if (use_cline_obj) {

	test	rax, rax
	je	SHORT $LN10@Pyx_CLineF

; 24666:         use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;

	mov	rcx, rax
	call	QWORD PTR __imp_PyObject_Not
	mov	rdi, QWORD PTR __imp__Py_TrueStruct
	test	eax, eax
	cmovne	rdi, QWORD PTR __imp__Py_ZeroStruct

; 24667:         Py_DECREF(use_cline_obj);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN4@Pyx_CLineF
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN4@Pyx_CLineF:

; 24670:         use_cline = NULL;
; 24671:       }
; 24672:     }
; 24673:     if (!use_cline) {

	test	rdi, rdi
	je	SHORT $LN53@Pyx_CLineF

; 24676:     }
; 24677:     else if (PyObject_Not(use_cline) != 0) {

	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_Not
	test	eax, eax
	cmovne	ebp, r15d
	jmp	SHORT $LN1@Pyx_CLineF
$LN10@Pyx_CLineF:

; 24668:       } else {
; 24669:         PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear
$LN53@Pyx_CLineF:

; 24674:         c_line = 0;
; 24675:         PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);

	mov	r8, QWORD PTR __imp__Py_ZeroStruct
	mov	rdx, QWORD PTR __pyx_n_s_cline_in_traceback
	mov	rcx, QWORD PTR __pyx_cython_runtime
	mov	ebp, r15d
	call	QWORD PTR __imp_PyObject_SetAttr
$LN1@Pyx_CLineF:

; 24678:         c_line = 0;
; 24679:     }
; 24680:     __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);

	mov	rcx, QWORD PTR [rsi+72]
	mov	rdi, QWORD PTR [rsi+80]
	mov	rbx, QWORD PTR [rsi+88]
	mov	QWORD PTR [rsi+72], r12
	mov	QWORD PTR [rsi+80], r13
	mov	QWORD PTR [rsi+88], r14
	test	rcx, rcx
	je	SHORT $LN43@Pyx_CLineF
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN43@Pyx_CLineF
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN43@Pyx_CLineF:
	test	rdi, rdi
	je	SHORT $LN33@Pyx_CLineF
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN33@Pyx_CLineF
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN33@Pyx_CLineF:
	test	rbx, rbx
	je	SHORT $LN54@Pyx_CLineF
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN54@Pyx_CLineF
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN54@Pyx_CLineF:

; 24681:     return c_line;
; 24682: }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+96]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__Pyx_CLineForTraceback ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_bisect_code_objects DD imagerel __pyx_bisect_code_objects
	DD	imagerel __pyx_bisect_code_objects+130
	DD	imagerel $unwind$__pyx_bisect_code_objects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_bisect_code_objects DD 020501H
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_bisect_code_objects
_TEXT	SEGMENT
entries$ = 8
count$ = 16
code_line$ = 24
__pyx_bisect_code_objects PROC				; COMDAT

; 24686:       static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {

	mov	QWORD PTR [rsp+8], rbx

; 24687:     int start = 0, mid = 0, end = count - 1;

	xor	r11d, r11d
	lea	r10d, DWORD PTR [rdx-1]
	mov	rbx, rcx
	mov	r9d, r11d

; 24688:     if (end >= 0 && code_line > entries[end].code_line) {

	test	r10d, r10d
	js	SHORT $LN13@pyx_bisect
	movsxd	rax, r10d
	add	rax, rax
	cmp	r8d, DWORD PTR [rcx+rax*8+8]
	jle	SHORT $LN12@pyx_bisect

; 24689:         return count;

	mov	eax, edx

; 24705:     }
; 24706: }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
$LN12@pyx_bisect:

; 24690:     }
; 24691:     while (start < end) {

	test	r10d, r10d
$LN13@pyx_bisect:
	jle	SHORT $LN7@pyx_bisect
$LL8@pyx_bisect:

; 24692:         mid = start + (end - start) / 2;

	mov	eax, r10d
	sub	eax, r11d
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	r9d, DWORD PTR [r11+rax]

; 24693:         if (code_line < entries[mid].code_line) {

	movsxd	rax, r9d
	add	rax, rax
	mov	ecx, DWORD PTR [rbx+rax*8+8]
	cmp	r8d, ecx
	jge	SHORT $LN14@pyx_bisect

; 24694:             end = mid;

	mov	r10d, r9d
	jmp	SHORT $LN3@pyx_bisect
$LN14@pyx_bisect:

; 24695:         } else if (code_line > entries[mid].code_line) {

	jle	SHORT $LN4@pyx_bisect

; 24696:              start = mid + 1;

	lea	r11d, DWORD PTR [r9+1]
$LN3@pyx_bisect:

; 24690:     }
; 24691:     while (start < end) {

	cmp	r11d, r10d
	jl	SHORT $LL8@pyx_bisect
$LN7@pyx_bisect:

; 24697:         } else {
; 24698:             return mid;
; 24699:         }
; 24700:     }
; 24701:     if (code_line <= entries[mid].code_line) {

	movsxd	rax, r9d
	add	rax, rax
	cmp	r8d, DWORD PTR [rbx+rax*8+8]

; 24702:         return mid;

	mov	eax, r9d
	jle	SHORT $LN1@pyx_bisect

; 24703:     } else {
; 24704:         return mid + 1;

	lea	eax, DWORD PTR [r9+1]
$LN1@pyx_bisect:

; 24705:     }
; 24706: }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
$LN4@pyx_bisect:
	mov	rbx, QWORD PTR [rsp+8]
	mov	eax, r9d
	ret	0
__pyx_bisect_code_objects ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_find_code_object DD imagerel __pyx_find_code_object
	DD	imagerel __pyx_find_code_object+80
	DD	imagerel $unwind$__pyx_find_code_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_find_code_object DD 020601H
	DD	070023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_find_code_object
_TEXT	SEGMENT
code_line$ = 48
__pyx_find_code_object PROC				; COMDAT

; 24707: static PyCodeObject *__pyx_find_code_object(int code_line) {

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r8d, ecx

; 24708:     PyCodeObject* code_object;
; 24709:     int pos;
; 24710:     if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {

	test	ecx, ecx
	je	SHORT $LN3@pyx_find_c
	mov	rdi, QWORD PTR __pyx_code_cache+8
	test	rdi, rdi
	je	SHORT $LN3@pyx_find_c

; 24712:     }
; 24713:     pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);

	mov	edx, DWORD PTR __pyx_code_cache
	mov	rcx, rdi
	call	__pyx_bisect_code_objects

; 24714:     if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {

	cmp	eax, DWORD PTR __pyx_code_cache
	jge	SHORT $LN3@pyx_find_c
	cdqe
	add	rax, rax
	cmp	DWORD PTR [rdi+rax*8+8], r8d
	jne	SHORT $LN3@pyx_find_c

; 24715:         return NULL;
; 24716:     }
; 24717:     code_object = __pyx_code_cache.entries[pos].code_object;

	mov	rax, QWORD PTR [rdi+rax*8]

; 24718:     Py_INCREF(code_object);

	inc	QWORD PTR [rax]

; 24719:     return code_object;
; 24720: }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@pyx_find_c:

; 24711:         return NULL;

	xor	eax, eax

; 24719:     return code_object;
; 24720: }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_find_code_object ENDP
_TEXT	ENDS
EXTRN	__imp_PyMem_Realloc:PROC
EXTRN	__imp_PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_insert_code_object DD imagerel __pyx_insert_code_object
	DD	imagerel __pyx_insert_code_object+112
	DD	imagerel $unwind$__pyx_insert_code_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_insert_code_object DD imagerel __pyx_insert_code_object+112
	DD	imagerel __pyx_insert_code_object+330
	DD	imagerel $chain$1$__pyx_insert_code_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_insert_code_object DD imagerel __pyx_insert_code_object+330
	DD	imagerel __pyx_insert_code_object+347
	DD	imagerel $chain$2$__pyx_insert_code_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_insert_code_object DD 021H
	DD	imagerel __pyx_insert_code_object
	DD	imagerel __pyx_insert_code_object+112
	DD	imagerel $unwind$__pyx_insert_code_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_insert_code_object DD 041821H
	DD	07c418H
	DD	066405H
	DD	imagerel __pyx_insert_code_object
	DD	imagerel __pyx_insert_code_object+112
	DD	imagerel $unwind$__pyx_insert_code_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_insert_code_object DD 061701H
	DD	095417H
	DD	083417H
	DD	070133217H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_insert_code_object
_TEXT	SEGMENT
code_line$ = 48
code_object$ = 56
__pyx_insert_code_object PROC				; COMDAT

; 24724:     if (unlikely(!code_line)) {

	test	ecx, ecx
	je	$LN21@pyx_insert
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	sub	rsp, 32					; 00000020H

; 24722:     int pos, i;
; 24723:     __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;

	mov	rbx, QWORD PTR __pyx_code_cache+8
	mov	rdi, rdx
	mov	ebp, ecx

; 24725:         return;
; 24726:     }
; 24727:     if (unlikely(!entries)) {

	test	rbx, rbx
	jne	SHORT $LN13@pyx_insert

; 24728:         entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));

	mov	ecx, 1024				; 00000400H
	call	QWORD PTR __imp_PyMem_Malloc

; 24729:         if (likely(entries)) {

	test	rax, rax
	je	$LN15@pyx_insert

; 24730:             __pyx_code_cache.entries = entries;
; 24731:             __pyx_code_cache.max_count = 64;
; 24732:             __pyx_code_cache.count = 1;
; 24733:             entries[0].code_line = code_line;

	mov	DWORD PTR [rax+8], ebp

; 24734:             entries[0].code_object = code_object;

	mov	QWORD PTR [rax], rdi

; 24735:             Py_INCREF(code_object);

	inc	QWORD PTR [rdi]
	mov	QWORD PTR __pyx_code_cache+8, rax
	mov	DWORD PTR __pyx_code_cache+4, 64	; 00000040H
	mov	DWORD PTR __pyx_code_cache, 1

; 24763: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN13@pyx_insert:
	mov	QWORD PTR [rsp+48], rsi

; 24736:         }
; 24737:         return;
; 24738:     }
; 24739:     pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);

	mov	esi, DWORD PTR __pyx_code_cache
	mov	r8d, ecx
	mov	rcx, rbx
	mov	edx, esi
	mov	QWORD PTR [rsp+56], r12
	call	__pyx_bisect_code_objects
	movsxd	r12, eax

; 24740:     if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {

	cmp	r12d, esi
	jge	SHORT $LN11@pyx_insert
	mov	rdx, r12
	add	rdx, rdx
	cmp	DWORD PTR [rbx+rdx*8+8], ebp
	jne	SHORT $LN11@pyx_insert

; 24741:         PyCodeObject* tmp = entries[pos].code_object;

	mov	rcx, QWORD PTR [rbx+rdx*8]

; 24742:         entries[pos].code_object = code_object;

	mov	QWORD PTR [rbx+rdx*8], rdi

; 24743:         Py_DECREF(tmp);

	add	QWORD PTR [rcx], -1
	jne	$LN20@pyx_insert
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 24744:         return;

	jmp	$LN20@pyx_insert
$LN11@pyx_insert:

; 24745:     }
; 24746:     if (__pyx_code_cache.count == __pyx_code_cache.max_count) {

	mov	eax, DWORD PTR __pyx_code_cache+4
	cmp	esi, eax
	jne	SHORT $LN5@pyx_insert

; 24747:         int new_max = __pyx_code_cache.max_count + 64;

	lea	esi, DWORD PTR [rax+64]

; 24748:         entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
; 24749:             __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));

	mov	rcx, rbx
	movsxd	rdx, esi
	shl	rdx, 4
	call	QWORD PTR __imp_PyMem_Realloc
	mov	rbx, rax

; 24750:         if (unlikely(!entries)) {

	test	rax, rax
	je	SHORT $LN20@pyx_insert

; 24751:             return;
; 24752:         }
; 24753:         __pyx_code_cache.entries = entries;
; 24754:         __pyx_code_cache.max_count = new_max;

	mov	DWORD PTR __pyx_code_cache+4, esi
	mov	esi, DWORD PTR __pyx_code_cache
	mov	QWORD PTR __pyx_code_cache+8, rax
$LN5@pyx_insert:

; 24755:     }
; 24756:     for (i=__pyx_code_cache.count; i>pos; i--) {

	movsxd	r8, esi
	mov	rdx, r12
	cmp	r8, r12
	jle	SHORT $LN1@pyx_insert
	mov	r9, r8
	shl	r9, 4
	add	r9, rbx
	sub	r8, rdx
	npad	1
$LL3@pyx_insert:

; 24757:         entries[i] = entries[i-1];

	mov	rax, QWORD PTR [r9-16]
	add	r9, -16
	sub	r8, 1
	mov	QWORD PTR [r9+16], rax
	mov	rax, QWORD PTR [r9+8]
	mov	QWORD PTR [r9+24], rax
	jne	SHORT $LL3@pyx_insert
$LN1@pyx_insert:

; 24758:     }
; 24759:     entries[pos].code_line = code_line;

	add	rdx, rdx

; 24760:     entries[pos].code_object = code_object;
; 24761:     __pyx_code_cache.count++;

	inc	esi
	mov	DWORD PTR [rbx+rdx*8+8], ebp
	mov	QWORD PTR [rbx+rdx*8], rdi

; 24762:     Py_INCREF(code_object);

	inc	QWORD PTR [rdi]
	mov	DWORD PTR __pyx_code_cache, esi
$LN20@pyx_insert:
	mov	rsi, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+56]
$LN15@pyx_insert:

; 24763: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
$LN21@pyx_insert:
	fatret	0
__pyx_insert_code_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LBHJMCDF@?$CFs?5?$CI?$CFs?3?$CFd?$CJ?$AA@ ; `string'
EXTRN	__imp_PyString_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_CreateCodeObjectForTraceback DD imagerel __Pyx_CreateCodeObjectForTraceback
	DD	imagerel __Pyx_CreateCodeObjectForTraceback+256
	DD	imagerel $unwind$__Pyx_CreateCodeObjectForTraceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_CreateCodeObjectForTraceback DD 081401H
	DD	0126414H
	DD	0115414H
	DD	0103414H
	DD	07010d214H
xdata	ENDS
;	COMDAT ??_C@_0L@LBHJMCDF@?$CFs?5?$CI?$CFs?3?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@LBHJMCDF@?$CFs?5?$CI?$CFs?3?$CFd?$CJ?$AA@ DB '%s (%s:%d)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_CreateCodeObjectForTraceback
_TEXT	SEGMENT
funcname$ = 128
c_line$ = 136
py_line$ = 144
filename$ = 152
__Pyx_CreateCodeObjectForTraceback PROC			; COMDAT

; 24771:             int py_line, const char *filename) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rsi, rcx

; 24772:     PyCodeObject *py_code = 0;
; 24773:     PyObject *py_srcfile = 0;
; 24774:     PyObject *py_funcname = 0;
; 24775:     #if PY_MAJOR_VERSION < 3
; 24776:     py_srcfile = PyString_FromString(filename);

	mov	rcx, r9
	mov	ebp, r8d
	mov	edi, edx
	call	QWORD PTR __imp_PyString_FromString
	mov	rbx, rax

; 24777:     #else
; 24778:     py_srcfile = PyUnicode_FromString(filename);
; 24779:     #endif
; 24780:     if (!py_srcfile) goto bad;

	test	rax, rax
	je	SHORT $LN3@Pyx_Create

; 24781:     if (c_line) {

	test	edi, edi
	je	SHORT $LN33@Pyx_Create

; 24782:         #if PY_MAJOR_VERSION < 3
; 24783:         py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);

	mov	r8, QWORD PTR __pyx_cfilenm
	lea	rcx, OFFSET FLAT:??_C@_0L@LBHJMCDF@?$CFs?5?$CI?$CFs?3?$CFd?$CJ?$AA@
	mov	r9d, edi
	mov	rdx, rsi
	call	QWORD PTR __imp_PyString_FromFormat

; 24784:         #else
; 24785:         py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
; 24786:         #endif
; 24787:     }
; 24788:     else {

	jmp	SHORT $LN37@Pyx_Create
$LN33@Pyx_Create:

; 24789:         #if PY_MAJOR_VERSION < 3
; 24790:         py_funcname = PyString_FromString(funcname);

	mov	rcx, rsi
	call	QWORD PTR __imp_PyString_FromString
$LN37@Pyx_Create:
	mov	rdi, rax

; 24791:         #else
; 24792:         py_funcname = PyUnicode_FromString(funcname);
; 24793:         #endif
; 24794:     }
; 24795:     if (!py_funcname) goto bad;

	test	rax, rax
	jne	SHORT $LN31@Pyx_Create
$bad$31572:

; 24816: bad:
; 24817:     Py_XDECREF(py_srcfile);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_Create
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx_Create:

; 24818:     Py_XDECREF(py_funcname);
; 24819:     return NULL;

	xor	eax, eax
$LN35@Pyx_Create:

; 24820: }

	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rsp, r11
	pop	rdi
	ret	0
$LN31@Pyx_Create:

; 24796:     py_code = __Pyx_PyCode_New(
; 24797:         0,
; 24798:         0,
; 24799:         0,
; 24800:         0,
; 24801:         0,
; 24802:         __pyx_empty_bytes, /*PyObject *code,*/
; 24803:         __pyx_empty_tuple, /*PyObject *consts,*/
; 24804:         __pyx_empty_tuple, /*PyObject *names,*/
; 24805:         __pyx_empty_tuple, /*PyObject *varnames,*/
; 24806:         __pyx_empty_tuple, /*PyObject *freevars,*/
; 24807:         __pyx_empty_tuple, /*PyObject *cellvars,*/
; 24808:         py_srcfile,   /*PyObject *filename,*/
; 24809:         py_funcname,  /*PyObject *name,*/
; 24810:         py_line,
; 24811:         __pyx_empty_bytes  /*PyObject *lnotab*/
; 24812:     );

	mov	rax, QWORD PTR __pyx_empty_tuple
	mov	rcx, QWORD PTR __pyx_empty_bytes
	xor	r9d, r9d
	mov	QWORD PTR [rsp+104], rcx
	mov	DWORD PTR [rsp+96], ebp
	mov	QWORD PTR [rsp+88], rdi
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_PyCode_New

; 24813:     Py_DECREF(py_srcfile);

	add	QWORD PTR [rbx], -1
	mov	rsi, rax
	jne	SHORT $LN29@Pyx_Create
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN29@Pyx_Create:

; 24814:     Py_DECREF(py_funcname);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN24@Pyx_Create
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN24@Pyx_Create:

; 24815:     return py_code;

	mov	rax, rsi
	jmp	$LN35@Pyx_Create
__Pyx_CreateCodeObjectForTraceback ENDP
_TEXT	ENDS
EXTRN	__imp_PyTraceBack_Here:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_AddTraceback DD imagerel __Pyx_AddTraceback
	DD	imagerel __Pyx_AddTraceback+298
	DD	imagerel $unwind$__Pyx_AddTraceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_AddTraceback DD 0c5001H
	DD	096450H
	DD	08344bH
	DD	0b7414H
	DD	0a5414H
	DD	0e0103214H
	DD	0c00cd00eH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_AddTraceback
_TEXT	SEGMENT
funcname$ = 64
c_line$ = 72
py_line$ = 80
filename$ = 88
__Pyx_AddTraceback PROC					; COMDAT

; 24822:                                int py_line, const char *filename) {

	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 24823:     PyCodeObject *py_code = 0;
; 24824:     PyFrameObject *py_frame = 0;
; 24825:     PyThreadState *tstate = __Pyx_PyThreadState_Current;

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	r13, r9
	mov	ebp, r8d
	mov	r12, QWORD PTR [rax]
	mov	edi, edx
	mov	r14, rcx

; 24826:     if (c_line) {

	test	edx, edx
	je	SHORT $LN27@Pyx_AddTra

; 24827:         c_line = __Pyx_CLineForTraceback(tstate, c_line);

	mov	rcx, r12
	call	__Pyx_CLineForTraceback
	mov	edi, eax

; 24828:     }
; 24829:     py_code = __pyx_find_code_object(c_line ? -c_line : py_line);

	test	eax, eax
	je	SHORT $LN27@Pyx_AddTra
	mov	r8d, eax
	neg	r8d
	jmp	SHORT $LN28@Pyx_AddTra
$LN27@Pyx_AddTra:
	mov	r8d, ebp
$LN28@Pyx_AddTra:
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	test	r8d, r8d
	je	SHORT $LN37@Pyx_AddTra
	mov	rsi, QWORD PTR __pyx_code_cache+8
	test	rsi, rsi
	je	SHORT $LN37@Pyx_AddTra
	mov	ebx, DWORD PTR __pyx_code_cache
	mov	rcx, rsi
	mov	edx, ebx
	call	__pyx_bisect_code_objects
	cmp	eax, ebx
	jge	SHORT $LN37@Pyx_AddTra
	movsxd	rbx, eax
	add	rbx, rbx
	cmp	DWORD PTR [rsi+rbx*8+8], r8d
	jne	SHORT $LN37@Pyx_AddTra
	mov	rbx, QWORD PTR [rsi+rbx*8]
	inc	QWORD PTR [rbx]
	jmp	SHORT $LN23@Pyx_AddTra
$LN37@Pyx_AddTra:

; 24830:     if (!py_code) {
; 24831:         py_code = __Pyx_CreateCodeObjectForTraceback(
; 24832:             funcname, c_line, py_line, filename);

	mov	r9, r13
	mov	r8d, ebp
	mov	edx, edi
	mov	rcx, r14
	call	__Pyx_CreateCodeObjectForTraceback
	mov	rbx, rax

; 24833:         if (!py_code) goto bad;

	test	rax, rax
	je	SHORT $LN3@Pyx_AddTra

; 24834:         __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);

	test	edi, edi
	je	SHORT $LN29@Pyx_AddTra
	neg	edi
	jmp	SHORT $LN30@Pyx_AddTra
$LN29@Pyx_AddTra:
	mov	edi, ebp
$LN30@Pyx_AddTra:
	mov	rdx, rax
	mov	ecx, edi
	call	__pyx_insert_code_object
$LN23@Pyx_AddTra:

; 24835:     }
; 24836:     py_frame = PyFrame_New(
; 24837:         tstate,            /*PyThreadState *tstate,*/
; 24838:         py_code,           /*PyCodeObject *code,*/
; 24839:         __pyx_d,    /*PyObject *globals,*/
; 24840:         0                  /*PyObject *locals*/
; 24841:     );

	mov	r8, QWORD PTR __pyx_d
	xor	r9d, r9d
	mov	rdx, rbx
	mov	rcx, r12
	call	QWORD PTR __imp_PyFrame_New
	mov	rdi, rax

; 24842:     if (!py_frame) goto bad;

	test	rax, rax
	je	SHORT $bad$31645

; 24843:     __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
; 24844:     PyTraceBack_Here(py_frame);

	mov	rcx, rax
	mov	DWORD PTR [rax+124], ebp
	call	QWORD PTR __imp_PyTraceBack_Here
$bad$31645:

; 24845: bad:
; 24846:     Py_XDECREF(py_code);

	test	rbx, rbx
	je	SHORT $LN13@Pyx_AddTra
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@Pyx_AddTra
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@Pyx_AddTra:

; 24847:     Py_XDECREF(py_frame);

	test	rdi, rdi
	je	SHORT $LN3@Pyx_AddTra
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@Pyx_AddTra
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN3@Pyx_AddTra:
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]

; 24848: }

	mov	rbp, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	ret	0
__Pyx_AddTraceback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memviewslice_is_contig
_TEXT	SEGMENT
mvs$ = 8
order$ = 16
ndim$ = 24
__pyx_memviewslice_is_contig PROC			; COMDAT

; 24878:     int i, index, step, start;
; 24879:     Py_ssize_t itemsize = mvs.memview->view.itemsize;

	mov	rax, QWORD PTR [rcx]

; 24880:     if (order == 'F') {

	xor	r9d, r9d
	mov	r10, QWORD PTR [rax+96]
	cmp	dl, 70					; 00000046H
	jne	SHORT $LN7@pyx_memvie

; 24881:         step = 1;

	lea	r11d, QWORD PTR [r9+1]

; 24882:         start = 0;

	mov	edx, r9d

; 24883:     } else {

	jmp	SHORT $LN6@pyx_memvie
$LN7@pyx_memvie:

; 24884:         step = -1;

	or	r11d, -1

; 24885:         start = ndim - 1;

	lea	edx, DWORD PTR [r8-1]
$LN6@pyx_memvie:

; 24886:     }
; 24887:     for (i = 0; i < ndim; i++) {

	test	r8d, r8d
	jle	SHORT $LN3@pyx_memvie
	npad	11
$LL5@pyx_memvie:

; 24888:         index = start + step * i;
; 24889:         if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)

	movsxd	rax, edx
	cmp	QWORD PTR [rcx+rax*8+144], 0
	jge	SHORT $LN11@pyx_memvie
	cmp	QWORD PTR [rcx+rax*8+80], r10
	jne	SHORT $LN11@pyx_memvie

; 24891:         itemsize *= mvs.shape[index];

	imul	r10, QWORD PTR [rcx+rax*8+16]
	inc	r9d
	add	edx, r11d
	cmp	r9d, r8d
	jl	SHORT $LL5@pyx_memvie
$LN3@pyx_memvie:

; 24892:     }
; 24893:     return 1;

	mov	eax, 1

; 24894: }

	ret	0
$LN11@pyx_memvie:

; 24890:             return 0;

	xor	eax, eax

; 24894: }

	ret	0
__pyx_memviewslice_is_contig ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_get_array_memory_extents DD imagerel __pyx_get_array_memory_extents
	DD	imagerel __pyx_get_array_memory_extents+135
	DD	imagerel $unwind$__pyx_get_array_memory_extents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_get_array_memory_extents DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_get_array_memory_extents
_TEXT	SEGMENT
slice$ = 8
out_start$ = 16
out_end$ = 24
ndim$ = 32
itemsize$ = 40
__pyx_get_array_memory_extents PROC			; COMDAT

; 24901: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rdx

; 24902:     char *start, *end;
; 24903:     int i;
; 24904:     start = end = slice->data;

	mov	rdx, QWORD PTR [rcx+8]

; 24905:     for (i = 0; i < ndim; i++) {

	movsxd	r9, r9d
	xor	r10d, r10d
	mov	rbx, r8
	mov	r11, rdx
	test	r9, r9
	jle	SHORT $LN5@pyx_get_ar

; 24902:     char *start, *end;
; 24903:     int i;
; 24904:     start = end = slice->data;

	add	rcx, 16
	npad	10
$LL7@pyx_get_ar:

; 24906:         Py_ssize_t stride = slice->strides[i];
; 24907:         Py_ssize_t extent = slice->shape[i];

	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rcx+64]

; 24908:         if (extent == 0) {

	test	rax, rax
	je	SHORT $LN11@pyx_get_ar

; 24910:             return;
; 24911:         } else {
; 24912:             if (stride > 0)
; 24913:                 end += stride * (extent - 1);

	dec	rax
	imul	rax, r8
	test	r8, r8
	jle	SHORT $LN2@pyx_get_ar
	add	rdx, rax

; 24914:             else

	jmp	SHORT $LN6@pyx_get_ar
$LN2@pyx_get_ar:

; 24915:                 start += stride * (extent - 1);

	add	r11, rax
$LN6@pyx_get_ar:

; 24905:     for (i = 0; i < ndim; i++) {

	inc	r10
	add	rcx, 8
	cmp	r10, r9
	jl	SHORT $LL7@pyx_get_ar
$LN5@pyx_get_ar:

; 24916:         }
; 24917:     }
; 24918:     *out_start = start;
; 24919:     *out_end = end + itemsize;

	mov	rax, QWORD PTR itemsize$[rsp]
	mov	QWORD PTR [rdi], r11
	lea	rcx, QWORD PTR [rdx+rax]
	mov	QWORD PTR [rbx], rcx

; 24920: }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN11@pyx_get_ar:

; 24909:             *out_start = *out_end = start;

	mov	QWORD PTR [rbx], r11

; 24920: }

	mov	rbx, QWORD PTR [rsp+8]
	mov	QWORD PTR [rdi], r11
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
__pyx_get_array_memory_extents ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_slices_overlap DD imagerel __pyx_slices_overlap
	DD	imagerel __pyx_slices_overlap+212
	DD	imagerel $unwind$__pyx_slices_overlap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_slices_overlap DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_slices_overlap
_TEXT	SEGMENT
slice1$ = 8
slice2$ = 16
ndim$ = 24
itemsize$ = 32
__pyx_slices_overlap PROC				; COMDAT

; 24925: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 24926:     void *start1, *end1, *start2, *end2;
; 24927:     __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);

	mov	r11, QWORD PTR [rcx+8]
	xor	r10d, r10d
	mov	rbp, r9
	mov	rsi, rdx
	movsxd	rbx, r8d
	mov	rdi, r11
	test	r8d, r8d
	jle	SHORT $LN9@pyx_slices
	add	rcx, 16
$LL11@pyx_slices:
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rcx+64]
	test	rax, rax
	je	SHORT $LN25@pyx_slices
	dec	rax
	imul	rax, rdx
	test	rdx, rdx
	jle	SHORT $LN6@pyx_slices
	add	r11, rax
	jmp	SHORT $LN10@pyx_slices
$LN6@pyx_slices:
	add	rdi, rax
$LN10@pyx_slices:
	inc	r10
	add	rcx, 8
	cmp	r10, rbx
	jl	SHORT $LL11@pyx_slices
$LN9@pyx_slices:
	add	r11, r9
$LN12@pyx_slices:

; 24928:     __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);

	mov	r10, QWORD PTR [rsi+8]
	xor	r8d, r8d
	mov	r9, r10
	test	rbx, rbx
	jle	SHORT $LN18@pyx_slices
	lea	rcx, QWORD PTR [rsi+16]
$LL20@pyx_slices:
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rcx+64]
	test	rax, rax
	je	SHORT $LN26@pyx_slices
	dec	rax
	imul	rax, rdx
	test	rdx, rdx
	jle	SHORT $LN15@pyx_slices
	add	r10, rax
	jmp	SHORT $LN19@pyx_slices
$LN25@pyx_slices:

; 24926:     void *start1, *end1, *start2, *end2;
; 24927:     __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);

	mov	r11, rdi
	jmp	SHORT $LN12@pyx_slices

; 24928:     __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);

$LN15@pyx_slices:
	add	r9, rax
$LN19@pyx_slices:
	inc	r8
	add	rcx, 8
	cmp	r8, rbx
	jl	SHORT $LL20@pyx_slices
$LN18@pyx_slices:
	lea	rax, QWORD PTR [r10+rbp]
$LN21@pyx_slices:

; 24929:     return (start1 < end2) && (start2 < end1);

	cmp	rdi, rax
	jae	SHORT $LN3@pyx_slices
	cmp	r9, r11
	jae	SHORT $LN3@pyx_slices
	mov	eax, 1
	jmp	SHORT $LN4@pyx_slices
$LN26@pyx_slices:

; 24928:     __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);

	mov	rax, r9
	jmp	SHORT $LN21@pyx_slices
$LN3@pyx_slices:

; 24929:     return (start1 < end2) && (start2 < end1);

	xor	eax, eax
$LN4@pyx_slices:

; 24930: }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
__pyx_slices_overlap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_capsule_create
_TEXT	SEGMENT
p$ = 8
sig$ = 16
__pyx_capsule_create PROC				; COMDAT

; 24936:     PyObject *cobj;
; 24937: #if PY_VERSION_HEX >= 0x02070000
; 24938:     cobj = PyCapsule_New(p, sig, NULL);

	xor	r8d, r8d

; 24939: #else
; 24940:     cobj = PyCObject_FromVoidPtr(p, NULL);
; 24941: #endif
; 24942:     return cobj;
; 24943: }

	rex_jmp	QWORD PTR __imp_PyCapsule_New
__pyx_capsule_create ENDP
_TEXT	ENDS
EXTRN	__imp_PyLong_FromUnsignedLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_From_unsigned_int DD imagerel __Pyx_PyInt_From_unsigned_int
	DD	imagerel __Pyx_PyInt_From_unsigned_int+15
	DD	imagerel $unwind$__Pyx_PyInt_From_unsigned_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_From_unsigned_int DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_From_unsigned_int
_TEXT	SEGMENT
value$ = 48
__Pyx_PyInt_From_unsigned_int PROC			; COMDAT

; 24946:       static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {

	sub	rsp, 40					; 00000028H

; 24947:     const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
; 24948:     const int is_unsigned = neg_one > const_zero;
; 24949:     if (is_unsigned) {
; 24950:         if (sizeof(unsigned int) < sizeof(long)) {
; 24951:             return PyInt_FromLong((long) value);
; 24952:         } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
; 24953:             return PyLong_FromUnsignedLong((unsigned long) value);

	call	QWORD PTR __imp_PyLong_FromUnsignedLong

; 24954: #ifdef HAVE_LONG_LONG
; 24955:         } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
; 24956:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
; 24957: #endif
; 24958:         }
; 24959:     } else {
; 24960:         if (sizeof(unsigned int) <= sizeof(long)) {
; 24961:             return PyInt_FromLong((long) value);
; 24962: #ifdef HAVE_LONG_LONG
; 24963:         } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
; 24964:             return PyLong_FromLongLong((PY_LONG_LONG) value);
; 24965: #endif
; 24966:         }
; 24967:     }
; 24968:     {
; 24969:         int one = 1; int little = (int)*(unsigned char *)&one;
; 24970:         unsigned char *bytes = (unsigned char *)&value;
; 24971:         return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
; 24972:                                      little, !is_unsigned);
; 24973:     }
; 24974: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyInt_From_unsigned_int ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_From_int DD imagerel __Pyx_PyInt_From_int
	DD	imagerel __Pyx_PyInt_From_int+15
	DD	imagerel $unwind$__Pyx_PyInt_From_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_From_int DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_From_int
_TEXT	SEGMENT
value$ = 48
__Pyx_PyInt_From_int PROC				; COMDAT

; 25309:       static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {

	sub	rsp, 40					; 00000028H

; 25310:     const int neg_one = (int) -1, const_zero = (int) 0;
; 25311:     const int is_unsigned = neg_one > const_zero;
; 25312:     if (is_unsigned) {
; 25313:         if (sizeof(int) < sizeof(long)) {
; 25314:             return PyInt_FromLong((long) value);
; 25315:         } else if (sizeof(int) <= sizeof(unsigned long)) {
; 25316:             return PyLong_FromUnsignedLong((unsigned long) value);
; 25317: #ifdef HAVE_LONG_LONG
; 25318:         } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
; 25319:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
; 25320: #endif
; 25321:         }
; 25322:     } else {
; 25323:         if (sizeof(int) <= sizeof(long)) {
; 25324:             return PyInt_FromLong((long) value);

	call	QWORD PTR __imp_PyInt_FromLong

; 25325: #ifdef HAVE_LONG_LONG
; 25326:         } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
; 25327:             return PyLong_FromLongLong((PY_LONG_LONG) value);
; 25328: #endif
; 25329:         }
; 25330:     }
; 25331:     {
; 25332:         int one = 1; int little = (int)*(unsigned char *)&one;
; 25333:         unsigned char *bytes = (unsigned char *)&value;
; 25334:         return _PyLong_FromByteArray(bytes, sizeof(int),
; 25335:                                      little, !is_unsigned);
; 25336:     }
; 25337: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyInt_From_int ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_From_enum__NPY_TYPES DD imagerel __Pyx_PyInt_From_enum__NPY_TYPES
	DD	imagerel __Pyx_PyInt_From_enum__NPY_TYPES+15
	DD	imagerel $unwind$__Pyx_PyInt_From_enum__NPY_TYPES
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_From_enum__NPY_TYPES DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_From_enum__NPY_TYPES
_TEXT	SEGMENT
value$ = 48
__Pyx_PyInt_From_enum__NPY_TYPES PROC			; COMDAT

; 25340:       static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {

	sub	rsp, 40					; 00000028H

; 25341:     const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
; 25342:     const int is_unsigned = neg_one > const_zero;
; 25343:     if (is_unsigned) {
; 25344:         if (sizeof(enum NPY_TYPES) < sizeof(long)) {
; 25345:             return PyInt_FromLong((long) value);
; 25346:         } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
; 25347:             return PyLong_FromUnsignedLong((unsigned long) value);
; 25348: #ifdef HAVE_LONG_LONG
; 25349:         } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
; 25350:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
; 25351: #endif
; 25352:         }
; 25353:     } else {
; 25354:         if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
; 25355:             return PyInt_FromLong((long) value);

	call	QWORD PTR __imp_PyInt_FromLong

; 25356: #ifdef HAVE_LONG_LONG
; 25357:         } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
; 25358:             return PyLong_FromLongLong((PY_LONG_LONG) value);
; 25359: #endif
; 25360:         }
; 25361:     }
; 25362:     {
; 25363:         int one = 1; int little = (int)*(unsigned char *)&one;
; 25364:         unsigned char *bytes = (unsigned char *)&value;
; 25365:         return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
; 25366:                                      little, !is_unsigned);
; 25367:     }
; 25368: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyInt_From_enum__NPY_TYPES ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_From_long DD imagerel __Pyx_PyInt_From_long
	DD	imagerel __Pyx_PyInt_From_long+15
	DD	imagerel $unwind$__Pyx_PyInt_From_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_From_long DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_From_long
_TEXT	SEGMENT
value$ = 48
__Pyx_PyInt_From_long PROC				; COMDAT

; 26005:       static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {

	sub	rsp, 40					; 00000028H

; 26006:     const long neg_one = (long) -1, const_zero = (long) 0;
; 26007:     const int is_unsigned = neg_one > const_zero;
; 26008:     if (is_unsigned) {
; 26009:         if (sizeof(long) < sizeof(long)) {
; 26010:             return PyInt_FromLong((long) value);
; 26011:         } else if (sizeof(long) <= sizeof(unsigned long)) {
; 26012:             return PyLong_FromUnsignedLong((unsigned long) value);
; 26013: #ifdef HAVE_LONG_LONG
; 26014:         } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
; 26015:             return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
; 26016: #endif
; 26017:         }
; 26018:     } else {
; 26019:         if (sizeof(long) <= sizeof(long)) {
; 26020:             return PyInt_FromLong((long) value);

	call	QWORD PTR __imp_PyInt_FromLong

; 26021: #ifdef HAVE_LONG_LONG
; 26022:         } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
; 26023:             return PyLong_FromLongLong((PY_LONG_LONG) value);
; 26024: #endif
; 26025:         }
; 26026:     }
; 26027:     {
; 26028:         int one = 1; int little = (int)*(unsigned char *)&one;
; 26029:         unsigned char *bytes = (unsigned char *)&value;
; 26030:         return _PyLong_FromByteArray(bytes, sizeof(long),
; 26031:                                      little, !is_unsigned);
; 26032:     }
; 26033: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyInt_From_long ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_InBases
_TEXT	SEGMENT
a$ = 8
b$ = 16
__Pyx_InBases PROC					; COMDAT

; 26227:     while (a) {

	test	rcx, rcx
	je	SHORT $LN2@Pyx_InBase
	npad	11
$LL3@Pyx_InBase:

; 26228:         a = a->tp_base;

	mov	rcx, QWORD PTR [rcx+256]

; 26229:         if (a == b)

	cmp	rcx, rdx
	je	SHORT $LN7@Pyx_InBase

; 26227:     while (a) {

	test	rcx, rcx
	jne	SHORT $LL3@Pyx_InBase
$LN2@Pyx_InBase:

; 26231:     }
; 26232:     return b == &PyBaseObject_Type;

	xor	eax, eax
	cmp	rdx, QWORD PTR __imp_PyBaseObject_Type
	sete	al

; 26233: }

	ret	0
$LN7@Pyx_InBase:

; 26230:             return 1;

	mov	eax, 1

; 26233: }

	ret	0
__Pyx_InBases ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_IsSubtype
_TEXT	SEGMENT
a$ = 8
b$ = 16
__Pyx_IsSubtype PROC					; COMDAT

; 26235:     PyObject *mro;
; 26236:     if (a == b) return 1;

	cmp	rcx, rdx
	je	SHORT $LN17@Pyx_IsSubt

; 26237:     mro = a->tp_mro;

	mov	r8, QWORD PTR [rcx+344]

; 26238:     if (likely(mro)) {

	test	r8, r8
	je	SHORT $LL11@Pyx_IsSubt

; 26239:         Py_ssize_t i, n;
; 26240:         n = PyTuple_GET_SIZE(mro);

	mov	r9, QWORD PTR [r8+16]

; 26241:         for (i = 0; i < n; i++) {

	xor	eax, eax
	test	r9, r9
	jle	SHORT $LN2@Pyx_IsSubt

; 26239:         Py_ssize_t i, n;
; 26240:         n = PyTuple_GET_SIZE(mro);

	lea	rcx, QWORD PTR [r8+24]
$LL4@Pyx_IsSubt:

; 26242:             if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)

	cmp	QWORD PTR [rcx], rdx
	je	SHORT $LN17@Pyx_IsSubt
	inc	rax
	add	rcx, 8
	cmp	rax, r9
	jl	SHORT $LL4@Pyx_IsSubt
$LN2@Pyx_IsSubt:

; 26243:                 return 1;
; 26244:         }
; 26245:         return 0;

	xor	eax, eax

; 26248: }

	ret	0

; 26246:     }
; 26247:     return __Pyx_InBases(a, b);

$LL11@Pyx_IsSubt:
	mov	rcx, QWORD PTR [rcx+256]
	cmp	rcx, rdx
	je	SHORT $LN17@Pyx_IsSubt
	test	rcx, rcx
	jne	SHORT $LL11@Pyx_IsSubt
	xor	eax, eax
	cmp	rdx, QWORD PTR __imp_PyBaseObject_Type
	sete	al

; 26248: }

	ret	0
$LN17@Pyx_IsSubt:

; 26246:     }
; 26247:     return __Pyx_InBases(a, b);

	mov	eax, 1

; 26248: }

	ret	0
__Pyx_IsSubtype ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_IsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_inner_PyErr_GivenExceptionMatches2 DD imagerel __Pyx_inner_PyErr_GivenExceptionMatches2
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+14
	DD	imagerel $unwind$__Pyx_inner_PyErr_GivenExceptionMatches2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__Pyx_inner_PyErr_GivenExceptionMatches2 DD imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+14
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+196
	DD	imagerel $chain$4$__Pyx_inner_PyErr_GivenExceptionMatches2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__Pyx_inner_PyErr_GivenExceptionMatches2 DD imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+196
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+240
	DD	imagerel $chain$5$__Pyx_inner_PyErr_GivenExceptionMatches2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__Pyx_inner_PyErr_GivenExceptionMatches2 DD imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+240
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+265
	DD	imagerel $chain$6$__Pyx_inner_PyErr_GivenExceptionMatches2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__Pyx_inner_PyErr_GivenExceptionMatches2 DD 021H
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+14
	DD	imagerel $unwind$__Pyx_inner_PyErr_GivenExceptionMatches2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__Pyx_inner_PyErr_GivenExceptionMatches2 DD 020021H
	DD	097400H
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+14
	DD	imagerel $unwind$__Pyx_inner_PyErr_GivenExceptionMatches2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__Pyx_inner_PyErr_GivenExceptionMatches2 DD 0a2421H
	DD	04e424H
	DD	0bd417H
	DD	0ac412H
	DD	09740aH
	DD	085405H
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2
	DD	imagerel __Pyx_inner_PyErr_GivenExceptionMatches2+14
	DD	imagerel $unwind$__Pyx_inner_PyErr_GivenExceptionMatches2
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_inner_PyErr_GivenExceptionMatches2 DD 030701H
	DD	060034207H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_inner_PyErr_GivenExceptionMatches2
_TEXT	SEGMENT
err$ = 64
exc_type1$ = 72
exc_type2$ = 80
__Pyx_inner_PyErr_GivenExceptionMatches2 PROC		; COMDAT

; 26250: static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {

	push	rbx
	push	rsi
	sub	rsp, 40					; 00000028H

; 26251:     PyObject *exception, *value, *tb;
; 26252:     int res;
; 26253:     __Pyx_PyThreadState_declare
; 26254:     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	QWORD PTR [rsp+64], rbp
	mov	QWORD PTR [rsp+72], rdi
	mov	rbp, QWORD PTR [rax]
	mov	QWORD PTR [rsp+80], r12
	mov	QWORD PTR [rsp+88], r13

; 26255:     __Pyx_ErrFetch(&exception, &value, &tb);

	mov	r12, QWORD PTR [rbp+72]
	mov	r13, QWORD PTR [rbp+80]
	mov	QWORD PTR [rsp+32], r14
	mov	r14, QWORD PTR [rbp+88]
	mov	QWORD PTR [rbp+72], 0
	mov	QWORD PTR [rbp+80], 0
	mov	QWORD PTR [rbp+88], 0
	mov	rdi, r8
	mov	rbx, rcx

; 26256:     res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;

	test	rdx, rdx
	je	SHORT $LN42@Pyx_inner_
	call	QWORD PTR __imp_PyObject_IsSubclass
	mov	esi, eax

; 26257:     if (unlikely(res == -1)) {

	cmp	eax, -1
	jne	SHORT $LN3@Pyx_inner_

; 26258:         PyErr_WriteUnraisable(err);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyErr_WriteUnraisable

; 26259:         res = 0;
; 26260:     }
; 26261:     if (!res) {

	jmp	SHORT $LN42@Pyx_inner_
$LN3@Pyx_inner_:
	test	eax, eax
	jne	SHORT $LN1@Pyx_inner_
$LN42@Pyx_inner_:

; 26262:         res = PyObject_IsSubclass(err, exc_type2);

	mov	rdx, rdi
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_IsSubclass
	mov	esi, eax

; 26263:         if (unlikely(res == -1)) {

	cmp	eax, -1
	jne	SHORT $LN1@Pyx_inner_

; 26264:             PyErr_WriteUnraisable(err);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyErr_WriteUnraisable

; 26265:             res = 0;

	xor	esi, esi
$LN1@Pyx_inner_:

; 26266:         }
; 26267:     }
; 26268:     __Pyx_ErrRestore(exception, value, tb);

	mov	rcx, QWORD PTR [rbp+72]
	mov	rdi, QWORD PTR [rbp+80]
	mov	rbx, QWORD PTR [rbp+88]
	mov	QWORD PTR [rbp+72], r12
	mov	r12, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbp+80], r13
	mov	r13, QWORD PTR [rsp+88]
	mov	QWORD PTR [rbp+88], r14
	mov	r14, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+64]
	test	rcx, rcx
	je	SHORT $LN32@Pyx_inner_
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN32@Pyx_inner_
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN32@Pyx_inner_:
	test	rdi, rdi
	je	SHORT $LN22@Pyx_inner_
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN22@Pyx_inner_
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN22@Pyx_inner_:
	mov	rdi, QWORD PTR [rsp+72]
	test	rbx, rbx
	je	SHORT $LN43@Pyx_inner_
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN43@Pyx_inner_
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN43@Pyx_inner_:

; 26269:     return res;

	mov	eax, esi

; 26270: }

	add	rsp, 40					; 00000028H
	pop	rsi
	pop	rbx
	ret	0
__Pyx_inner_PyErr_GivenExceptionMatches2 ENDP
_TEXT	ENDS
EXTRN	__imp_PyErr_GivenExceptionMatches:PROC
EXTRN	__imp_PyClass_Type:BYTE
; Function compile flags: /Ogtpy
;	COMDAT __Pyx_PyErr_GivenExceptionMatches
_TEXT	SEGMENT
err$ = 8
exc_type$ = 16
__Pyx_PyErr_GivenExceptionMatches PROC			; COMDAT

; 26281:     if (likely(err == exc_type)) return 1;

	cmp	rcx, rdx
	jne	SHORT $LN3@Pyx_PyErr_
	mov	eax, 1

; 26284:     }
; 26285:     return PyErr_GivenExceptionMatches(err, exc_type);
; 26286: }

	ret	0
$LN3@Pyx_PyErr_:

; 26282:     if (likely(PyExceptionClass_Check(err))) {

	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN1@Pyx_PyErr_
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN2@Pyx_PyErr_
	bt	DWORD PTR [rcx+168], 30
	jb	SHORT $LN1@Pyx_PyErr_
$LN2@Pyx_PyErr_:

; 26284:     }
; 26285:     return PyErr_GivenExceptionMatches(err, exc_type);
; 26286: }

	rex_jmp	QWORD PTR __imp_PyErr_GivenExceptionMatches
$LN1@Pyx_PyErr_:

; 26283:         return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);

	mov	r8, rdx
	xor	edx, edx

; 26284:     }
; 26285:     return PyErr_GivenExceptionMatches(err, exc_type);
; 26286: }

	jmp	__Pyx_inner_PyErr_GivenExceptionMatches2
__Pyx_PyErr_GivenExceptionMatches ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+34
	DD	imagerel __pyx_typeinfo_cmp+373
	DD	imagerel $chain$1$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+373
	DD	imagerel __pyx_typeinfo_cmp+377
	DD	imagerel $chain$3$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+377
	DD	imagerel __pyx_typeinfo_cmp+398
	DD	imagerel $chain$4$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+398
	DD	imagerel __pyx_typeinfo_cmp+428
	DD	imagerel $chain$6$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+428
	DD	imagerel __pyx_typeinfo_cmp+454
	DD	imagerel $chain$8$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$__pyx_typeinfo_cmp DD imagerel __pyx_typeinfo_cmp+454
	DD	imagerel __pyx_typeinfo_cmp+467
	DD	imagerel $chain$9$__pyx_typeinfo_cmp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$__pyx_typeinfo_cmp DD 021H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__pyx_typeinfo_cmp DD 020021H
	DD	073400H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_typeinfo_cmp DD 020021H
	DD	073400H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__pyx_typeinfo_cmp DD 020021H
	DD	073400H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__pyx_typeinfo_cmp DD 040021H
	DD	085400H
	DD	073400H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_typeinfo_cmp DD 04ba21H
	DD	0854baH
	DD	073405H
	DD	imagerel __pyx_typeinfo_cmp
	DD	imagerel __pyx_typeinfo_cmp+34
	DD	imagerel $unwind$__pyx_typeinfo_cmp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_typeinfo_cmp DD 040a01H
	DD	09640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_typeinfo_cmp
_TEXT	SEGMENT
i$2$ = 48
a$ = 48
b$ = 56
__pyx_typeinfo_cmp PROC					; COMDAT

; 26299: {

	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rsi, rcx

; 26300:     int i;
; 26301:     if (!a || !b)

	test	rcx, rcx
	je	$LN23@pyx_typein
	test	rdx, rdx
	je	$LN23@pyx_typein
	mov	QWORD PTR [rsp+56], rbx

; 26303:     if (a == b)

	cmp	rcx, rdx

; 26304:         return 1;

	je	$LN9@pyx_typein

; 26305:     if (a->size != b->size || a->typegroup != b->typegroup ||
; 26306:             a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {

	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR [rdx+16]
	cmp	rcx, rdx
	jne	$LN20@pyx_typein
	movzx	r10d, BYTE PTR [rsi+92]
	cmp	r10b, BYTE PTR [rdi+92]
	jne	$LN20@pyx_typein
	movzx	eax, BYTE PTR [rdi+93]
	cmp	BYTE PTR [rsi+93], al
	jne	$LN20@pyx_typein
	mov	r8d, DWORD PTR [rsi+88]
	cmp	r8d, DWORD PTR [rdi+88]
	jne	$LN20@pyx_typein

; 26311:         }
; 26312:     }
; 26313:     if (a->ndim) {

	xor	ebx, ebx
	test	r8d, r8d
	je	SHORT $LN13@pyx_typein

; 26314:         for (i = 0; i < a->ndim; i++)

	mov	edx, ebx
	test	r8d, r8d
	jle	SHORT $LN13@pyx_typein
	mov	r9, rsi
	lea	rcx, QWORD PTR [rdi+24]
	sub	r9, rdi
$LL15@pyx_typein:

; 26315:             if (a->arraysize[i] != b->arraysize[i])

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [r9+rcx], rax
	jne	$LN6@pyx_typein
	inc	edx
	add	rcx, 8
	cmp	edx, r8d
	jl	SHORT $LL15@pyx_typein
$LN13@pyx_typein:

; 26316:                 return 0;
; 26317:     }
; 26318:     if (a->typegroup == 'S') {

	cmp	r10b, 83				; 00000053H
	jne	$LN9@pyx_typein

; 26319:         if (a->flags != b->flags)

	mov	eax, DWORD PTR [rdi+96]
	cmp	DWORD PTR [rsi+96], eax

; 26320:             return 0;

	jne	$LN6@pyx_typein

; 26321:         if (a->fields || b->fields) {

	mov	r8, QWORD PTR [rsi+8]
	test	r8, r8
	jne	SHORT $LN8@pyx_typein
	cmp	QWORD PTR [rdi+8], rbx
	je	$LN9@pyx_typein
$LN8@pyx_typein:

; 26322:             if (!(a->fields && b->fields))

	test	r8, r8
	je	$LN6@pyx_typein
	cmp	QWORD PTR [rdi+8], rbx
	je	$LN6@pyx_typein
	mov	QWORD PTR [rsp+64], rbp

; 26323:                 return 0;
; 26324:             for (i = 0; a->fields[i].type && b->fields[i].type; i++) {

	mov	r9d, ebx
	mov	DWORD PTR i$2$[rsp], ebx
	mov	rbp, rbx
	cmp	QWORD PTR [r8], rbx
	je	SHORT $LN3@pyx_typein
	mov	rcx, rbx
	npad	2
$LL5@pyx_typein:
	mov	rdx, QWORD PTR [rdi+8]
	cmp	QWORD PTR [rdx+rcx], rbx
	je	SHORT $LN3@pyx_typein

; 26325:                 __Pyx_StructField *field_a = a->fields + i;
; 26326:                 __Pyx_StructField *field_b = b->fields + i;
; 26327:                 if (field_a->offset != field_b->offset ||
; 26328:                     !__pyx_typeinfo_cmp(field_a->type, field_b->type))

	mov	rax, QWORD PTR [rdx+rcx+16]
	cmp	QWORD PTR [rcx+r8+16], rax
	jne	SHORT $LN32@pyx_typein
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR [rcx+r8]
	call	__pyx_typeinfo_cmp
	test	eax, eax
	je	SHORT $LN32@pyx_typein
	mov	r9d, DWORD PTR i$2$[rsp]
	mov	r8, QWORD PTR [rsi+8]
	inc	rbp
	inc	r9d
	lea	rax, QWORD PTR [rbp+rbp*2]
	lea	rcx, QWORD PTR [rax*8]
	mov	DWORD PTR i$2$[rsp], r9d
	cmp	QWORD PTR [rcx+r8], rbx
	jne	SHORT $LL5@pyx_typein
$LN3@pyx_typein:

; 26330:             }
; 26331:             return !a->fields[i].type && !b->fields[i].type;

	movsxd	rax, r9d
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rsi+8]
	cmp	QWORD PTR [rax+rcx*8], rbx
	jne	SHORT $LN27@pyx_typein
	mov	rax, QWORD PTR [rdi+8]
	cmp	QWORD PTR [rax+rcx*8], rbx
	jne	SHORT $LN27@pyx_typein
	mov	ebx, 1
$LN27@pyx_typein:
	mov	eax, ebx
$LN36@pyx_typein:
	mov	rbp, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+56]

; 26335: }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN32@pyx_typein:

; 26329:                     return 0;

	xor	eax, eax
	jmp	SHORT $LN36@pyx_typein
$LN9@pyx_typein:

; 26332:         }
; 26333:     }
; 26334:     return 1;

	mov	eax, 1
	mov	rbx, QWORD PTR [rsp+56]

; 26335: }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@pyx_typein:

; 26307:         if (a->typegroup == 'H' || b->typegroup == 'H') {

	cmp	BYTE PTR [rsi+92], 72			; 00000048H
	je	SHORT $LN18@pyx_typein
	cmp	BYTE PTR [rdi+92], 72			; 00000048H
	je	SHORT $LN18@pyx_typein
$LN6@pyx_typein:

; 26309:         } else {
; 26310:             return 0;

	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+56]

; 26335: }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN18@pyx_typein:

; 26308:             return a->size == b->size;

	xor	ebx, ebx
	cmp	rcx, rdx
	sete	bl
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+56]

; 26335: }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN23@pyx_typein:

; 26302:         return 0;

	xor	eax, eax

; 26335: }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_typeinfo_cmp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@OGGBDIIC@Buffer?5exposes?5suboffsets?5but?5no@ ; `string'
PUBLIC	??_C@_0DE@JHLKHBFL@C?9contiguous?5buffer?5is?5not?5indir@ ; `string'
PUBLIC	??_C@_0DG@DDMDELII@C?9contiguous?5buffer?5is?5not?5conti@ ; `string'
PUBLIC	??_C@_0EA@CLDDCALE@Buffer?5and?5memoryview?5are?5not?5co@ ; `string'
PUBLIC	??_C@_0DF@FKIAKJPM@Buffer?5is?5not?5indirectly?5contigu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_check_strides DD imagerel __pyx_check_strides
	DD	imagerel __pyx_check_strides+220
	DD	imagerel $unwind$__pyx_check_strides
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_check_strides DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@OGGBDIIC@Buffer?5exposes?5suboffsets?5but?5no@
CONST	SEGMENT
??_C@_0CJ@OGGBDIIC@Buffer?5exposes?5suboffsets?5but?5no@ DB 'Buffer expos'
	DB	'es suboffsets but no strides', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JHLKHBFL@C?9contiguous?5buffer?5is?5not?5indir@
CONST	SEGMENT
??_C@_0DE@JHLKHBFL@C?9contiguous?5buffer?5is?5not?5indir@ DB 'C-contiguou'
	DB	's buffer is not indirect in dimension %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DDMDELII@C?9contiguous?5buffer?5is?5not?5conti@
CONST	SEGMENT
??_C@_0DG@DDMDELII@C?9contiguous?5buffer?5is?5not?5conti@ DB 'C-contiguou'
	DB	's buffer is not contiguous in dimension %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@CLDDCALE@Buffer?5and?5memoryview?5are?5not?5co@
CONST	SEGMENT
??_C@_0EA@CLDDCALE@Buffer?5and?5memoryview?5are?5not?5co@ DB 'Buffer and '
	DB	'memoryview are not contiguous in the same dimension.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FKIAKJPM@Buffer?5is?5not?5indirectly?5contigu@
CONST	SEGMENT
??_C@_0DF@FKIAKJPM@Buffer?5is?5not?5indirectly?5contigu@ DB 'Buffer is no'
	DB	't indirectly contiguous in dimension %d.', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_check_strides
_TEXT	SEGMENT
buf$ = 48
dim$ = 56
ndim$ = 64
spec$ = 72
__pyx_check_strides PROC				; COMDAT

; 26340: {

	sub	rsp, 40					; 00000028H

; 26341:     if (buf->shape[dim] <= 1)

	mov	rax, QWORD PTR [rcx+48]
	movsxd	r11, edx
	mov	r10, rcx
	cmp	QWORD PTR [rax+r11*8], 1

; 26342:         return 1;

	jle	$LN1@pyx_check_

; 26343:     if (buf->strides) {

	mov	rcx, QWORD PTR [rcx+56]
	test	rcx, rcx
	je	SHORT $LN15@pyx_check_

; 26344:         if (spec & __Pyx_MEMVIEW_CONTIG) {

	test	r9b, 8
	je	SHORT $LN10@pyx_check_

; 26345:             if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {

	test	r9b, 6
	je	SHORT $LN13@pyx_check_

; 26346:                 if (buf->strides[dim] != sizeof(void *)) {

	cmp	QWORD PTR [rcx+r11*8], 8
	je	SHORT $LN10@pyx_check_

; 26347:                     PyErr_Format(PyExc_ValueError,
; 26348:                                  "Buffer is not indirectly contiguous "
; 26349:                                  "in dimension %d.", dim);

	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0DF@FKIAKJPM@Buffer?5is?5not?5indirectly?5contigu@
$LN21@pyx_check_:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 26388: fail:
; 26389:     return 0;

	xor	eax, eax

; 26390: }

	add	rsp, 40					; 00000028H
	ret	0
$LN13@pyx_check_:

; 26350:                     goto fail;
; 26351:                 }
; 26352:             } else if (buf->strides[dim] != buf->itemsize) {

	mov	rax, QWORD PTR [r10+24]
	cmp	QWORD PTR [rcx+r11*8], rax

; 26353:                 PyErr_SetString(PyExc_ValueError,
; 26354:                                 "Buffer and memoryview are not contiguous "
; 26355:                                 "in the same dimension.");
; 26356:                 goto fail;

	jne	SHORT $LN20@pyx_check_
$LN10@pyx_check_:

; 26357:             }
; 26358:         }
; 26359:         if (spec & __Pyx_MEMVIEW_FOLLOW) {

	test	r9b, 32					; 00000020H
	je	SHORT $LN1@pyx_check_

; 26360:             Py_ssize_t stride = buf->strides[dim];

	mov	rax, QWORD PTR [rcx+r11*8]

; 26361:             if (stride < 0)

	test	rax, rax
	jns	SHORT $LN8@pyx_check_

; 26362:                 stride = -stride;

	neg	rax
$LN8@pyx_check_:

; 26363:             if (stride < buf->itemsize) {

	cmp	rax, QWORD PTR [r10+24]
	jge	SHORT $LN1@pyx_check_
$LN20@pyx_check_:

; 26364:                 PyErr_SetString(PyExc_ValueError,
; 26365:                                 "Buffer and memoryview are not contiguous "
; 26366:                                 "in the same dimension.");

	lea	rdx, OFFSET FLAT:??_C@_0EA@CLDDCALE@Buffer?5and?5memoryview?5are?5not?5co@

; 26367:                 goto fail;

	jmp	SHORT $LN19@pyx_check_
$LN15@pyx_check_:

; 26368:             }
; 26369:         }
; 26370:     } else {
; 26371:         if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {

	test	r9b, 8
	je	SHORT $LN5@pyx_check_
	lea	eax, DWORD PTR [r8-1]
	cmp	edx, eax
	je	SHORT $LN5@pyx_check_

; 26372:             PyErr_Format(PyExc_ValueError,
; 26373:                          "C-contiguous buffer is not contiguous in "
; 26374:                          "dimension %d", dim);

	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0DG@DDMDELII@C?9contiguous?5buffer?5is?5not?5conti@
	jmp	SHORT $LN21@pyx_check_
$LN5@pyx_check_:

; 26375:             goto fail;
; 26376:         } else if (spec & (__Pyx_MEMVIEW_PTR)) {

	test	r9b, 2
	je	SHORT $LN3@pyx_check_

; 26377:             PyErr_Format(PyExc_ValueError,
; 26378:                          "C-contiguous buffer is not indirect in "
; 26379:                          "dimension %d", dim);

	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0DE@JHLKHBFL@C?9contiguous?5buffer?5is?5not?5indir@
	jmp	SHORT $LN21@pyx_check_
$LN3@pyx_check_:

; 26380:             goto fail;
; 26381:         } else if (buf->suboffsets) {

	cmp	QWORD PTR [r10+64], 0
	je	SHORT $LN1@pyx_check_

; 26382:             PyErr_SetString(PyExc_ValueError,
; 26383:                             "Buffer exposes suboffsets but no strides");

	lea	rdx, OFFSET FLAT:??_C@_0CJ@OGGBDIIC@Buffer?5exposes?5suboffsets?5but?5no@
$LN19@pyx_check_:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 26388: fail:
; 26389:     return 0;

	xor	eax, eax
$fail$34355:

; 26390: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@pyx_check_:

; 26384:             goto fail;
; 26385:         }
; 26386:     }
; 26387:     return 1;

	mov	eax, 1

; 26390: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_check_strides ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@JIEHOLBF@Buffer?5is?5not?5indirectly?5accessi@ ; `string'
PUBLIC	??_C@_0DK@EJAHNONE@Buffer?5not?5compatible?5with?5direc@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_check_suboffsets DD imagerel __pyx_check_suboffsets
	DD	imagerel __pyx_check_suboffsets+109
	DD	imagerel $unwind$__pyx_check_suboffsets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_check_suboffsets DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DF@JIEHOLBF@Buffer?5is?5not?5indirectly?5accessi@
CONST	SEGMENT
??_C@_0DF@JIEHOLBF@Buffer?5is?5not?5indirectly?5accessi@ DB 'Buffer is no'
	DB	't indirectly accessible in dimension %d.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EJAHNONE@Buffer?5not?5compatible?5with?5direc@
CONST	SEGMENT
??_C@_0DK@EJAHNONE@Buffer?5not?5compatible?5with?5direc@ DB 'Buffer not c'
	DB	'ompatible with direct access in dimension %d.', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_check_suboffsets
_TEXT	SEGMENT
buf$ = 48
dim$ = 56
ndim$ = 64
spec$ = 72
__pyx_check_suboffsets PROC				; COMDAT

; 26393: {

	sub	rsp, 40					; 00000028H

; 26394:     if (spec & __Pyx_MEMVIEW_DIRECT) {

	test	r9b, 1
	je	SHORT $LN4@pyx_check_@2

; 26395:         if (buf->suboffsets && buf->suboffsets[dim] >= 0) {

	mov	r8, QWORD PTR [rcx+64]
	test	r8, r8
	je	SHORT $LN4@pyx_check_@2
	movsxd	rax, edx
	cmp	QWORD PTR [r8+rax*8], 0
	jl	SHORT $LN4@pyx_check_@2

; 26396:             PyErr_Format(PyExc_ValueError,
; 26397:                          "Buffer not compatible with direct access "
; 26398:                          "in dimension %d.", dim);

	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0DK@EJAHNONE@Buffer?5not?5compatible?5with?5direc@

; 26399:             goto fail;

	jmp	SHORT $LN8@pyx_check_@2
$LN4@pyx_check_@2:

; 26400:         }
; 26401:     }
; 26402:     if (spec & __Pyx_MEMVIEW_PTR) {

	test	r9b, 2
	je	SHORT $LN2@pyx_check_@2

; 26403:         if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {

	mov	rcx, QWORD PTR [rcx+64]
	test	rcx, rcx
	je	SHORT $LN1@pyx_check_@2
	movsxd	rax, edx
	cmp	QWORD PTR [rcx+rax*8], 0
	jge	SHORT $LN2@pyx_check_@2
$LN1@pyx_check_@2:

; 26404:             PyErr_Format(PyExc_ValueError,
; 26405:                          "Buffer is not indirectly accessible "
; 26406:                          "in dimension %d.", dim);

	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0DF@JIEHOLBF@Buffer?5is?5not?5indirectly?5accessi@
$LN8@pyx_check_@2:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 26411: fail:
; 26412:     return 0;

	xor	eax, eax
$fail$34385:

; 26413: }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@pyx_check_@2:

; 26407:             goto fail;
; 26408:         }
; 26409:     }
; 26410:     return 1;

	mov	eax, 1

; 26413: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_check_suboffsets ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@BNCDFCPL@Buffer?5not?5C?5contiguous?4?$AA@ ; `string'
PUBLIC	??_C@_0BP@CAHIDMHP@Buffer?5not?5fortran?5contiguous?4?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_verify_contig DD imagerel __pyx_verify_contig
	DD	imagerel __pyx_verify_contig+219
	DD	imagerel $unwind$__pyx_verify_contig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_verify_contig DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@BNCDFCPL@Buffer?5not?5C?5contiguous?4?$AA@
CONST	SEGMENT
??_C@_0BJ@BNCDFCPL@Buffer?5not?5C?5contiguous?4?$AA@ DB 'Buffer not C con'
	DB	'tiguous.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CAHIDMHP@Buffer?5not?5fortran?5contiguous?4?$AA@
CONST	SEGMENT
??_C@_0BP@CAHIDMHP@Buffer?5not?5fortran?5contiguous?4?$AA@ DB 'Buffer not'
	DB	' fortran contiguous.', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_verify_contig
_TEXT	SEGMENT
buf$ = 48
ndim$ = 56
c_or_f_flag$ = 64
__pyx_verify_contig PROC				; COMDAT

; 26416: {

	sub	rsp, 40					; 00000028H
	movsxd	rax, edx
	mov	r9, rcx

; 26417:     int i;
; 26418:     if (c_or_f_flag & __Pyx_IS_F_CONTIG) {

	test	r8b, 2
	je	SHORT $LN11@pyx_verify

; 26419:         Py_ssize_t stride = 1;
; 26420:         for (i = 0; i < ndim; i++) {

	xor	r8d, r8d
	mov	ecx, 1
	mov	rdx, rax
	test	eax, eax
	jle	SHORT $LN21@pyx_verify
	mov	r10, QWORD PTR [r9+56]
	mov	r11, QWORD PTR [r9+24]
	npad	9
$LL10@pyx_verify:

; 26421:             if (stride * buf->itemsize != buf->strides[i] &&
; 26422:                     buf->shape[i] > 1)

	mov	rax, r11
	imul	rax, rcx
	cmp	rax, QWORD PTR [r10+r8*8]
	je	SHORT $LN7@pyx_verify
	mov	rax, QWORD PTR [r9+48]
	cmp	QWORD PTR [rax+r8*8], 1
	jg	SHORT $LN16@pyx_verify
$LN7@pyx_verify:

; 26427:             }
; 26428:             stride = stride * buf->shape[i];

	mov	rax, QWORD PTR [r9+48]
	inc	r8
	imul	rcx, QWORD PTR [rax+r8*8-8]
	cmp	r8, rdx
	jl	SHORT $LL10@pyx_verify
$LN21@pyx_verify:

; 26440:         }
; 26441:     }
; 26442:     return 1;

	mov	eax, 1

; 26445: }

	add	rsp, 40					; 00000028H
	ret	0
$LN16@pyx_verify:

; 26423:             {
; 26424:                 PyErr_SetString(PyExc_ValueError,
; 26425:                     "Buffer not fortran contiguous.");

	lea	rdx, OFFSET FLAT:??_C@_0BP@CAHIDMHP@Buffer?5not?5fortran?5contiguous?4?$AA@

; 26426:                 goto fail;

	jmp	SHORT $LN22@pyx_verify
$LN11@pyx_verify:

; 26429:         }
; 26430:     } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {

	test	r8b, 1
	je	SHORT $LN21@pyx_verify

; 26431:         Py_ssize_t stride = 1;
; 26432:         for (i = ndim - 1; i >- 1; i--) {

	dec	eax
	mov	edx, 1
	movsxd	rcx, eax
	cmp	rcx, -1
	jle	SHORT $LN21@pyx_verify
	mov	r8, QWORD PTR [r9+56]
	mov	r10, QWORD PTR [r9+24]
	npad	5
$LL4@pyx_verify:

; 26433:             if (stride * buf->itemsize != buf->strides[i] &&
; 26434:                     buf->shape[i] > 1) {

	mov	rax, r10
	imul	rax, rdx
	cmp	rax, QWORD PTR [r8+rcx*8]
	je	SHORT $LN1@pyx_verify
	mov	rax, QWORD PTR [r9+48]
	cmp	QWORD PTR [rax+rcx*8], 1
	jg	SHORT $LN17@pyx_verify
$LN1@pyx_verify:

; 26437:                 goto fail;
; 26438:             }
; 26439:             stride = stride * buf->shape[i];

	mov	rax, QWORD PTR [r9+48]
	dec	rcx
	imul	rdx, QWORD PTR [rax+rcx*8+8]
	cmp	rcx, -1
	jle	SHORT $LN21@pyx_verify

; 26431:         Py_ssize_t stride = 1;
; 26432:         for (i = ndim - 1; i >- 1; i--) {

	jmp	SHORT $LL4@pyx_verify
$LN17@pyx_verify:

; 26435:                 PyErr_SetString(PyExc_ValueError,
; 26436:                     "Buffer not C contiguous.");

	lea	rdx, OFFSET FLAT:??_C@_0BJ@BNCDFCPL@Buffer?5not?5C?5contiguous?4?$AA@
$LN22@pyx_verify:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 26443: fail:
; 26444:     return 0;

	xor	eax, eax
$fail$34406:

; 26445: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_verify_contig ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DCLFIFHK@rsrpsinr?$AA@			; `string'
PUBLIC	??_C@_0EM@JEGCFAOM@compiletime?5version?5?$CFs?5of?5module@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@		; `string'
EXTRN	__imp_PyErr_WarnEx:PROC
EXTRN	__imp_Py_GetVersion:PROC
EXTRN	__imp_PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_check_binary_version DD imagerel __Pyx_check_binary_version
	DD	imagerel __Pyx_check_binary_version+210
	DD	imagerel $unwind$__Pyx_check_binary_version
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_check_binary_version DD 020701H
	DD	0210107H
xdata	ENDS
;	COMDAT ??_C@_08DCLFIFHK@rsrpsinr?$AA@
CONST	SEGMENT
??_C@_08DCLFIFHK@rsrpsinr?$AA@ DB 'rsrpsinr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@JEGCFAOM@compiletime?5version?5?$CFs?5of?5module@
CONST	SEGMENT
??_C@_0EM@JEGCFAOM@compiletime?5version?5?$CFs?5of?5module@ DB 'compileti'
	DB	'me version %s of module ''%.100s'' does not match runtime ver'
	DB	'sion %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@ DB '%d.%d', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_check_binary_version
_TEXT	SEGMENT
message$34500 = 48
rtversion$ = 272
ctversion$ = 280
__Pyx_check_binary_version PROC				; COMDAT

; 26543:       static int __Pyx_check_binary_version(void) {

	sub	rsp, 264				; 00000108H

; 26544:     char ctversion[4], rtversion[4];
; 26545:     PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);

	mov	r9d, 2
	lea	r8, OFFSET FLAT:??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
	lea	rcx, QWORD PTR ctversion$[rsp]
	lea	edx, QWORD PTR [r9+2]
	mov	DWORD PTR [rsp+32], 7
	call	QWORD PTR __imp_PyOS_snprintf

; 26546:     PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());

	call	QWORD PTR __imp_Py_GetVersion
	lea	r8, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
	lea	rcx, QWORD PTR rtversion$[rsp]
	mov	r9, rax
	mov	edx, 4
	call	QWORD PTR __imp_PyOS_snprintf

; 26547:     if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {

	movzx	r11d, BYTE PTR rtversion$[rsp]
	cmp	BYTE PTR ctversion$[rsp], r11b
	jne	SHORT $LN1@Pyx_check_
	movzx	eax, BYTE PTR rtversion$[rsp+2]
	cmp	BYTE PTR ctversion$[rsp+2], al
	jne	SHORT $LN1@Pyx_check_

; 26554:     }
; 26555:     return 0;

	xor	eax, eax

; 26556: }

	add	rsp, 264				; 00000108H
	ret	0
$LN1@Pyx_check_:

; 26548:         char message[200];
; 26549:         PyOS_snprintf(message, sizeof(message),
; 26550:                       "compiletime version %s of module '%.100s' "
; 26551:                       "does not match runtime version %s",
; 26552:                       ctversion, __Pyx_MODULE_NAME, rtversion);

	lea	rax, QWORD PTR rtversion$[rsp]
	lea	r9, QWORD PTR ctversion$[rsp]
	lea	r8, OFFSET FLAT:??_C@_0EM@JEGCFAOM@compiletime?5version?5?$CFs?5of?5module@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_08DCLFIFHK@rsrpsinr?$AA@
	lea	rcx, QWORD PTR message$34500[rsp]
	mov	edx, 200				; 000000c8H
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyOS_snprintf

; 26553:         return PyErr_WarnEx(NULL, message, 1);

	lea	rdx, QWORD PTR message$34500[rsp]
	mov	r8d, 1
	xor	ecx, ecx
	call	QWORD PTR __imp_PyErr_WarnEx

; 26556: }

	add	rsp, 264				; 00000108H
	ret	0
__Pyx_check_binary_version ENDP
_TEXT	ENDS
EXTRN	__imp_PyImport_Import:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ImportModule DD imagerel __Pyx_ImportModule
	DD	imagerel __Pyx_ImportModule+73
	DD	imagerel $unwind$__Pyx_ImportModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ImportModule DD 042201H
	DD	067422H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_ImportModule
_TEXT	SEGMENT
name$ = 48
__Pyx_ImportModule PROC					; COMDAT

; 26561: static PyObject *__Pyx_ImportModule(const char *name) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 26562:     PyObject *py_name = 0;
; 26563:     PyObject *py_module = 0;
; 26564:     py_name = __Pyx_PyIdentifier_FromString(name);

	call	QWORD PTR __imp_PyString_FromString
	mov	rbx, rax

; 26565:     if (!py_name)

	test	rax, rax
	jne	SHORT $LN16@Pyx_Import@3

; 26570: bad:
; 26571:     Py_XDECREF(py_name);
; 26572:     return 0;
; 26573: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN16@Pyx_Import@3:

; 26566:         goto bad;
; 26567:     py_module = PyImport_Import(py_name);

	mov	rcx, rax
	mov	QWORD PTR [rsp+48], rdi
	call	QWORD PTR __imp_PyImport_Import

; 26568:     Py_DECREF(py_name);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN14@Pyx_Import@3
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN14@Pyx_Import@3:

; 26569:     return py_module;

	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]

; 26570: bad:
; 26571:     Py_XDECREF(py_name);
; 26572:     return 0;
; 26573: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_ImportModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EJ@KEIANPKF@?$CF?4200s?4?$CF?4200s?5has?5the?5wrong?5size@ ; `string'
PUBLIC	??_C@_0EP@FEHJHJJA@?$CFs?4?$CFs?5size?5changed?0?5may?5indicate@ ; `string'
PUBLIC	??_C@_0CD@INGOLIBA@?$CF?4200s?4?$CF?4200s?5is?5not?5a?5type?5obje@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ImportType DD imagerel __Pyx_ImportType
	DD	imagerel __Pyx_ImportType+415
	DD	imagerel $unwind$__Pyx_ImportType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ImportType DD 0d2101H
	DD	0297421H
	DD	0286421H
	DD	0275421H
	DD	0263421H
	DD	0220121H
	DD	0d018e01aH
	DD	0c016H
xdata	ENDS
;	COMDAT ??_C@_0EJ@KEIANPKF@?$CF?4200s?4?$CF?4200s?5has?5the?5wrong?5size@
CONST	SEGMENT
??_C@_0EJ@KEIANPKF@?$CF?4200s?4?$CF?4200s?5has?5the?5wrong?5size@ DB '%.2'
	DB	'00s.%.200s has the wrong size, try recompiling. Expected %zd,'
	DB	' got %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FEHJHJJA@?$CFs?4?$CFs?5size?5changed?0?5may?5indicate@
CONST	SEGMENT
??_C@_0EP@FEHJHJJA@?$CFs?4?$CFs?5size?5changed?0?5may?5indicate@ DB '%s.%'
	DB	's size changed, may indicate binary incompatibility. Expected'
	DB	' %zd, got %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@INGOLIBA@?$CF?4200s?4?$CF?4200s?5is?5not?5a?5type?5obje@
CONST	SEGMENT
??_C@_0CD@INGOLIBA@?$CF?4200s?4?$CF?4200s?5is?5not?5a?5type?5obje@ DB '%.'
	DB	'200s.%.200s is not a type object', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_ImportType
_TEXT	SEGMENT
warning$ = 64
module_name$ = 304
class_name$ = 312
size$ = 320
strict$ = 328
__Pyx_ImportType PROC					; COMDAT

; 26581: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 272				; 00000110H
	mov	r14d, r9d
	mov	rbp, r8
	mov	r12, rdx
	mov	r13, rcx

; 26582:     PyObject *py_module = 0;
; 26583:     PyObject *result = 0;
; 26584:     PyObject *py_name = 0;
; 26585:     char warning[200];
; 26586:     Py_ssize_t basicsize;
; 26587: #ifdef Py_LIMITED_API
; 26588:     PyObject *py_basicsize;
; 26589: #endif
; 26590:     py_module = __Pyx_ImportModule(module_name);

	call	QWORD PTR __imp_PyString_FromString
	mov	rdi, rax
	test	rax, rax
	je	$LN3@Pyx_Import@4
	mov	rcx, rax
	call	QWORD PTR __imp_PyImport_Import
	add	QWORD PTR [rdi], -1
	mov	rbx, rax
	jne	SHORT $LN54@Pyx_Import@4
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN54@Pyx_Import@4:

; 26591:     if (!py_module)

	test	rbx, rbx
	je	$LN3@Pyx_Import@4

; 26592:         goto bad;
; 26593:     py_name = __Pyx_PyIdentifier_FromString(class_name);

	mov	rcx, r12
	call	QWORD PTR __imp_PyString_FromString
	mov	rsi, rax

; 26594:     if (!py_name)

	test	rax, rax
	je	$bad$34551

; 26595:         goto bad;
; 26596:     result = PyObject_GetAttr(py_module, py_name);

	mov	rdx, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr

; 26597:     Py_DECREF(py_name);

	add	QWORD PTR [rsi], -1
	mov	rdi, rax
	jne	SHORT $LN35@Pyx_Import@4
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN35@Pyx_Import@4:

; 26598:     py_name = 0;
; 26599:     Py_DECREF(py_module);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN30@Pyx_Import@4
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN30@Pyx_Import@4:

; 26600:     py_module = 0;
; 26601:     if (!result)

	test	rdi, rdi
	je	$LN3@Pyx_Import@4

; 26602:         goto bad;
; 26603:     if (!PyType_Check(result)) {

	mov	rax, QWORD PTR [rdi+8]
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	jne	SHORT $LN25@Pyx_Import@4

; 26604:         PyErr_Format(PyExc_TypeError,
; 26605:             "%.200s.%.200s is not a type object",
; 26606:             module_name, class_name);

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CD@INGOLIBA@?$CF?4200s?4?$CF?4200s?5is?5not?5a?5type?5obje@
	mov	r9, r12
	mov	rcx, QWORD PTR [rcx]
	mov	r8, r13
	call	QWORD PTR __imp_PyErr_Format

; 26607:         goto bad;

	jmp	SHORT $LN13@Pyx_Import@4
$LN25@Pyx_Import@4:

; 26608:     }
; 26609: #ifndef Py_LIMITED_API
; 26610:     basicsize = ((PyTypeObject *)result)->tp_basicsize;

	mov	rax, QWORD PTR [rdi+32]

; 26611: #else
; 26612:     py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
; 26613:     if (!py_basicsize)
; 26614:         goto bad;
; 26615:     basicsize = PyLong_AsSsize_t(py_basicsize);
; 26616:     Py_DECREF(py_basicsize);
; 26617:     py_basicsize = 0;
; 26618:     if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
; 26619:         goto bad;
; 26620: #endif
; 26621:     if (!strict && (size_t)basicsize > size) {

	test	r14d, r14d
	jne	SHORT $LN24@Pyx_Import@4
	cmp	rax, rbp
	jbe	SHORT $LN59@Pyx_Import@4

; 26622:         PyOS_snprintf(warning, sizeof(warning),
; 26623:             "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
; 26624:             module_name, class_name, basicsize, size);

	mov	QWORD PTR [rsp+48], rbp
	mov	QWORD PTR [rsp+40], rax
	lea	r8, OFFSET FLAT:??_C@_0EP@FEHJHJJA@?$CFs?4?$CFs?5size?5changed?0?5may?5indicate@
	lea	rcx, QWORD PTR warning$[rsp]
	mov	r9, r13
	mov	edx, 200				; 000000c8H
	mov	QWORD PTR [rsp+32], r12
	call	QWORD PTR __imp_PyOS_snprintf

; 26625:         if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;

	lea	rdx, QWORD PTR warning$[rsp]
	xor	r8d, r8d
	xor	ecx, ecx
	call	QWORD PTR __imp_PyErr_WarnEx
	test	eax, eax
	js	SHORT $LN13@Pyx_Import@4
$LN21@Pyx_Import@4:

; 26631:         goto bad;
; 26632:     }
; 26633:     return (PyTypeObject *)result;

	mov	rax, rdi
	jmp	SHORT $LN39@Pyx_Import@4
$LN24@Pyx_Import@4:

; 26626:     }
; 26627:     else if ((size_t)basicsize != size) {

	cmp	rax, rbp
$LN59@Pyx_Import@4:
	je	SHORT $LN21@Pyx_Import@4

; 26628:         PyErr_Format(PyExc_ValueError,
; 26629:             "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
; 26630:             module_name, class_name, basicsize, size);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0EJ@KEIANPKF@?$CF?4200s?4?$CF?4200s?5has?5the?5wrong?5size@
	mov	r9, r12
	mov	rcx, QWORD PTR [rcx]
	mov	r8, r13
	mov	QWORD PTR [rsp+40], rbp
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN13@Pyx_Import@4:

; 26636:     Py_XDECREF(result);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@Pyx_Import@4
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	jmp	SHORT $LN60@Pyx_Import@4
$bad$34551:

; 26634: bad:
; 26635:     Py_XDECREF(py_module);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_Import@4
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
$LN60@Pyx_Import@4:
	call	QWORD PTR [rax+48]
$LN3@Pyx_Import@4:

; 26637:     return NULL;

	xor	eax, eax
$LN39@Pyx_Import@4:

; 26638: }

	lea	r11, QWORD PTR [rsp+272]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	ret	0
__Pyx_ImportType ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_Hash:PROC
EXTRN	__imp_PyString_FromStringAndSize:PROC
EXTRN	__imp_PyString_InternFromString:PROC
EXTRN	__imp_PyUnicodeUCS2_DecodeUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_InitStrings DD imagerel __Pyx_InitStrings
	DD	imagerel __Pyx_InitStrings+133
	DD	imagerel $unwind$__Pyx_InitStrings
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_InitStrings DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_InitStrings
_TEXT	SEGMENT
t$ = 48
__Pyx_InitStrings PROC					; COMDAT

; 26642:       static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 26643:     while (t->p) {

	cmp	QWORD PTR [rcx], 0
	mov	rbx, rcx
	je	SHORT $LN7@Pyx_InitSt
	npad	1
$LL8@Pyx_InitSt:

; 26644:         #if PY_MAJOR_VERSION < 3
; 26645:         if (t->is_unicode) {

	cmp	BYTE PTR [rbx+32], 0

; 26646:             *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);

	mov	rcx, QWORD PTR [rbx+8]
	je	SHORT $LN6@Pyx_InitSt
	mov	rdx, QWORD PTR [rbx+16]
	xor	r8d, r8d
	dec	rdx
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeUTF8
	jmp	SHORT $LN14@Pyx_InitSt
$LN6@Pyx_InitSt:

; 26647:         } else if (t->intern) {

	cmp	BYTE PTR [rbx+34], 0
	je	SHORT $LN4@Pyx_InitSt

; 26648:             *t->p = PyString_InternFromString(t->s);

	call	QWORD PTR __imp_PyString_InternFromString

; 26649:         } else {

	jmp	SHORT $LN14@Pyx_InitSt
$LN4@Pyx_InitSt:

; 26650:             *t->p = PyString_FromStringAndSize(t->s, t->n - 1);

	mov	rdx, QWORD PTR [rbx+16]
	dec	rdx
	call	QWORD PTR __imp_PyString_FromStringAndSize
$LN14@Pyx_InitSt:
	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rcx], rax

; 26651:         }
; 26652:         #else
; 26653:         if (t->is_unicode | t->is_str) {
; 26654:             if (t->intern) {
; 26655:                 *t->p = PyUnicode_InternFromString(t->s);
; 26656:             } else if (t->encoding) {
; 26657:                 *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
; 26658:             } else {
; 26659:                 *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
; 26660:             }
; 26661:         } else {
; 26662:             *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
; 26663:         }
; 26664:         #endif
; 26665:         if (!*t->p)

	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN12@Pyx_InitSt

; 26667:         if (PyObject_Hash(*t->p) == -1)

	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyObject_Hash
	cmp	eax, -1
	jne	SHORT $LN1@Pyx_InitSt

; 26668:             PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear
$LN1@Pyx_InitSt:

; 26669:         ++t;

	add	rbx, 40					; 00000028H
	cmp	QWORD PTR [rbx], 0
	jne	SHORT $LL8@Pyx_InitSt
$LN7@Pyx_InitSt:

; 26670:     }
; 26671:     return 0;

	xor	eax, eax

; 26672: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@Pyx_InitSt:

; 26666:             return -1;

	or	eax, -1

; 26672: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_InitStrings ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyObject_IsTrue DD imagerel __Pyx_PyObject_IsTrue
	DD	imagerel __Pyx_PyObject_IsTrue+62
	DD	imagerel $unwind$__Pyx_PyObject_IsTrue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyObject_IsTrue DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyObject_IsTrue
_TEXT	SEGMENT
x$ = 48
__Pyx_PyObject_IsTrue PROC				; COMDAT

; 26746: static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {

	sub	rsp, 40					; 00000028H

; 26747:    int is_true = x == Py_True;

	xor	r8d, r8d
	cmp	rcx, QWORD PTR __imp__Py_TrueStruct
	mov	eax, r8d
	sete	al

; 26748:    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;

	cmp	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	edx, r8d
	sete	dl
	cmp	rcx, QWORD PTR __imp__Py_ZeroStruct
	sete	r8b
	or	edx, r8d
	or	edx, eax
	jne	SHORT $LN1@Pyx_PyObje@5

; 26749:    else return PyObject_IsTrue(x);

	call	QWORD PTR __imp_PyObject_IsTrue
$LN1@Pyx_PyObje@5:

; 26750: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyObject_IsTrue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@PMAAJEIL@__?$CF?44s__?5returned?5non?9?$CF?44s?5?$CItype@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyNumber_IntOrLongWrongResultType DD imagerel __Pyx_PyNumber_IntOrLongWrongResultType
	DD	imagerel __Pyx_PyNumber_IntOrLongWrongResultType+75
	DD	imagerel $unwind$__Pyx_PyNumber_IntOrLongWrongResultType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyNumber_IntOrLongWrongResultType DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0CJ@PMAAJEIL@__?$CF?44s__?5returned?5non?9?$CF?44s?5?$CItype@
CONST	SEGMENT
??_C@_0CJ@PMAAJEIL@__?$CF?44s__?5returned?5non?9?$CF?44s?5?$CItype@ DB '_'
	DB	'_%.4s__ returned non-%.4s (type %.200s)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_PyNumber_IntOrLongWrongResultType
_TEXT	SEGMENT
result$ = 64
type_name$ = 72
__Pyx_PyNumber_IntOrLongWrongResultType PROC		; COMDAT

; 26751: static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {

	push	rbx
	sub	rsp, 48					; 00000030H

; 26752: #if PY_MAJOR_VERSION >= 3
; 26753:     if (PyLong_Check(result)) {
; 26754:         if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
; 26755:                 "__int__ returned non-int (type %.200s).  "
; 26756:                 "The ability to return an instance of a strict subclass of int "
; 26757:                 "is deprecated, and may be removed in a future version of Python.",
; 26758:                 Py_TYPE(result)->tp_name)) {
; 26759:             Py_DECREF(result);
; 26760:             return NULL;
; 26761:         }
; 26762:         return result;
; 26763:     }
; 26764: #endif
; 26765:     PyErr_Format(PyExc_TypeError,
; 26766:                  "__%.4s__ returned non-%.4s (type %.200s)",
; 26767:                  type_name, type_name, Py_TYPE(result)->tp_name);

	mov	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r8, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR [rcx]
	mov	r9, rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, rdx
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PMAAJEIL@__?$CF?44s__?5returned?5non?9?$CF?44s?5?$CItype@
	call	QWORD PTR __imp_PyErr_Format

; 26768:     Py_DECREF(result);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN8@Pyx_PyNumb
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN8@Pyx_PyNumb:

; 26769:     return NULL;

	xor	eax, eax

; 26770: }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
__Pyx_PyNumber_IntOrLongWrongResultType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LPEFKOAK@an?5integer?5is?5required?$AA@ ; `string'
PUBLIC	??_C@_04GOKPGOLB@long?$AA@			; `string'
PUBLIC	??_C@_03JBIPMCLC@int?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyNumber_IntOrLong DD imagerel __Pyx_PyNumber_IntOrLong
	DD	imagerel __Pyx_PyNumber_IntOrLong+42
	DD	imagerel $unwind$__Pyx_PyNumber_IntOrLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyNumber_IntOrLong DD imagerel __Pyx_PyNumber_IntOrLong+42
	DD	imagerel __Pyx_PyNumber_IntOrLong+200
	DD	imagerel $chain$0$__Pyx_PyNumber_IntOrLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_PyNumber_IntOrLong DD imagerel __Pyx_PyNumber_IntOrLong+200
	DD	imagerel __Pyx_PyNumber_IntOrLong+248
	DD	imagerel $chain$2$__Pyx_PyNumber_IntOrLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyNumber_IntOrLong DD imagerel __Pyx_PyNumber_IntOrLong+248
	DD	imagerel __Pyx_PyNumber_IntOrLong+260
	DD	imagerel $chain$3$__Pyx_PyNumber_IntOrLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyNumber_IntOrLong DD 021H
	DD	imagerel __Pyx_PyNumber_IntOrLong
	DD	imagerel __Pyx_PyNumber_IntOrLong+42
	DD	imagerel $unwind$__Pyx_PyNumber_IntOrLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_PyNumber_IntOrLong DD 020021H
	DD	087400H
	DD	imagerel __Pyx_PyNumber_IntOrLong
	DD	imagerel __Pyx_PyNumber_IntOrLong+42
	DD	imagerel $unwind$__Pyx_PyNumber_IntOrLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyNumber_IntOrLong DD 020521H
	DD	087405H
	DD	imagerel __Pyx_PyNumber_IntOrLong
	DD	imagerel __Pyx_PyNumber_IntOrLong+42
	DD	imagerel $unwind$__Pyx_PyNumber_IntOrLong
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyNumber_IntOrLong DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT ??_C@_0BH@LPEFKOAK@an?5integer?5is?5required?$AA@
CONST	SEGMENT
??_C@_0BH@LPEFKOAK@an?5integer?5is?5required?$AA@ DB 'an integer is requi'
	DB	'red', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOKPGOLB@long?$AA@
CONST	SEGMENT
??_C@_04GOKPGOLB@long?$AA@ DB 'long', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int?$AA@
CONST	SEGMENT
??_C@_03JBIPMCLC@int?$AA@ DB 'int', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_PyNumber_IntOrLong
_TEXT	SEGMENT
x$ = 64
__Pyx_PyNumber_IntOrLong PROC				; COMDAT

; 26771: static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {

	push	rbx
	sub	rsp, 48					; 00000030H

; 26772: #if CYTHON_USE_TYPE_SLOTS
; 26773:   PyNumberMethods *m;
; 26774: #endif
; 26775:   const char *name = NULL;
; 26776:   PyObject *res = NULL;
; 26777: #if PY_MAJOR_VERSION < 3
; 26778:   if (likely(PyInt_Check(x) || PyLong_Check(x)))

	mov	rax, QWORD PTR [rcx+8]
	xor	ebx, ebx
	mov	edx, DWORD PTR [rax+168]
	bt	edx, 23
	jb	$LN8@Pyx_PyNumb@2
	bt	edx, 24
	jb	$LN8@Pyx_PyNumb@2

; 26783: #if CYTHON_USE_TYPE_SLOTS
; 26784:   m = Py_TYPE(x)->tp_as_number;

	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR [rsp+64], rdi

; 26785:   #if PY_MAJOR_VERSION < 3
; 26786:   if (m && m->nb_int) {

	test	rax, rax
	je	$LN4@Pyx_PyNumb@2
	mov	rdx, QWORD PTR [rax+144]
	test	rdx, rdx
	je	SHORT $LN7@Pyx_PyNumb@2

; 26787:     name = "int";

	lea	rdi, OFFSET FLAT:??_C@_03JBIPMCLC@int?$AA@

; 26788:     res = m->nb_int(x);

	call	rdx
	mov	rbx, rax
	jmp	SHORT $LN5@Pyx_PyNumb@2
$LN7@Pyx_PyNumb@2:

; 26789:   }
; 26790:   else if (m && m->nb_long) {

	mov	rdx, QWORD PTR [rax+152]
	test	rdx, rdx
	je	SHORT $LN4@Pyx_PyNumb@2

; 26791:     name = "long";

	lea	rdi, OFFSET FLAT:??_C@_04GOKPGOLB@long?$AA@

; 26792:     res = m->nb_long(x);

	call	rdx
	mov	rbx, rax
$LN5@Pyx_PyNumb@2:

; 26793:   }
; 26794:   #else
; 26795:   if (likely(m && m->nb_int)) {
; 26796:     name = "int";
; 26797:     res = m->nb_int(x);
; 26798:   }
; 26799:   #endif
; 26800: #else
; 26801:   if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
; 26802:     res = PyNumber_Int(x);
; 26803:   }
; 26804: #endif
; 26805:   if (likely(res)) {

	test	rbx, rbx
	je	SHORT $LN4@Pyx_PyNumb@2

; 26806: #if PY_MAJOR_VERSION < 3
; 26807:     if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {

	mov	rcx, QWORD PTR [rbx+8]
	mov	eax, DWORD PTR [rcx+168]
	bt	eax, 23
	jb	SHORT $LN1@Pyx_PyNumb@2
	bt	eax, 24
	jb	SHORT $LN1@Pyx_PyNumb@2

; 26808: #else
; 26809:     if (unlikely(!PyLong_CheckExact(res))) {
; 26810: #endif
; 26811:         return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);

	mov	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PMAAJEIL@__?$CF?44s__?5returned?5non?9?$CF?44s?5?$CItype@
	mov	rcx, QWORD PTR [rcx]
	mov	r9, rdi
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN15@Pyx_PyNumb@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN15@Pyx_PyNumb@2:
	xor	eax, eax
	mov	rdi, QWORD PTR [rsp+64]

; 26819: }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
$LN4@Pyx_PyNumb@2:

; 26812:     }
; 26813:   }
; 26814:   else if (!PyErr_Occurred()) {

	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN1@Pyx_PyNumb@2

; 26815:     PyErr_SetString(PyExc_TypeError,
; 26816:                     "an integer is required");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0BH@LPEFKOAK@an?5integer?5is?5required?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$LN1@Pyx_PyNumb@2:

; 26817:   }
; 26818:   return res;

	mov	rax, rbx
	mov	rdi, QWORD PTR [rsp+64]

; 26819: }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
$LN8@Pyx_PyNumb@2:

; 26779: #else
; 26780:   if (likely(PyLong_Check(x)))
; 26781: #endif
; 26782:     return __Pyx_NewRef(x);

	inc	QWORD PTR [rcx]
	mov	rax, rcx

; 26819: }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
__Pyx_PyNumber_IntOrLong ENDP
_TEXT	ENDS
EXTRN	__imp_PyInt_AsSsize_t:PROC
EXTRN	__imp_PyNumber_Index:PROC
EXTRN	__imp_PyLong_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyIndex_AsSsize_t DD imagerel __Pyx_PyIndex_AsSsize_t
	DD	imagerel __Pyx_PyIndex_AsSsize_t+170
	DD	imagerel $unwind$__Pyx_PyIndex_AsSsize_t
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyIndex_AsSsize_t DD imagerel __Pyx_PyIndex_AsSsize_t+170
	DD	imagerel __Pyx_PyIndex_AsSsize_t+203
	DD	imagerel $chain$0$__Pyx_PyIndex_AsSsize_t
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyIndex_AsSsize_t DD imagerel __Pyx_PyIndex_AsSsize_t+203
	DD	imagerel __Pyx_PyIndex_AsSsize_t+249
	DD	imagerel $chain$3$__Pyx_PyIndex_AsSsize_t
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__Pyx_PyIndex_AsSsize_t DD imagerel __Pyx_PyIndex_AsSsize_t+249
	DD	imagerel __Pyx_PyIndex_AsSsize_t+292
	DD	imagerel $chain$4$__Pyx_PyIndex_AsSsize_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__Pyx_PyIndex_AsSsize_t DD 021H
	DD	imagerel __Pyx_PyIndex_AsSsize_t
	DD	imagerel __Pyx_PyIndex_AsSsize_t+170
	DD	imagerel $unwind$__Pyx_PyIndex_AsSsize_t
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyIndex_AsSsize_t DD 040821H
	DD	047408H
	DD	063400H
	DD	imagerel __Pyx_PyIndex_AsSsize_t
	DD	imagerel __Pyx_PyIndex_AsSsize_t+170
	DD	imagerel $unwind$__Pyx_PyIndex_AsSsize_t
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyIndex_AsSsize_t DD 020521H
	DD	063405H
	DD	imagerel __Pyx_PyIndex_AsSsize_t
	DD	imagerel __Pyx_PyIndex_AsSsize_t+170
	DD	imagerel $unwind$__Pyx_PyIndex_AsSsize_t
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyIndex_AsSsize_t DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyIndex_AsSsize_t
_TEXT	SEGMENT
b$ = 48
__Pyx_PyIndex_AsSsize_t PROC				; COMDAT

; 26820: static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {

	sub	rsp, 40					; 00000028H

; 26821:   Py_ssize_t ival;
; 26822:   PyObject *x;
; 26823: #if PY_MAJOR_VERSION < 3
; 26824:   if (likely(PyInt_CheckExact(b))) {

	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyInt_Type
	jne	SHORT $LN25@Pyx_PyInde

; 26825:     if (sizeof(Py_ssize_t) >= sizeof(long))
; 26826:         return PyInt_AS_LONG(b);

	movsxd	rax, DWORD PTR [rcx+16]

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
$LN25@Pyx_PyInde:

; 26827:     else
; 26828:         return PyInt_AsSsize_t(x);
; 26829:   }
; 26830: #endif
; 26831:   if (likely(PyLong_CheckExact(b))) {

	cmp	rax, QWORD PTR __imp_PyLong_Type
	jne	$LN24@Pyx_PyInde

; 26832:     #if CYTHON_USE_PYLONG_INTERNALS
; 26833:     const digit* digits = ((PyLongObject*)b)->ob_digit;
; 26834:     const Py_ssize_t size = Py_SIZE(b);

	mov	r8, QWORD PTR [rcx+16]

; 26835:     if (likely(__Pyx_sst_abs(size) <= 1)) {

	mov	rax, r8
	cdq
	xor	rax, rdx
	sub	rax, rdx
	cmp	rax, 1
	jg	SHORT $LN23@Pyx_PyInde

; 26836:         ival = likely(size) ? digits[0] : 0;

	test	r8, r8
	je	SHORT $LN30@Pyx_PyInde
	mov	eax, DWORD PTR [rcx+24]
	jmp	SHORT $LN31@Pyx_PyInde
$LN30@Pyx_PyInde:
	xor	eax, eax
$LN31@Pyx_PyInde:

; 26837:         if (size == -1) ival = -ival;

	cmp	r8, -1
	jne	$LN28@Pyx_PyInde
	neg	rax

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
$LN23@Pyx_PyInde:

; 26838:         return ival;
; 26839:     } else {
; 26840:       switch (size) {

	add	r8, 4
	cmp	r8, 8
	ja	SHORT $LN14@Pyx_PyInde
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN32@Pyx_PyInde[rdx+r8*4]
	add	rax, rdx
	jmp	rax
$LN18@Pyx_PyInde:

; 26841:          case 2:
; 26842:            if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
; 26843:              return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));

	mov	eax, DWORD PTR [rcx+28]
	mov	ecx, DWORD PTR [rcx+24]
	shl	rax, 30
	or	rax, rcx

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
$LN16@Pyx_PyInde:

; 26844:            }
; 26845:            break;
; 26846:          case -2:
; 26847:            if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
; 26848:              return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));

	mov	eax, DWORD PTR [rcx+28]
	mov	ecx, DWORD PTR [rcx+24]
	shl	rax, 30
	or	rax, rcx
	neg	rax

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
$LN14@Pyx_PyInde:
	add	rsp, 40					; 00000028H
	rex_jmp	QWORD PTR __imp_PyLong_AsSsize_t
$LN24@Pyx_PyInde:
	mov	QWORD PTR [rsp+48], rbx

; 26849:            }
; 26850:            break;
; 26851:          case 3:
; 26852:            if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
; 26853:              return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
; 26854:            }
; 26855:            break;
; 26856:          case -3:
; 26857:            if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
; 26858:              return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
; 26859:            }
; 26860:            break;
; 26861:          case 4:
; 26862:            if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
; 26863:              return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
; 26864:            }
; 26865:            break;
; 26866:          case -4:
; 26867:            if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
; 26868:              return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
; 26869:            }
; 26870:            break;
; 26871:       }
; 26872:     }
; 26873:     #endif
; 26874:     return PyLong_AsSsize_t(b);
; 26875:   }
; 26876:   x = PyNumber_Index(b);

	call	QWORD PTR __imp_PyNumber_Index
	mov	rbx, rax

; 26877:   if (!x) return -1;

	test	rax, rax
	jne	SHORT $LN6@Pyx_PyInde
	or	rax, -1
	mov	rbx, QWORD PTR [rsp+48]

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_PyInde:

; 26878:   ival = PyInt_AsSsize_t(x);

	mov	rcx, rax
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_PyInt_AsSsize_t

; 26879:   Py_DECREF(x);

	add	QWORD PTR [rbx], -1
	mov	rdi, rax
	jne	SHORT $LN4@Pyx_PyInde
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyInde:
	mov	rbx, QWORD PTR [rsp+48]

; 26880:   return ival;

	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+32]
$LN28@Pyx_PyInde:

; 26881: }

	add	rsp, 40					; 00000028H
	ret	0
	npad	2
$LN32@Pyx_PyInde:
	DD	$LN14@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
	DD	$LN16@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
	DD	$LN18@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
	DD	$LN14@Pyx_PyInde
__Pyx_PyIndex_AsSsize_t ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HPIBJOGJ@rsrpsinr?4degree_to_rad?$AA@	; `string'
_BSS	SEGMENT
__pyx_v_8rsrpsinr_pi180 DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_8rsrpsinr_degree_to_rad DD imagerel __pyx_pf_8rsrpsinr_degree_to_rad
	DD	imagerel __pyx_pf_8rsrpsinr_degree_to_rad+89
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_degree_to_rad
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_8rsrpsinr_degree_to_rad DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@HPIBJOGJ@rsrpsinr?4degree_to_rad?$AA@
CONST	SEGMENT
??_C@_0BH@HPIBJOGJ@rsrpsinr?4degree_to_rad?$AA@ DB 'rsrpsinr.degree_to_ra'
	DB	'd', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_8rsrpsinr_degree_to_rad
_TEXT	SEGMENT
__pyx_self$ = 48
__pyx_v_d$ = 56
__pyx_pf_8rsrpsinr_degree_to_rad PROC			; COMDAT

; 2502 : static PyObject *__pyx_pf_8rsrpsinr_degree_to_rad(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_d) {

	sub	rsp, 40					; 00000028H

; 2503 :   PyObject *__pyx_r = NULL;
; 2504 :   __Pyx_RefNannyDeclarations
; 2505 :   PyObject *__pyx_t_1 = NULL;
; 2506 :   __Pyx_RefNannySetupContext("degree_to_rad", 0);
; 2507 : 
; 2508 :   /* "rsrpsinr.pyx":23
; 2509 :  * 
; 2510 :  * def degree_to_rad(double d):
; 2511 :  *     return d*pi180             # <<<<<<<<<<<<<<
; 2512 :  * 
; 2513 :  * def rad_to_degree(double d):
; 2514 :  */
; 2515 :   __Pyx_XDECREF(__pyx_r);
; 2516 :   __pyx_t_1 = PyFloat_FromDouble((__pyx_v_d * __pyx_v_8rsrpsinr_pi180)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)

	movsdx	xmm0, QWORD PTR __pyx_v_8rsrpsinr_pi180
	mulsd	xmm0, xmm1
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $__pyx_L0$14429
	mov	r9, QWORD PTR __pyx_f

; 2517 :   __Pyx_GOTREF(__pyx_t_1);
; 2518 :   __pyx_r = __pyx_t_1;
; 2519 :   __pyx_t_1 = 0;
; 2520 :   goto __pyx_L0;
; 2521 : 
; 2522 :   /* "rsrpsinr.pyx":22
; 2523 :  *     DTYPE_t[:] avv
; 2524 :  * 
; 2525 :  * def degree_to_rad(double d):             # <<<<<<<<<<<<<<
; 2526 :  *     return d*pi180
; 2527 :  * 
; 2528 :  */
; 2529 : 
; 2530 :   /* function exit code */
; 2531 :   __pyx_L1_error:;
; 2532 :   __Pyx_XDECREF(__pyx_t_1);
; 2533 :   __Pyx_AddTraceback("rsrpsinr.degree_to_rad", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	r8d, QWORD PTR [rax+23]
	lea	rcx, OFFSET FLAT:??_C@_0BH@HPIBJOGJ@rsrpsinr?4degree_to_rad?$AA@
	mov	edx, 2516				; 000009d4H
	mov	DWORD PTR __pyx_lineno, 23
	mov	DWORD PTR __pyx_clineno, 2516		; 000009d4H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$14428:
	call	__Pyx_AddTraceback

; 2534 :   __pyx_r = NULL;
; 2535 :   __pyx_L0:;
; 2536 :   __Pyx_XGIVEREF(__pyx_r);
; 2537 :   __Pyx_RefNannyFinishContext();
; 2538 :   return __pyx_r;

	xor	eax, eax
$__pyx_L0$14429:

; 2539 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_8rsrpsinr_degree_to_rad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@PJKCGDP@rsrpsinr?4rad_to_degree?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_8rsrpsinr_2rad_to_degree DD imagerel __pyx_pf_8rsrpsinr_2rad_to_degree
	DD	imagerel __pyx_pf_8rsrpsinr_2rad_to_degree+89
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_2rad_to_degree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_8rsrpsinr_2rad_to_degree DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BH@PJKCGDP@rsrpsinr?4rad_to_degree?$AA@
CONST	SEGMENT
??_C@_0BH@PJKCGDP@rsrpsinr?4rad_to_degree?$AA@ DB 'rsrpsinr.rad_to_degree'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_8rsrpsinr_2rad_to_degree
_TEXT	SEGMENT
__pyx_self$ = 48
__pyx_v_d$ = 56
__pyx_pf_8rsrpsinr_2rad_to_degree PROC			; COMDAT

; 2573 : static PyObject *__pyx_pf_8rsrpsinr_2rad_to_degree(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_d) {

	sub	rsp, 40					; 00000028H

; 2574 :   PyObject *__pyx_r = NULL;
; 2575 :   __Pyx_RefNannyDeclarations
; 2576 :   PyObject *__pyx_t_1 = NULL;
; 2577 :   __Pyx_RefNannySetupContext("rad_to_degree", 0);
; 2578 : 
; 2579 :   /* "rsrpsinr.pyx":26
; 2580 :  * 
; 2581 :  * def rad_to_degree(double d):
; 2582 :  *     return d/pi180             # <<<<<<<<<<<<<<
; 2583 :  * 
; 2584 :  * cdef inline double cdegree_to_rad(double d):
; 2585 :  */
; 2586 :   __Pyx_XDECREF(__pyx_r);
; 2587 :   __pyx_t_1 = PyFloat_FromDouble((__pyx_v_d / __pyx_v_8rsrpsinr_pi180)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)

	divsd	xmm1, QWORD PTR __pyx_v_8rsrpsinr_pi180
	movapd	xmm0, xmm1
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $__pyx_L0$14499
	mov	r9, QWORD PTR __pyx_f

; 2588 :   __Pyx_GOTREF(__pyx_t_1);
; 2589 :   __pyx_r = __pyx_t_1;
; 2590 :   __pyx_t_1 = 0;
; 2591 :   goto __pyx_L0;
; 2592 : 
; 2593 :   /* "rsrpsinr.pyx":25
; 2594 :  *     return d*pi180
; 2595 :  * 
; 2596 :  * def rad_to_degree(double d):             # <<<<<<<<<<<<<<
; 2597 :  *     return d/pi180
; 2598 :  * 
; 2599 :  */
; 2600 : 
; 2601 :   /* function exit code */
; 2602 :   __pyx_L1_error:;
; 2603 :   __Pyx_XDECREF(__pyx_t_1);
; 2604 :   __Pyx_AddTraceback("rsrpsinr.rad_to_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	r8d, QWORD PTR [rax+26]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PJKCGDP@rsrpsinr?4rad_to_degree?$AA@
	mov	edx, 2587				; 00000a1bH
	mov	DWORD PTR __pyx_lineno, 26
	mov	DWORD PTR __pyx_clineno, 2587		; 00000a1bH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$14498:
	call	__Pyx_AddTraceback

; 2605 :   __pyx_r = NULL;
; 2606 :   __pyx_L0:;
; 2607 :   __Pyx_XGIVEREF(__pyx_r);
; 2608 :   __Pyx_RefNannyFinishContext();
; 2609 :   return __pyx_r;

	xor	eax, eax
$__pyx_L0$14499:

; 2610 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_8rsrpsinr_2rad_to_degree ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0BH@IDLLCLAE@rsrpsinr?4antenna_h_deg?$AA@	; `string'
PUBLIC	??_C@_03GCIAPEGN@ahv?$AA@			; `string'
PUBLIC	__real@4076800000000000
EXTRN	floor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_8rsrpsinr_antenna_h_deg DD imagerel __pyx_f_8rsrpsinr_antenna_h_deg
	DD	imagerel __pyx_f_8rsrpsinr_antenna_h_deg+249
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_antenna_h_deg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_8rsrpsinr_antenna_h_deg DD 030901H
	DD	037809H
	DD	08204H
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0BH@IDLLCLAE@rsrpsinr?4antenna_h_deg?$AA@
CONST	SEGMENT
??_C@_0BH@IDLLCLAE@rsrpsinr?4antenna_h_deg?$AA@ DB 'rsrpsinr.antenna_h_de'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCIAPEGN@ahv?$AA@
CONST	SEGMENT
??_C@_03GCIAPEGN@ahv?$AA@ DB 'ahv', 00H			; `string'
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_antenna_h_deg
_TEXT	SEGMENT
__pyx_v_angle$ = 80
__pyx_f_8rsrpsinr_antenna_h_deg PROC			; COMDAT

; 2905 : static CYTHON_INLINE double __pyx_f_8rsrpsinr_antenna_h_deg(double __pyx_v_angle) {

	sub	rsp, 72					; 00000048H
	movaps	XMMWORD PTR [rsp+48], xmm7
	movapd	xmm7, xmm0

; 2906 :   int __pyx_v_i;
; 2907 :   double __pyx_v_f;
; 2908 :   double __pyx_r;
; 2909 :   __Pyx_RefNannyDeclarations
; 2910 :   Py_ssize_t __pyx_t_1;
; 2911 :   Py_ssize_t __pyx_t_2;
; 2912 :   __Pyx_RefNannySetupContext("antenna_h_deg", 0);
; 2913 : 
; 2914 :   /* "rsrpsinr.pyx":56
; 2915 :  *     """
; 2916 :  *     global ahv
; 2917 :  *     angle -= floor(angle/360.0) * 360.0             # <<<<<<<<<<<<<<
; 2918 :  *     cdef int i = <int>angle
; 2919 :  *     cdef double f = angle - i
; 2920 :  */
; 2921 :   __pyx_v_angle = (__pyx_v_angle - (floor((__pyx_v_angle / 360.0)) * 360.0));

	divsd	xmm0, QWORD PTR __real@4076800000000000
	call	floor

; 2922 : 
; 2923 :   /* "rsrpsinr.pyx":57
; 2924 :  *     global ahv
; 2925 :  *     angle -= floor(angle/360.0) * 360.0
; 2926 :  *     cdef int i = <int>angle             # <<<<<<<<<<<<<<
; 2927 :  *     cdef double f = angle - i
; 2928 :  *     return ahv[i]*(1-f) + ahv[i+1]*f
; 2929 :  */
; 2930 :   __pyx_v_i = ((int)__pyx_v_angle);
; 2931 : 
; 2932 :   /* "rsrpsinr.pyx":58
; 2933 :  *     angle -= floor(angle/360.0) * 360.0
; 2934 :  *     cdef int i = <int>angle
; 2935 :  *     cdef double f = angle - i             # <<<<<<<<<<<<<<
; 2936 :  *     return ahv[i]*(1-f) + ahv[i+1]*f
; 2937 :  * 
; 2938 :  */
; 2939 :   __pyx_v_f = (__pyx_v_angle - __pyx_v_i);
; 2940 : 
; 2941 :   /* "rsrpsinr.pyx":59
; 2942 :  *     cdef int i = <int>angle
; 2943 :  *     cdef double f = angle - i
; 2944 :  *     return ahv[i]*(1-f) + ahv[i+1]*f             # <<<<<<<<<<<<<<
; 2945 :  * 
; 2946 :  * cdef inline double antenna_v_rad(double angle):
; 2947 :  */
; 2948 :   if (unlikely(!__pyx_v_8rsrpsinr_ahv.memview)) { __Pyx_RaiseUnboundLocalError("ahv"); __PYX_ERR(0, 59, __pyx_L1_error) }

	cmp	QWORD PTR __pyx_v_8rsrpsinr_ahv, 0
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	subsd	xmm7, xmm0
	cvttsd2si eax, xmm7
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm7, xmm0
	jne	SHORT $LN2@pyx_f_8rsr@2
	mov	rcx, QWORD PTR __imp_PyExc_UnboundLocalError
	lea	r8, OFFSET FLAT:??_C@_03GCIAPEGN@ahv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	mov	r9, QWORD PTR __pyx_f

; 2953 :   goto __pyx_L0;
; 2954 : 
; 2955 :   /* "rsrpsinr.pyx":50
; 2956 :  * 
; 2957 :  * 
; 2958 :  * cdef inline double antenna_h_deg(double angle):             # <<<<<<<<<<<<<<
; 2959 :  *     """
; 2960 :  *     @param angle: 0~360
; 2961 :  */
; 2962 : 
; 2963 :   /* function exit code */
; 2964 :   __pyx_L1_error:;
; 2965 :   __Pyx_WriteUnraisable("rsrpsinr.antenna_h_deg", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

	lea	rcx, OFFSET FLAT:??_C@_0BH@IDLLCLAE@rsrpsinr?4antenna_h_deg?$AA@
	mov	edx, 2948				; 00000b84H
	mov	r8d, 59					; 0000003bH
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, 59		; 0000003bH
	mov	DWORD PTR __pyx_clineno, 2948		; 00000b84H
$__pyx_L1_error$14671:
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx_WriteUnraisable

; 2966 :   __pyx_r = 0;
; 2967 :   __pyx_L0:;
; 2968 :   __Pyx_RefNannyFinishContext();
; 2969 :   return __pyx_r;

	xorpd	xmm0, xmm0

; 2970 : }

	movaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 72					; 00000048H
	ret	0
$LN2@pyx_f_8rsr@2:

; 2949 :   __pyx_t_1 = __pyx_v_i;
; 2950 :   if (unlikely(!__pyx_v_8rsrpsinr_ahv.memview)) { __Pyx_RaiseUnboundLocalError("ahv"); __PYX_ERR(0, 59, __pyx_L1_error) }
; 2951 :   __pyx_t_2 = (__pyx_v_i + 1);
; 2952 :   __pyx_r = (((*((__pyx_t_8rsrpsinr_DTYPE_t *) ( /* dim=0 */ (__pyx_v_8rsrpsinr_ahv.data + __pyx_t_1 * __pyx_v_8rsrpsinr_ahv.strides[0]) ))) * (1.0 - __pyx_v_f)) + ((*((__pyx_t_8rsrpsinr_DTYPE_t *) ( /* dim=0 */ (__pyx_v_8rsrpsinr_ahv.data + __pyx_t_2 * __pyx_v_8rsrpsinr_ahv.strides[0]) ))) * __pyx_v_f));

	mov	rdx, QWORD PTR __pyx_v_8rsrpsinr_ahv+80
	mov	rcx, QWORD PTR __pyx_v_8rsrpsinr_ahv+8
	movsdx	xmm0, QWORD PTR __real@3ff0000000000000
	movsxd	r8, eax
	subsd	xmm0, xmm7
	mov	rax, rdx
$__pyx_L0$14675:
	imul	rax, r8
	mulsd	xmm0, QWORD PTR [rax+rcx]
	lea	rax, QWORD PTR [r8+1]
	imul	rax, rdx
	mulsd	xmm7, QWORD PTR [rax+rcx]
	addsd	xmm0, xmm7

; 2970 : }

	movaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 72					; 00000048H
	ret	0
__pyx_f_8rsrpsinr_antenna_h_deg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LKGHEIOP@rsrpsinr?4antenna_v_deg?$AA@	; `string'
PUBLIC	??_C@_03HEDIHKBH@avv?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_8rsrpsinr_antenna_v_deg DD imagerel __pyx_f_8rsrpsinr_antenna_v_deg
	DD	imagerel __pyx_f_8rsrpsinr_antenna_v_deg+249
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_antenna_v_deg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_8rsrpsinr_antenna_v_deg DD 030901H
	DD	037809H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BH@LKGHEIOP@rsrpsinr?4antenna_v_deg?$AA@
CONST	SEGMENT
??_C@_0BH@LKGHEIOP@rsrpsinr?4antenna_v_deg?$AA@ DB 'rsrpsinr.antenna_v_de'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03HEDIHKBH@avv?$AA@
CONST	SEGMENT
??_C@_03HEDIHKBH@avv?$AA@ DB 'avv', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_antenna_v_deg
_TEXT	SEGMENT
__pyx_v_angle$ = 80
__pyx_f_8rsrpsinr_antenna_v_deg PROC			; COMDAT

; 3027 : static CYTHON_INLINE double __pyx_f_8rsrpsinr_antenna_v_deg(double __pyx_v_angle) {

	sub	rsp, 72					; 00000048H
	movaps	XMMWORD PTR [rsp+48], xmm7
	movapd	xmm7, xmm0

; 3028 :   int __pyx_v_i;
; 3029 :   double __pyx_v_f;
; 3030 :   double __pyx_r;
; 3031 :   __Pyx_RefNannyDeclarations
; 3032 :   Py_ssize_t __pyx_t_1;
; 3033 :   Py_ssize_t __pyx_t_2;
; 3034 :   __Pyx_RefNannySetupContext("antenna_v_deg", 0);
; 3035 : 
; 3036 :   /* "rsrpsinr.pyx":76
; 3037 :  *     """
; 3038 :  *     global avv
; 3039 :  *     angle -= floor(angle/360.0) * 360.0             # <<<<<<<<<<<<<<
; 3040 :  *     cdef int i = <int>angle
; 3041 :  *     cdef double f = angle - i
; 3042 :  */
; 3043 :   __pyx_v_angle = (__pyx_v_angle - (floor((__pyx_v_angle / 360.0)) * 360.0));

	divsd	xmm0, QWORD PTR __real@4076800000000000
	call	floor

; 3044 : 
; 3045 :   /* "rsrpsinr.pyx":77
; 3046 :  *     global avv
; 3047 :  *     angle -= floor(angle/360.0) * 360.0
; 3048 :  *     cdef int i = <int>angle             # <<<<<<<<<<<<<<
; 3049 :  *     cdef double f = angle - i
; 3050 :  *     return avv[i]*(1-f) + avv[i+1]*f
; 3051 :  */
; 3052 :   __pyx_v_i = ((int)__pyx_v_angle);
; 3053 : 
; 3054 :   /* "rsrpsinr.pyx":78
; 3055 :  *     angle -= floor(angle/360.0) * 360.0
; 3056 :  *     cdef int i = <int>angle
; 3057 :  *     cdef double f = angle - i             # <<<<<<<<<<<<<<
; 3058 :  *     return avv[i]*(1-f) + avv[i+1]*f
; 3059 :  * 
; 3060 :  */
; 3061 :   __pyx_v_f = (__pyx_v_angle - __pyx_v_i);
; 3062 : 
; 3063 :   /* "rsrpsinr.pyx":79
; 3064 :  *     cdef int i = <int>angle
; 3065 :  *     cdef double f = angle - i
; 3066 :  *     return avv[i]*(1-f) + avv[i+1]*f             # <<<<<<<<<<<<<<
; 3067 :  * 
; 3068 :  * cdef inline double cgain(double alpha, double beta):
; 3069 :  */
; 3070 :   if (unlikely(!__pyx_v_8rsrpsinr_avv.memview)) { __Pyx_RaiseUnboundLocalError("avv"); __PYX_ERR(0, 79, __pyx_L1_error) }

	cmp	QWORD PTR __pyx_v_8rsrpsinr_avv, 0
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	subsd	xmm7, xmm0
	cvttsd2si eax, xmm7
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm7, xmm0
	jne	SHORT $LN2@pyx_f_8rsr@3
	mov	rcx, QWORD PTR __imp_PyExc_UnboundLocalError
	lea	r8, OFFSET FLAT:??_C@_03HEDIHKBH@avv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	mov	r9, QWORD PTR __pyx_f

; 3075 :   goto __pyx_L0;
; 3076 : 
; 3077 :   /* "rsrpsinr.pyx":70
; 3078 :  * 
; 3079 :  * 
; 3080 :  * cdef inline double antenna_v_deg(double angle):             # <<<<<<<<<<<<<<
; 3081 :  *     """
; 3082 :  *     @param angle: 0~360
; 3083 :  */
; 3084 : 
; 3085 :   /* function exit code */
; 3086 :   __pyx_L1_error:;
; 3087 :   __Pyx_WriteUnraisable("rsrpsinr.antenna_v_deg", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

	lea	rcx, OFFSET FLAT:??_C@_0BH@LKGHEIOP@rsrpsinr?4antenna_v_deg?$AA@
	mov	edx, 3070				; 00000bfeH
	mov	r8d, 79					; 0000004fH
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, 79		; 0000004fH
	mov	DWORD PTR __pyx_clineno, 3070		; 00000bfeH
$__pyx_L1_error$14694:
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx_WriteUnraisable

; 3088 :   __pyx_r = 0;
; 3089 :   __pyx_L0:;
; 3090 :   __Pyx_RefNannyFinishContext();
; 3091 :   return __pyx_r;

	xorpd	xmm0, xmm0

; 3092 : }

	movaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 72					; 00000048H
	ret	0
$LN2@pyx_f_8rsr@3:

; 3071 :   __pyx_t_1 = __pyx_v_i;
; 3072 :   if (unlikely(!__pyx_v_8rsrpsinr_avv.memview)) { __Pyx_RaiseUnboundLocalError("avv"); __PYX_ERR(0, 79, __pyx_L1_error) }
; 3073 :   __pyx_t_2 = (__pyx_v_i + 1);
; 3074 :   __pyx_r = (((*((__pyx_t_8rsrpsinr_DTYPE_t *) ( /* dim=0 */ (__pyx_v_8rsrpsinr_avv.data + __pyx_t_1 * __pyx_v_8rsrpsinr_avv.strides[0]) ))) * (1.0 - __pyx_v_f)) + ((*((__pyx_t_8rsrpsinr_DTYPE_t *) ( /* dim=0 */ (__pyx_v_8rsrpsinr_avv.data + __pyx_t_2 * __pyx_v_8rsrpsinr_avv.strides[0]) ))) * __pyx_v_f));

	mov	rdx, QWORD PTR __pyx_v_8rsrpsinr_avv+80
	mov	rcx, QWORD PTR __pyx_v_8rsrpsinr_avv+8
	movsdx	xmm0, QWORD PTR __real@3ff0000000000000
	movsxd	r8, eax
	subsd	xmm0, xmm7
	mov	rax, rdx
$__pyx_L0$14698:
	imul	rax, r8
	mulsd	xmm0, QWORD PTR [rax+rcx]
	lea	rax, QWORD PTR [r8+1]
	imul	rax, rdx
	mulsd	xmm7, QWORD PTR [rax+rcx]
	addsd	xmm0, xmm7

; 3092 : }

	movaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 72					; 00000048H
	ret	0
__pyx_f_8rsrpsinr_antenna_v_deg ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_5numpy_7ndarray_3__releasebuffer__ DD imagerel __pyx_pw_5numpy_7ndarray_3__releasebuffer__
	DD	imagerel __pyx_pw_5numpy_7ndarray_3__releasebuffer__+30
	DD	imagerel $unwind$__pyx_pw_5numpy_7ndarray_3__releasebuffer__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_5numpy_7ndarray_3__releasebuffer__ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_5numpy_7ndarray_3__releasebuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_info$ = 56
__pyx_pw_5numpy_7ndarray_3__releasebuffer__ PROC	; COMDAT

; 6158 : static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

	sub	rsp, 40					; 00000028H

; 6159 :   __Pyx_RefNannyDeclarations
; 6160 :   __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
; 6161 :   __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

	mov	rax, QWORD PTR [rcx+56]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN4@pyx_pw_5nu
	mov	rcx, QWORD PTR [rdx+40]
	call	QWORD PTR __imp_PyObject_Free
$LN4@pyx_pw_5nu:

; 6162 : 
; 6163 :   /* function exit code */
; 6164 :   __Pyx_RefNannyFinishContext();
; 6165 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pw_5numpy_7ndarray_3__releasebuffer__ ENDP
_TEXT	ENDS
EXTRN	__imp_free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+114
	DD	imagerel $chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+114
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+197
	DD	imagerel $chain$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+197
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+227
	DD	imagerel $chain$7$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+227
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+253
	DD	imagerel $chain$8$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD 021H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD 021H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+114
	DD	imagerel $chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD 020521H
	DD	06f405H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+114
	DD	imagerel $chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD 0c2a21H
	DD	07e42aH
	DD	08d421H
	DD	09c41cH
	DD	0e7413H
	DD	0d640eH
	DD	0c5405H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__+60
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ DD 020601H
	DD	030029206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 96
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ PROC ; COMDAT

; 8920 : static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 80					; 00000050H

; 8921 :   __Pyx_RefNannyDeclarations
; 8922 :   int __pyx_t_1;
; 8923 :   __Pyx_RefNannySetupContext("__dealloc__", 0);
; 8924 : 
; 8925 :   /* "View.MemoryView":210
; 8926 :  * 
; 8927 :  *     def __dealloc__(array self):
; 8928 :  *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
; 8929 :  *             self.callback_free_data(self.data)
; 8930 :  *         elif self.free_data:
; 8931 :  */
; 8932 :   __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);

	mov	rax, QWORD PTR [rcx+96]
	mov	rbx, rcx
	test	rax, rax

; 8933 :   if (__pyx_t_1) {

	je	SHORT $LN3@pyx_array_

; 8934 : 
; 8935 :     /* "View.MemoryView":211
; 8936 :  *     def __dealloc__(array self):
; 8937 :  *         if self.callback_free_data != NULL:
; 8938 :  *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
; 8939 :  *         elif self.free_data:
; 8940 :  *             if self.dtype_is_object:
; 8941 :  */
; 8942 :     __pyx_v_self->callback_free_data(__pyx_v_self->data);

	mov	rcx, QWORD PTR [rcx+24]
	call	rax

; 9000 : 
; 9001 :     /* "View.MemoryView":212
; 9002 :  *         if self.callback_free_data != NULL:
; 9003 :  *             self.callback_free_data(self.data)
; 9004 :  *         elif self.free_data:             # <<<<<<<<<<<<<<
; 9005 :  *             if self.dtype_is_object:
; 9006 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 9007 :  */
; 9008 :   }
; 9009 :   __pyx_L3:;
; 9010 : 
; 9011 :   /* "View.MemoryView":217
; 9012 :  *                                           self._strides, self.ndim, False)
; 9013 :  *             free(self.data)
; 9014 :  *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
; 9015 :  * 
; 9016 :  *     @property
; 9017 :  */
; 9018 :   PyObject_Free(__pyx_v_self->_shape);

	mov	rcx, QWORD PTR [rbx+56]

; 9019 : 
; 9020 :   /* "View.MemoryView":209
; 9021 :  *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
; 9022 :  * 
; 9023 :  *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
; 9024 :  *         if self.callback_free_data != NULL:
; 9025 :  *             self.callback_free_data(self.data)
; 9026 :  */
; 9027 : 
; 9028 :   /* function exit code */
; 9029 :   __Pyx_RefNannyFinishContext();
; 9030 : }

	add	rsp, 80					; 00000050H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyObject_Free
$LN3@pyx_array_:

; 8943 : 
; 8944 :     /* "View.MemoryView":210
; 8945 :  * 
; 8946 :  *     def __dealloc__(array self):
; 8947 :  *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
; 8948 :  *             self.callback_free_data(self.data)
; 8949 :  *         elif self.free_data:
; 8950 :  */
; 8951 :     goto __pyx_L3;
; 8952 :   }
; 8953 : 
; 8954 :   /* "View.MemoryView":212
; 8955 :  *         if self.callback_free_data != NULL:
; 8956 :  *             self.callback_free_data(self.data)
; 8957 :  *         elif self.free_data:             # <<<<<<<<<<<<<<
; 8958 :  *             if self.dtype_is_object:
; 8959 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 8960 :  */
; 8961 :   __pyx_t_1 = (__pyx_v_self->free_data != 0);

	cmp	DWORD PTR [rcx+104], 0

; 8962 :   if (__pyx_t_1) {

	je	$__pyx_L3$19696

; 8963 : 
; 8964 :     /* "View.MemoryView":213
; 8965 :  *             self.callback_free_data(self.data)
; 8966 :  *         elif self.free_data:
; 8967 :  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 8968 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 8969 :  *                                           self._strides, self.ndim, False)
; 8970 :  */
; 8971 :     __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);

	cmp	DWORD PTR [rcx+108], 0

; 8972 :     if (__pyx_t_1) {

	je	$LN13@pyx_array_
	mov	QWORD PTR [rsp+96], rbp

; 8973 : 
; 8974 :       /* "View.MemoryView":214
; 8975 :  *         elif self.free_data:
; 8976 :  *             if self.dtype_is_object:
; 8977 :  *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
; 8978 :  *                                           self._strides, self.ndim, False)
; 8979 :  *             free(self.data)
; 8980 :  */
; 8981 :       __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

	mov	rbp, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+104], rsi
	mov	QWORD PTR [rsp+112], rdi
	mov	rdi, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsp+72], r12
	mov	QWORD PTR [rsp+64], r13
	movsxd	r13, DWORD PTR [rcx+48]
	mov	QWORD PTR [rsp+56], r14
	mov	r14, QWORD PTR [rcx+56]
	mov	rsi, QWORD PTR [r14]
	test	rsi, rsi
	jle	SHORT $LN25@pyx_array_
	mov	QWORD PTR [rsp+48], r15
	xor	r15d, r15d
	npad	6
$LL15@pyx_array_:
	cmp	r13, 1
	jne	SHORT $LN12@pyx_array_
	mov	rax, QWORD PTR [rdi]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rdi]
	cmp	QWORD PTR [rcx], r15
	jne	SHORT $__pyx_L5$38779
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$__pyx_L6$38773:
	jmp	SHORT $__pyx_L5$38779
$LN12@pyx_array_:
	lea	r9d, DWORD PTR [r13-1]
	lea	r8, QWORD PTR [rbp+8]
	lea	rdx, QWORD PTR [r14+8]
	mov	rcx, rdi
	mov	DWORD PTR [rsp+32], r15d
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$38779:
	add	rdi, QWORD PTR [rbp]
	sub	rsi, 1
	jne	SHORT $LL15@pyx_array_
	mov	r15, QWORD PTR [rsp+48]
$LN25@pyx_array_:
	mov	r13, QWORD PTR [rsp+64]
	mov	r12, QWORD PTR [rsp+72]
	mov	rdi, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+96]
	mov	r14, QWORD PTR [rsp+56]
$LN13@pyx_array_:

; 8982 : 
; 8983 :       /* "View.MemoryView":213
; 8984 :  *             self.callback_free_data(self.data)
; 8985 :  *         elif self.free_data:
; 8986 :  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 8987 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 8988 :  *                                           self._strides, self.ndim, False)
; 8989 :  */
; 8990 :     }
; 8991 : 
; 8992 :     /* "View.MemoryView":216
; 8993 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 8994 :  *                                           self._strides, self.ndim, False)
; 8995 :  *             free(self.data)             # <<<<<<<<<<<<<<
; 8996 :  *         PyObject_Free(self._shape)
; 8997 :  * 
; 8998 :  */
; 8999 :     free(__pyx_v_self->data);

	mov	rcx, QWORD PTR [rbx+24]
	call	QWORD PTR __imp_free
$__pyx_L3$19696:

; 9000 : 
; 9001 :     /* "View.MemoryView":212
; 9002 :  *         if self.callback_free_data != NULL:
; 9003 :  *             self.callback_free_data(self.data)
; 9004 :  *         elif self.free_data:             # <<<<<<<<<<<<<<
; 9005 :  *             if self.dtype_is_object:
; 9006 :  *                 refcount_objects_in_slice(self.data, self._shape,
; 9007 :  */
; 9008 :   }
; 9009 :   __pyx_L3:;
; 9010 : 
; 9011 :   /* "View.MemoryView":217
; 9012 :  *                                           self._strides, self.ndim, False)
; 9013 :  *             free(self.data)
; 9014 :  *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
; 9015 :  * 
; 9016 :  *     @property
; 9017 :  */
; 9018 :   PyObject_Free(__pyx_v_self->_shape);

	mov	rcx, QWORD PTR [rbx+56]

; 9019 : 
; 9020 :   /* "View.MemoryView":209
; 9021 :  *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
; 9022 :  * 
; 9023 :  *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
; 9024 :  *         if self.callback_free_data != NULL:
; 9025 :  *             self.callback_free_data(self.data)
; 9026 :  */
; 9027 : 
; 9028 :   /* function exit code */
; 9029 :   __Pyx_RefNannyFinishContext();
; 9030 : }

	add	rsp, 80					; 00000050H
	pop	rbx
	rex_jmp	QWORD PTR __imp_PyObject_Free
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_5array_7memview___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_5array_7memview___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_5array_7memview___get__+79
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_5array_7memview___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_5array_7memview___get__ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@
CONST	SEGMENT
??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@ DB 'View.MemoryVi'
	DB	'ew.array.memview.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_5array_7memview___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_5array_7memview___get__ PROC ; COMDAT

; 9053 : static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 9054 :   PyObject *__pyx_r = NULL;
; 9055 :   __Pyx_RefNannyDeclarations
; 9056 :   PyObject *__pyx_t_1 = NULL;
; 9057 :   __Pyx_RefNannySetupContext("__get__", 0);
; 9058 : 
; 9059 :   /* "View.MemoryView":221
; 9060 :  *     @property
; 9061 :  *     def memview(self):
; 9062 :  *         return self.get_memview()             # <<<<<<<<<<<<<<
; 9063 :  * 
; 9064 :  *     @cname('get_memview')
; 9065 :  */
; 9066 :   __Pyx_XDECREF(__pyx_r);
; 9067 :   __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 221, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+16]
	call	QWORD PTR [rax]
	test	rax, rax
	jne	SHORT $__pyx_L0$19733
	mov	r9, QWORD PTR __pyx_f+16

; 9068 :   __Pyx_GOTREF(__pyx_t_1);
; 9069 :   __pyx_r = __pyx_t_1;
; 9070 :   __pyx_t_1 = 0;
; 9071 :   goto __pyx_L0;
; 9072 : 
; 9073 :   /* "View.MemoryView":220
; 9074 :  * 
; 9075 :  *     @property
; 9076 :  *     def memview(self):             # <<<<<<<<<<<<<<
; 9077 :  *         return self.get_memview()
; 9078 :  * 
; 9079 :  */
; 9080 : 
; 9081 :   /* function exit code */
; 9082 :   __pyx_L1_error:;
; 9083 :   __Pyx_XDECREF(__pyx_t_1);
; 9084 :   __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@
	mov	edx, 9067				; 0000236bH
	mov	r8d, 221				; 000000ddH
	mov	DWORD PTR __pyx_lineno, 221		; 000000ddH
	mov	DWORD PTR __pyx_clineno, 9067		; 0000236bH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$19732:
	call	__Pyx_AddTraceback

; 9085 :   __pyx_r = NULL;
; 9086 :   __pyx_L0:;
; 9087 :   __Pyx_XGIVEREF(__pyx_r);
; 9088 :   __Pyx_RefNannyFinishContext();
; 9089 :   return __pyx_r;

	xor	eax, eax
$__pyx_L0$19733:

; 9090 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_15View_dot_MemoryView_5array_7memview___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@IAECCFNK@View?4MemoryView?4array?4get_memvie@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array_get_memview DD imagerel __pyx_array_get_memview
	DD	imagerel __pyx_array_get_memview+428
	DD	imagerel $unwind$__pyx_array_get_memview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array_get_memview DD 081401H
	DD	096414H
	DD	085414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CC@IAECCFNK@View?4MemoryView?4array?4get_memvie@
CONST	SEGMENT
??_C@_0CC@IAECCFNK@View?4MemoryView?4array?4get_memvie@ DB 'View.MemoryVi'
	DB	'ew.array.get_memview', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array_get_memview
_TEXT	SEGMENT
__pyx_v_self$ = 48
$T38859 = 56
__pyx_array_get_memview PROC				; COMDAT

; 9100 : static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rcx

; 9101 :   int __pyx_v_flags;
; 9102 :   PyObject *__pyx_r = NULL;
; 9103 :   __Pyx_RefNannyDeclarations
; 9104 :   PyObject *__pyx_t_1 = NULL;
; 9105 :   PyObject *__pyx_t_2 = NULL;
; 9106 :   PyObject *__pyx_t_3 = NULL;
; 9107 :   __Pyx_RefNannySetupContext("get_memview", 0);
; 9108 : 
; 9109 :   /* "View.MemoryView":225
; 9110 :  *     @cname('get_memview')
; 9111 :  *     cdef get_memview(self):
; 9112 :  *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
; 9113 :  *         return  memoryview(self, flags, self.dtype_is_object)
; 9114 :  * 
; 9115 :  */
; 9116 :   __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);
; 9117 : 
; 9118 :   /* "View.MemoryView":226
; 9119 :  *     cdef get_memview(self):
; 9120 :  *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
; 9121 :  *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
; 9122 :  * 
; 9123 :  *     def __len__(self):
; 9124 :  */
; 9125 :   __Pyx_XDECREF(__pyx_r);
; 9126 :   __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error)

	mov	ecx, 157				; 0000009dH
	xor	ebx, ebx
	mov	DWORD PTR $T38859[rsp], 157		; 0000009dH
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN39@pyx_array_@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 226		; 000000e2H
	mov	DWORD PTR __pyx_clineno, 9126		; 000023a6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_array_@2
$LN39@pyx_array_@2:

; 9127 :   __Pyx_GOTREF(__pyx_t_1);
; 9128 :   __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)

	cmp	DWORD PTR [rbp+108], ebx
	je	SHORT $LN52@pyx_array_@2
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rdi, QWORD PTR __imp__Py_TrueStruct
	jmp	SHORT $LN53@pyx_array_@2
$LN52@pyx_array_@2:
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rdi, QWORD PTR __imp__Py_ZeroStruct
$LN53@pyx_array_@2:
	test	rdi, rdi
	jne	SHORT $LN38@pyx_array_@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 9128		; 000023a8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN66@pyx_array_@2
$LN38@pyx_array_@2:

; 9129 :   __Pyx_GOTREF(__pyx_t_2);
; 9130 :   __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 226, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN37@pyx_array_@2
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 9130		; 000023aaH
	mov	QWORD PTR __pyx_filename, rcx
$LN66@pyx_array_@2:

; 9144 :   __pyx_r = __pyx_t_2;
; 9145 :   __pyx_t_2 = 0;
; 9146 :   goto __pyx_L0;
; 9147 : 
; 9148 :   /* "View.MemoryView":224
; 9149 :  * 
; 9150 :  *     @cname('get_memview')
; 9151 :  *     cdef get_memview(self):             # <<<<<<<<<<<<<<
; 9152 :  *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
; 9153 :  *         return  memoryview(self, flags, self.dtype_is_object)
; 9154 :  */
; 9155 : 
; 9156 :   /* function exit code */
; 9157 :   __pyx_L1_error:;
; 9158 :   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rsi], -1
	mov	DWORD PTR __pyx_lineno, 226		; 000000e2H
$__pyx_L1_error$19781:
	jne	SHORT $LN23@pyx_array_@2
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
	jmp	SHORT $LN23@pyx_array_@2
$LN37@pyx_array_@2:

; 9131 :   __Pyx_GOTREF(__pyx_t_3);
; 9132 :   __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rbp]

; 9133 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
; 9134 :   PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
; 9135 :   __Pyx_GIVEREF(__pyx_t_1);
; 9136 :   PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
; 9137 :   __Pyx_GIVEREF(__pyx_t_2);
; 9138 :   PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
; 9139 :   __pyx_t_1 = 0;
; 9140 :   __pyx_t_2 = 0;
; 9141 :   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_memoryview_type
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbp
	mov	QWORD PTR [rax+32], rsi
	mov	QWORD PTR [rax+40], rdi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN35@pyx_array_@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 226		; 000000e2H
	mov	DWORD PTR __pyx_clineno, 9141		; 000023b5H
	mov	QWORD PTR __pyx_filename, rax
$LN23@pyx_array_@2:

; 9159 :   __Pyx_XDECREF(__pyx_t_2);

	test	rdi, rdi
	je	SHORT $LN13@pyx_array_@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN13@pyx_array_@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN13@pyx_array_@2:

; 9160 :   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN3@pyx_array_@2
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@pyx_array_@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN3@pyx_array_@2:

; 9161 :   __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CC@IAECCFNK@View?4MemoryView?4array?4get_memvie@
	call	__Pyx_AddTraceback

; 9162 :   __pyx_r = 0;
; 9163 :   __pyx_L0:;
; 9164 :   __Pyx_XGIVEREF(__pyx_r);
; 9165 :   __Pyx_RefNannyFinishContext();
; 9166 :   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$19809
$LN35@pyx_array_@2:

; 9142 :   __Pyx_GOTREF(__pyx_t_2);
; 9143 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN34@pyx_array_@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN34@pyx_array_@2:

; 9162 :   __pyx_r = 0;
; 9163 :   __pyx_L0:;
; 9164 :   __Pyx_XGIVEREF(__pyx_r);
; 9165 :   __Pyx_RefNannyFinishContext();
; 9166 :   return __pyx_r;

	mov	rax, rdi
$__pyx_L0$19809:

; 9167 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_array_get_memview ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___len__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_array___len__ PROC				; COMDAT

; 9180 :   Py_ssize_t __pyx_r;
; 9181 :   __Pyx_RefNannyDeclarations
; 9182 :   __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
; 9183 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

	mov	rax, QWORD PTR [rcx+56]
$__pyx_L0$38880:

; 9184 : 
; 9185 :   /* function exit code */
; 9186 :   __Pyx_RefNannyFinishContext();
; 9187 :   return __pyx_r;

	mov	rax, QWORD PTR [rax]

; 9188 : }

	ret	0
__pyx_array___len__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@BFDPBGEN@View?4MemoryView?4array?4__getattr_@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__+341
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CC@BFDPBGEN@View?4MemoryView?4array?4__getattr_@
CONST	SEGMENT
??_C@_0CC@BFDPBGEN@View?4MemoryView?4array?4__getattr_@ DB 'View.MemoryVi'
	DB	'ew.array.__getattr__', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_attr$ = 56
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__ PROC ; COMDAT

; 9240 : static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 9241 :   PyObject *__pyx_r = NULL;
; 9242 :   __Pyx_RefNannyDeclarations
; 9243 :   PyObject *__pyx_t_1 = NULL;
; 9244 :   PyObject *__pyx_t_2 = NULL;
; 9245 :   __Pyx_RefNannySetupContext("__getattr__", 0);
; 9246 : 
; 9247 :   /* "View.MemoryView":232
; 9248 :  * 
; 9249 :  *     def __getattr__(self, attr):
; 9250 :  *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
; 9251 :  * 
; 9252 :  *     def __getitem__(self, item):
; 9253 :  */
; 9254 :   __Pyx_XDECREF(__pyx_r);
; 9255 :   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 232, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	rdx, QWORD PTR __pyx_n_s_memview
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN41@pyx_array_@3
	call	r8
	jmp	SHORT $LN51@pyx_array_@3
$LN41@pyx_array_@3:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN40@pyx_array_@3
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN51@pyx_array_@3
$LN40@pyx_array_@3:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN51@pyx_array_@3:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN27@pyx_array_@3
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 232				; 000000e8H
	mov	edx, 9255				; 00002427H

; 9275 :   __Pyx_XDECREF(__pyx_t_2);
; 9276 :   __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@BFDPBGEN@View?4MemoryView?4array?4__getattr_@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 9277 :   __pyx_r = NULL;
; 9278 :   __pyx_L0:;
; 9279 :   __Pyx_XGIVEREF(__pyx_r);
; 9280 :   __Pyx_RefNannyFinishContext();
; 9281 :   return __pyx_r;

	xor	eax, eax

; 9282 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN27@pyx_array_@3:

; 9256 :   __Pyx_GOTREF(__pyx_t_1);
; 9257 :   __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 232, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rbx
	bt	DWORD PTR [rax+168], 27
	jae	SHORT $LN47@pyx_array_@3
	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN48@pyx_array_@3
	mov	rdx, rdi
	call	r8
	jmp	SHORT $LN52@pyx_array_@3
$LN48@pyx_array_@3:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN47@pyx_array_@3
	lea	rdx, QWORD PTR [rdi+32]
	call	r8
	jmp	SHORT $LN52@pyx_array_@3
$LN47@pyx_array_@3:
	mov	rdx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
$LN52@pyx_array_@3:
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN25@pyx_array_@3
	mov	r9, QWORD PTR __pyx_f+16

; 9260 :   __pyx_r = __pyx_t_2;
; 9261 :   __pyx_t_2 = 0;
; 9262 :   goto __pyx_L0;
; 9263 : 
; 9264 :   /* "View.MemoryView":231
; 9265 :  *         return self._shape[0]
; 9266 :  * 
; 9267 :  *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
; 9268 :  *         return getattr(self.memview, attr)
; 9269 :  * 
; 9270 :  */
; 9271 : 
; 9272 :   /* function exit code */
; 9273 :   __pyx_L1_error:;
; 9274 :   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbx], -1
	mov	r8d, 232				; 000000e8H
	mov	edx, 9257				; 00002429H
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$19914:
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
	jne	SHORT $LN3@pyx_array_@3
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
$LN3@pyx_array_@3:

; 9275 :   __Pyx_XDECREF(__pyx_t_2);
; 9276 :   __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@BFDPBGEN@View?4MemoryView?4array?4__getattr_@
	call	__Pyx_AddTraceback

; 9277 :   __pyx_r = NULL;
; 9278 :   __pyx_L0:;
; 9279 :   __Pyx_XGIVEREF(__pyx_r);
; 9280 :   __Pyx_RefNannyFinishContext();
; 9281 :   return __pyx_r;

	xor	eax, eax

; 9282 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@pyx_array_@3:

; 9258 :   __Pyx_GOTREF(__pyx_t_2);
; 9259 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN24@pyx_array_@3
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN24@pyx_array_@3:

; 9277 :   __pyx_r = NULL;
; 9278 :   __pyx_L0:;
; 9279 :   __Pyx_XGIVEREF(__pyx_r);
; 9280 :   __Pyx_RefNannyFinishContext();
; 9281 :   return __pyx_r;

	mov	rax, rdi
$__pyx_L0$19926:

; 9282 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@HDCKKBNB@View?4MemoryView?4array?4__getitem_@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__+285
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CC@HDCKKBNB@View?4MemoryView?4array?4__getitem_@
CONST	SEGMENT
??_C@_0CC@HDCKKBNB@View?4MemoryView?4array?4__getitem_@ DB 'View.MemoryVi'
	DB	'ew.array.__getitem__', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_item$ = 56
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__ PROC ; COMDAT

; 9305 : static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 9306 :   PyObject *__pyx_r = NULL;
; 9307 :   __Pyx_RefNannyDeclarations
; 9308 :   PyObject *__pyx_t_1 = NULL;
; 9309 :   PyObject *__pyx_t_2 = NULL;
; 9310 :   __Pyx_RefNannySetupContext("__getitem__", 0);
; 9311 : 
; 9312 :   /* "View.MemoryView":235
; 9313 :  * 
; 9314 :  *     def __getitem__(self, item):
; 9315 :  *         return self.memview[item]             # <<<<<<<<<<<<<<
; 9316 :  * 
; 9317 :  *     def __setitem__(self, item, value):
; 9318 :  */
; 9319 :   __Pyx_XDECREF(__pyx_r);
; 9320 :   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 235, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	rdx, QWORD PTR __pyx_n_s_memview
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN41@pyx_array_@4
	call	r8
	jmp	SHORT $LN44@pyx_array_@4
$LN41@pyx_array_@4:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN40@pyx_array_@4
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN44@pyx_array_@4
$LN40@pyx_array_@4:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN44@pyx_array_@4:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN27@pyx_array_@4
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 235				; 000000ebH
	mov	edx, 9320				; 00002468H

; 9340 :   __Pyx_XDECREF(__pyx_t_2);
; 9341 :   __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@HDCKKBNB@View?4MemoryView?4array?4__getitem_@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 9342 :   __pyx_r = NULL;
; 9343 :   __pyx_L0:;
; 9344 :   __Pyx_XGIVEREF(__pyx_r);
; 9345 :   __Pyx_RefNannyFinishContext();
; 9346 :   return __pyx_r;

	xor	eax, eax

; 9347 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN27@pyx_array_@4:

; 9321 :   __Pyx_GOTREF(__pyx_t_1);
; 9322 :   __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 235, __pyx_L1_error)

	mov	rdx, rdi
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetItem
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN25@pyx_array_@4
	mov	r9, QWORD PTR __pyx_f+16

; 9325 :   __pyx_r = __pyx_t_2;
; 9326 :   __pyx_t_2 = 0;
; 9327 :   goto __pyx_L0;
; 9328 : 
; 9329 :   /* "View.MemoryView":234
; 9330 :  *         return getattr(self.memview, attr)
; 9331 :  * 
; 9332 :  *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
; 9333 :  *         return self.memview[item]
; 9334 :  * 
; 9335 :  */
; 9336 : 
; 9337 :   /* function exit code */
; 9338 :   __pyx_L1_error:;
; 9339 :   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbx], -1
	mov	r8d, 235				; 000000ebH
	mov	edx, 9322				; 0000246aH
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$20003:
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
	jne	SHORT $LN3@pyx_array_@4
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
$LN3@pyx_array_@4:

; 9340 :   __Pyx_XDECREF(__pyx_t_2);
; 9341 :   __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@HDCKKBNB@View?4MemoryView?4array?4__getitem_@
	call	__Pyx_AddTraceback

; 9342 :   __pyx_r = NULL;
; 9343 :   __pyx_L0:;
; 9344 :   __Pyx_XGIVEREF(__pyx_r);
; 9345 :   __Pyx_RefNannyFinishContext();
; 9346 :   return __pyx_r;

	xor	eax, eax

; 9347 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@pyx_array_@4:

; 9323 :   __Pyx_GOTREF(__pyx_t_2);
; 9324 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN24@pyx_array_@4
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN24@pyx_array_@4:

; 9342 :   __pyx_r = NULL;
; 9343 :   __pyx_L0:;
; 9344 :   __Pyx_XGIVEREF(__pyx_r);
; 9345 :   __Pyx_RefNannyFinishContext();
; 9346 :   return __pyx_r;

	mov	rax, rdi
$__pyx_L0$20015:

; 9347 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@FNGPIAED@View?4MemoryView?4array?4__setitem_@ ; `string'
EXTRN	__imp_PyObject_SetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__+307
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CC@FNGPIAED@View?4MemoryView?4array?4__setitem_@
CONST	SEGMENT
??_C@_0CC@FNGPIAED@View?4MemoryView?4array?4__setitem_@ DB 'View.MemoryVi'
	DB	'ew.array.__setitem__', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_item$ = 56
__pyx_v_value$ = 64
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__ PROC ; COMDAT

; 9370 : static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 9371 :   int __pyx_r;
; 9372 :   __Pyx_RefNannyDeclarations
; 9373 :   PyObject *__pyx_t_1 = NULL;
; 9374 :   __Pyx_RefNannySetupContext("__setitem__", 0);
; 9375 : 
; 9376 :   /* "View.MemoryView":238
; 9377 :  * 
; 9378 :  *     def __setitem__(self, item, value):
; 9379 :  *         self.memview[item] = value             # <<<<<<<<<<<<<<
; 9380 :  * 
; 9381 :  * 
; 9382 :  */
; 9383 :   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 238, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	rsi, rdx
	mov	rdx, QWORD PTR __pyx_n_s_memview
	mov	r9, QWORD PTR [rax+144]
	mov	rdi, r8
	test	r9, r9
	je	SHORT $LN21@pyx_array_@5
	call	r9
	jmp	SHORT $LN24@pyx_array_@5
$LN21@pyx_array_@5:
	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN20@pyx_array_@5
	add	rdx, 32					; 00000020H
	call	rax
	jmp	SHORT $LN24@pyx_array_@5
$LN20@pyx_array_@5:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN24@pyx_array_@5:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN17@pyx_array_@5
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 238				; 000000eeH
	mov	edx, 9383				; 000024a7H

; 9401 :   __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@FNGPIAED@View?4MemoryView?4array?4__setitem_@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 9402 :   __pyx_r = -1;
; 9403 :   __pyx_L0:;
; 9404 :   __Pyx_RefNannyFinishContext();
; 9405 :   return __pyx_r;

	or	eax, -1

; 9406 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN17@pyx_array_@5:

; 9384 :   __Pyx_GOTREF(__pyx_t_1);
; 9385 :   if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 238, __pyx_L1_error)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_SetItem
	test	eax, eax
	jns	SHORT $LN15@pyx_array_@5
	mov	r9, QWORD PTR __pyx_f+16

; 9387 : 
; 9388 :   /* "View.MemoryView":237
; 9389 :  *         return self.memview[item]
; 9390 :  * 
; 9391 :  *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
; 9392 :  *         self.memview[item] = value
; 9393 :  * 
; 9394 :  */
; 9395 : 
; 9396 :   /* function exit code */
; 9397 :   __pyx_r = 0;
; 9398 :   goto __pyx_L0;
; 9399 :   __pyx_L1_error:;
; 9400 :   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbx], -1
	mov	r8d, 238				; 000000eeH
	mov	edx, 9385				; 000024a9H
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$20080:
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
	jne	SHORT $LN3@pyx_array_@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
$LN3@pyx_array_@5:

; 9401 :   __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CC@FNGPIAED@View?4MemoryView?4array?4__setitem_@
	call	__Pyx_AddTraceback

; 9402 :   __pyx_r = -1;
; 9403 :   __pyx_L0:;
; 9404 :   __Pyx_RefNannyFinishContext();
; 9405 :   return __pyx_r;

	or	eax, -1

; 9406 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN15@pyx_array_@5:

; 9386 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_array_@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_array_@5:

; 9406 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
$__pyx_L0$20092:
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@FMCOBPOO@View?4MemoryView?4array?4__reduce_c@ ; `string'
_BSS	SEGMENT
__pyx_builtin_TypeError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_array___reduce_cython__ DD imagerel __pyx_pf___pyx_array___reduce_cython__
	DD	imagerel __pyx_pf___pyx_array___reduce_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_array___reduce_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_array___reduce_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CI@FMCOBPOO@View?4MemoryView?4array?4__reduce_c@
CONST	SEGMENT
??_C@_0CI@FMCOBPOO@View?4MemoryView?4array?4__reduce_c@ DB 'View.MemoryVi'
	DB	'ew.array.__reduce_cython__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_array___reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf___pyx_array___reduce_cython__ PROC		; COMDAT

; 9427 : static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 9428 :   PyObject *__pyx_r = NULL;
; 9429 :   __Pyx_RefNannyDeclarations
; 9430 :   PyObject *__pyx_t_1 = NULL;
; 9431 :   __Pyx_RefNannySetupContext("__reduce_cython__", 0);
; 9432 : 
; 9433 :   /* "(tree fragment)":2
; 9434 :  * def __reduce_cython__(self):
; 9435 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 9436 :  * def __setstate_cython__(self, __pyx_state):
; 9437 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 9438 :  */
; 9439 :   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__18
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p
	mov	edx, 9439				; 000024dfH
	jmp	SHORT $LN19@pyx_pf___p
$LN16@pyx_pf___p:

; 9440 :   __Pyx_GOTREF(__pyx_t_1);
; 9441 :   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 9442 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p:

; 9443 :   __PYX_ERR(2, 2, __pyx_L1_error)

	mov	edx, 9443				; 000024e3H
$LN19@pyx_pf___p:
	mov	r9, QWORD PTR __pyx_f+16

; 9444 : 
; 9445 :   /* "(tree fragment)":1
; 9446 :  * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
; 9447 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 9448 :  * def __setstate_cython__(self, __pyx_state):
; 9449 :  */
; 9450 : 
; 9451 :   /* function exit code */
; 9452 :   __pyx_L1_error:;
; 9453 :   __Pyx_XDECREF(__pyx_t_1);
; 9454 :   __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CI@FMCOBPOO@View?4MemoryView?4array?4__reduce_c@
	mov	r8d, 2
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 2
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 9455 :   __pyx_r = NULL;
; 9456 :   __Pyx_XGIVEREF(__pyx_r);
; 9457 :   __Pyx_RefNannyFinishContext();
; 9458 :   return __pyx_r;

	xor	eax, eax

; 9459 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_array___reduce_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@BOKMNDFM@View?4MemoryView?4array?4__setstate@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_array_2__setstate_cython__ DD imagerel __pyx_pf___pyx_array_2__setstate_cython__
	DD	imagerel __pyx_pf___pyx_array_2__setstate_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_array_2__setstate_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_array_2__setstate_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CK@BOKMNDFM@View?4MemoryView?4array?4__setstate@
CONST	SEGMENT
??_C@_0CK@BOKMNDFM@View?4MemoryView?4array?4__setstate@ DB 'View.MemoryVi'
	DB	'ew.array.__setstate_cython__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_array_2__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v___pyx_state$ = 56
__pyx_pf___pyx_array_2__setstate_cython__ PROC		; COMDAT

; 9481 : static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 9482 :   PyObject *__pyx_r = NULL;
; 9483 :   __Pyx_RefNannyDeclarations
; 9484 :   PyObject *__pyx_t_1 = NULL;
; 9485 :   __Pyx_RefNannySetupContext("__setstate_cython__", 0);
; 9486 : 
; 9487 :   /* "(tree fragment)":4
; 9488 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 9489 :  * def __setstate_cython__(self, __pyx_state):
; 9490 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 9491 :  */
; 9492 :   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__19
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p@2
	mov	edx, 9492				; 00002514H
	jmp	SHORT $LN19@pyx_pf___p@2
$LN16@pyx_pf___p@2:

; 9493 :   __Pyx_GOTREF(__pyx_t_1);
; 9494 :   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 9495 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@2:

; 9496 :   __PYX_ERR(2, 4, __pyx_L1_error)

	mov	edx, 9496				; 00002518H
$LN19@pyx_pf___p@2:
	mov	r9, QWORD PTR __pyx_f+16

; 9497 : 
; 9498 :   /* "(tree fragment)":3
; 9499 :  * def __reduce_cython__(self):
; 9500 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 9501 :  * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
; 9502 :  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 9503 :  */
; 9504 : 
; 9505 :   /* function exit code */
; 9506 :   __pyx_L1_error:;
; 9507 :   __Pyx_XDECREF(__pyx_t_1);
; 9508 :   __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CK@BOKMNDFM@View?4MemoryView?4array?4__setstate@
	mov	r8d, 4
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 4
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 9509 :   __pyx_r = NULL;
; 9510 :   __Pyx_XGIVEREF(__pyx_r);
; 9511 :   __Pyx_RefNannyFinishContext();
; 9512 :   return __pyx_r;

	xor	eax, eax

; 9513 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_array_2__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@JMLADEK@View?4MemoryView?4array_cwrapper?$AA@ ; `string'
EXTRN	__imp_PyUnicodeUCS2_DecodeASCII:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array_new DD imagerel __pyx_array_new
	DD	imagerel __pyx_array_new+1167
	DD	imagerel $unwind$__pyx_array_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array_new DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0BP@JMLADEK@View?4MemoryView?4array_cwrapper?$AA@
CONST	SEGMENT
??_C@_0BP@JMLADEK@View?4MemoryView?4array_cwrapper?$AA@ DB 'View.MemoryVi'
	DB	'ew.array_cwrapper', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array_new
_TEXT	SEGMENT
__pyx_v_shape$ = 80
__pyx_v_itemsize$ = 88
__pyx_v_format$ = 96
__pyx_v_mode$ = 104
__pyx_v_buf$ = 112
__pyx_array_new PROC					; COMDAT

; 9523 : static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 9524 :   struct __pyx_array_obj *__pyx_v_result = 0;
; 9525 :   struct __pyx_array_obj *__pyx_r = NULL;
; 9526 :   __Pyx_RefNannyDeclarations
; 9527 :   int __pyx_t_1;
; 9528 :   PyObject *__pyx_t_2 = NULL;
; 9529 :   PyObject *__pyx_t_3 = NULL;
; 9530 :   PyObject *__pyx_t_4 = NULL;
; 9531 :   PyObject *__pyx_t_5 = NULL;
; 9532 :   __Pyx_RefNannySetupContext("array_cwrapper", 0);
; 9533 : 
; 9534 :   /* "View.MemoryView":246
; 9535 :  *     cdef array result
; 9536 :  * 
; 9537 :  *     if buf == NULL:             # <<<<<<<<<<<<<<
; 9538 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'))
; 9539 :  *     else:
; 9540 :  */
; 9541 :   __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);

	mov	r14, QWORD PTR __pyx_v_buf$[rsp]
	mov	r15, rcx

; 9542 :   if (__pyx_t_1) {
; 9543 : 
; 9544 :     /* "View.MemoryView":247
; 9545 :  * 
; 9546 :  *     if buf == NULL:
; 9547 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
; 9548 :  *     else:
; 9549 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'),
; 9550 :  */
; 9551 :     __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 247, __pyx_L1_error)

	mov	rcx, rdx
	mov	r13, r9
	mov	rdi, r8
	xor	ebp, ebp
	xor	ebx, ebx
	xor	esi, esi
	call	QWORD PTR __imp_PyInt_FromSsize_t
	test	r14, r14
	jne	$LN88@pyx_array_@6
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN87@pyx_array_@6
	mov	DWORD PTR __pyx_lineno, 247		; 000000f7H
	mov	DWORD PTR __pyx_clineno, 9551		; 0000254fH
	jmp	$LN113@pyx_array_@6
$LN87@pyx_array_@6:

; 9552 :     __Pyx_GOTREF(__pyx_t_2);
; 9553 :     __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 247, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyString_FromString
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN86@pyx_array_@6
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 247		; 000000f7H
	mov	DWORD PTR __pyx_clineno, 9553		; 00002551H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$20239
$LN86@pyx_array_@6:

; 9554 :     __Pyx_GOTREF(__pyx_t_3);
; 9555 :     __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 247, __pyx_L1_error)

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	sub	rcx, 1
	jns	SHORT $LN94@pyx_array_@6
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	rcx, rax
	jbe	SHORT $LN97@pyx_array_@6
	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN111@pyx_array_@6
$LN97@pyx_array_@6:
	test	rcx, rcx
	jns	SHORT $LN114@pyx_array_@6
	add	rcx, rcx
$LN94@pyx_array_@6:
	test	rcx, rcx
$LN114@pyx_array_@6:
	jg	SHORT $LN93@pyx_array_@6
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_PyUnicodeUCS2_FromUnicode
	jmp	SHORT $LN115@pyx_array_@6
$LN93@pyx_array_@6:
	xor	r8d, r8d
	mov	rdx, rcx
	mov	rcx, r13
	cmp	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII, rbx
	je	SHORT $LN92@pyx_array_@6
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII
	jmp	SHORT $LN115@pyx_array_@6
$LN92@pyx_array_@6:
	xor	r9d, r9d
	call	QWORD PTR __imp_PyUnicodeUCS2_Decode
$LN115@pyx_array_@6:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN85@pyx_array_@6
$LN111@pyx_array_@6:
	mov	DWORD PTR __pyx_lineno, 247		; 000000f7H
	mov	DWORD PTR __pyx_clineno, 9555		; 00002553H
	jmp	$LN113@pyx_array_@6
$LN85@pyx_array_@6:

; 9556 :     __Pyx_GOTREF(__pyx_t_4);
; 9557 :     __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 247, __pyx_L1_error)

	mov	ecx, 4
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN84@pyx_array_@6
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 247		; 000000f7H
	mov	DWORD PTR __pyx_clineno, 9557		; 00002555H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$20239
$LN84@pyx_array_@6:

; 9558 :     __Pyx_GOTREF(__pyx_t_5);
; 9559 :     __Pyx_INCREF(__pyx_v_shape);

	inc	QWORD PTR [r15]

; 9560 :     __Pyx_GIVEREF(__pyx_v_shape);
; 9561 :     PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
; 9562 :     __Pyx_GIVEREF(__pyx_t_2);
; 9563 :     PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
; 9564 :     __Pyx_GIVEREF(__pyx_t_3);
; 9565 :     PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
; 9566 :     __Pyx_GIVEREF(__pyx_t_4);
; 9567 :     PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
; 9568 :     __pyx_t_2 = 0;
; 9569 :     __pyx_t_3 = 0;
; 9570 :     __pyx_t_4 = 0;
; 9571 :     __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 247, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_array_type
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], r15
	mov	QWORD PTR [rax+32], r12
	mov	QWORD PTR [rax+40], rbp
	mov	QWORD PTR [rax+48], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN82@pyx_array_@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 247		; 000000f7H
	mov	DWORD PTR __pyx_clineno, 9571		; 00002563H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_array_@6
$LN82@pyx_array_@6:

; 9572 :     __Pyx_GOTREF(__pyx_t_4);
; 9573 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rsi], -1
	jne	$LN53@pyx_array_@6
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]

; 9574 :     __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
; 9575 :     __pyx_t_4 = 0;
; 9576 : 
; 9577 :     /* "View.MemoryView":246
; 9578 :  *     cdef array result
; 9579 :  * 
; 9580 :  *     if buf == NULL:             # <<<<<<<<<<<<<<
; 9581 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'))
; 9582 :  *     else:
; 9583 :  */
; 9584 :     goto __pyx_L3;

	jmp	$LN53@pyx_array_@6
$LN88@pyx_array_@6:

; 9585 :   }
; 9586 : 
; 9587 :   /* "View.MemoryView":249
; 9588 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'))
; 9589 :  *     else:
; 9590 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
; 9591 :  *                        allocate_buffer=False)
; 9592 :  *         result.data = buf
; 9593 :  */
; 9594 :   /*else*/ {
; 9595 :     __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 249, __pyx_L1_error)

	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN77@pyx_array_@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 249		; 000000f9H
	mov	DWORD PTR __pyx_clineno, 9595		; 0000257bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_array_@6
$LN77@pyx_array_@6:

; 9596 :     __Pyx_GOTREF(__pyx_t_4);
; 9597 :     __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 249, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyString_FromString
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN76@pyx_array_@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 249		; 000000f9H
	mov	DWORD PTR __pyx_clineno, 9597		; 0000257dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_array_@6
$LN76@pyx_array_@6:

; 9598 :     __Pyx_GOTREF(__pyx_t_5);
; 9599 :     __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 249, __pyx_L1_error)

	or	rcx, -1
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	sub	rcx, 1
	jns	SHORT $LN104@pyx_array_@6
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	rcx, rax
	jbe	SHORT $LN107@pyx_array_@6
	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN112@pyx_array_@6
$LN107@pyx_array_@6:
	test	rcx, rcx
	jns	SHORT $LN116@pyx_array_@6
	add	rcx, rcx
$LN104@pyx_array_@6:
	test	rcx, rcx
$LN116@pyx_array_@6:
	jg	SHORT $LN103@pyx_array_@6
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_PyUnicodeUCS2_FromUnicode
	jmp	SHORT $LN117@pyx_array_@6
$LN103@pyx_array_@6:
	xor	r8d, r8d
	mov	rdx, rcx
	mov	rcx, r13
	cmp	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII, rbp
	je	SHORT $LN102@pyx_array_@6
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII
	jmp	SHORT $LN117@pyx_array_@6
$LN102@pyx_array_@6:
	xor	r9d, r9d
	call	QWORD PTR __imp_PyUnicodeUCS2_Decode
$LN117@pyx_array_@6:
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN75@pyx_array_@6
$LN112@pyx_array_@6:
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 249		; 000000f9H
	mov	DWORD PTR __pyx_clineno, 9599		; 0000257fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_array_@6
$LN75@pyx_array_@6:

; 9600 :     __Pyx_GOTREF(__pyx_t_3);
; 9601 :     __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 249, __pyx_L1_error)

	mov	ecx, 4
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN74@pyx_array_@6
	mov	DWORD PTR __pyx_clineno, 9601		; 00002581H
	jmp	$LN118@pyx_array_@6
$LN74@pyx_array_@6:

; 9602 :     __Pyx_GOTREF(__pyx_t_2);
; 9603 :     __Pyx_INCREF(__pyx_v_shape);

	inc	QWORD PTR [r15]

; 9604 :     __Pyx_GIVEREF(__pyx_v_shape);
; 9605 :     PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
; 9606 :     __Pyx_GIVEREF(__pyx_t_4);
; 9607 :     PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);

	mov	QWORD PTR [rax+32], rbx

; 9608 :     __Pyx_GIVEREF(__pyx_t_5);
; 9609 :     PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);

	mov	QWORD PTR [rax+40], rsi

; 9610 :     __Pyx_GIVEREF(__pyx_t_3);
; 9611 :     PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
; 9612 :     __pyx_t_4 = 0;

	xor	ebx, ebx

; 9613 :     __pyx_t_5 = 0;

	xor	esi, esi
	mov	QWORD PTR [rax+24], r15
	mov	QWORD PTR [rax+48], rbp

; 9614 :     __pyx_t_3 = 0;
; 9615 : 
; 9616 :     /* "View.MemoryView":250
; 9617 :  *     else:
; 9618 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'),
; 9619 :  *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
; 9620 :  *         result.data = buf
; 9621 :  * 
; 9622 :  */
; 9623 :     __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 250, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN73@pyx_array_@6
	mov	DWORD PTR __pyx_lineno, 250		; 000000faH
	mov	DWORD PTR __pyx_clineno, 9623		; 00002597H
	jmp	SHORT $LN113@pyx_array_@6
$LN73@pyx_array_@6:

; 9624 :     __Pyx_GOTREF(__pyx_t_3);
; 9625 :     if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 250, __pyx_L1_error)

	mov	r8, QWORD PTR __imp__Py_ZeroStruct
	mov	rdx, QWORD PTR __pyx_n_s_allocate_buffer
	mov	rcx, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN72@pyx_array_@6
	mov	DWORD PTR __pyx_lineno, 250		; 000000faH
	mov	DWORD PTR __pyx_clineno, 9625		; 00002599H
	jmp	SHORT $LN113@pyx_array_@6
$LN72@pyx_array_@6:

; 9626 : 
; 9627 :     /* "View.MemoryView":249
; 9628 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'))
; 9629 :  *     else:
; 9630 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
; 9631 :  *                        allocate_buffer=False)
; 9632 :  *         result.data = buf
; 9633 :  */
; 9634 :     __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 249, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_array_type
	mov	r8, rbp
	mov	rdx, r12
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	$LN70@pyx_array_@6
	mov	DWORD PTR __pyx_clineno, 9634		; 000025a2H
$LN118@pyx_array_@6:
	mov	DWORD PTR __pyx_lineno, 249		; 000000f9H
$LN113@pyx_array_@6:
	mov	rax, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$20239:

; 9661 :   __pyx_r = __pyx_v_result;
; 9662 :   goto __pyx_L0;
; 9663 : 
; 9664 :   /* "View.MemoryView":242
; 9665 :  * 
; 9666 :  * @cname("__pyx_array_new")
; 9667 :  * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
; 9668 :  *                           char *mode, char *buf):
; 9669 :  *     cdef array result
; 9670 :  */
; 9671 : 
; 9672 :   /* function exit code */
; 9673 :   __pyx_L1_error:;
; 9674 :   __Pyx_XDECREF(__pyx_t_2);

	test	r12, r12
	je	SHORT $LN43@pyx_array_@6
	add	QWORD PTR [r12], -1
	jne	SHORT $LN43@pyx_array_@6
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN43@pyx_array_@6:

; 9675 :   __Pyx_XDECREF(__pyx_t_3);

	test	rbp, rbp
	je	SHORT $LN33@pyx_array_@6
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN33@pyx_array_@6
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN33@pyx_array_@6:

; 9676 :   __Pyx_XDECREF(__pyx_t_4);

	test	rbx, rbx
	je	SHORT $LN23@pyx_array_@6
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN23@pyx_array_@6
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN23@pyx_array_@6:

; 9677 :   __Pyx_XDECREF(__pyx_t_5);

	test	rsi, rsi
	je	SHORT $LN13@pyx_array_@6
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN13@pyx_array_@6
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN13@pyx_array_@6:

; 9678 :   __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BP@JMLADEK@View?4MemoryView?4array_cwrapper?$AA@
	call	__Pyx_AddTraceback

; 9682 :   __Pyx_XGIVEREF((PyObject *)__pyx_r);
; 9683 :   __Pyx_RefNannyFinishContext();
; 9684 :   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $LN3@pyx_array_@6
$LN70@pyx_array_@6:

; 9635 :     __Pyx_GOTREF(__pyx_t_5);
; 9636 :     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN69@pyx_array_@6
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN69@pyx_array_@6:

; 9637 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN64@pyx_array_@6
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN64@pyx_array_@6:

; 9638 :     __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);

	mov	rbx, rsi

; 9639 :     __pyx_t_5 = 0;
; 9640 : 
; 9641 :     /* "View.MemoryView":251
; 9642 :  *         result = array(shape, itemsize, format, mode.decode('ASCII'),
; 9643 :  *                        allocate_buffer=False)
; 9644 :  *         result.data = buf             # <<<<<<<<<<<<<<
; 9645 :  * 
; 9646 :  *     return result
; 9647 :  */
; 9648 :     __pyx_v_result->data = __pyx_v_buf;

	mov	QWORD PTR [rsi+24], r14
$LN53@pyx_array_@6:

; 9649 :   }
; 9650 :   __pyx_L3:;
; 9651 : 
; 9652 :   /* "View.MemoryView":253
; 9653 :  *         result.data = buf
; 9654 :  * 
; 9655 :  *     return result             # <<<<<<<<<<<<<<
; 9656 :  * 
; 9657 :  * 
; 9658 :  */
; 9659 :   __Pyx_XDECREF(((PyObject *)__pyx_r));
; 9660 :   __Pyx_INCREF(((PyObject *)__pyx_v_result));

	inc	QWORD PTR [rbx]

; 9679 :   __pyx_r = 0;
; 9680 :   __pyx_L0:;
; 9681 :   __Pyx_XDECREF((PyObject *)__pyx_v_result);

	add	QWORD PTR [rbx], -1
$__pyx_L0$20324:
	jne	SHORT $LN4@pyx_array_@6
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@pyx_array_@6:

; 9682 :   __Pyx_XGIVEREF((PyObject *)__pyx_r);
; 9683 :   __Pyx_RefNannyFinishContext();
; 9684 :   return __pyx_r;

	mov	rax, rbx
$LN3@pyx_array_@6:

; 9685 : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_array_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CEEGBPPE@View?4MemoryView?4Enum?4__init__?$AA@ ; `string'
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_MemviewEnum___init__ DD imagerel __pyx_MemviewEnum___init__
	DD	imagerel __pyx_MemviewEnum___init__+393
	DD	imagerel $unwind$__pyx_MemviewEnum___init__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_MemviewEnum___init__ DD 0a1801H
	DD	0f6418H
	DD	0d5418H
	DD	0c3418H
	DD	0d0147218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0BO@CEEGBPPE@View?4MemoryView?4Enum?4__init__?$AA@
CONST	SEGMENT
??_C@_0BO@CEEGBPPE@View?4MemoryView?4Enum?4__init__?$AA@ DB 'View.MemoryV'
	DB	'iew.Enum.__init__', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_MemviewEnum___init__
_TEXT	SEGMENT
__pyx_v_self$ = 96
__pyx_args$ = 104
values$20428 = 112
__pyx_kwds$ = 112
__pyx_MemviewEnum___init__ PROC				; COMDAT

; 9697 : static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 64					; 00000040H

; 9698 :   PyObject *__pyx_v_name = 0;
; 9699 :   int __pyx_r;
; 9700 :   __Pyx_RefNannyDeclarations
; 9701 :   __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
; 9702 :   {
; 9703 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
; 9704 :     PyObject* values[1] = {0};

	xor	ebx, ebx
	mov	r12, r8
	mov	rdi, rdx
	mov	rbp, rcx
	mov	QWORD PTR values$20428[rsp], rbx

; 9705 :     if (unlikely(__pyx_kwds)) {

	test	r8, r8
	je	$LN16@pyx_Memvie@2

; 9706 :       Py_ssize_t kw_args;
; 9707 :       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	r13, QWORD PTR [rdx+16]

; 9708 :       switch (pos_args) {

	mov	rax, r13
	test	r13, r13
	je	SHORT $LN12@pyx_Memvie@2
	cmp	rax, 1
	jne	$__pyx_L5_argtuple_error$20441

; 9709 :         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR [rdx+24]
	mov	QWORD PTR values$20428[rsp], rbx
$LN12@pyx_Memvie@2:

; 9710 :         CYTHON_FALLTHROUGH;
; 9711 :         case  0: break;
; 9712 :         default: goto __pyx_L5_argtuple_error;
; 9713 :       }
; 9714 :       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	rsi, rax

; 9715 :       switch (pos_args) {

	test	r13, r13
	jne	SHORT $LN6@pyx_Memvie@2

; 9716 :         case  0:
; 9717 :         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_name
	mov	rcx, r12
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbx, rax
	mov	QWORD PTR values$20428[rsp], rax
	test	rax, rax
	je	SHORT $__pyx_L5_argtuple_error$20441
	dec	rsi
$LN6@pyx_Memvie@2:

; 9718 :         else goto __pyx_L5_argtuple_error;
; 9719 :       }
; 9720 :       if (unlikely(kw_args > 0)) {

	test	rsi, rsi
	jle	$LN1@pyx_Memvie@2

; 9721 :         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 279, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
	lea	r9, QWORD PTR values$20428[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_MemviewEnum___init__@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r12
	mov	QWORD PTR [rsp+32], r13
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN31@pyx_Memvie@2
	mov	edx, 9721				; 000025f9H
	jmp	SHORT $LN32@pyx_Memvie@2
$LN31@pyx_Memvie@2:

; 9724 :       goto __pyx_L5_argtuple_error;
; 9725 :     } else {
; 9726 :       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR values$20428[rsp]
	jmp	$LN1@pyx_Memvie@2
$LN16@pyx_Memvie@2:

; 9722 :       }
; 9723 :     } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

	cmp	QWORD PTR [rdx+16], 1
	je	SHORT $LN2@pyx_Memvie@2
$__pyx_L5_argtuple_error$20441:

; 9727 :     }
; 9728 :     __pyx_v_name = values[0];
; 9729 :   }
; 9730 :   goto __pyx_L4_argument_unpacking_done;
; 9731 :   __pyx_L5_argtuple_error:;
; 9732 :   __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 279, __pyx_L3_error)

	mov	rax, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	QWORD PTR [rsp+40], rax
	lea	r8, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 1
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 9732				; 00002604H
$LN32@pyx_Memvie@2:
	mov	r9, QWORD PTR __pyx_f+16

; 9733 :   __pyx_L3_error:;
; 9734 :   __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0BO@CEEGBPPE@View?4MemoryView?4Enum?4__init__?$AA@
	mov	r8d, 279				; 00000117H
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 279		; 00000117H
$__pyx_L3_error$20452:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 9735 :   __Pyx_RefNannyFinishContext();
; 9736 :   return -1;

	or	eax, -1
	jmp	SHORT $LN17@pyx_Memvie@2
$LN2@pyx_Memvie@2:

; 9724 :       goto __pyx_L5_argtuple_error;
; 9725 :     } else {
; 9726 :       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR [rdx+24]
$LN1@pyx_Memvie@2:

; 9737 :   __pyx_L4_argument_unpacking_done:;
; 9738 :   __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

	inc	QWORD PTR [rbx]
	mov	rax, QWORD PTR [rbp+16]
$__pyx_L4_argument_unpacking_done$20458:
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbp+16]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN27@pyx_Memvie@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN27@pyx_Memvie@2:
	mov	QWORD PTR [rbp+16], rbx

; 9739 : 
; 9740 :   /* function exit code */
; 9741 :   __Pyx_RefNannyFinishContext();
; 9742 :   return __pyx_r;

	xor	eax, eax
$LN17@pyx_Memvie@2:

; 9743 : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_MemviewEnum___init__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_MemviewEnum___repr__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_MemviewEnum___repr__ PROC				; COMDAT

; 9788 :   PyObject *__pyx_r = 0;
; 9789 :   __Pyx_RefNannyDeclarations
; 9790 :   __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
; 9791 :   __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

	mov	rax, QWORD PTR [rcx+16]
$__pyx_L0$39114:
	inc	QWORD PTR [rax]

; 9792 : 
; 9793 :   /* function exit code */
; 9794 :   __Pyx_RefNannyFinishContext();
; 9795 :   return __pyx_r;

	mov	rax, QWORD PTR [rcx+16]

; 9796 : }

	ret	0
__pyx_MemviewEnum___repr__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@EHPCOKKF@View?4MemoryView?4memoryview?4setit@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_setitem_indexed DD imagerel __pyx_memoryview_setitem_indexed
	DD	imagerel __pyx_memoryview_setitem_indexed+161
	DD	imagerel $unwind$__pyx_memoryview_setitem_indexed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_setitem_indexed DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CL@EHPCOKKF@View?4MemoryView?4memoryview?4setit@
CONST	SEGMENT
??_C@_0CL@EHPCOKKF@View?4MemoryView?4memoryview?4setit@ DB 'View.MemoryVi'
	DB	'ew.memoryview.setitem_indexed', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_setitem_indexed
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_index$ = 56
__pyx_v_value$ = 64
__pyx_memoryview_setitem_indexed PROC			; COMDAT

; 11869: static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 11870:   char *__pyx_v_itemp;
; 11871:   PyObject *__pyx_r = NULL;
; 11872:   __Pyx_RefNannyDeclarations
; 11873:   char *__pyx_t_1;
; 11874:   PyObject *__pyx_t_2 = NULL;
; 11875:   __Pyx_RefNannySetupContext("setitem_indexed", 0);
; 11876: 
; 11877:   /* "View.MemoryView":473
; 11878:  * 
; 11879:  *     cdef setitem_indexed(self, index, value):
; 11880:  *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
; 11881:  *         self.assign_item_from_object(itemp, value)
; 11882:  * 
; 11883:  */
; 11884:   __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(2, 473, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+16]
	mov	rdi, r8
	mov	rbx, rcx
	call	QWORD PTR [rax]
	mov	rdx, rax
	test	rax, rax
	jne	SHORT $LN17@pyx_memory@8
	mov	r8d, 473				; 000001d9H
	mov	edx, 11884				; 00002e6cH
	jmp	SHORT $LN20@pyx_memory@8
$LN17@pyx_memory@8:

; 11885:   __pyx_v_itemp = __pyx_t_1;
; 11886: 
; 11887:   /* "View.MemoryView":474
; 11888:  *     cdef setitem_indexed(self, index, value):
; 11889:  *         cdef char *itemp = self.get_item_pointer(index)
; 11890:  *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
; 11891:  * 
; 11892:  *     cdef convert_item_to_object(self, char *itemp):
; 11893:  */
; 11894:   __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 474, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+16]
	mov	r8, rdi
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN15@pyx_memory@8
	mov	r8d, 474				; 000001daH
	mov	edx, 11894				; 00002e76H
$__pyx_L1_error$22051:
$LN20@pyx_memory@8:
	mov	r9, QWORD PTR __pyx_f+16

; 11908:   goto __pyx_L0;
; 11909:   __pyx_L1_error:;
; 11910:   __Pyx_XDECREF(__pyx_t_2);
; 11911:   __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CL@EHPCOKKF@View?4MemoryView?4memoryview?4setit@
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	call	__Pyx_AddTraceback

; 11912:   __pyx_r = 0;
; 11913:   __pyx_L0:;
; 11914:   __Pyx_XGIVEREF(__pyx_r);
; 11915:   __Pyx_RefNannyFinishContext();
; 11916:   return __pyx_r;

	xor	eax, eax

; 11917: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN15@pyx_memory@8:

; 11895:   __Pyx_GOTREF(__pyx_t_2);
; 11896:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN14@pyx_memory@8
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$LN14@pyx_memory@8:

; 11897: 
; 11898:   /* "View.MemoryView":472
; 11899:  *             PyMem_Free(tmp)
; 11900:  * 
; 11901:  *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
; 11902:  *         cdef char *itemp = self.get_item_pointer(index)
; 11903:  *         self.assign_item_from_object(itemp, value)
; 11904:  */
; 11905: 
; 11906:   /* function exit code */
; 11907:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 11917: }

	mov	rbx, QWORD PTR [rsp+48]
$__pyx_L0$22065:
	inc	QWORD PTR [rax]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview_setitem_indexed ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@CKBHLFOG@View?4MemoryView?4memoryview?4assig@ ; `string'
PUBLIC	??_C@_0BL@PFIKIFKN@?8NoneType?8?5is?5not?5iterable?$AA@ ; `string'
PUBLIC	??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@ ; `string'
PUBLIC	??_C@_05FBJAGGIG@bytes?$AA@			; `string'
EXTRN	__imp_PyMethod_Type:BYTE
EXTRN	__imp_PySequence_Tuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_assign_item_from_object DD imagerel __pyx_memoryview_assign_item_from_object
	DD	imagerel __pyx_memoryview_assign_item_from_object+12
	DD	imagerel $unwind$__pyx_memoryview_assign_item_from_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_assign_item_from_object DD imagerel __pyx_memoryview_assign_item_from_object+12
	DD	imagerel __pyx_memoryview_assign_item_from_object+1808
	DD	imagerel $chain$6$__pyx_memoryview_assign_item_from_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memoryview_assign_item_from_object DD imagerel __pyx_memoryview_assign_item_from_object+1808
	DD	imagerel __pyx_memoryview_assign_item_from_object+1859
	DD	imagerel $chain$7$__pyx_memoryview_assign_item_from_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memoryview_assign_item_from_object DD 021H
	DD	imagerel __pyx_memoryview_assign_item_from_object
	DD	imagerel __pyx_memoryview_assign_item_from_object+12
	DD	imagerel $unwind$__pyx_memoryview_assign_item_from_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_assign_item_from_object DD 0e2821H
	DD	08f428H
	DD	09e41aH
	DD	0ad416H
	DD	0bc412H
	DD	0c740cH
	DD	0d6408H
	DD	0103404H
	DD	imagerel __pyx_memoryview_assign_item_from_object
	DD	imagerel __pyx_memoryview_assign_item_from_object+12
	DD	imagerel $unwind$__pyx_memoryview_assign_item_from_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_assign_item_from_object DD 020c01H
	DD	05008d20cH
xdata	ENDS
;	COMDAT ??_C@_0DD@CKBHLFOG@View?4MemoryView?4memoryview?4assig@
CONST	SEGMENT
??_C@_0DD@CKBHLFOG@View?4MemoryView?4memoryview?4assig@ DB 'View.MemoryVi'
	DB	'ew.memoryview.assign_item_from_object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PFIKIFKN@?8NoneType?8?5is?5not?5iterable?$AA@
CONST	SEGMENT
??_C@_0BL@PFIKIFKN@?8NoneType?8?5is?5not?5iterable?$AA@ DB '''NoneType'' '
	DB	'is not iterable', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
CONST	SEGMENT
??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@ DB 'Expect'
	DB	'ed %.16s, got %.200s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT
??_C@_05FBJAGGIG@bytes?$AA@ DB 'bytes', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_assign_item_from_object
_TEXT	SEGMENT
__pyx_v_struct$1$ = 32
__pyx_temp$22625 = 40
__pyx_v_self$ = 128
__pyx_v_itemp$ = 136
__pyx_v_value$ = 144
__pyx_v_bytesvalue$1$ = 152
__pyx_memoryview_assign_item_from_object PROC		; COMDAT

; 12198: static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {

	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	push	rbp
	sub	rsp, 112				; 00000070H
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax-16], rsi
	mov	QWORD PTR [rax-24], rdi

; 12199:   PyObject *__pyx_v_struct = NULL;

	xor	ebp, ebp
	mov	QWORD PTR [rax-32], r12
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-48], r14
	mov	r14, rcx

; 12200:   char __pyx_v_c;
; 12201:   PyObject *__pyx_v_bytesvalue = 0;
; 12202:   Py_ssize_t __pyx_v_i;
; 12203:   PyObject *__pyx_r = NULL;
; 12204:   __Pyx_RefNannyDeclarations
; 12205:   PyObject *__pyx_t_1 = NULL;
; 12206:   int __pyx_t_2;
; 12207:   int __pyx_t_3;
; 12208:   PyObject *__pyx_t_4 = NULL;
; 12209:   PyObject *__pyx_t_5 = NULL;
; 12210:   PyObject *__pyx_t_6 = NULL;
; 12211:   int __pyx_t_7;
; 12212:   PyObject *__pyx_t_8 = NULL;
; 12213:   Py_ssize_t __pyx_t_9;
; 12214:   PyObject *__pyx_t_10 = NULL;
; 12215:   char *__pyx_t_11;
; 12216:   char *__pyx_t_12;
; 12217:   char *__pyx_t_13;
; 12218:   char *__pyx_t_14;
; 12219:   __Pyx_RefNannySetupContext("assign_item_from_object", 0);
; 12220: 
; 12221:   /* "View.MemoryView":495
; 12222:  *         """Only used if instantiated manually by the user, or if Cython doesn't
; 12223:  *         know how to convert the type"""
; 12224:  *         import struct             # <<<<<<<<<<<<<<
; 12225:  *         cdef char c
; 12226:  *         cdef bytes bytesvalue
; 12227:  */
; 12228:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_struct
	mov	QWORD PTR [rax-56], r15
	mov	r15, r8
	xor	edx, edx
	xor	r8d, r8d
	mov	QWORD PTR __pyx_v_struct$1$[rsp], rbp
	mov	QWORD PTR __pyx_v_bytesvalue$1$[rsp], rbp
	mov	rbx, rbp
	mov	rsi, rbp
	mov	rdi, rbp
	mov	r13, rbp
	call	__Pyx_Import
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN162@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 495		; 000001efH
	mov	DWORD PTR __pyx_clineno, 12228		; 00002fc4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@9
$LN162@pyx_memory@9:

; 12229:   __Pyx_GOTREF(__pyx_t_1);
; 12230:   __pyx_v_struct = __pyx_t_1;

	mov	QWORD PTR __pyx_v_struct$1$[rsp], rax

; 12231:   __pyx_t_1 = 0;
; 12232: 
; 12233:   /* "View.MemoryView":500
; 12234:  *         cdef Py_ssize_t i
; 12235:  * 
; 12236:  *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
; 12237:  *             bytesvalue = struct.pack(self.view.format, *value)
; 12238:  *         else:
; 12239:  */
; 12240:   __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
; 12241:   __pyx_t_3 = (__pyx_t_2 != 0);
; 12242:   if (__pyx_t_3) {

	mov	rax, QWORD PTR [r15+8]
	bt	DWORD PTR [rax+168], 26
	jae	$LN161@pyx_memory@9

; 12243: 
; 12244:     /* "View.MemoryView":501
; 12245:  * 
; 12246:  *         if isinstance(value, tuple):
; 12247:  *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
; 12248:  *         else:
; 12249:  *             bytesvalue = struct.pack(self.view.format, value)
; 12250:  */
; 12251:     __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN168@pyx_memory@9
	mov	rdx, QWORD PTR __pyx_n_s_pack
	call	r8
	mov	r12, rax
	jmp	SHORT $LN169@pyx_memory@9
$LN168@pyx_memory@9:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN167@pyx_memory@9
	mov	rdx, QWORD PTR __pyx_n_s_pack
	add	rdx, 32					; 00000020H
	call	r8
	mov	r12, rax
	jmp	SHORT $LN169@pyx_memory@9
$LN167@pyx_memory@9:
	mov	rdx, QWORD PTR __pyx_n_s_pack
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r12, rax
$LN169@pyx_memory@9:
	test	r12, r12
	jne	SHORT $LN160@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12251		; 00002fdbH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@9
$LN160@pyx_memory@9:

; 12252:     __Pyx_GOTREF(__pyx_t_1);
; 12253:     __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	rcx, QWORD PTR [r14+112]
	call	QWORD PTR __imp_PyString_FromString
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN159@pyx_memory@9
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12253		; 00002fddH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$22540
$LN159@pyx_memory@9:

; 12254:     __Pyx_GOTREF(__pyx_t_4);
; 12255:     __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN158@pyx_memory@9
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12255		; 00002fdfH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$22540
$LN158@pyx_memory@9:

; 12256:     __Pyx_GOTREF(__pyx_t_5);
; 12257:     __Pyx_GIVEREF(__pyx_t_4);
; 12258:     PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

	mov	QWORD PTR [rax+24], rbx

; 12259:     __pyx_t_4 = 0;
; 12260:     __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	rax, QWORD PTR __imp_PyTuple_Type
	cmp	QWORD PTR [r15+8], rax
	jne	SHORT $LN165@pyx_memory@9
	inc	QWORD PTR [r15]
	mov	rbx, r15
	jmp	SHORT $LN166@pyx_memory@9
$LN165@pyx_memory@9:
	mov	rcx, r15
	call	QWORD PTR __imp_PySequence_Tuple
	mov	rbx, rax
$LN166@pyx_memory@9:
	test	rbx, rbx
	jne	SHORT $LN157@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12260		; 00002fe4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$22540
$LN157@pyx_memory@9:

; 12261:     __Pyx_GOTREF(__pyx_t_4);
; 12262:     __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	rdx, rbx
	mov	rcx, rsi
	call	QWORD PTR __imp_PyNumber_Add
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN155@pyx_memory@9
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12262		; 00002fe6H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$22540
$LN155@pyx_memory@9:

; 12263:     __Pyx_GOTREF(__pyx_t_6);
; 12264:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN154@pyx_memory@9
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN154@pyx_memory@9:

; 12265:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rbx], -1
	mov	rsi, rbp
	jne	SHORT $LN149@pyx_memory@9
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN149@pyx_memory@9:

; 12266:     __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rdi
	mov	rcx, r12
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN144@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	DWORD PTR __pyx_clineno, 12266		; 00002feaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$22540
$LN144@pyx_memory@9:

; 12267:     __Pyx_GOTREF(__pyx_t_4);
; 12268:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN143@pyx_memory@9
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN143@pyx_memory@9:

; 12269:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN138@pyx_memory@9
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN138@pyx_memory@9:

; 12270:     if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 501, __pyx_L1_error)

	mov	r9, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rdi, rbp
	cmp	r9, QWORD PTR __imp_PyString_Type
	je	SHORT $LN134@pyx_memory@9
	cmp	rbx, rax
	je	SHORT $LN134@pyx_memory@9
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	lea	r8, OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 501		; 000001f5H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 12270		; 00002feeH
	jmp	$LN73@pyx_memory@9
$LN134@pyx_memory@9:

; 12271:     __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);

	mov	QWORD PTR __pyx_v_bytesvalue$1$[rsp], rbx

; 12272:     __pyx_t_4 = 0;
; 12273: 
; 12274:     /* "View.MemoryView":500
; 12275:  *         cdef Py_ssize_t i
; 12276:  * 
; 12277:  *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
; 12278:  *             bytesvalue = struct.pack(self.view.format, *value)
; 12279:  *         else:
; 12280:  */
; 12281:     goto __pyx_L3;

	jmp	$__pyx_L3$22597
$LN161@pyx_memory@9:

; 12282:   }
; 12283: 
; 12284:   /* "View.MemoryView":503
; 12285:  *             bytesvalue = struct.pack(self.view.format, *value)
; 12286:  *         else:
; 12287:  *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
; 12288:  * 
; 12289:  *         for i, c in enumerate(bytesvalue):
; 12290:  */
; 12291:   /*else*/ {
; 12292:     __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 503, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN172@pyx_memory@9
	mov	rdx, QWORD PTR __pyx_n_s_pack
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN173@pyx_memory@9
$LN172@pyx_memory@9:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN171@pyx_memory@9
	mov	rdx, QWORD PTR __pyx_n_s_pack
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN173@pyx_memory@9
$LN171@pyx_memory@9:
	mov	rdx, QWORD PTR __pyx_n_s_pack
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN173@pyx_memory@9:
	test	rdi, rdi
	jne	SHORT $LN133@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	DWORD PTR __pyx_clineno, 12292		; 00003004H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@9
$LN133@pyx_memory@9:

; 12293:     __Pyx_GOTREF(__pyx_t_6);
; 12294:     __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 503, __pyx_L1_error)

	mov	rcx, QWORD PTR [r14+112]
	call	QWORD PTR __imp_PyString_FromString
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN132@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	DWORD PTR __pyx_clineno, 12294		; 00003006H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$22540
$LN132@pyx_memory@9:

; 12295:     __Pyx_GOTREF(__pyx_t_1);
; 12296:     __pyx_t_5 = NULL;
; 12297:     __pyx_t_7 = 0;
; 12298:     if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	r14d, ebp
	cmp	QWORD PTR [rdi+8], rax
	jne	SHORT $LN130@pyx_memory@9

; 12299:       __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

	mov	rsi, QWORD PTR [rdi+24]

; 12300:       if (likely(__pyx_t_5)) {

	test	rsi, rsi
	je	SHORT $LN130@pyx_memory@9

; 12301:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

	mov	rax, QWORD PTR [rdi+16]

; 12302:         __Pyx_INCREF(__pyx_t_5);

	inc	QWORD PTR [rsi]

; 12303:         __Pyx_INCREF(function);
; 12304:         __Pyx_DECREF_SET(__pyx_t_6, function);

	mov	rcx, rdi
	inc	QWORD PTR [rax]
	add	QWORD PTR [rcx], -1
	mov	rdi, rax
	jne	SHORT $LN125@pyx_memory@9
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN125@pyx_memory@9:

; 12305:         __pyx_t_7 = 1;

	mov	r14d, 1
$LN130@pyx_memory@9:

; 12306:       }
; 12307:     }
; 12308:     #if CYTHON_FAST_PYCALL
; 12309:     if (PyFunction_Check(__pyx_t_6)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [rdi+8], rax
	jne	$LN121@pyx_memory@9

; 12310:       PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
; 12311:       __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 503, __pyx_L1_error)

	movsxd	rax, r14d
	lea	rdx, QWORD PTR __pyx_temp$22625[rsp+8]
	lea	r8d, DWORD PTR [r14+2]
	shl	rax, 3
	xor	r9d, r9d
	mov	rcx, rdi
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$22625[rsp], rsi
	mov	QWORD PTR __pyx_temp$22625[rsp+8], r12
	mov	QWORD PTR __pyx_temp$22625[rsp+16], r15
	call	__Pyx_PyFunction_FastCallDict
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN119@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	DWORD PTR __pyx_clineno, 12311		; 00003017H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$22540
$LN119@pyx_memory@9:

; 12312:       __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

	test	rsi, rsi
	je	SHORT $LN112@pyx_memory@9
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN112@pyx_memory@9
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN112@pyx_memory@9:

; 12313:       __Pyx_GOTREF(__pyx_t_4);
; 12314:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r12], -1
	mov	rsi, rbp
	jne	$LN95@pyx_memory@9
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]

; 12315:     } else

	jmp	$LN95@pyx_memory@9
$LN121@pyx_memory@9:

; 12316:     #endif
; 12317:     #if CYTHON_FAST_PYCCALL
; 12318:     if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
; 12319:       PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
; 12320:       __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 503, __pyx_L1_error)
; 12321:       __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
; 12322:       __Pyx_GOTREF(__pyx_t_4);
; 12323:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
; 12324:     } else
; 12325:     #endif
; 12326:     {
; 12327:       __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 503, __pyx_L1_error)

	lea	eax, DWORD PTR [r14+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN103@pyx_memory@9
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	DWORD PTR __pyx_clineno, 12327		; 00003027H
	mov	QWORD PTR __pyx_filename, rcx
$__pyx_L1_error$22540:

; 12408:   goto __pyx_L0;
; 12409:   __pyx_L1_error:;
; 12410:   __Pyx_XDECREF(__pyx_t_1);

	test	r12, r12
	je	$LN73@pyx_memory@9
	add	QWORD PTR [r12], -1
	jne	$LN73@pyx_memory@9
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
	jmp	$LN73@pyx_memory@9
$LN103@pyx_memory@9:

; 12328:       __Pyx_GOTREF(__pyx_t_8);
; 12329:       if (__pyx_t_5) {

	test	rsi, rsi
	je	SHORT $LN102@pyx_memory@9

; 12330:         __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;

	mov	QWORD PTR [rax+24], rsi
	mov	rsi, rbp
$LN102@pyx_memory@9:

; 12331:       }
; 12332:       __Pyx_GIVEREF(__pyx_t_1);
; 12333:       PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);

	movsxd	rax, r14d

; 12334:       __Pyx_INCREF(__pyx_v_value);
; 12335:       __Pyx_GIVEREF(__pyx_v_value);
; 12336:       PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
; 12337:       __pyx_t_1 = 0;
; 12338:       __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 503, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, r13
	mov	QWORD PTR [r13+rax*8+24], r12
	inc	QWORD PTR [r15]
	mov	rcx, rdi
	mov	QWORD PTR [r13+rax*8+32], r15
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN100@pyx_memory@9
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	DWORD PTR __pyx_clineno, 12338		; 00003032H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN73@pyx_memory@9
$LN100@pyx_memory@9:

; 12339:       __Pyx_GOTREF(__pyx_t_4);
; 12340:       __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN99@pyx_memory@9
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN99@pyx_memory@9:
	mov	r13, rbp
$LN95@pyx_memory@9:

; 12341:     }
; 12342:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN94@pyx_memory@9
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN94@pyx_memory@9:

; 12343:     if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 503, __pyx_L1_error)

	mov	r9, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rdi, rbp
	cmp	r9, QWORD PTR __imp_PyString_Type
	je	SHORT $LN90@pyx_memory@9
	cmp	rbx, rax
	je	SHORT $LN90@pyx_memory@9
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	lea	r8, OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 503		; 000001f7H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 12343		; 00003037H
$LN73@pyx_memory@9:

; 12411:   __Pyx_XDECREF(__pyx_t_4);

	test	rbx, rbx
	je	SHORT $LN63@pyx_memory@9
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN63@pyx_memory@9
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN63@pyx_memory@9
$LN90@pyx_memory@9:

; 12344:     __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);

	mov	QWORD PTR __pyx_v_bytesvalue$1$[rsp], rbx
$__pyx_L3$22597:

; 12345:     __pyx_t_4 = 0;
; 12346:   }
; 12347:   __pyx_L3:;
; 12348: 
; 12349:   /* "View.MemoryView":505
; 12350:  *             bytesvalue = struct.pack(self.view.format, value)
; 12351:  * 
; 12352:  *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
; 12353:  *             itemp[i] = c
; 12354:  * 
; 12355:  */
; 12356:   __pyx_t_9 = 0;
; 12357:   if (unlikely(__pyx_v_bytesvalue == Py_None)) {

	cmp	rbx, rax
	jne	$LN89@pyx_memory@9

; 12358:     PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0BL@PFIKIFKN@?8NoneType?8?5is?5not?5iterable?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 12359:     __PYX_ERR(2, 505, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 505		; 000001f9H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 12359		; 00003047H
$LN63@pyx_memory@9:

; 12412:   __Pyx_XDECREF(__pyx_t_5);

	test	rsi, rsi
	je	SHORT $LN53@pyx_memory@9
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN53@pyx_memory@9
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN53@pyx_memory@9:

; 12413:   __Pyx_XDECREF(__pyx_t_6);

	test	rdi, rdi
	je	SHORT $LN43@pyx_memory@9
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN43@pyx_memory@9
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@9:

; 12414:   __Pyx_XDECREF(__pyx_t_8);

	test	r13, r13
	je	SHORT $LN23@pyx_memory@9
	add	QWORD PTR [r13], -1
	jne	SHORT $LN23@pyx_memory@9
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@9:

; 12415:   __Pyx_XDECREF(__pyx_t_10);
; 12416:   __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0DD@CKBHLFOG@View?4MemoryView?4memoryview?4assig@
	call	__Pyx_AddTraceback

; 12417:   __pyx_r = 0;

	jmp	SHORT $__pyx_L0$22707
$LN89@pyx_memory@9:

; 12360:   }
; 12361:   __Pyx_INCREF(__pyx_v_bytesvalue);
; 12362:   __pyx_t_10 = __pyx_v_bytesvalue;
; 12363:   __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
; 12364:   __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));

	mov	rax, QWORD PTR [rbx+16]
	inc	QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rbx+32]
	lea	r8, QWORD PTR [rdx+rax]

; 12365:   for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {

	cmp	rdx, r8
	jae	SHORT $LN85@pyx_memory@9
	mov	r9, QWORD PTR __pyx_v_itemp$[rsp]
	npad	6
$LL88@pyx_memory@9:

; 12366:     __pyx_t_11 = __pyx_t_14;
; 12367:     __pyx_v_c = (__pyx_t_11[0]);
; 12368: 
; 12369:     /* "View.MemoryView":506
; 12370:  * 
; 12371:  *         for i, c in enumerate(bytesvalue):
; 12372:  *             itemp[i] = c             # <<<<<<<<<<<<<<
; 12373:  * 
; 12374:  *     @cname('getbuffer')
; 12375:  */
; 12376:     __pyx_v_i = __pyx_t_9;
; 12377: 
; 12378:     /* "View.MemoryView":505
; 12379:  *             bytesvalue = struct.pack(self.view.format, value)
; 12380:  * 
; 12381:  *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
; 12382:  *             itemp[i] = c
; 12383:  * 
; 12384:  */
; 12385:     __pyx_t_9 = (__pyx_t_9 + 1);
; 12386: 
; 12387:     /* "View.MemoryView":506
; 12388:  * 
; 12389:  *         for i, c in enumerate(bytesvalue):
; 12390:  *             itemp[i] = c             # <<<<<<<<<<<<<<
; 12391:  * 
; 12392:  *     @cname('getbuffer')
; 12393:  */
; 12394:     (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;

	movzx	eax, BYTE PTR [rdx]
	mov	rcx, rbp
	inc	rdx
	inc	rbp
	mov	BYTE PTR [rcx+r9], al
	cmp	rdx, r8
	jb	SHORT $LL88@pyx_memory@9
$LN85@pyx_memory@9:

; 12395:   }
; 12396:   __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN84@pyx_memory@9
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN84@pyx_memory@9:

; 12397: 
; 12398:   /* "View.MemoryView":492
; 12399:  *             return result
; 12400:  * 
; 12401:  *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
; 12402:  *         """Only used if instantiated manually by the user, or if Cython doesn't
; 12403:  *         know how to convert the type"""
; 12404:  */
; 12405: 
; 12406:   /* function exit code */
; 12407:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rbp, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rbp]
$__pyx_L0$22707:

; 12418:   __pyx_L0:;
; 12419:   __Pyx_XDECREF(__pyx_v_struct);

	mov	rcx, QWORD PTR __pyx_v_struct$1$[rsp]
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rbx, QWORD PTR [rsp+128]
	test	rcx, rcx
	je	SHORT $LN13@pyx_memory@9
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN13@pyx_memory@9
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@9:

; 12420:   __Pyx_XDECREF(__pyx_v_bytesvalue);

	mov	rax, QWORD PTR __pyx_v_bytesvalue$1$[rsp]
	test	rax, rax
	je	SHORT $LN177@pyx_memory@9
	add	QWORD PTR [rax], -1
	jne	SHORT $LN177@pyx_memory@9
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN177@pyx_memory@9:

; 12421:   __Pyx_XGIVEREF(__pyx_r);
; 12422:   __Pyx_RefNannyFinishContext();
; 12423:   return __pyx_r;

	mov	rax, rbp

; 12424: }

	add	rsp, 112				; 00000070H
	pop	rbp
	ret	0
__pyx_memoryview_assign_item_from_object ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_getbuffer
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_info$ = 16
__pyx_v_flags$ = 24
__pyx_memoryview_getbuffer PROC				; COMDAT

; 12437:   int __pyx_r;
; 12438:   __Pyx_RefNannyDeclarations
; 12439:   __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
; 12440:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
; 12441: 
; 12442:   /* function exit code */
; 12443:   __Pyx_RefNannyFinishContext();
; 12444:   return __pyx_r;
; 12445: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__
__pyx_memoryview_getbuffer ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__ PROC ; COMDAT

; 12804:   PyObject *__pyx_r = 0;
; 12805:   __Pyx_RefNannyDeclarations
; 12806:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 12807:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

	mov	rax, QWORD PTR [rcx+24]
$__pyx_L0$39215:
	inc	QWORD PTR [rax]

; 12808: 
; 12809:   /* function exit code */
; 12810:   __Pyx_RefNannyFinishContext();
; 12811:   return __pyx_r;

	mov	rax, QWORD PTR [rcx+24]

; 12812: }

	ret	0
__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HMJMOLFE@View?4MemoryView?4memoryview?4shape@ ; `string'
EXTRN	__imp_PyList_AsTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__+385
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__ DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CJ@HMJMOLFE@View?4MemoryView?4memoryview?4shape@
CONST	SEGMENT
??_C@_0CJ@HMJMOLFE@View?4MemoryView?4memoryview?4shape@ DB 'View.MemoryVi'
	DB	'ew.memoryview.shape.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__ PROC ; COMDAT

; 12867: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 12868:   Py_ssize_t __pyx_v_length;
; 12869:   PyObject *__pyx_r = NULL;
; 12870:   __Pyx_RefNannyDeclarations
; 12871:   PyObject *__pyx_t_1 = NULL;
; 12872:   Py_ssize_t *__pyx_t_2;
; 12873:   Py_ssize_t *__pyx_t_3;
; 12874:   Py_ssize_t *__pyx_t_4;
; 12875:   PyObject *__pyx_t_5 = NULL;
; 12876:   __Pyx_RefNannySetupContext("__get__", 0);
; 12877: 
; 12878:   /* "View.MemoryView":552
; 12879:  *     @property
; 12880:  *     def shape(self):
; 12881:  *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
; 12882:  * 
; 12883:  *     @property
; 12884:  */
; 12885:   __Pyx_XDECREF(__pyx_r);
; 12886:   __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 552, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyList_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN37@pyx_pf_15V
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 552		; 00000228H
	mov	DWORD PTR __pyx_clineno, 12886		; 00003256H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_15V
$LN37@pyx_pf_15V:

; 12887:   __Pyx_GOTREF(__pyx_t_1);
; 12888:   __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

	mov	rsi, QWORD PTR [rbx+120]
	movsxd	rax, DWORD PTR [rbx+108]
	lea	rbp, QWORD PTR [rsi+rax*8]

; 12889:   for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

	cmp	rsi, rbp
	jae	SHORT $LN34@pyx_pf_15V
	npad	1
$LL36@pyx_pf_15V:

; 12890:     __pyx_t_2 = __pyx_t_4;
; 12891:     __pyx_v_length = (__pyx_t_2[0]);
; 12892:     __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 552, __pyx_L1_error)

	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	je	$LN54@pyx_pf_15V

; 12893:     __Pyx_GOTREF(__pyx_t_5);
; 12894:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 552, __pyx_L1_error)

	mov	rcx, QWORD PTR [rdi+16]
	cmp	QWORD PTR [rdi+32], rcx
	jle	SHORT $LN50@pyx_pf_15V
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+rcx*8], rbx
	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR [rdi+16], rax
	jmp	SHORT $LN57@pyx_pf_15V
$LN50@pyx_pf_15V:
	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_Append
	test	eax, eax
	jne	$LN55@pyx_pf_15V
$LN57@pyx_pf_15V:

; 12895:     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN30@pyx_pf_15V
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN30@pyx_pf_15V:
	add	rsi, 8
	cmp	rsi, rbp
	jb	SHORT $LL36@pyx_pf_15V
$LN34@pyx_pf_15V:

; 12896:   }
; 12897:   __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 552, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_AsTuple
	mov	rbx, rax
	test	rax, rax
	jne	$LN25@pyx_pf_15V
	mov	DWORD PTR __pyx_clineno, 12897		; 00003261H
$LN58@pyx_pf_15V:
	mov	rax, QWORD PTR __pyx_f+16

; 12900:   __pyx_r = __pyx_t_5;
; 12901:   __pyx_t_5 = 0;
; 12902:   goto __pyx_L0;
; 12903: 
; 12904:   /* "View.MemoryView":551
; 12905:  * 
; 12906:  *     @property
; 12907:  *     def shape(self):             # <<<<<<<<<<<<<<
; 12908:  *         return tuple([length for length in self.view.shape[:self.view.ndim]])
; 12909:  * 
; 12910:  */
; 12911: 
; 12912:   /* function exit code */
; 12913:   __pyx_L1_error:;
; 12914:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rdi], -1
	mov	DWORD PTR __pyx_lineno, 552		; 00000228H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$23059:
	jne	SHORT $LN14@pyx_pf_15V
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN14@pyx_pf_15V:

; 12915:   __Pyx_XDECREF(__pyx_t_5);

	test	rbx, rbx
	je	SHORT $LN3@pyx_pf_15V
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@pyx_pf_15V
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@pyx_pf_15V:

; 12916:   __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CJ@HMJMOLFE@View?4MemoryView?4memoryview?4shape@
	call	__Pyx_AddTraceback

; 12917:   __pyx_r = NULL;
; 12918:   __pyx_L0:;
; 12919:   __Pyx_XGIVEREF(__pyx_r);
; 12920:   __Pyx_RefNannyFinishContext();
; 12921:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$23088
$LN55@pyx_pf_15V:

; 12893:     __Pyx_GOTREF(__pyx_t_5);
; 12894:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 552, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 12894		; 0000325eH
	jmp	SHORT $LN58@pyx_pf_15V
$LN54@pyx_pf_15V:

; 12890:     __pyx_t_2 = __pyx_t_4;
; 12891:     __pyx_v_length = (__pyx_t_2[0]);
; 12892:     __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 552, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 12892		; 0000325cH
	jmp	SHORT $LN58@pyx_pf_15V
$LN25@pyx_pf_15V:

; 12898:   __Pyx_GOTREF(__pyx_t_5);
; 12899:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN24@pyx_pf_15V
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN24@pyx_pf_15V:

; 12917:   __pyx_r = NULL;
; 12918:   __pyx_L0:;
; 12919:   __Pyx_XGIVEREF(__pyx_r);
; 12920:   __Pyx_RefNannyFinishContext();
; 12921:   return __pyx_r;

	mov	rax, rbx
$__pyx_L0$23088:

; 12922: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@ELENIPB@View?4MemoryView?4memoryview?4strid@ ; `string'
_BSS	SEGMENT
__pyx_builtin_ValueError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__+537
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__ DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CL@ELENIPB@View?4MemoryView?4memoryview?4strid@
CONST	SEGMENT
??_C@_0CL@ELENIPB@View?4MemoryView?4memoryview?4strid@ DB 'View.MemoryVie'
	DB	'w.memoryview.strides.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__ PROC ; COMDAT

; 12945: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 12946:   Py_ssize_t __pyx_v_stride;
; 12947:   PyObject *__pyx_r = NULL;
; 12948:   __Pyx_RefNannyDeclarations
; 12949:   int __pyx_t_1;
; 12950:   PyObject *__pyx_t_2 = NULL;
; 12951:   Py_ssize_t *__pyx_t_3;
; 12952:   Py_ssize_t *__pyx_t_4;
; 12953:   Py_ssize_t *__pyx_t_5;
; 12954:   PyObject *__pyx_t_6 = NULL;

	xor	ebx, ebx
	mov	rbp, rcx

; 12955:   __Pyx_RefNannySetupContext("__get__", 0);
; 12956: 
; 12957:   /* "View.MemoryView":556
; 12958:  *     @property
; 12959:  *     def strides(self):
; 12960:  *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
; 12961:  * 
; 12962:  *             raise ValueError("Buffer view does not expose strides")
; 12963:  */
; 12964:   __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);

	cmp	QWORD PTR [rcx+128], rbx

; 12965:   if (__pyx_t_1) {

	jne	$LN40@pyx_pf_15V@2

; 12966: 
; 12967:     /* "View.MemoryView":558
; 12968:  *         if self.view.strides == NULL:
; 12969:  * 
; 12970:  *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
; 12971:  * 
; 12972:  *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
; 12973:  */
; 12974:     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 558, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__21
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN53@pyx_pf_15V@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 558		; 0000022eH
	mov	DWORD PTR __pyx_clineno, 12974		; 000032aeH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_15V@2
$LN53@pyx_pf_15V@2:

; 12975:     __Pyx_GOTREF(__pyx_t_2);
; 12976:     __Pyx_Raise(__pyx_t_2, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 12977:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN51@pyx_pf_15V@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN51@pyx_pf_15V@2:

; 12978:     __PYX_ERR(2, 558, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 558		; 0000022eH
	mov	DWORD PTR __pyx_clineno, 12978		; 000032b2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_15V@2
$LN40@pyx_pf_15V@2:

; 12979: 
; 12980:     /* "View.MemoryView":556
; 12981:  *     @property
; 12982:  *     def strides(self):
; 12983:  *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
; 12984:  * 
; 12985:  *             raise ValueError("Buffer view does not expose strides")
; 12986:  */
; 12987:   }
; 12988: 
; 12989:   /* "View.MemoryView":560
; 12990:  *             raise ValueError("Buffer view does not expose strides")
; 12991:  * 
; 12992:  *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
; 12993:  * 
; 12994:  *     @property
; 12995:  */
; 12996:   __Pyx_XDECREF(__pyx_r);
; 12997:   __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 560, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyList_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN37@pyx_pf_15V@2
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 12997		; 000032c5H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN65@pyx_pf_15V@2
$LN37@pyx_pf_15V@2:

; 12998:   __Pyx_GOTREF(__pyx_t_2);
; 12999:   __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);

	mov	rsi, QWORD PTR [rbp+128]
	movsxd	rax, DWORD PTR [rbp+108]
	lea	rbp, QWORD PTR [rsi+rax*8]

; 13000:   for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {

	cmp	rsi, rbp
	jae	SHORT $LN34@pyx_pf_15V@2
$LL36@pyx_pf_15V@2:

; 13001:     __pyx_t_3 = __pyx_t_5;
; 13002:     __pyx_v_stride = (__pyx_t_3[0]);
; 13003:     __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 560, __pyx_L1_error)

	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	je	$LN61@pyx_pf_15V@2

; 13004:     __Pyx_GOTREF(__pyx_t_6);
; 13005:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 560, __pyx_L1_error)

	mov	rcx, QWORD PTR [rdi+16]
	cmp	QWORD PTR [rdi+32], rcx
	jle	SHORT $LN57@pyx_pf_15V@2
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+rcx*8], rbx
	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR [rdi+16], rax
	jmp	SHORT $LN64@pyx_pf_15V@2
$LN57@pyx_pf_15V@2:
	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_Append
	test	eax, eax
	jne	$LN62@pyx_pf_15V@2
$LN64@pyx_pf_15V@2:

; 13006:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN30@pyx_pf_15V@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN30@pyx_pf_15V@2:
	add	rsi, 8
	cmp	rsi, rbp
	jb	SHORT $LL36@pyx_pf_15V@2
$LN34@pyx_pf_15V@2:

; 13007:   }
; 13008:   __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 560, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_AsTuple
	mov	rbx, rax
	test	rax, rax
	jne	$LN25@pyx_pf_15V@2
	mov	DWORD PTR __pyx_clineno, 13008		; 000032d0H
$LN66@pyx_pf_15V@2:
	mov	rax, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rax
$LN65@pyx_pf_15V@2:
	mov	DWORD PTR __pyx_lineno, 560		; 00000230H
$__pyx_L1_error$23149:

; 13011:   __pyx_r = __pyx_t_6;
; 13012:   __pyx_t_6 = 0;
; 13013:   goto __pyx_L0;
; 13014: 
; 13015:   /* "View.MemoryView":555
; 13016:  * 
; 13017:  *     @property
; 13018:  *     def strides(self):             # <<<<<<<<<<<<<<
; 13019:  *         if self.view.strides == NULL:
; 13020:  * 
; 13021:  */
; 13022: 
; 13023:   /* function exit code */
; 13024:   __pyx_L1_error:;
; 13025:   __Pyx_XDECREF(__pyx_t_2);

	test	rdi, rdi
	je	SHORT $LN13@pyx_pf_15V@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN13@pyx_pf_15V@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN13@pyx_pf_15V@2:

; 13026:   __Pyx_XDECREF(__pyx_t_6);

	test	rbx, rbx
	je	SHORT $LN3@pyx_pf_15V@2
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@pyx_pf_15V@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN3@pyx_pf_15V@2:

; 13027:   __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CL@ELENIPB@View?4MemoryView?4memoryview?4strid@
	call	__Pyx_AddTraceback

; 13028:   __pyx_r = NULL;
; 13029:   __pyx_L0:;
; 13030:   __Pyx_XGIVEREF(__pyx_r);
; 13031:   __Pyx_RefNannyFinishContext();
; 13032:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$23205
$LN62@pyx_pf_15V@2:

; 13004:     __Pyx_GOTREF(__pyx_t_6);
; 13005:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 560, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 13005		; 000032cdH
	jmp	SHORT $LN66@pyx_pf_15V@2
$LN61@pyx_pf_15V@2:

; 13001:     __pyx_t_3 = __pyx_t_5;
; 13002:     __pyx_v_stride = (__pyx_t_3[0]);
; 13003:     __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 560, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 13003		; 000032cbH
	jmp	SHORT $LN66@pyx_pf_15V@2
$LN25@pyx_pf_15V@2:

; 13009:   __Pyx_GOTREF(__pyx_t_6);
; 13010:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN24@pyx_pf_15V@2
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN24@pyx_pf_15V@2:

; 13028:   __pyx_r = NULL;
; 13029:   __pyx_L0:;
; 13030:   __Pyx_XGIVEREF(__pyx_r);
; 13031:   __Pyx_RefNannyFinishContext();
; 13032:   return __pyx_r;

	mov	rax, rbx
$__pyx_L0$23205:

; 13033: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@OJBDKGNF@View?4MemoryView?4memoryview?4subof@ ; `string'
EXTRN	__imp_PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__+522
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__ DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CO@OJBDKGNF@View?4MemoryView?4memoryview?4subof@
CONST	SEGMENT
??_C@_0CO@OJBDKGNF@View?4MemoryView?4memoryview?4subof@ DB 'View.MemoryVi'
	DB	'ew.memoryview.suboffsets.__get__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__
_TEXT	SEGMENT
$T39304 = 48
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__ PROC ; COMDAT

; 13056: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 13057:   Py_ssize_t __pyx_v_suboffset;
; 13058:   PyObject *__pyx_r = NULL;
; 13059:   __Pyx_RefNannyDeclarations
; 13060:   int __pyx_t_1;
; 13061:   PyObject *__pyx_t_2 = NULL;
; 13062:   PyObject *__pyx_t_3 = NULL;

	xor	edi, edi
	mov	rbx, rcx

; 13063:   Py_ssize_t *__pyx_t_4;
; 13064:   Py_ssize_t *__pyx_t_5;
; 13065:   Py_ssize_t *__pyx_t_6;
; 13066:   __Pyx_RefNannySetupContext("__get__", 0);
; 13067: 
; 13068:   /* "View.MemoryView":564
; 13069:  *     @property
; 13070:  *     def suboffsets(self):
; 13071:  *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
; 13072:  *             return (-1,) * self.view.ndim
; 13073:  * 
; 13074:  */
; 13075:   __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);

	cmp	QWORD PTR [rcx+136], rdi

; 13076:   if (__pyx_t_1) {

	jne	SHORT $LN40@pyx_pf_15V@3

; 13077: 
; 13078:     /* "View.MemoryView":565
; 13079:  *     def suboffsets(self):
; 13080:  *         if self.view.suboffsets == NULL:
; 13081:  *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
; 13082:  * 
; 13083:  *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
; 13084:  */
; 13085:     __Pyx_XDECREF(__pyx_r);
; 13086:     __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 565, __pyx_L1_error)

	mov	ecx, DWORD PTR [rcx+108]
	mov	DWORD PTR $T39304[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN54@pyx_pf_15V@3
	mov	DWORD PTR __pyx_lineno, 565		; 00000235H
	mov	DWORD PTR __pyx_clineno, 13086		; 0000331eH
	jmp	$LN88@pyx_pf_15V@3
$LN54@pyx_pf_15V@3:

; 13087:     __Pyx_GOTREF(__pyx_t_2);
; 13088:     __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__22, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 565, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_tuple__22
	mov	rdx, rax
	call	QWORD PTR __imp_PyNumber_Multiply
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN52@pyx_pf_15V@3
	mov	DWORD PTR __pyx_lineno, 565		; 00000235H
	mov	DWORD PTR __pyx_clineno, 13088		; 00003320H
	jmp	$LN88@pyx_pf_15V@3
$LN52@pyx_pf_15V@3:

; 13089:     __Pyx_GOTREF(__pyx_t_3);
; 13090:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN51@pyx_pf_15V@3
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN51@pyx_pf_15V@3:

; 13143:   __pyx_r = NULL;
; 13144:   __pyx_L0:;
; 13145:   __Pyx_XGIVEREF(__pyx_r);
; 13146:   __Pyx_RefNannyFinishContext();
; 13147:   return __pyx_r;

	mov	rax, rdi

; 13091:     __pyx_r = __pyx_t_3;
; 13092:     __pyx_t_3 = 0;
; 13093:     goto __pyx_L0;

	jmp	$__pyx_L0$23293
$LN40@pyx_pf_15V@3:

; 13094: 
; 13095:     /* "View.MemoryView":564
; 13096:  *     @property
; 13097:  *     def suboffsets(self):
; 13098:  *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
; 13099:  *             return (-1,) * self.view.ndim
; 13100:  * 
; 13101:  */
; 13102:   }
; 13103: 
; 13104:   /* "View.MemoryView":567
; 13105:  *             return (-1,) * self.view.ndim
; 13106:  * 
; 13107:  *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
; 13108:  * 
; 13109:  *     @property
; 13110:  */
; 13111:   __Pyx_XDECREF(__pyx_r);
; 13112:   __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 567, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyList_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN37@pyx_pf_15V@3
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 567		; 00000237H
	mov	DWORD PTR __pyx_clineno, 13112		; 00003338H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_pf_15V@3
$LN37@pyx_pf_15V@3:

; 13113:   __Pyx_GOTREF(__pyx_t_3);
; 13114:   __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);

	mov	rsi, QWORD PTR [rbx+136]
	movsxd	rax, DWORD PTR [rbx+108]
	lea	rbp, QWORD PTR [rsi+rax*8]

; 13115:   for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {

	cmp	rsi, rbp
	jae	SHORT $LN34@pyx_pf_15V@3
$LL36@pyx_pf_15V@3:

; 13116:     __pyx_t_4 = __pyx_t_6;
; 13117:     __pyx_v_suboffset = (__pyx_t_4[0]);
; 13118:     __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 567, __pyx_L1_error)

	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	je	$LN84@pyx_pf_15V@3

; 13119:     __Pyx_GOTREF(__pyx_t_2);
; 13120:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 567, __pyx_L1_error)

	mov	rcx, QWORD PTR [rdi+16]
	cmp	QWORD PTR [rdi+32], rcx
	jle	SHORT $LN80@pyx_pf_15V@3
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+rcx*8], rbx
	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR [rdi+16], rax
	jmp	SHORT $LN87@pyx_pf_15V@3
$LN80@pyx_pf_15V@3:
	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_Append
	test	eax, eax
	jne	$LN85@pyx_pf_15V@3
$LN87@pyx_pf_15V@3:

; 13121:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN30@pyx_pf_15V@3
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN30@pyx_pf_15V@3:
	add	rsi, 8
	cmp	rsi, rbp
	jb	SHORT $LL36@pyx_pf_15V@3
$LN34@pyx_pf_15V@3:

; 13122:   }
; 13123:   __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 567, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyList_AsTuple
	mov	rbx, rax
	test	rax, rax
	jne	$LN25@pyx_pf_15V@3
	mov	DWORD PTR __pyx_clineno, 13123		; 00003343H
$LN89@pyx_pf_15V@3:
	mov	DWORD PTR __pyx_lineno, 567		; 00000237H
$LN88@pyx_pf_15V@3:
	mov	rax, QWORD PTR __pyx_f+16
$__pyx_L1_error$23281:
	mov	QWORD PTR __pyx_filename, rax

; 13126:   __pyx_r = __pyx_t_2;
; 13127:   __pyx_t_2 = 0;
; 13128:   goto __pyx_L0;
; 13129: 
; 13130:   /* "View.MemoryView":563
; 13131:  * 
; 13132:  *     @property
; 13133:  *     def suboffsets(self):             # <<<<<<<<<<<<<<
; 13134:  *         if self.view.suboffsets == NULL:
; 13135:  *             return (-1,) * self.view.ndim
; 13136:  */
; 13137: 
; 13138:   /* function exit code */
; 13139:   __pyx_L1_error:;
; 13140:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN13@pyx_pf_15V@3
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_pf_15V@3
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@pyx_pf_15V@3:

; 13141:   __Pyx_XDECREF(__pyx_t_3);

	test	rdi, rdi
	je	SHORT $LN3@pyx_pf_15V@3
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@pyx_pf_15V@3
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN3@pyx_pf_15V@3:

; 13142:   __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CO@OJBDKGNF@View?4MemoryView?4memoryview?4subof@
	call	__Pyx_AddTraceback

; 13143:   __pyx_r = NULL;
; 13144:   __pyx_L0:;
; 13145:   __Pyx_XGIVEREF(__pyx_r);
; 13146:   __Pyx_RefNannyFinishContext();
; 13147:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$23293
$LN85@pyx_pf_15V@3:

; 13119:     __Pyx_GOTREF(__pyx_t_2);
; 13120:     if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 567, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 13120		; 00003340H
	jmp	SHORT $LN89@pyx_pf_15V@3
$LN84@pyx_pf_15V@3:

; 13116:     __pyx_t_4 = __pyx_t_6;
; 13117:     __pyx_v_suboffset = (__pyx_t_4[0]);
; 13118:     __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 567, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 13118		; 0000333eH
	jmp	SHORT $LN89@pyx_pf_15V@3
$LN25@pyx_pf_15V@3:

; 13124:   __Pyx_GOTREF(__pyx_t_2);
; 13125:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN24@pyx_pf_15V@3
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN24@pyx_pf_15V@3:

; 13143:   __pyx_r = NULL;
; 13144:   __pyx_L0:;
; 13145:   __Pyx_XGIVEREF(__pyx_r);
; 13146:   __Pyx_RefNannyFinishContext();
; 13147:   return __pyx_r;

	mov	rax, rbx
$__pyx_L0$23293:

; 13148: }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__+86
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@
CONST	SEGMENT
??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@ DB 'View.MemoryV'
	DB	'iew.memoryview.ndim.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__
_TEXT	SEGMENT
$T39358 = 48
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__ PROC ; COMDAT

; 13171: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 13172:   PyObject *__pyx_r = NULL;
; 13173:   __Pyx_RefNannyDeclarations
; 13174:   PyObject *__pyx_t_1 = NULL;
; 13175:   __Pyx_RefNannySetupContext("__get__", 0);
; 13176: 
; 13177:   /* "View.MemoryView":571
; 13178:  *     @property
; 13179:  *     def ndim(self):
; 13180:  *         return self.view.ndim             # <<<<<<<<<<<<<<
; 13181:  * 
; 13182:  *     @property
; 13183:  */
; 13184:   __Pyx_XDECREF(__pyx_r);
; 13185:   __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 571, __pyx_L1_error)

	mov	ecx, DWORD PTR [rcx+108]
	mov	DWORD PTR $T39358[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	test	rax, rax
	jne	SHORT $__pyx_L0$23406
	mov	r9, QWORD PTR __pyx_f+16

; 13186:   __Pyx_GOTREF(__pyx_t_1);
; 13187:   __pyx_r = __pyx_t_1;
; 13188:   __pyx_t_1 = 0;
; 13189:   goto __pyx_L0;
; 13190: 
; 13191:   /* "View.MemoryView":570
; 13192:  * 
; 13193:  *     @property
; 13194:  *     def ndim(self):             # <<<<<<<<<<<<<<
; 13195:  *         return self.view.ndim
; 13196:  * 
; 13197:  */
; 13198: 
; 13199:   /* function exit code */
; 13200:   __pyx_L1_error:;
; 13201:   __Pyx_XDECREF(__pyx_t_1);
; 13202:   __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@
	mov	edx, 13185				; 00003381H
	mov	r8d, 571				; 0000023bH
	mov	DWORD PTR __pyx_lineno, 571		; 0000023bH
	mov	DWORD PTR __pyx_clineno, 13185		; 00003381H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$23405:
	call	__Pyx_AddTraceback

; 13203:   __pyx_r = NULL;
; 13204:   __pyx_L0:;
; 13205:   __Pyx_XGIVEREF(__pyx_r);
; 13206:   __Pyx_RefNannyFinishContext();
; 13207:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$23406:

; 13208: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__+83
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@
CONST	SEGMENT
??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@ DB 'View.MemoryVi'
	DB	'ew.memoryview.itemsize.__get__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__ PROC ; COMDAT

; 13231: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 13232:   PyObject *__pyx_r = NULL;
; 13233:   __Pyx_RefNannyDeclarations
; 13234:   PyObject *__pyx_t_1 = NULL;
; 13235:   __Pyx_RefNannySetupContext("__get__", 0);
; 13236: 
; 13237:   /* "View.MemoryView":575
; 13238:  *     @property
; 13239:  *     def itemsize(self):
; 13240:  *         return self.view.itemsize             # <<<<<<<<<<<<<<
; 13241:  * 
; 13242:  *     @property
; 13243:  */
; 13244:   __Pyx_XDECREF(__pyx_r);
; 13245:   __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 575, __pyx_L1_error)

	mov	rcx, QWORD PTR [rcx+96]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	test	rax, rax
	jne	SHORT $__pyx_L0$23458
	mov	r9, QWORD PTR __pyx_f+16

; 13246:   __Pyx_GOTREF(__pyx_t_1);
; 13247:   __pyx_r = __pyx_t_1;
; 13248:   __pyx_t_1 = 0;
; 13249:   goto __pyx_L0;
; 13250: 
; 13251:   /* "View.MemoryView":574
; 13252:  * 
; 13253:  *     @property
; 13254:  *     def itemsize(self):             # <<<<<<<<<<<<<<
; 13255:  *         return self.view.itemsize
; 13256:  * 
; 13257:  */
; 13258: 
; 13259:   /* function exit code */
; 13260:   __pyx_L1_error:;
; 13261:   __Pyx_XDECREF(__pyx_t_1);
; 13262:   __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@
	mov	edx, 13245				; 000033bdH
	mov	r8d, 575				; 0000023fH
	mov	DWORD PTR __pyx_lineno, 575		; 0000023fH
	mov	DWORD PTR __pyx_clineno, 13245		; 000033bdH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$23457:
	call	__Pyx_AddTraceback

; 13263:   __pyx_r = NULL;
; 13264:   __pyx_L0:;
; 13265:   __Pyx_XGIVEREF(__pyx_r);
; 13266:   __Pyx_RefNannyFinishContext();
; 13267:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$23458:

; 13268: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@IBMFDHNA@View?4MemoryView?4memoryview?4nbyte@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+88
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+88
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+377
	DD	imagerel $chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+377
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+383
	DD	imagerel $chain$1$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD 021H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+88
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD 020521H
	DD	066405H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__+88
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0CK@IBMFDHNA@View?4MemoryView?4memoryview?4nbyte@
CONST	SEGMENT
??_C@_0CK@IBMFDHNA@View?4MemoryView?4memoryview?4nbyte@ DB 'View.MemoryVi'
	DB	'ew.memoryview.nbytes.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ PROC ; COMDAT

; 13291: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 13292:   PyObject *__pyx_r = NULL;
; 13293:   __Pyx_RefNannyDeclarations
; 13294:   PyObject *__pyx_t_1 = NULL;
; 13295:   PyObject *__pyx_t_2 = NULL;
; 13296:   PyObject *__pyx_t_3 = NULL;
; 13297:   __Pyx_RefNannySetupContext("__get__", 0);
; 13298: 
; 13299:   /* "View.MemoryView":579
; 13300:  *     @property
; 13301:  *     def nbytes(self):
; 13302:  *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
; 13303:  * 
; 13304:  *     @property
; 13305:  */
; 13306:   __Pyx_XDECREF(__pyx_r);
; 13307:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 579, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN57@pyx_pf_15V@4
	mov	rdx, QWORD PTR __pyx_n_s_size
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN58@pyx_pf_15V@4
$LN57@pyx_pf_15V@4:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN56@pyx_pf_15V@4
	mov	rdx, QWORD PTR __pyx_n_s_size
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN58@pyx_pf_15V@4
$LN56@pyx_pf_15V@4:
	mov	rdx, QWORD PTR __pyx_n_s_size
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN58@pyx_pf_15V@4:
	mov	QWORD PTR [rsp+48], rsi
	test	rdi, rdi
	jne	SHORT $LN43@pyx_pf_15V@4
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 579		; 00000243H
	mov	DWORD PTR __pyx_clineno, 13307		; 000033fbH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_15V@4
$LN43@pyx_pf_15V@4:

; 13308:   __Pyx_GOTREF(__pyx_t_1);
; 13309:   __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 579, __pyx_L1_error)

	mov	rcx, QWORD PTR [rbx+96]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN42@pyx_pf_15V@4
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 579		; 00000243H
	mov	DWORD PTR __pyx_clineno, 13309		; 000033fdH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	SHORT $__pyx_L1_error$23514
$LN42@pyx_pf_15V@4:

; 13310:   __Pyx_GOTREF(__pyx_t_2);
; 13311:   __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 579, __pyx_L1_error)

	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyNumber_Multiply
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN40@pyx_pf_15V@4
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 579		; 00000243H
	mov	DWORD PTR __pyx_clineno, 13311		; 000033ffH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$23514:

; 13315:   __pyx_r = __pyx_t_3;
; 13316:   __pyx_t_3 = 0;
; 13317:   goto __pyx_L0;
; 13318: 
; 13319:   /* "View.MemoryView":578
; 13320:  * 
; 13321:  *     @property
; 13322:  *     def nbytes(self):             # <<<<<<<<<<<<<<
; 13323:  *         return self.size * self.view.itemsize
; 13324:  * 
; 13325:  */
; 13326: 
; 13327:   /* function exit code */
; 13328:   __pyx_L1_error:;
; 13329:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN24@pyx_pf_15V@4
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN24@pyx_pf_15V@4:

; 13330:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN3@pyx_pf_15V@4
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@pyx_pf_15V@4
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@pyx_pf_15V@4:

; 13331:   __Pyx_XDECREF(__pyx_t_3);
; 13332:   __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CK@IBMFDHNA@View?4MemoryView?4memoryview?4nbyte@
	call	__Pyx_AddTraceback

; 13333:   __pyx_r = NULL;
; 13334:   __pyx_L0:;
; 13335:   __Pyx_XGIVEREF(__pyx_r);
; 13336:   __Pyx_RefNannyFinishContext();
; 13337:   return __pyx_r;

	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+48]

; 13338: }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN40@pyx_pf_15V@4:

; 13312:   __Pyx_GOTREF(__pyx_t_3);
; 13313:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN39@pyx_pf_15V@4
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN39@pyx_pf_15V@4:

; 13314:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN34@pyx_pf_15V@4
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN34@pyx_pf_15V@4:

; 13338: }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+48]
$__pyx_L0$23537:
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@BOEMKJGI@View?4MemoryView?4memoryview?4size?4@ ; `string'
EXTRN	__imp_PyNumber_InPlaceMultiply:PROC
_BSS	SEGMENT
__pyx_int_1 DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+23
	DD	imagerel $chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+23
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+261
	DD	imagerel $chain$4$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+261
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+287
	DD	imagerel $chain$5$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+287
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+315
	DD	imagerel $chain$6$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+315
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+425
	DD	imagerel $chain$7$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 0a0021H
	DD	04e400H
	DD	0bc400H
	DD	0a7400H
	DD	096400H
	DD	083400H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 021H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 021H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+23
	DD	imagerel $chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 081421H
	DD	04e414H
	DD	0bc40fH
	DD	0a740aH
	DD	096405H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+23
	DD	imagerel $chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 020521H
	DD	083405H
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__+15
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ DD 030801H
	DD	0d0044208H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0CI@BOEMKJGI@View?4MemoryView?4memoryview?4size?4@
CONST	SEGMENT
??_C@_0CI@BOEMKJGI@View?4MemoryView?4memoryview?4size?4@ DB 'View.MemoryV'
	DB	'iew.memoryview.size.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
_TEXT	SEGMENT
__pyx_v_self$ = 64
__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ PROC ; COMDAT

; 13361: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rbp
	push	r13
	sub	rsp, 40					; 00000028H

; 13362:   PyObject *__pyx_v_result = NULL;
; 13363:   PyObject *__pyx_v_length = NULL;
; 13364:   PyObject *__pyx_r = NULL;
; 13365:   __Pyx_RefNannyDeclarations
; 13366:   int __pyx_t_1;
; 13367:   int __pyx_t_2;
; 13368:   Py_ssize_t *__pyx_t_3;
; 13369:   Py_ssize_t *__pyx_t_4;
; 13370:   Py_ssize_t *__pyx_t_5;
; 13371:   PyObject *__pyx_t_6 = NULL;
; 13372:   __Pyx_RefNannySetupContext("__get__", 0);
; 13373: 
; 13374:   /* "View.MemoryView":583
; 13375:  *     @property
; 13376:  *     def size(self):
; 13377:  *         if self._size is None:             # <<<<<<<<<<<<<<
; 13378:  *             result = 1
; 13379:  * 
; 13380:  */
; 13381:   __pyx_t_1 = (__pyx_v_self->_size == Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rsp+64], rbx
	xor	r13d, r13d
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r12
	mov	QWORD PTR [rsp+32], r14
	mov	r12, rcx
	mov	rbx, r13
	mov	rbp, r13
	cmp	QWORD PTR [rcx+32], rax

; 13382:   __pyx_t_2 = (__pyx_t_1 != 0);
; 13383:   if (__pyx_t_2) {

	jne	$LN33@pyx_pf_15V@5

; 13384: 
; 13385:     /* "View.MemoryView":584
; 13386:  *     def size(self):
; 13387:  *         if self._size is None:
; 13388:  *             result = 1             # <<<<<<<<<<<<<<
; 13389:  * 
; 13390:  *             for length in self.view.shape[:self.view.ndim]:
; 13391:  */
; 13392:     __Pyx_INCREF(__pyx_int_1);

	mov	rbx, QWORD PTR __pyx_int_1
	inc	QWORD PTR [rbx]

; 13393:     __pyx_v_result = __pyx_int_1;
; 13394: 
; 13395:     /* "View.MemoryView":586
; 13396:  *             result = 1
; 13397:  * 
; 13398:  *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
; 13399:  *                 result *= length
; 13400:  * 
; 13401:  */
; 13402:     __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

	mov	rdi, QWORD PTR [rcx+120]
	movsxd	rax, DWORD PTR [rcx+108]
	lea	r14, QWORD PTR [rdi+rax*8]

; 13403:     for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {

	cmp	rdi, r14
	jae	SHORT $LN69@pyx_pf_15V@5
	npad	7
$LL71@pyx_pf_15V@5:

; 13404:       __pyx_t_3 = __pyx_t_5;
; 13405:       __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 586, __pyx_L1_error)

	mov	rcx, QWORD PTR [rdi]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rsi, rax
	test	rax, rax
	je	$LN76@pyx_pf_15V@5

; 13406:       __Pyx_GOTREF(__pyx_t_6);
; 13407:       __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);

	mov	rcx, rbp
	mov	rbp, rax
	test	rcx, rcx
	je	SHORT $LN57@pyx_pf_15V@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN57@pyx_pf_15V@5
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN57@pyx_pf_15V@5:

; 13408:       __pyx_t_6 = 0;
; 13409: 
; 13410:       /* "View.MemoryView":587
; 13411:  * 
; 13412:  *             for length in self.view.shape[:self.view.ndim]:
; 13413:  *                 result *= length             # <<<<<<<<<<<<<<
; 13414:  * 
; 13415:  *             self._size = result
; 13416:  */
; 13417:       __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 587, __pyx_L1_error)

	mov	rdx, rsi
	mov	rcx, rbx
	call	QWORD PTR __imp_PyNumber_InPlaceMultiply
	test	rax, rax
	je	$LN77@pyx_pf_15V@5

; 13418:       __Pyx_GOTREF(__pyx_t_6);
; 13419:       __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);

	mov	rcx, rbx
	mov	rbx, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN49@pyx_pf_15V@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN49@pyx_pf_15V@5:
	add	rdi, 8
	cmp	rdi, r14
	jb	SHORT $LL71@pyx_pf_15V@5
$LN69@pyx_pf_15V@5:

; 13420:       __pyx_t_6 = 0;
; 13421:     }
; 13422: 
; 13423:     /* "View.MemoryView":589
; 13424:  *                 result *= length
; 13425:  * 
; 13426:  *             self._size = result             # <<<<<<<<<<<<<<
; 13427:  * 
; 13428:  *         return self._size
; 13429:  */
; 13430:     __Pyx_INCREF(__pyx_v_result);

	inc	QWORD PTR [rbx]

; 13431:     __Pyx_GIVEREF(__pyx_v_result);
; 13432:     __Pyx_GOTREF(__pyx_v_self->_size);
; 13433:     __Pyx_DECREF(__pyx_v_self->_size);

	mov	rax, QWORD PTR [r12+32]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r12+32]
	cmp	QWORD PTR [rcx], r13
	jne	SHORT $LN44@pyx_pf_15V@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN44@pyx_pf_15V@5:

; 13434:     __pyx_v_self->_size = __pyx_v_result;

	mov	QWORD PTR [r12+32], rbx
$LN33@pyx_pf_15V@5:

; 13435: 
; 13436:     /* "View.MemoryView":583
; 13437:  *     @property
; 13438:  *     def size(self):
; 13439:  *         if self._size is None:             # <<<<<<<<<<<<<<
; 13440:  *             result = 1
; 13441:  * 
; 13442:  */
; 13443:   }
; 13444: 
; 13445:   /* "View.MemoryView":591
; 13446:  *             self._size = result
; 13447:  * 
; 13448:  *         return self._size             # <<<<<<<<<<<<<<
; 13449:  * 
; 13450:  *     def __len__(self):
; 13451:  */
; 13452:   __Pyx_XDECREF(__pyx_r);
; 13453:   __Pyx_INCREF(__pyx_v_self->_size);

	mov	rax, QWORD PTR [r12+32]
	inc	QWORD PTR [rax]

; 13454:   __pyx_r = __pyx_v_self->_size;

	mov	r13, QWORD PTR [r12+32]
$__pyx_L0$23684:
	mov	r14, QWORD PTR [rsp+32]
	mov	r12, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+72]

; 13470:   __pyx_L0:;
; 13471:   __Pyx_XDECREF(__pyx_v_result);

	test	rbx, rbx
	je	SHORT $LN13@pyx_pf_15V@5
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_pf_15V@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@pyx_pf_15V@5:
	mov	rbx, QWORD PTR [rsp+64]

; 13472:   __Pyx_XDECREF(__pyx_v_length);

	test	rbp, rbp
	je	SHORT $LN79@pyx_pf_15V@5
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN79@pyx_pf_15V@5
	mov	rdx, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rdx+48]
$LN79@pyx_pf_15V@5:

; 13473:   __Pyx_XGIVEREF(__pyx_r);
; 13474:   __Pyx_RefNannyFinishContext();
; 13475:   return __pyx_r;

	mov	rax, r13

; 13476: }

	add	rsp, 40					; 00000028H
	pop	r13
	pop	rbp
	ret	0
$LN77@pyx_pf_15V@5:

; 13408:       __pyx_t_6 = 0;
; 13409: 
; 13410:       /* "View.MemoryView":587
; 13411:  * 
; 13412:  *             for length in self.view.shape[:self.view.ndim]:
; 13413:  *                 result *= length             # <<<<<<<<<<<<<<
; 13414:  * 
; 13415:  *             self._size = result
; 13416:  */
; 13417:       __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 587, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 587				; 0000024bH
	mov	edx, 13417				; 00003469H

; 13455:   goto __pyx_L0;
; 13456: 
; 13457:   /* "View.MemoryView":582
; 13458:  * 
; 13459:  *     @property
; 13460:  *     def size(self):             # <<<<<<<<<<<<<<
; 13461:  *         if self._size is None:
; 13462:  *             result = 1
; 13463:  */
; 13464: 
; 13465:   /* function exit code */
; 13466:   __pyx_L1_error:;
; 13467:   __Pyx_XDECREF(__pyx_t_6);
; 13468:   __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CI@BOEMKJGI@View?4MemoryView?4memoryview?4size?4@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 13469:   __pyx_r = NULL;

	jmp	$__pyx_L0$23684
$LN76@pyx_pf_15V@5:

; 13404:       __pyx_t_3 = __pyx_t_5;
; 13405:       __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 586, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 586				; 0000024aH
	mov	edx, 13405				; 0000345dH

; 13455:   goto __pyx_L0;
; 13456: 
; 13457:   /* "View.MemoryView":582
; 13458:  * 
; 13459:  *     @property
; 13460:  *     def size(self):             # <<<<<<<<<<<<<<
; 13461:  *         if self._size is None:
; 13462:  *             result = 1
; 13463:  */
; 13464: 
; 13465:   /* function exit code */
; 13466:   __pyx_L1_error:;
; 13467:   __Pyx_XDECREF(__pyx_t_6);
; 13468:   __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CI@BOEMKJGI@View?4MemoryView?4memoryview?4size?4@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 13469:   __pyx_r = NULL;

	jmp	$__pyx_L0$23684
__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___len__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryview___len__ PROC				; COMDAT

; 13489:   Py_ssize_t __pyx_r;
; 13490:   __Pyx_RefNannyDeclarations
; 13491:   __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
; 13492:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

	cmp	DWORD PTR [rcx+108], 1
	jl	SHORT $LN3@pyx_memory@10
	mov	rax, QWORD PTR [rcx+120]

; 13493: 
; 13494:   /* function exit code */
; 13495:   __Pyx_RefNannyFinishContext();
; 13496:   return __pyx_r;

	mov	rax, QWORD PTR [rax]

; 13497: }

	ret	0

; 13489:   Py_ssize_t __pyx_r;
; 13490:   __Pyx_RefNannyDeclarations
; 13491:   __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
; 13492:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

$LN3@pyx_memory@10:

; 13493: 
; 13494:   /* function exit code */
; 13495:   __Pyx_RefNannyFinishContext();
; 13496:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$39468:

; 13497: }

	ret	0
__pyx_memoryview___len__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@OJCNBJPI@View?4MemoryView?4memoryview?4__rep@ ; `string'
EXTRN	__imp_PyString_Format:PROC
_BSS	SEGMENT
__pyx_builtin_id DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__+831
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__ DD 086401H
	DD	063464H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CE@OJCNBJPI@View?4MemoryView?4memoryview?4__rep@
CONST	SEGMENT
??_C@_0CE@OJCNBJPI@View?4MemoryView?4memoryview?4__rep@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__repr__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__ PROC ; COMDAT

; 13579: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 13580:   PyObject *__pyx_r = NULL;
; 13581:   __Pyx_RefNannyDeclarations
; 13582:   PyObject *__pyx_t_1 = NULL;
; 13583:   PyObject *__pyx_t_2 = NULL;
; 13584:   PyObject *__pyx_t_3 = NULL;
; 13585:   __Pyx_RefNannySetupContext("__repr__", 0);
; 13586: 
; 13587:   /* "View.MemoryView":600
; 13588:  * 
; 13589:  *     def __repr__(self):
; 13590:  *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
; 13591:  *                                                id(self))
; 13592:  * 
; 13593:  */
; 13594:   __Pyx_XDECREF(__pyx_r);
; 13595:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 600, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	xor	esi, esi
	mov	rbp, rcx
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN71@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN72@pyx_memory@11
$LN71@pyx_memory@11:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN70@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_base
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN72@pyx_memory@11
$LN70@pyx_memory@11:
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN72@pyx_memory@11:
	mov	QWORD PTR [rsp+48], rbx
	test	rdi, rdi
	jne	SHORT $LN57@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 600		; 00000258H
	mov	DWORD PTR __pyx_clineno, 13595		; 0000351bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_memory@11
$LN57@pyx_memory@11:

; 13596:   __Pyx_GOTREF(__pyx_t_1);
; 13597:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 600, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN75@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN76@pyx_memory@11
$LN75@pyx_memory@11:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN74@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN76@pyx_memory@11
$LN74@pyx_memory@11:
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN76@pyx_memory@11:
	test	rbx, rbx
	jne	SHORT $LN55@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 600		; 00000258H
	mov	DWORD PTR __pyx_clineno, 13597		; 0000351dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$23787
$LN55@pyx_memory@11:

; 13598:   __Pyx_GOTREF(__pyx_t_2);
; 13599:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN54@pyx_memory@11
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN54@pyx_memory@11:

; 13600:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 600, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN79@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN80@pyx_memory@11
$LN79@pyx_memory@11:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN78@pyx_memory@11
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN80@pyx_memory@11
$LN78@pyx_memory@11:
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN80@pyx_memory@11:
	test	rdi, rdi
	jne	SHORT $LN49@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 600		; 00000258H
	mov	DWORD PTR __pyx_clineno, 13600		; 00003520H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@11
$LN49@pyx_memory@11:

; 13601:   __Pyx_GOTREF(__pyx_t_1);
; 13602:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN48@pyx_memory@11
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN48@pyx_memory@11:

; 13603: 
; 13604:   /* "View.MemoryView":601
; 13605:  *     def __repr__(self):
; 13606:  *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
; 13607:  *                                                id(self))             # <<<<<<<<<<<<<<
; 13608:  * 
; 13609:  *     def __str__(self):
; 13610:  */
; 13611:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 601, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN44@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 601		; 00000259H
	mov	DWORD PTR __pyx_clineno, 13611		; 0000352bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$23787
$LN44@pyx_memory@11:

; 13612:   __Pyx_GOTREF(__pyx_t_2);
; 13613:   __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rbp]

; 13614:   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
; 13615:   PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
; 13616:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 601, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_id
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbp
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN42@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 601		; 00000259H
	mov	DWORD PTR __pyx_clineno, 13616		; 00003530H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$23787
$LN42@pyx_memory@11:

; 13617:   __Pyx_GOTREF(__pyx_t_3);
; 13618:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN41@pyx_memory@11
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN41@pyx_memory@11:

; 13619: 
; 13620:   /* "View.MemoryView":600
; 13621:  * 
; 13622:  *     def __repr__(self):
; 13623:  *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
; 13624:  *                                                id(self))
; 13625:  * 
; 13626:  */
; 13627:   __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 600, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN37@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 600		; 00000258H
	mov	DWORD PTR __pyx_clineno, 13627		; 0000353bH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$23787:

; 13638:   __pyx_r = __pyx_t_3;
; 13639:   __pyx_t_3 = 0;
; 13640:   goto __pyx_L0;
; 13641: 
; 13642:   /* "View.MemoryView":599
; 13643:  *         return 0
; 13644:  * 
; 13645:  *     def __repr__(self):             # <<<<<<<<<<<<<<
; 13646:  *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
; 13647:  *                                                id(self))
; 13648:  */
; 13649: 
; 13650:   /* function exit code */
; 13651:   __pyx_L1_error:;
; 13652:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN23@pyx_memory@11
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN23@pyx_memory@11
$LN37@pyx_memory@11:

; 13628:   __Pyx_GOTREF(__pyx_t_2);
; 13629:   __Pyx_GIVEREF(__pyx_t_1);
; 13630:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

	mov	QWORD PTR [rax+24], rdi

; 13631:   __Pyx_GIVEREF(__pyx_t_3);
; 13632:   PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);

	mov	QWORD PTR [rax+32], rsi

; 13633:   __pyx_t_1 = 0;
; 13634:   __pyx_t_3 = 0;
; 13635:   __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 600, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_MemoryView_of_r_at_0x_x
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN35@pyx_memory@11
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 600		; 00000258H
	mov	DWORD PTR __pyx_clineno, 13635		; 00003543H
	mov	QWORD PTR __pyx_filename, rax
$LN23@pyx_memory@11:

; 13653:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN13@pyx_memory@11
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_memory@11
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@11:

; 13654:   __Pyx_XDECREF(__pyx_t_3);

	test	rsi, rsi
	je	SHORT $LN3@pyx_memory@11
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN3@pyx_memory@11
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN3@pyx_memory@11:

; 13655:   __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CE@OJCNBJPI@View?4MemoryView?4memoryview?4__rep@
	call	__Pyx_AddTraceback

; 13656:   __pyx_r = NULL;
; 13657:   __pyx_L0:;
; 13658:   __Pyx_XGIVEREF(__pyx_r);
; 13659:   __Pyx_RefNannyFinishContext();
; 13660:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$23841
$LN35@pyx_memory@11:

; 13636:   __Pyx_GOTREF(__pyx_t_3);
; 13637:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN34@pyx_memory@11
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN34@pyx_memory@11:

; 13656:   __pyx_r = NULL;
; 13657:   __pyx_L0:;
; 13658:   __Pyx_XGIVEREF(__pyx_r);
; 13659:   __Pyx_RefNannyFinishContext();
; 13660:   return __pyx_r;

	mov	rax, rsi
$__pyx_L0$23841:
	mov	rbx, QWORD PTR [rsp+48]

; 13661: }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@LJCIPBMM@View?4MemoryView?4memoryview?4__str@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__+642
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__ DD 045601H
	DD	063456H
	DD	070023206H
xdata	ENDS
;	COMDAT ??_C@_0CD@LJCIPBMM@View?4MemoryView?4memoryview?4__str@
CONST	SEGMENT
??_C@_0CD@LJCIPBMM@View?4MemoryView?4memoryview?4__str@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__str__', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__ PROC ; COMDAT

; 13684: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rdi
	sub	rsp, 32					; 00000020H

; 13685:   PyObject *__pyx_r = NULL;
; 13686:   __Pyx_RefNannyDeclarations
; 13687:   PyObject *__pyx_t_1 = NULL;
; 13688:   PyObject *__pyx_t_2 = NULL;
; 13689:   __Pyx_RefNannySetupContext("__str__", 0);
; 13690: 
; 13691:   /* "View.MemoryView":604
; 13692:  * 
; 13693:  *     def __str__(self):
; 13694:  *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
; 13695:  * 
; 13696:  * 
; 13697:  */
; 13698:   __Pyx_XDECREF(__pyx_r);
; 13699:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 604, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN54@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN55@pyx_memory@12
$LN54@pyx_memory@12:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN53@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_base
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN55@pyx_memory@12
$LN53@pyx_memory@12:
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN55@pyx_memory@12:
	mov	QWORD PTR [rsp+48], rbx
	test	rdi, rdi
	jne	SHORT $LN40@pyx_memory@12
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 604		; 0000025cH
	mov	DWORD PTR __pyx_clineno, 13699		; 00003583H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_memory@12
$LN40@pyx_memory@12:

; 13700:   __Pyx_GOTREF(__pyx_t_1);
; 13701:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 604, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN58@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN59@pyx_memory@12
$LN58@pyx_memory@12:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN57@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN59@pyx_memory@12
$LN57@pyx_memory@12:
	mov	rdx, QWORD PTR __pyx_n_s_class
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN59@pyx_memory@12:
	test	rbx, rbx
	jne	SHORT $LN38@pyx_memory@12
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 604		; 0000025cH
	mov	DWORD PTR __pyx_clineno, 13701		; 00003585H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$23927
$LN38@pyx_memory@12:

; 13702:   __Pyx_GOTREF(__pyx_t_2);
; 13703:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN37@pyx_memory@12
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN37@pyx_memory@12:

; 13704:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 604, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN62@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN63@pyx_memory@12
$LN62@pyx_memory@12:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN61@pyx_memory@12
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN63@pyx_memory@12
$LN61@pyx_memory@12:
	mov	rdx, QWORD PTR __pyx_n_s_name_2
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN63@pyx_memory@12:
	test	rdi, rdi
	jne	SHORT $LN32@pyx_memory@12
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 604		; 0000025cH
	mov	DWORD PTR __pyx_clineno, 13704		; 00003588H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_memory@12
$LN32@pyx_memory@12:

; 13705:   __Pyx_GOTREF(__pyx_t_1);
; 13706:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN31@pyx_memory@12
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN31@pyx_memory@12:

; 13707:   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 604, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN27@pyx_memory@12
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 604		; 0000025cH
	mov	DWORD PTR __pyx_clineno, 13707		; 0000358bH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$23927:

; 13715:   __pyx_r = __pyx_t_1;
; 13716:   __pyx_t_1 = 0;
; 13717:   goto __pyx_L0;
; 13718: 
; 13719:   /* "View.MemoryView":603
; 13720:  *                                                id(self))
; 13721:  * 
; 13722:  *     def __str__(self):             # <<<<<<<<<<<<<<
; 13723:  *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
; 13724:  * 
; 13725:  */
; 13726: 
; 13727:   /* function exit code */
; 13728:   __pyx_L1_error:;
; 13729:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@pyx_memory@12
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]

; 13730:   __Pyx_XDECREF(__pyx_t_2);

	jmp	SHORT $LN3@pyx_memory@12
$LN27@pyx_memory@12:

; 13708:   __Pyx_GOTREF(__pyx_t_2);
; 13709:   __Pyx_GIVEREF(__pyx_t_1);
; 13710:   PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

	mov	QWORD PTR [rax+24], rdi

; 13711:   __pyx_t_1 = 0;
; 13712:   __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 604, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_MemoryView_of_r_object
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN25@pyx_memory@12
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 604		; 0000025cH
	mov	DWORD PTR __pyx_clineno, 13712		; 00003590H
	mov	QWORD PTR __pyx_filename, rax
$LN13@pyx_memory@12:

; 13730:   __Pyx_XDECREF(__pyx_t_2);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@pyx_memory@12
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@pyx_memory@12:

; 13731:   __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CD@LJCIPBMM@View?4MemoryView?4memoryview?4__str@
	call	__Pyx_AddTraceback

; 13732:   __pyx_r = NULL;
; 13733:   __pyx_L0:;
; 13734:   __Pyx_XGIVEREF(__pyx_r);
; 13735:   __Pyx_RefNannyFinishContext();
; 13736:   return __pyx_r;

	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+48]

; 13737: }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@pyx_memory@12:

; 13713:   __Pyx_GOTREF(__pyx_t_1);
; 13714:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN24@pyx_memory@12
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN24@pyx_memory@12:

; 13732:   __pyx_r = NULL;
; 13733:   __pyx_L0:;
; 13734:   __Pyx_XGIVEREF(__pyx_r);
; 13735:   __Pyx_RefNannyFinishContext();
; 13736:   return __pyx_r;

	mov	rax, rdi
$__pyx_L0$23963:
	mov	rbx, QWORD PTR [rsp+48]

; 13737: }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@PAEGFPAM@View?4MemoryView?4memoryview?4__red@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_memoryview___reduce_cython__ DD imagerel __pyx_pf___pyx_memoryview___reduce_cython__
	DD	imagerel __pyx_pf___pyx_memoryview___reduce_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_memoryview___reduce_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_memoryview___reduce_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CN@PAEGFPAM@View?4MemoryView?4memoryview?4__red@
CONST	SEGMENT
??_C@_0CN@PAEGFPAM@View?4MemoryView?4memoryview?4__red@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__reduce_cython__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_memoryview___reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf___pyx_memoryview___reduce_cython__ PROC	; COMDAT

; 14083: static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 14084:   PyObject *__pyx_r = NULL;
; 14085:   __Pyx_RefNannyDeclarations
; 14086:   PyObject *__pyx_t_1 = NULL;
; 14087:   __Pyx_RefNannySetupContext("__reduce_cython__", 0);
; 14088: 
; 14089:   /* "(tree fragment)":2
; 14090:  * def __reduce_cython__(self):
; 14091:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 14092:  * def __setstate_cython__(self, __pyx_state):
; 14093:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 14094:  */
; 14095:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__23
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p@3
	mov	edx, 14095				; 0000370fH
	jmp	SHORT $LN19@pyx_pf___p@3
$LN16@pyx_pf___p@3:

; 14096:   __Pyx_GOTREF(__pyx_t_1);
; 14097:   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 14098:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p@3
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@3:

; 14099:   __PYX_ERR(2, 2, __pyx_L1_error)

	mov	edx, 14099				; 00003713H
$LN19@pyx_pf___p@3:
	mov	r9, QWORD PTR __pyx_f+16

; 14100: 
; 14101:   /* "(tree fragment)":1
; 14102:  * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
; 14103:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 14104:  * def __setstate_cython__(self, __pyx_state):
; 14105:  */
; 14106: 
; 14107:   /* function exit code */
; 14108:   __pyx_L1_error:;
; 14109:   __Pyx_XDECREF(__pyx_t_1);
; 14110:   __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CN@PAEGFPAM@View?4MemoryView?4memoryview?4__red@
	mov	r8d, 2
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 2
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 14111:   __pyx_r = NULL;
; 14112:   __Pyx_XGIVEREF(__pyx_r);
; 14113:   __Pyx_RefNannyFinishContext();
; 14114:   return __pyx_r;

	xor	eax, eax

; 14115: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_memoryview___reduce_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@EDIKPMK@View?4MemoryView?4memoryview?4__set@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_memoryview_2__setstate_cython__ DD imagerel __pyx_pf___pyx_memoryview_2__setstate_cython__
	DD	imagerel __pyx_pf___pyx_memoryview_2__setstate_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_memoryview_2__setstate_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_memoryview_2__setstate_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0CP@EDIKPMK@View?4MemoryView?4memoryview?4__set@
CONST	SEGMENT
??_C@_0CP@EDIKPMK@View?4MemoryView?4memoryview?4__set@ DB 'View.MemoryVie'
	DB	'w.memoryview.__setstate_cython__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_memoryview_2__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v___pyx_state$ = 56
__pyx_pf___pyx_memoryview_2__setstate_cython__ PROC	; COMDAT

; 14137: static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 14138:   PyObject *__pyx_r = NULL;
; 14139:   __Pyx_RefNannyDeclarations
; 14140:   PyObject *__pyx_t_1 = NULL;
; 14141:   __Pyx_RefNannySetupContext("__setstate_cython__", 0);
; 14142: 
; 14143:   /* "(tree fragment)":4
; 14144:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 14145:  * def __setstate_cython__(self, __pyx_state):
; 14146:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 14147:  */
; 14148:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__24
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p@4
	mov	edx, 14148				; 00003744H
	jmp	SHORT $LN19@pyx_pf___p@4
$LN16@pyx_pf___p@4:

; 14149:   __Pyx_GOTREF(__pyx_t_1);
; 14150:   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 14151:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p@4
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@4:

; 14152:   __PYX_ERR(2, 4, __pyx_L1_error)

	mov	edx, 14152				; 00003748H
$LN19@pyx_pf___p@4:
	mov	r9, QWORD PTR __pyx_f+16

; 14153: 
; 14154:   /* "(tree fragment)":3
; 14155:  * def __reduce_cython__(self):
; 14156:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 14157:  * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
; 14158:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 14159:  */
; 14160: 
; 14161:   /* function exit code */
; 14162:   __pyx_L1_error:;
; 14163:   __Pyx_XDECREF(__pyx_t_1);
; 14164:   __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CP@EDIKPMK@View?4MemoryView?4memoryview?4__set@
	mov	r8d, 4
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 4
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 14165:   __pyx_r = NULL;
; 14166:   __Pyx_XGIVEREF(__pyx_r);
; 14167:   __Pyx_RefNannyFinishContext();
; 14168:   return __pyx_r;

	xor	eax, eax

; 14169: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_memoryview_2__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@CKHOANEP@View?4MemoryView?4memoryview_cwrap@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_new DD imagerel __pyx_memoryview_new
	DD	imagerel __pyx_memoryview_new+448
	DD	imagerel $unwind$__pyx_memoryview_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_new DD 081201H
	DD	0a5412H
	DD	083412H
	DD	0c00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CE@CKHOANEP@View?4MemoryView?4memoryview_cwrap@
CONST	SEGMENT
??_C@_0CE@CKHOANEP@View?4MemoryView?4memoryview_cwrap@ DB 'View.MemoryVie'
	DB	'w.memoryview_cwrapper', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_new
_TEXT	SEGMENT
__pyx_v_o$ = 64
$T39597 = 72
__pyx_v_flags$ = 72
__pyx_v_dtype_is_object$ = 80
__pyx_v_typeinfo$ = 88
__pyx_memoryview_new PROC				; COMDAT

; 14179: static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	sub	rsp, 32					; 00000020H
	mov	rbp, rcx

; 14180:   struct __pyx_memoryview_obj *__pyx_v_result = 0;
; 14181:   PyObject *__pyx_r = NULL;
; 14182:   __Pyx_RefNannyDeclarations
; 14183:   PyObject *__pyx_t_1 = NULL;
; 14184:   PyObject *__pyx_t_2 = NULL;
; 14185:   PyObject *__pyx_t_3 = NULL;
; 14186:   __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);
; 14187: 
; 14188:   /* "View.MemoryView":646
; 14189:  * @cname('__pyx_memoryview_new')
; 14190:  * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
; 14191:  *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
; 14192:  *     result.typeinfo = typeinfo
; 14193:  *     return result
; 14194:  */
; 14195:   __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 646, __pyx_L1_error)

	mov	ecx, edx
	mov	r12, r9
	mov	ebx, r8d
	xor	edi, edi
	mov	DWORD PTR $T39597[rsp], edx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN59@pyx_memory@13
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 646		; 00000286H
	mov	DWORD PTR __pyx_clineno, 14195		; 00003773H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_memory@13
$LN59@pyx_memory@13:

; 14196:   __Pyx_GOTREF(__pyx_t_1);
; 14197:   __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 646, __pyx_L1_error)

	test	ebx, ebx
	je	SHORT $LN62@pyx_memory@13
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rbx, QWORD PTR __imp__Py_TrueStruct
	jmp	SHORT $LN63@pyx_memory@13
$LN62@pyx_memory@13:
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rbx, QWORD PTR __imp__Py_ZeroStruct
$LN63@pyx_memory@13:
	test	rbx, rbx
	jne	SHORT $LN58@pyx_memory@13
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 14197		; 00003775H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN76@pyx_memory@13
$LN58@pyx_memory@13:

; 14198:   __Pyx_GOTREF(__pyx_t_2);
; 14199:   __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 646, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN57@pyx_memory@13
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 14199		; 00003777H
	mov	QWORD PTR __pyx_filename, rcx
$LN76@pyx_memory@13:

; 14234:   __pyx_r = ((PyObject *)__pyx_v_result);
; 14235:   goto __pyx_L0;
; 14236: 
; 14237:   /* "View.MemoryView":645
; 14238:  * 
; 14239:  * @cname('__pyx_memoryview_new')
; 14240:  * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
; 14241:  *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
; 14242:  *     result.typeinfo = typeinfo
; 14243:  */
; 14244: 
; 14245:   /* function exit code */
; 14246:   __pyx_L1_error:;
; 14247:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rsi], -1
	mov	DWORD PTR __pyx_lineno, 646		; 00000286H
$__pyx_L1_error$24373:
	jne	SHORT $LN33@pyx_memory@13
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
	jmp	SHORT $LN33@pyx_memory@13
$LN57@pyx_memory@13:

; 14200:   __Pyx_GOTREF(__pyx_t_3);
; 14201:   __Pyx_INCREF(__pyx_v_o);

	inc	QWORD PTR [rbp]

; 14202:   __Pyx_GIVEREF(__pyx_v_o);
; 14203:   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
; 14204:   __Pyx_GIVEREF(__pyx_t_1);
; 14205:   PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
; 14206:   __Pyx_GIVEREF(__pyx_t_2);
; 14207:   PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
; 14208:   __pyx_t_1 = 0;
; 14209:   __pyx_t_2 = 0;
; 14210:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 646, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_memoryview_type
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbp
	mov	QWORD PTR [rax+32], rsi
	mov	QWORD PTR [rax+40], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN55@pyx_memory@13
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 646		; 00000286H
	mov	DWORD PTR __pyx_clineno, 14210		; 00003782H
	mov	QWORD PTR __pyx_filename, rax
$LN33@pyx_memory@13:

; 14248:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN23@pyx_memory@13
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN23@pyx_memory@13
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@13:

; 14249:   __Pyx_XDECREF(__pyx_t_3);

	test	rdi, rdi
	je	SHORT $LN13@pyx_memory@13
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN13@pyx_memory@13
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN13@pyx_memory@13:

; 14250:   __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CE@CKHOANEP@View?4MemoryView?4memoryview_cwrap@
	call	__Pyx_AddTraceback

; 14254:   __Pyx_XGIVEREF(__pyx_r);
; 14255:   __Pyx_RefNannyFinishContext();
; 14256:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $LN3@pyx_memory@13
$LN55@pyx_memory@13:

; 14211:   __Pyx_GOTREF(__pyx_t_2);
; 14212:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN54@pyx_memory@13
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN54@pyx_memory@13:

; 14213:   __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
; 14214:   __pyx_t_2 = 0;
; 14215: 
; 14216:   /* "View.MemoryView":647
; 14217:  * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
; 14218:  *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
; 14219:  *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
; 14220:  *     return result
; 14221:  * 
; 14222:  */
; 14223:   __pyx_v_result->typeinfo = __pyx_v_typeinfo;
; 14224: 
; 14225:   /* "View.MemoryView":648
; 14226:  *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
; 14227:  *     result.typeinfo = typeinfo
; 14228:  *     return result             # <<<<<<<<<<<<<<
; 14229:  * 
; 14230:  * @cname('__pyx_memoryview_check')
; 14231:  */
; 14232:   __Pyx_XDECREF(__pyx_r);
; 14233:   __Pyx_INCREF(((PyObject *)__pyx_v_result));

	inc	QWORD PTR [rbx]
	mov	QWORD PTR [rbx+176], r12

; 14251:   __pyx_r = 0;
; 14252:   __pyx_L0:;
; 14253:   __Pyx_XDECREF((PyObject *)__pyx_v_result);

	add	QWORD PTR [rbx], -1
$__pyx_L0$24419:
	jne	SHORT $LN4@pyx_memory@13
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@pyx_memory@13:

; 14254:   __Pyx_XGIVEREF(__pyx_r);
; 14255:   __Pyx_RefNannyFinishContext();
; 14256:   return __pyx_r;

	mov	rax, rbx
$LN3@pyx_memory@13:

; 14257: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
__pyx_memoryview_new ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_check
_TEXT	SEGMENT
__pyx_v_o$ = 8
__pyx_memoryview_check PROC				; COMDAT

; 14268:   int __pyx_r;
; 14269:   __Pyx_RefNannyDeclarations
; 14270:   int __pyx_t_1;
; 14271:   __Pyx_RefNannySetupContext("memoryview_check", 0);
; 14272: 
; 14273:   /* "View.MemoryView":652
; 14274:  * @cname('__pyx_memoryview_check')
; 14275:  * cdef inline bint memoryview_check(object o):
; 14276:  *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
; 14277:  * 
; 14278:  * cdef tuple _unellipsify(object index, int ndim):
; 14279:  */
; 14280:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

	mov	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR __pyx_memoryview_type
	cmp	rax, rcx
	jne	SHORT $LN8@pyx_memory@14
$LN18@pyx_memory@14:
$__pyx_L0$24496:
$__pyx_L0_1$24496:

; 14281:   __pyx_r = __pyx_t_1;
; 14282:   goto __pyx_L0;
; 14283: 
; 14284:   /* "View.MemoryView":651
; 14285:  * 
; 14286:  * @cname('__pyx_memoryview_check')
; 14287:  * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
; 14288:  *     return isinstance(o, memoryview)
; 14289:  * 
; 14290:  */
; 14291: 
; 14292:   /* function exit code */
; 14293:   __pyx_L0:;
; 14294:   __Pyx_RefNannyFinishContext();
; 14295:   return __pyx_r;

	mov	eax, 1

; 14296: }

	ret	0

; 14268:   int __pyx_r;
; 14269:   __Pyx_RefNannyDeclarations
; 14270:   int __pyx_t_1;
; 14271:   __Pyx_RefNannySetupContext("memoryview_check", 0);
; 14272: 
; 14273:   /* "View.MemoryView":652
; 14274:  * @cname('__pyx_memoryview_check')
; 14275:  * cdef inline bint memoryview_check(object o):
; 14276:  *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
; 14277:  * 
; 14278:  * cdef tuple _unellipsify(object index, int ndim):
; 14279:  */
; 14280:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

$LN8@pyx_memory@14:
	mov	r9, QWORD PTR [rax+344]
	test	r9, r9
	je	SHORT $LL13@pyx_memory@14
	mov	r10, QWORD PTR [r9+16]
	xor	r8d, r8d
	mov	rdx, r8
	test	r10, r10
	jle	SHORT $LN14@pyx_memory@14
	lea	rax, QWORD PTR [r9+24]
$LL6@pyx_memory@14:
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN18@pyx_memory@14
	inc	rdx
	add	rax, 8
	cmp	rdx, r10
	jl	SHORT $LL6@pyx_memory@14
$__pyx_L0_2$24496:

; 14281:   __pyx_r = __pyx_t_1;
; 14282:   goto __pyx_L0;
; 14283: 
; 14284:   /* "View.MemoryView":651
; 14285:  * 
; 14286:  * @cname('__pyx_memoryview_check')
; 14287:  * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
; 14288:  *     return isinstance(o, memoryview)
; 14289:  * 
; 14290:  */
; 14291: 
; 14292:   /* function exit code */
; 14293:   __pyx_L0:;
; 14294:   __Pyx_RefNannyFinishContext();
; 14295:   return __pyx_r;

	mov	eax, r8d

; 14296: }

	ret	0
	npad	6

; 14268:   int __pyx_r;
; 14269:   __Pyx_RefNannyDeclarations
; 14270:   int __pyx_t_1;
; 14271:   __Pyx_RefNannySetupContext("memoryview_check", 0);
; 14272: 
; 14273:   /* "View.MemoryView":652
; 14274:  * @cname('__pyx_memoryview_check')
; 14275:  * cdef inline bint memoryview_check(object o):
; 14276:  *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
; 14277:  * 
; 14278:  * cdef tuple _unellipsify(object index, int ndim):
; 14279:  */
; 14280:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

$LL13@pyx_memory@14:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rcx
	je	SHORT $LN19@pyx_memory@14
	test	rax, rax
	jne	SHORT $LL13@pyx_memory@14
	xor	r8d, r8d
	cmp	rcx, QWORD PTR __imp_PyBaseObject_Type
$__pyx_L0_3$24496:
	sete	r8b

; 14281:   __pyx_r = __pyx_t_1;
; 14282:   goto __pyx_L0;
; 14283: 
; 14284:   /* "View.MemoryView":651
; 14285:  * 
; 14286:  * @cname('__pyx_memoryview_check')
; 14287:  * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
; 14288:  *     return isinstance(o, memoryview)
; 14289:  * 
; 14290:  */
; 14291: 
; 14292:   /* function exit code */
; 14293:   __pyx_L0:;
; 14294:   __Pyx_RefNannyFinishContext();
; 14295:   return __pyx_r;

	mov	eax, r8d

; 14296: }

	ret	0
$LN19@pyx_memory@14:

; 14268:   int __pyx_r;
; 14269:   __Pyx_RefNannyDeclarations
; 14270:   int __pyx_t_1;
; 14271:   __Pyx_RefNannySetupContext("memoryview_check", 0);
; 14272: 
; 14273:   /* "View.MemoryView":652
; 14274:  * @cname('__pyx_memoryview_check')
; 14275:  * cdef inline bint memoryview_check(object o):
; 14276:  *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
; 14277:  * 
; 14278:  * cdef tuple _unellipsify(object index, int ndim):
; 14279:  */
; 14280:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

	mov	r8d, 1
$__pyx_L0_4$24496:
$LN14@pyx_memory@14:
$__pyx_L0_5$24496:

; 14281:   __pyx_r = __pyx_t_1;
; 14282:   goto __pyx_L0;
; 14283: 
; 14284:   /* "View.MemoryView":651
; 14285:  * 
; 14286:  * @cname('__pyx_memoryview_check')
; 14287:  * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
; 14288:  *     return isinstance(o, memoryview)
; 14289:  * 
; 14290:  */
; 14291: 
; 14292:   /* function exit code */
; 14293:   __pyx_L0:;
; 14294:   __Pyx_RefNannyFinishContext();
; 14295:   return __pyx_r;

	mov	eax, r8d

; 14296: }

	ret	0
__pyx_memoryview_check ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@DEPKIPMO@View?4MemoryView?4_unellipsify?$AA@ ; `string'
EXTRN	__imp_PyExc_StopIteration:QWORD
EXTRN	__imp_PySlice_Type:BYTE
EXTRN	__imp_PyObject_Size:PROC
EXTRN	__imp_PyObject_GetIter:PROC
_BSS	SEGMENT
__pyx_builtin_Ellipsis DQ 01H DUP (?)
__pyx_int_0 DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_unellipsify DD imagerel _unellipsify
	DD	imagerel _unellipsify+14
	DD	imagerel $unwind$_unellipsify
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$_unellipsify DD imagerel _unellipsify+14
	DD	imagerel _unellipsify+2588
	DD	imagerel $chain$6$_unellipsify
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$_unellipsify DD imagerel _unellipsify+2588
	DD	imagerel _unellipsify+2637
	DD	imagerel $chain$7$_unellipsify
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$_unellipsify DD imagerel _unellipsify+2637
	DD	imagerel _unellipsify+2688
	DD	imagerel $chain$8$_unellipsify
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$_unellipsify DD 021H
	DD	imagerel _unellipsify
	DD	imagerel _unellipsify+14
	DD	imagerel $unwind$_unellipsify
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$_unellipsify DD 020021H
	DD	09f400H
	DD	imagerel _unellipsify
	DD	imagerel _unellipsify+14
	DD	imagerel $unwind$_unellipsify
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$_unellipsify DD 0e1e21H
	DD	09f41eH
	DD	0ae41aH
	DD	0bd416H
	DD	0cc412H
	DD	0d740eH
	DD	0e640aH
	DD	0f3404H
	DD	imagerel _unellipsify
	DD	imagerel _unellipsify+14
	DD	imagerel $unwind$_unellipsify
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_unellipsify DD 020e01H
	DD	05007f20eH
xdata	ENDS
;	COMDAT ??_C@_0BN@DEPKIPMO@View?4MemoryView?4_unellipsify?$AA@
CONST	SEGMENT
??_C@_0BN@DEPKIPMO@View?4MemoryView?4_unellipsify?$AA@ DB 'View.MemoryVie'
	DB	'w._unellipsify', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _unellipsify
_TEXT	SEGMENT
__pyx_v_item$1$ = 32
__pyx_t_11$1$ = 40
__pyx_v_idx$1$ = 48
tv1349 = 144
__pyx_v_index$ = 144
__pyx_v_ndim$ = 152
__pyx_v_tup$1$ = 160
__pyx_t_6$1$ = 168
_unellipsify PROC					; COMDAT

; 14306: static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {

	mov	rax, rsp
	mov	DWORD PTR [rax+16], edx
	push	rbp
	sub	rsp, 128				; 00000080H
	mov	QWORD PTR [rax-16], rbx

; 14307:   PyObject *__pyx_v_tup = NULL;

	xor	ebp, ebp
	mov	QWORD PTR [rax-24], rsi
	mov	QWORD PTR [rax-32], rdi
	mov	QWORD PTR [rax-40], r12
	mov	QWORD PTR [rax-48], r13
	mov	QWORD PTR [rax-56], r14
	mov	QWORD PTR [rax-64], r15

; 14308:   PyObject *__pyx_v_result = NULL;
; 14309:   int __pyx_v_have_slices;
; 14310:   int __pyx_v_seen_ellipsis;
; 14311:   CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
; 14312:   PyObject *__pyx_v_item = NULL;
; 14313:   Py_ssize_t __pyx_v_nslices;
; 14314:   PyObject *__pyx_r = NULL;
; 14315:   __Pyx_RefNannyDeclarations
; 14316:   int __pyx_t_1;
; 14317:   int __pyx_t_2;
; 14318:   PyObject *__pyx_t_3 = NULL;
; 14319:   PyObject *__pyx_t_4 = NULL;
; 14320:   Py_ssize_t __pyx_t_5;
; 14321:   PyObject *(*__pyx_t_6)(PyObject *);
; 14322:   PyObject *__pyx_t_7 = NULL;
; 14323:   Py_ssize_t __pyx_t_8;
; 14324:   int __pyx_t_9;
; 14325:   int __pyx_t_10;
; 14326:   PyObject *__pyx_t_11 = NULL;
; 14327:   __Pyx_RefNannySetupContext("_unellipsify", 0);
; 14328: 
; 14329:   /* "View.MemoryView":659
; 14330:  *     full slices.
; 14331:  *     """
; 14332:  *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
; 14333:  *         tup = (index,)
; 14334:  *     else:
; 14335:  */
; 14336:   __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
; 14337:   __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
; 14338:   if (__pyx_t_2) {

	mov	rax, QWORD PTR [rcx+8]
	bt	DWORD PTR [rax+168], 26
	mov	rdi, rcx
	mov	QWORD PTR __pyx_v_tup$1$[rsp], rbp
	mov	r15, rbp
	mov	QWORD PTR __pyx_v_idx$1$[rsp], rbp
	mov	QWORD PTR __pyx_v_item$1$[rsp], rbp
	mov	rbx, rbp
	mov	QWORD PTR __pyx_t_11$1$[rsp], rbp
	jb	SHORT $LN205@unellipsif

; 14339: 
; 14340:     /* "View.MemoryView":660
; 14341:  *     """
; 14342:  *     if not isinstance(index, tuple):
; 14343:  *         tup = (index,)             # <<<<<<<<<<<<<<
; 14344:  *     else:
; 14345:  *         tup = index
; 14346:  */
; 14347:     __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 660, __pyx_L1_error)

	lea	ecx, QWORD PTR [rbp+1]
	call	QWORD PTR __imp_PyTuple_New
	test	rax, rax
	jne	SHORT $LN204@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 660		; 00000294H
	mov	DWORD PTR __pyx_clineno, 14347		; 0000380bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@unellipsif
$LN204@unellipsif:

; 14348:     __Pyx_GOTREF(__pyx_t_3);
; 14349:     __Pyx_INCREF(__pyx_v_index);

	inc	QWORD PTR [rdi]

; 14350:     __Pyx_GIVEREF(__pyx_v_index);
; 14351:     PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
; 14352:     __pyx_v_tup = __pyx_t_3;

	mov	r14, rax
	mov	QWORD PTR __pyx_v_tup$1$[rsp], rax
	mov	QWORD PTR [rax+24], rdi

; 14353:     __pyx_t_3 = 0;
; 14354: 
; 14355:     /* "View.MemoryView":659
; 14356:  *     full slices.
; 14357:  *     """
; 14358:  *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
; 14359:  *         tup = (index,)
; 14360:  *     else:
; 14361:  */
; 14362:     goto __pyx_L3;

	jmp	SHORT $__pyx_L3$24537
$LN205@unellipsif:

; 14363:   }
; 14364: 
; 14365:   /* "View.MemoryView":662
; 14366:  *         tup = (index,)
; 14367:  *     else:
; 14368:  *         tup = index             # <<<<<<<<<<<<<<
; 14369:  * 
; 14370:  *     result = []
; 14371:  */
; 14372:   /*else*/ {
; 14373:     __Pyx_INCREF(__pyx_v_index);

	inc	QWORD PTR [rcx]

; 14374:     __pyx_v_tup = __pyx_v_index;

	mov	r14, rcx
	mov	QWORD PTR __pyx_v_tup$1$[rsp], rcx
$__pyx_L3$24537:

; 14375:   }
; 14376:   __pyx_L3:;
; 14377: 
; 14378:   /* "View.MemoryView":664
; 14379:  *         tup = index
; 14380:  * 
; 14381:  *     result = []             # <<<<<<<<<<<<<<
; 14382:  *     have_slices = False
; 14383:  *     seen_ellipsis = False
; 14384:  */
; 14385:   __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 664, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyList_New
	test	rax, rax
	jne	SHORT $LN203@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 664		; 00000298H
	mov	DWORD PTR __pyx_clineno, 14385		; 00003831H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@unellipsif
$LN203@unellipsif:

; 14386:   __Pyx_GOTREF(__pyx_t_3);
; 14387:   __pyx_v_result = ((PyObject*)__pyx_t_3);
; 14388:   __pyx_t_3 = 0;
; 14389: 
; 14390:   /* "View.MemoryView":665
; 14391:  * 
; 14392:  *     result = []
; 14393:  *     have_slices = False             # <<<<<<<<<<<<<<
; 14394:  *     seen_ellipsis = False
; 14395:  *     for idx, item in enumerate(tup):
; 14396:  */
; 14397:   __pyx_v_have_slices = 0;
; 14398: 
; 14399:   /* "View.MemoryView":666
; 14400:  *     result = []
; 14401:  *     have_slices = False
; 14402:  *     seen_ellipsis = False             # <<<<<<<<<<<<<<
; 14403:  *     for idx, item in enumerate(tup):
; 14404:  *         if item is Ellipsis:
; 14405:  */
; 14406:   __pyx_v_seen_ellipsis = 0;
; 14407: 
; 14408:   /* "View.MemoryView":667
; 14409:  *     have_slices = False
; 14410:  *     seen_ellipsis = False
; 14411:  *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
; 14412:  *         if item is Ellipsis:
; 14413:  *             if not seen_ellipsis:
; 14414:  */
; 14415:   __Pyx_INCREF(__pyx_int_0);

	mov	rsi, QWORD PTR __pyx_int_0
	mov	r15, rax
	mov	r13d, ebp
	inc	QWORD PTR [rsi]

; 14416:   __pyx_t_3 = __pyx_int_0;
; 14417:   if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {

	mov	rax, QWORD PTR [r14+8]
	mov	edi, ebp
	cmp	rax, QWORD PTR __imp_PyList_Type
	je	$LN201@unellipsif
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	je	$LN201@unellipsif

; 14420:   } else {
; 14421:     __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_v_tup$1$[rsp]
	or	r14, -1
	call	QWORD PTR __imp_PyObject_GetIter
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN199@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 667		; 0000029bH
	mov	DWORD PTR __pyx_clineno, 14421		; 00003855H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN199@unellipsif:

; 14422:     __Pyx_GOTREF(__pyx_t_4);
; 14423:     __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR __pyx_t_6$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN265@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 667		; 0000029bH
	mov	DWORD PTR __pyx_clineno, 14423		; 00003857H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN201@unellipsif:

; 14418:     __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;

	inc	QWORD PTR [r14]

; 14419:     __pyx_t_6 = NULL;

	mov	rax, rbp
	mov	r12, r14
	mov	QWORD PTR __pyx_t_6$1$[rsp], rax
	mov	r14, rbp
$LN265@unellipsif:

; 14424:   }
; 14425:   for (;;) {
; 14426:     if (likely(!__pyx_t_6)) {

	lea	rcx, QWORD PTR [r12+r14*8+24]
	mov	QWORD PTR tv1349[rsp], rcx
$LL197@unellipsif:
	test	rax, rax
	jne	SHORT $LN195@unellipsif

; 14427:       if (likely(PyList_CheckExact(__pyx_t_4))) {

	mov	rax, QWORD PTR __imp_PyList_Type
	cmp	QWORD PTR [r12+8], rax
	jne	SHORT $LN194@unellipsif

; 14428:         if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;

	cmp	r14, QWORD PTR [r12+16]
	jge	$LN118@unellipsif

; 14429:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 14430:         __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+24]
	inc	r14
	mov	rbx, QWORD PTR [rax+r14*8-8]
	inc	QWORD PTR [rbx]
	add	rcx, 8
	mov	QWORD PTR tv1349[rsp], rcx

; 14431:         #else
; 14432:         __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 667, __pyx_L1_error)
; 14433:         __Pyx_GOTREF(__pyx_t_7);
; 14434:         #endif
; 14435:       } else {

	jmp	SHORT $LN183@unellipsif
$LN194@unellipsif:

; 14436:         if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

	cmp	r14, QWORD PTR [r12+16]
	jge	$LN118@unellipsif

; 14437:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 14438:         __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rbx, QWORD PTR [rcx]
	inc	r14
	inc	QWORD PTR [rbx]
	add	rcx, 8
	mov	QWORD PTR tv1349[rsp], rcx

; 14439:         #else
; 14440:         __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 667, __pyx_L1_error)
; 14441:         __Pyx_GOTREF(__pyx_t_7);
; 14442:         #endif
; 14443:       }
; 14444:     } else {

	jmp	SHORT $LN183@unellipsif
$LN195@unellipsif:

; 14445:       __pyx_t_7 = __pyx_t_6(__pyx_t_4);

	mov	rcx, r12
	call	rax
	mov	rbx, rax

; 14446:       if (unlikely(!__pyx_t_7)) {

	test	rax, rax
	je	$LN247@unellipsif
$LN183@unellipsif:

; 14451:         }
; 14452:         break;
; 14453:       }
; 14454:       __Pyx_GOTREF(__pyx_t_7);
; 14455:     }
; 14456:     __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);

	mov	rcx, QWORD PTR __pyx_v_item$1$[rsp]
	mov	QWORD PTR __pyx_v_item$1$[rsp], rbx
	test	rcx, rcx
	je	SHORT $LN173@unellipsif
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN173@unellipsif
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN173@unellipsif:

; 14457:     __pyx_t_7 = 0;
; 14458:     __Pyx_INCREF(__pyx_t_3);
; 14459:     __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);

	mov	rcx, QWORD PTR __pyx_v_idx$1$[rsp]
	inc	QWORD PTR [rsi]
	mov	QWORD PTR __pyx_v_idx$1$[rsp], rsi
	test	rcx, rcx
	je	SHORT $LN160@unellipsif
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN160@unellipsif
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN160@unellipsif:

; 14460:     __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_int_1
	xor	r9d, r9d
	mov	rcx, rsi
	lea	r8d, QWORD PTR [r9+1]
	call	__Pyx_PyInt_AddObjC
	mov	rbx, rax
	test	rax, rax
	je	$LN248@unellipsif

; 14461:     __Pyx_GOTREF(__pyx_t_7);
; 14462:     __Pyx_DECREF(__pyx_t_3);

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN155@unellipsif
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN155@unellipsif:

; 14463:     __pyx_t_3 = __pyx_t_7;
; 14464:     __pyx_t_7 = 0;
; 14465: 
; 14466:     /* "View.MemoryView":668
; 14467:  *     seen_ellipsis = False
; 14468:  *     for idx, item in enumerate(tup):
; 14469:  *         if item is Ellipsis:             # <<<<<<<<<<<<<<
; 14470:  *             if not seen_ellipsis:
; 14471:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14472:  */
; 14473:     __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);

	mov	r9, QWORD PTR __pyx_v_item$1$[rsp]
	mov	rsi, rbx
	mov	rbx, rbp
	cmp	r9, QWORD PTR __pyx_builtin_Ellipsis

; 14474:     __pyx_t_1 = (__pyx_t_2 != 0);
; 14475:     if (__pyx_t_1) {

	jne	$LN151@unellipsif

; 14476: 
; 14477:       /* "View.MemoryView":669
; 14478:  *     for idx, item in enumerate(tup):
; 14479:  *         if item is Ellipsis:
; 14480:  *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
; 14481:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14482:  *                 seen_ellipsis = True
; 14483:  */
; 14484:       __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);

	test	edi, edi

; 14485:       if (__pyx_t_1) {

	jne	$LN150@unellipsif

; 14486: 
; 14487:         /* "View.MemoryView":670
; 14488:  *         if item is Ellipsis:
; 14489:  *             if not seen_ellipsis:
; 14490:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
; 14491:  *                 seen_ellipsis = True
; 14492:  *             else:
; 14493:  */
; 14494:         __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_v_tup$1$[rsp]
	call	QWORD PTR __imp_PyObject_Size
	cmp	rax, -1
	je	$LN249@unellipsif

; 14495:         __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 670, __pyx_L1_error)

	movsxd	rdi, DWORD PTR __pyx_v_ndim$[rsp]
	sub	rdi, rax
	inc	rdi
	mov	rcx, rdi
	cmovs	rcx, rbp
	call	QWORD PTR __imp_PyList_New
	mov	rbx, rax
	test	rax, rax
	je	$LN250@unellipsif

; 14496:         __Pyx_GOTREF(__pyx_t_7);
; 14497:         { Py_ssize_t __pyx_temp;
; 14498:           for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {

	mov	rcx, rbp
	test	rdi, rdi
	jle	SHORT $LN145@unellipsif
	mov	rdx, QWORD PTR __pyx_slice__25
$LL147@unellipsif:

; 14499:             __Pyx_INCREF(__pyx_slice__25);

	inc	QWORD PTR [rdx]

; 14500:             __Pyx_GIVEREF(__pyx_slice__25);
; 14501:             PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__25);

	mov	rax, QWORD PTR [rbx+24]
	inc	rcx
	cmp	rcx, rdi
	mov	QWORD PTR [rax+rcx*8-8], rdx
	jl	SHORT $LL147@unellipsif
$LN145@unellipsif:

; 14502:           }
; 14503:         }
; 14504:         __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rdx, rbx
	mov	rcx, r15
	call	QWORD PTR __imp__PyList_Extend
	test	rax, rax
	je	$LN251@unellipsif
	add	QWORD PTR [rax], -1
	jne	SHORT $LN222@unellipsif
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN222@unellipsif:

; 14505:         __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN142@unellipsif
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN142@unellipsif:

; 14546: 
; 14547:       /* "View.MemoryView":668
; 14548:  *     seen_ellipsis = False
; 14549:  *     for idx, item in enumerate(tup):
; 14550:  *         if item is Ellipsis:             # <<<<<<<<<<<<<<
; 14551:  *             if not seen_ellipsis:
; 14552:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14553:  */
; 14554:       goto __pyx_L6;

	mov	rcx, QWORD PTR tv1349[rsp]
	mov	rax, QWORD PTR __pyx_t_6$1$[rsp]
	mov	edi, 1
	mov	r13d, edi
	mov	rbx, rbp
	jmp	$LL197@unellipsif
$LN150@unellipsif:

; 14506: 
; 14507:         /* "View.MemoryView":671
; 14508:  *             if not seen_ellipsis:
; 14509:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14510:  *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
; 14511:  *             else:
; 14512:  *                 result.append(slice(None))
; 14513:  */
; 14514:         __pyx_v_seen_ellipsis = 1;
; 14515: 
; 14516:         /* "View.MemoryView":669
; 14517:  *     for idx, item in enumerate(tup):
; 14518:  *         if item is Ellipsis:
; 14519:  *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
; 14520:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14521:  *                 seen_ellipsis = True
; 14522:  */
; 14523:         goto __pyx_L7;
; 14524:       }
; 14525: 
; 14526:       /* "View.MemoryView":673
; 14527:  *                 seen_ellipsis = True
; 14528:  *             else:
; 14529:  *                 result.append(slice(None))             # <<<<<<<<<<<<<<
; 14530:  *             have_slices = True
; 14531:  *         else:
; 14532:  */
; 14533:       /*else*/ {
; 14534:         __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__26); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 673, __pyx_L1_error)

	mov	rcx, QWORD PTR [r15+32]
	mov	r8, QWORD PTR [r15+16]
	mov	edx, ebp
	mov	rax, rcx
	sar	rax, 1
	cmp	r8, rax
	mov	eax, ebp
	setg	dl
	cmp	rcx, r8
	setg	al
	test	edx, eax
	je	SHORT $LN227@unellipsif
	mov	rcx, QWORD PTR __pyx_slice__26

; 14535:       }
; 14536:       __pyx_L7:;
; 14537: 
; 14538:       /* "View.MemoryView":674
; 14539:  *             else:
; 14540:  *                 result.append(slice(None))
; 14541:  *             have_slices = True             # <<<<<<<<<<<<<<
; 14542:  *         else:
; 14543:  *             if not isinstance(item, slice) and not PyIndex_Check(item):
; 14544:  */
; 14545:       __pyx_v_have_slices = 1;

	mov	r13d, 1
	inc	QWORD PTR [rcx]
	mov	rax, QWORD PTR [r15+24]
	mov	QWORD PTR [rax+r8*8], rcx

; 14546: 
; 14547:       /* "View.MemoryView":668
; 14548:  *     seen_ellipsis = False
; 14549:  *     for idx, item in enumerate(tup):
; 14550:  *         if item is Ellipsis:             # <<<<<<<<<<<<<<
; 14551:  *             if not seen_ellipsis:
; 14552:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14553:  */
; 14554:       goto __pyx_L6;

	mov	rcx, QWORD PTR tv1349[rsp]
	lea	rax, QWORD PTR [r8+1]
	mov	QWORD PTR [r15+16], rax
	mov	rax, QWORD PTR __pyx_t_6$1$[rsp]
	jmp	$LL197@unellipsif

; 14506: 
; 14507:         /* "View.MemoryView":671
; 14508:  *             if not seen_ellipsis:
; 14509:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14510:  *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
; 14511:  *             else:
; 14512:  *                 result.append(slice(None))
; 14513:  */
; 14514:         __pyx_v_seen_ellipsis = 1;
; 14515: 
; 14516:         /* "View.MemoryView":669
; 14517:  *     for idx, item in enumerate(tup):
; 14518:  *         if item is Ellipsis:
; 14519:  *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
; 14520:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14521:  *                 seen_ellipsis = True
; 14522:  */
; 14523:         goto __pyx_L7;
; 14524:       }
; 14525: 
; 14526:       /* "View.MemoryView":673
; 14527:  *                 seen_ellipsis = True
; 14528:  *             else:
; 14529:  *                 result.append(slice(None))             # <<<<<<<<<<<<<<
; 14530:  *             have_slices = True
; 14531:  *         else:
; 14532:  */
; 14533:       /*else*/ {
; 14534:         __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__26); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 673, __pyx_L1_error)

$LN227@unellipsif:
	mov	rdx, QWORD PTR __pyx_slice__26
	mov	rcx, r15
	call	QWORD PTR __imp_PyList_Append
	cmp	eax, -1
	je	$LN252@unellipsif

; 14546: 
; 14547:       /* "View.MemoryView":668
; 14548:  *     seen_ellipsis = False
; 14549:  *     for idx, item in enumerate(tup):
; 14550:  *         if item is Ellipsis:             # <<<<<<<<<<<<<<
; 14551:  *             if not seen_ellipsis:
; 14552:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14553:  */
; 14554:       goto __pyx_L6;

	mov	rcx, QWORD PTR tv1349[rsp]
	mov	rax, QWORD PTR __pyx_t_6$1$[rsp]
	mov	r13d, 1
$__pyx_L7$24652:
	jmp	$LL197@unellipsif
$LN151@unellipsif:

; 14555:     }
; 14556: 
; 14557:     /* "View.MemoryView":676
; 14558:  *             have_slices = True
; 14559:  *         else:
; 14560:  *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
; 14561:  *                 raise TypeError("Cannot index with type '%s'" % type(item))
; 14562:  * 
; 14563:  */
; 14564:     /*else*/ {
; 14565:       __pyx_t_2 = PySlice_Check(__pyx_v_item); 

	mov	rdx, QWORD PTR [r9+8]
	mov	r8, QWORD PTR __imp_PySlice_Type

; 14566:       __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);

	mov	eax, ebp
	cmp	rdx, r8
	setne	al

; 14567:       if (__pyx_t_10) {

	test	eax, eax
	je	SHORT $LN262@unellipsif

; 14568:       } else {
; 14569:         __pyx_t_1 = __pyx_t_10;
; 14570:         goto __pyx_L9_bool_binop_done;
; 14571:       }
; 14572:       __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);

	mov	rax, QWORD PTR [rdx+96]
	test	rax, rax
	je	SHORT $LN210@unellipsif
	bt	DWORD PTR [rdx+168], 17
	jae	SHORT $LN210@unellipsif
	cmp	QWORD PTR [rax+304], rbx
	je	SHORT $LN210@unellipsif
	mov	ecx, 1
	jmp	SHORT $LN211@unellipsif
$LN210@unellipsif:
	mov	ecx, ebp
$LN211@unellipsif:
	test	ecx, ecx
	mov	eax, ebp
$__pyx_L9_bool_binop_done$24659:
	sete	al

; 14573:       __pyx_t_1 = __pyx_t_10;
; 14574:       __pyx_L9_bool_binop_done:;
; 14575:       if (__pyx_t_1) {

	test	eax, eax
	jne	$LN253@unellipsif
$LN262@unellipsif:

; 14597: 
; 14598:         /* "View.MemoryView":676
; 14599:  *             have_slices = True
; 14600:  *         else:
; 14601:  *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
; 14602:  *                 raise TypeError("Cannot index with type '%s'" % type(item))
; 14603:  * 
; 14604:  */
; 14605:       }
; 14606: 
; 14607:       /* "View.MemoryView":679
; 14608:  *                 raise TypeError("Cannot index with type '%s'" % type(item))
; 14609:  * 
; 14610:  *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
; 14611:  *             result.append(item)
; 14612:  * 
; 14613:  */
; 14614:       __pyx_t_10 = (__pyx_v_have_slices != 0);

	test	r13d, r13d
	mov	eax, ebp
	setne	al
	mov	r13d, eax

; 14615:       if (!__pyx_t_10) {

	test	eax, eax
	jne	SHORT $__pyx_L11_bool_binop_done$24692

; 14616:       } else {
; 14617:         __pyx_t_1 = __pyx_t_10;
; 14618:         goto __pyx_L11_bool_binop_done;
; 14619:       }
; 14620:       __pyx_t_10 = PySlice_Check(__pyx_v_item); 

	cmp	rdx, r8

; 14621:       __pyx_t_2 = (__pyx_t_10 != 0);

	mov	r13d, ebp
	sete	r13b
$__pyx_L11_bool_binop_done$24692:

; 14622:       __pyx_t_1 = __pyx_t_2;
; 14623:       __pyx_L11_bool_binop_done:;
; 14624:       __pyx_v_have_slices = __pyx_t_1;
; 14625: 
; 14626:       /* "View.MemoryView":680
; 14627:  * 
; 14628:  *             have_slices = have_slices or isinstance(item, slice)
; 14629:  *             result.append(item)             # <<<<<<<<<<<<<<
; 14630:  * 
; 14631:  *     nslices = ndim - len(result)
; 14632:  */
; 14633:       __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 680, __pyx_L1_error)

	mov	rcx, QWORD PTR [r15+32]
	mov	r8, QWORD PTR [r15+16]
	mov	edx, ebp
	mov	rax, rcx
	sar	rax, 1
	cmp	r8, rax
	mov	eax, ebp
	setg	dl
	cmp	rcx, r8
	setg	al
	test	edx, eax
	je	SHORT $LN230@unellipsif
	inc	QWORD PTR [r9]
	mov	rax, QWORD PTR [r15+24]
	mov	rcx, QWORD PTR tv1349[rsp]
	mov	QWORD PTR [rax+r8*8], r9
	lea	rax, QWORD PTR [r8+1]
	mov	QWORD PTR [r15+16], rax
	mov	rax, QWORD PTR __pyx_t_6$1$[rsp]
	jmp	$LL197@unellipsif
$LN230@unellipsif:
	mov	rdx, r9
	mov	rcx, r15
	call	QWORD PTR __imp_PyList_Append
	cmp	eax, -1
	je	$LN254@unellipsif

; 14634:     }
; 14635:     __pyx_L6:;
; 14636: 
; 14637:     /* "View.MemoryView":667
; 14638:  *     have_slices = False
; 14639:  *     seen_ellipsis = False
; 14640:  *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
; 14641:  *         if item is Ellipsis:
; 14642:  *             if not seen_ellipsis:
; 14643:  */
; 14644:   }

	mov	rcx, QWORD PTR tv1349[rsp]
	mov	rax, QWORD PTR __pyx_t_6$1$[rsp]
$__pyx_L6$24655:
	jmp	$LL197@unellipsif
$LN251@unellipsif:

; 14502:           }
; 14503:         }
; 14504:         __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 670		; 0000029eH
	mov	DWORD PTR __pyx_clineno, 14504		; 000038a8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN250@unellipsif:

; 14495:         __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 670		; 0000029eH
	mov	DWORD PTR __pyx_clineno, 14495		; 0000389fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN249@unellipsif:

; 14486: 
; 14487:         /* "View.MemoryView":670
; 14488:  *         if item is Ellipsis:
; 14489:  *             if not seen_ellipsis:
; 14490:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
; 14491:  *                 seen_ellipsis = True
; 14492:  *             else:
; 14493:  */
; 14494:         __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(2, 670, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 670		; 0000029eH
	mov	DWORD PTR __pyx_clineno, 14494		; 0000389eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN252@unellipsif:

; 14506: 
; 14507:         /* "View.MemoryView":671
; 14508:  *             if not seen_ellipsis:
; 14509:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14510:  *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
; 14511:  *             else:
; 14512:  *                 result.append(slice(None))
; 14513:  */
; 14514:         __pyx_v_seen_ellipsis = 1;
; 14515: 
; 14516:         /* "View.MemoryView":669
; 14517:  *     for idx, item in enumerate(tup):
; 14518:  *         if item is Ellipsis:
; 14519:  *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
; 14520:  *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
; 14521:  *                 seen_ellipsis = True
; 14522:  */
; 14523:         goto __pyx_L7;
; 14524:       }
; 14525: 
; 14526:       /* "View.MemoryView":673
; 14527:  *                 seen_ellipsis = True
; 14528:  *             else:
; 14529:  *                 result.append(slice(None))             # <<<<<<<<<<<<<<
; 14530:  *             have_slices = True
; 14531:  *         else:
; 14532:  */
; 14533:       /*else*/ {
; 14534:         __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__26); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 673, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 673		; 000002a1H
	mov	DWORD PTR __pyx_clineno, 14534		; 000038c6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN253@unellipsif:

; 14576: 
; 14577:         /* "View.MemoryView":677
; 14578:  *         else:
; 14579:  *             if not isinstance(item, slice) and not PyIndex_Check(item):
; 14580:  *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
; 14581:  * 
; 14582:  *             have_slices = have_slices or isinstance(item, slice)
; 14583:  */
; 14584:         __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 677, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Cannot_index_with_type_s
	call	QWORD PTR __imp_PyString_Format
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN134@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 677		; 000002a5H
	mov	DWORD PTR __pyx_clineno, 14584		; 000038f8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN134@unellipsif:

; 14585:         __Pyx_GOTREF(__pyx_t_7);
; 14586:         __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 677, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	mov	QWORD PTR __pyx_t_11$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN133@unellipsif
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 677		; 000002a5H
	mov	DWORD PTR __pyx_clineno, 14586		; 000038faH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$24534
$LN133@unellipsif:

; 14587:         __Pyx_GOTREF(__pyx_t_11);
; 14588:         __Pyx_GIVEREF(__pyx_t_7);
; 14589:         PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
; 14590:         __pyx_t_7 = 0;
; 14591:         __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 677, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN131@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 677		; 000002a5H
	mov	DWORD PTR __pyx_clineno, 14591		; 000038ffH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN131@unellipsif:

; 14592:         __Pyx_GOTREF(__pyx_t_7);
; 14593:         __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN130@unellipsif
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN130@unellipsif:

; 14594:         __Pyx_Raise(__pyx_t_7, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rbx
	mov	QWORD PTR __pyx_t_11$1$[rsp], rbp
	call	__Pyx_Raise

; 14595:         __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN125@unellipsif
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN125@unellipsif:

; 14596:         __PYX_ERR(2, 677, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	rbx, rbp
	mov	DWORD PTR __pyx_lineno, 677		; 000002a5H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 14596		; 00003904H
	jmp	$__pyx_L1_error$24534
$LN254@unellipsif:

; 14622:       __pyx_t_1 = __pyx_t_2;
; 14623:       __pyx_L11_bool_binop_done:;
; 14624:       __pyx_v_have_slices = __pyx_t_1;
; 14625: 
; 14626:       /* "View.MemoryView":680
; 14627:  * 
; 14628:  *             have_slices = have_slices or isinstance(item, slice)
; 14629:  *             result.append(item)             # <<<<<<<<<<<<<<
; 14630:  * 
; 14631:  *     nslices = ndim - len(result)
; 14632:  */
; 14633:       __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 680, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 680		; 000002a8H
	mov	DWORD PTR __pyx_clineno, 14633		; 00003929H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN248@unellipsif:

; 14460:     __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 667		; 0000029bH
	mov	DWORD PTR __pyx_clineno, 14460		; 0000387cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN247@unellipsif:

; 14447:         PyObject* exc_type = PyErr_Occurred();

	call	QWORD PTR __imp_PyErr_Occurred

; 14448:         if (exc_type) {

	test	rax, rax
	je	SHORT $LN118@unellipsif

; 14449:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

	mov	rcx, QWORD PTR __imp_PyExc_StopIteration
	mov	r8, QWORD PTR [rcx]
	cmp	rax, r8
	je	SHORT $LN263@unellipsif
	mov	rcx, QWORD PTR [rax+8]
	cmp	rcx, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN214@unellipsif
	test	DWORD PTR [rcx+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN215@unellipsif
	bt	DWORD PTR [rax+168], 30
	jb	SHORT $LN214@unellipsif
$LN215@unellipsif:
	mov	rdx, r8
	mov	rcx, rax
	call	QWORD PTR __imp_PyErr_GivenExceptionMatches
	jmp	SHORT $LN217@unellipsif
$LN214@unellipsif:
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_inner_PyErr_GivenExceptionMatches2
$LN217@unellipsif:
	test	eax, eax
	jne	SHORT $LN263@unellipsif

; 14450:           else __PYX_ERR(2, 667, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 667		; 0000029bH
	mov	DWORD PTR __pyx_clineno, 14450		; 00003872H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN263@unellipsif:

; 14449:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear
$LN118@unellipsif:

; 14645:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN117@unellipsif
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN117@unellipsif:

; 14646:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rsi], -1
	mov	r12, rbp
	jne	SHORT $LN112@unellipsif
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN112@unellipsif:

; 14647: 
; 14648:   /* "View.MemoryView":682
; 14649:  *             result.append(item)
; 14650:  * 
; 14651:  *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
; 14652:  *     if nslices:
; 14653:  *         result.extend([slice(None)] * nslices)
; 14654:  */
; 14655:   __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 682, __pyx_L1_error)

	mov	rax, QWORD PTR [r15+16]
	cmp	rax, -1
	jne	SHORT $LN108@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 682		; 000002aaH
	mov	DWORD PTR __pyx_clineno, 14655		; 0000393fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@unellipsif
$LN108@unellipsif:

; 14656:   __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

	movsxd	rdi, DWORD PTR __pyx_v_ndim$[rsp]
	sub	rdi, rax

; 14657: 
; 14658:   /* "View.MemoryView":683
; 14659:  * 
; 14660:  *     nslices = ndim - len(result)
; 14661:  *     if nslices:             # <<<<<<<<<<<<<<
; 14662:  *         result.extend([slice(None)] * nslices)
; 14663:  * 
; 14664:  */
; 14665:   __pyx_t_1 = (__pyx_v_nslices != 0);
; 14666:   if (__pyx_t_1) {

	je	$LN89@unellipsif

; 14667: 
; 14668:     /* "View.MemoryView":684
; 14669:  *     nslices = ndim - len(result)
; 14670:  *     if nslices:
; 14671:  *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
; 14672:  * 
; 14673:  *     return have_slices or nslices, tuple(result)
; 14674:  */
; 14675:     __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 684, __pyx_L1_error)

	mov	rcx, rdi
	test	rdi, rdi
	cmovs	rcx, rbp
	call	QWORD PTR __imp_PyList_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN106@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 684		; 000002acH
	mov	DWORD PTR __pyx_clineno, 14675		; 00003953H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN106@unellipsif:

; 14676:     __Pyx_GOTREF(__pyx_t_3);
; 14677:     { Py_ssize_t __pyx_temp;
; 14678:       for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {

	mov	rcx, rbp
	test	rdi, rdi
	jle	SHORT $LN103@unellipsif
	mov	rdx, QWORD PTR __pyx_slice__27
$LL105@unellipsif:

; 14679:         __Pyx_INCREF(__pyx_slice__27);

	inc	QWORD PTR [rdx]

; 14680:         __Pyx_GIVEREF(__pyx_slice__27);
; 14681:         PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__27);

	mov	rax, QWORD PTR [rsi+24]
	inc	rcx
	cmp	rcx, rdi
	mov	QWORD PTR [rax+rcx*8-8], rdx
	jl	SHORT $LL105@unellipsif
$LN103@unellipsif:

; 14682:       }
; 14683:     }
; 14684:     __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 684, __pyx_L1_error)

	mov	rdx, rsi
	mov	rcx, r15
	call	QWORD PTR __imp__PyList_Extend
	test	rax, rax
	je	SHORT $LN264@unellipsif
	add	QWORD PTR [rax], -1
	jne	SHORT $LN101@unellipsif
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN101@unellipsif:

; 14685:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN89@unellipsif
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN89@unellipsif:

; 14686: 
; 14687:     /* "View.MemoryView":683
; 14688:  * 
; 14689:  *     nslices = ndim - len(result)
; 14690:  *     if nslices:             # <<<<<<<<<<<<<<
; 14691:  *         result.extend([slice(None)] * nslices)
; 14692:  * 
; 14693:  */
; 14694:   }
; 14695: 
; 14696:   /* "View.MemoryView":686
; 14697:  *         result.extend([slice(None)] * nslices)
; 14698:  * 
; 14699:  *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
; 14700:  * 
; 14701:  * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
; 14702:  */
; 14703:   __Pyx_XDECREF(__pyx_r);
; 14704:   if (!__pyx_v_have_slices) {

	test	r13d, r13d
	jne	SHORT $LN257@unellipsif

; 14709:     __pyx_t_4 = 0;
; 14710:     goto __pyx_L14_bool_binop_done;
; 14711:   }
; 14712:   __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 686, __pyx_L1_error)

	mov	rcx, rdi
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN83@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 686		; 000002aeH
	mov	DWORD PTR __pyx_clineno, 14712		; 00003978H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN73@unellipsif
$LN264@unellipsif:

; 14682:       }
; 14683:     }
; 14684:     __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 684, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 684		; 000002acH
	mov	DWORD PTR __pyx_clineno, 14684		; 0000395cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24534
$LN83@unellipsif:

; 14713:   __Pyx_GOTREF(__pyx_t_4);
; 14714:   __pyx_t_3 = __pyx_t_4;

	mov	rsi, r12

; 14715:   __pyx_t_4 = 0;

	jmp	SHORT $__pyx_L14_bool_binop_done$24764
$LN257@unellipsif:

; 14705:   } else {
; 14706:     __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 686, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	r12, QWORD PTR __imp__Py_TrueStruct
	test	r12, r12
	jne	SHORT $LN84@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 686		; 000002aeH
	mov	DWORD PTR __pyx_clineno, 14706		; 00003972H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN73@unellipsif
$LN84@unellipsif:

; 14707:     __Pyx_GOTREF(__pyx_t_4);
; 14708:     __pyx_t_3 = __pyx_t_4;

	mov	rsi, r12
$__pyx_L14_bool_binop_done$24764:

; 14716:   __pyx_L14_bool_binop_done:;
; 14717:   __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 686, __pyx_L1_error)

	mov	rcx, r15
	call	QWORD PTR __imp_PyList_AsTuple
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN82@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 686		; 000002aeH
	mov	DWORD PTR __pyx_clineno, 14717		; 0000397dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$24534
$LN82@unellipsif:

; 14718:   __Pyx_GOTREF(__pyx_t_4);
; 14719:   __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 686, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	$LN81@unellipsif
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 686		; 000002aeH
	mov	DWORD PTR __pyx_clineno, 14719		; 0000397fH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$24534:

; 14728:   __pyx_t_7 = 0;
; 14729:   goto __pyx_L0;
; 14730: 
; 14731:   /* "View.MemoryView":654
; 14732:  *     return isinstance(o, memoryview)
; 14733:  * 
; 14734:  * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
; 14735:  *     """
; 14736:  *     Replace all ellipses with full slices and fill incomplete indices with
; 14737:  */
; 14738: 
; 14739:   /* function exit code */
; 14740:   __pyx_L1_error:;
; 14741:   __Pyx_XDECREF(__pyx_t_3);

	test	rsi, rsi
	je	SHORT $LN73@unellipsif
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN73@unellipsif
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN73@unellipsif:

; 14742:   __Pyx_XDECREF(__pyx_t_4);

	test	r12, r12
	je	SHORT $LN63@unellipsif
	add	QWORD PTR [r12], -1
	jne	SHORT $LN63@unellipsif
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN63@unellipsif:

; 14743:   __Pyx_XDECREF(__pyx_t_7);

	test	rbx, rbx
	je	SHORT $LN53@unellipsif
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN53@unellipsif
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN53@unellipsif:

; 14744:   __Pyx_XDECREF(__pyx_t_11);

	mov	rcx, QWORD PTR __pyx_t_11$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN43@unellipsif
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN43@unellipsif
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN43@unellipsif:

; 14745:   __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BN@DEPKIPMO@View?4MemoryView?4_unellipsify?$AA@
	call	__Pyx_AddTraceback

; 14746:   __pyx_r = 0;

	jmp	SHORT $__pyx_L0$24771
$LN81@unellipsif:

; 14720:   __Pyx_GOTREF(__pyx_t_7);
; 14721:   __Pyx_GIVEREF(__pyx_t_3);
; 14722:   PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);

	mov	QWORD PTR [rax+24], rsi

; 14723:   __Pyx_GIVEREF(__pyx_t_4);
; 14724:   PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);

	mov	QWORD PTR [rax+32], r12

; 14725:   __pyx_t_3 = 0;
; 14726:   __pyx_t_4 = 0;
; 14727:   __pyx_r = ((PyObject*)__pyx_t_7);

	mov	rbp, rax
$__pyx_L0$24771:

; 14747:   __pyx_L0:;
; 14748:   __Pyx_XDECREF(__pyx_v_tup);

	mov	rcx, QWORD PTR __pyx_v_tup$1$[rsp]
	mov	r14, QWORD PTR [rsp+80]
	mov	r13, QWORD PTR [rsp+88]
	mov	r12, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+120]
	test	rcx, rcx
	je	SHORT $LN33@unellipsif
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN33@unellipsif
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN33@unellipsif:

; 14749:   __Pyx_XDECREF(__pyx_v_result);

	test	r15, r15
	je	SHORT $LN23@unellipsif
	add	QWORD PTR [r15], -1
	jne	SHORT $LN23@unellipsif
	mov	rax, QWORD PTR [r15+8]
	mov	rcx, r15
	call	QWORD PTR [rax+48]
$LN23@unellipsif:

; 14750:   __Pyx_XDECREF(__pyx_v_idx);

	mov	rcx, QWORD PTR __pyx_v_idx$1$[rsp]
	mov	r15, QWORD PTR [rsp+72]
	test	rcx, rcx
	je	SHORT $LN13@unellipsif
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN13@unellipsif
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@unellipsif:

; 14751:   __Pyx_XDECREF(__pyx_v_item);

	mov	rax, QWORD PTR __pyx_v_item$1$[rsp]
	test	rax, rax
	je	SHORT $LN269@unellipsif
	add	QWORD PTR [rax], -1
	jne	SHORT $LN269@unellipsif
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN269@unellipsif:

; 14752:   __Pyx_XGIVEREF(__pyx_r);
; 14753:   __Pyx_RefNannyFinishContext();
; 14754:   return __pyx_r;

	mov	rax, rbp

; 14755: }

	add	rsp, 128				; 00000080H
	pop	rbp
	ret	0
_unellipsify ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NDCINLLE@View?4MemoryView?4assert_direct_di@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$assert_direct_dimensions DD imagerel assert_direct_dimensions
	DD	imagerel assert_direct_dimensions+215
	DD	imagerel $unwind$assert_direct_dimensions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$assert_direct_dimensions DD 034401H
	DD	043444H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@NDCINLLE@View?4MemoryView?4assert_direct_di@
CONST	SEGMENT
??_C@_0CJ@NDCINLLE@View?4MemoryView?4assert_direct_di@ DB 'View.MemoryVie'
	DB	'w.assert_direct_dimensions', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT assert_direct_dimensions
_TEXT	SEGMENT
__pyx_v_suboffsets$ = 48
__pyx_v_ndim$ = 56
assert_direct_dimensions PROC				; COMDAT

; 14765: static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {

	sub	rsp, 40					; 00000028H

; 14766:   Py_ssize_t __pyx_v_suboffset;
; 14767:   PyObject *__pyx_r = NULL;
; 14768:   __Pyx_RefNannyDeclarations
; 14769:   Py_ssize_t *__pyx_t_1;
; 14770:   Py_ssize_t *__pyx_t_2;
; 14771:   Py_ssize_t *__pyx_t_3;
; 14772:   int __pyx_t_4;
; 14773:   PyObject *__pyx_t_5 = NULL;
; 14774:   __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);
; 14775: 
; 14776:   /* "View.MemoryView":689
; 14777:  * 
; 14778:  * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
; 14779:  *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
; 14780:  *         if suboffset >= 0:
; 14781:  *             raise ValueError("Indirect dimensions not supported")
; 14782:  */
; 14783:   __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);

	movsxd	rax, edx
	lea	rdx, QWORD PTR [rcx+rax*8]

; 14784:   for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {

	cmp	rcx, rdx
	jae	SHORT $LN18@assert_dir
$LL20@assert_dir:

; 14785:     __pyx_t_1 = __pyx_t_3;
; 14786:     __pyx_v_suboffset = (__pyx_t_1[0]);
; 14787: 
; 14788:     /* "View.MemoryView":690
; 14789:  * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
; 14790:  *     for suboffset in suboffsets[:ndim]:
; 14791:  *         if suboffset >= 0:             # <<<<<<<<<<<<<<
; 14792:  *             raise ValueError("Indirect dimensions not supported")
; 14793:  * 
; 14794:  */
; 14795:     __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);

	cmp	QWORD PTR [rcx], 0

; 14796:     if (__pyx_t_4) {

	jge	SHORT $LN24@assert_dir
	add	rcx, 8
	cmp	rcx, rdx
	jb	SHORT $LL20@assert_dir
$LN18@assert_dir:

; 14810: 
; 14811:       /* "View.MemoryView":690
; 14812:  * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
; 14813:  *     for suboffset in suboffsets[:ndim]:
; 14814:  *         if suboffset >= 0:             # <<<<<<<<<<<<<<
; 14815:  *             raise ValueError("Indirect dimensions not supported")
; 14816:  * 
; 14817:  */
; 14818:     }
; 14819:   }
; 14820: 
; 14821:   /* "View.MemoryView":688
; 14822:  *     return have_slices or nslices, tuple(result)
; 14823:  * 
; 14824:  * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
; 14825:  *     for suboffset in suboffsets[:ndim]:
; 14826:  *         if suboffset >= 0:
; 14827:  */
; 14828: 
; 14829:   /* function exit code */
; 14830:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
$__pyx_L0$24933:

; 14840: }

	add	rsp, 40					; 00000028H
	ret	0
$LN24@assert_dir:

; 14797: 
; 14798:       /* "View.MemoryView":691
; 14799:  *     for suboffset in suboffsets[:ndim]:
; 14800:  *         if suboffset >= 0:
; 14801:  *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
; 14802:  * 
; 14803:  * 
; 14804:  */
; 14805:       __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 691, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__28
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	QWORD PTR [rsp+32], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@assert_dir
	mov	r9, QWORD PTR __pyx_f+16
	mov	edx, 14805				; 000039d5H
	mov	DWORD PTR __pyx_lineno, 691		; 000002b3H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
	jmp	SHORT $LN3@assert_dir
$LN16@assert_dir:

; 14806:       __Pyx_GOTREF(__pyx_t_5);
; 14807:       __Pyx_Raise(__pyx_t_5, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 14808:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@assert_dir
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@assert_dir:

; 14809:       __PYX_ERR(2, 691, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	edx, 14809				; 000039d9H
	mov	DWORD PTR __pyx_lineno, 691		; 000002b3H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
$LN3@assert_dir:

; 14831:   goto __pyx_L0;
; 14832:   __pyx_L1_error:;
; 14833:   __Pyx_XDECREF(__pyx_t_5);
; 14834:   __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CJ@NDCINLLE@View?4MemoryView?4assert_direct_di@
	mov	r8d, 691				; 000002b3H
	call	__Pyx_AddTraceback
	mov	rbx, QWORD PTR [rsp+32]

; 14835:   __pyx_r = 0;
; 14836:   __pyx_L0:;
; 14837:   __Pyx_XGIVEREF(__pyx_r);
; 14838:   __Pyx_RefNannyFinishContext();
; 14839:   return __pyx_r;

	xor	eax, eax

; 14840: }

	add	rsp, 40					; 00000028H
	ret	0
assert_direct_dimensions ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@CKBMDJNI@View?4MemoryView?4pybuffer_index?$AA@ ; `string'
PUBLIC	??_C@_0CD@OPLMMFNH@integer?5division?5or?5modulo?5by?5ze@ ; `string'
EXTRN	__imp_PyExc_ZeroDivisionError:QWORD
_BSS	SEGMENT
__pyx_builtin_IndexError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pybuffer_index DD imagerel __pyx_pybuffer_index
	DD	imagerel __pyx_pybuffer_index+884
	DD	imagerel $unwind$__pyx_pybuffer_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pybuffer_index DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT ??_C@_0BP@CKBMDJNI@View?4MemoryView?4pybuffer_index?$AA@
CONST	SEGMENT
??_C@_0BP@CKBMDJNI@View?4MemoryView?4pybuffer_index?$AA@ DB 'View.MemoryV'
	DB	'iew.pybuffer_index', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OPLMMFNH@integer?5division?5or?5modulo?5by?5ze@
CONST	SEGMENT
??_C@_0CD@OPLMMFNH@integer?5division?5or?5modulo?5by?5ze@ DB 'integer div'
	DB	'ision or modulo by zero', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pybuffer_index
_TEXT	SEGMENT
__pyx_v_view$ = 48
__pyx_v_bufp$ = 56
__pyx_v_index$ = 64
__pyx_v_dim$ = 72
__pyx_pybuffer_index PROC				; COMDAT

; 16208: static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 16209:   Py_ssize_t __pyx_v_shape;
; 16210:   Py_ssize_t __pyx_v_stride;
; 16211:   Py_ssize_t __pyx_v_suboffset;
; 16212:   Py_ssize_t __pyx_v_itemsize;
; 16213:   char *__pyx_v_resultp;
; 16214:   char *__pyx_r;
; 16215:   __Pyx_RefNannyDeclarations
; 16216:   Py_ssize_t __pyx_t_1;
; 16217:   int __pyx_t_2;
; 16218:   PyObject *__pyx_t_3 = NULL;
; 16219:   PyObject *__pyx_t_4 = NULL;
; 16220:   __Pyx_RefNannySetupContext("pybuffer_index", 0);
; 16221: 
; 16222:   /* "View.MemoryView":900
; 16223:  * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
; 16224:  *                           Py_ssize_t dim) except NULL:
; 16225:  *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
; 16226:  *     cdef Py_ssize_t itemsize = view.itemsize
; 16227:  *     cdef char *resultp
; 16228:  */
; 16229:   __pyx_v_suboffset = -1L;
; 16230: 
; 16231:   /* "View.MemoryView":901
; 16232:  *                           Py_ssize_t dim) except NULL:
; 16233:  *     cdef Py_ssize_t shape, stride, suboffset = -1
; 16234:  *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
; 16235:  *     cdef char *resultp
; 16236:  * 
; 16237:  */
; 16238:   __pyx_t_1 = __pyx_v_view->itemsize;
; 16239:   __pyx_v_itemsize = __pyx_t_1;

	mov	r10, QWORD PTR [rcx+24]
	xor	edi, edi
	or	r11, -1
	mov	rbx, rdx

; 16240: 
; 16241:   /* "View.MemoryView":904
; 16242:  *     cdef char *resultp
; 16243:  * 
; 16244:  *     if view.ndim == 0:             # <<<<<<<<<<<<<<
; 16245:  *         shape = view.len / itemsize
; 16246:  *         stride = itemsize
; 16247:  */
; 16248:   __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);

	cmp	DWORD PTR [rcx+36], edi

; 16249:   if (__pyx_t_2) {

	jne	SHORT $LN67@pyx_pybuff

; 16250: 
; 16251:     /* "View.MemoryView":905
; 16252:  * 
; 16253:  *     if view.ndim == 0:
; 16254:  *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
; 16255:  *         stride = itemsize
; 16256:  *     else:
; 16257:  */
; 16258:     if (unlikely(__pyx_v_itemsize == 0)) {

	test	r10, r10
	jne	SHORT $LN66@pyx_pybuff

; 16259:       PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");

	mov	rcx, QWORD PTR __imp_PyExc_ZeroDivisionError
	lea	rdx, OFFSET FLAT:??_C@_0CD@OPLMMFNH@integer?5division?5or?5modulo?5by?5ze@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 16260:       __PYX_ERR(2, 905, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 905		; 00000389H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 16260		; 00003f84H
	jmp	$LN3@pyx_pybuff
$LN66@pyx_pybuff:

; 16261:     }
; 16262:     else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
; 16263:       PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
; 16264:       __PYX_ERR(2, 905, __pyx_L1_error)
; 16265:     }
; 16266:     __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

	mov	rax, QWORD PTR [rcx+16]
	cdq
	idiv	r10
	mov	rdx, rax

; 16267: 
; 16268:     /* "View.MemoryView":906
; 16269:  *     if view.ndim == 0:
; 16270:  *         shape = view.len / itemsize
; 16271:  *         stride = itemsize             # <<<<<<<<<<<<<<
; 16272:  *     else:
; 16273:  *         shape = view.shape[dim]
; 16274:  */
; 16275:     __pyx_v_stride = __pyx_v_itemsize;
; 16276: 
; 16277:     /* "View.MemoryView":904
; 16278:  *     cdef char *resultp
; 16279:  * 
; 16280:  *     if view.ndim == 0:             # <<<<<<<<<<<<<<
; 16281:  *         shape = view.len / itemsize
; 16282:  *         stride = itemsize
; 16283:  */
; 16284:     goto __pyx_L3;

	jmp	SHORT $__pyx_L3$25442
$LN67@pyx_pybuff:

; 16285:   }
; 16286: 
; 16287:   /* "View.MemoryView":908
; 16288:  *         stride = itemsize
; 16289:  *     else:
; 16290:  *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
; 16291:  *         stride = view.strides[dim]
; 16292:  *         if view.suboffsets != NULL:
; 16293:  */
; 16294:   /*else*/ {
; 16295:     __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

	mov	rax, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR [rax+r9*8]

; 16296: 
; 16297:     /* "View.MemoryView":909
; 16298:  *     else:
; 16299:  *         shape = view.shape[dim]
; 16300:  *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
; 16301:  *         if view.suboffsets != NULL:
; 16302:  *             suboffset = view.suboffsets[dim]
; 16303:  */
; 16304:     __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

	mov	rax, QWORD PTR [rcx+56]
	mov	r10, QWORD PTR [rax+r9*8]

; 16305: 
; 16306:     /* "View.MemoryView":910
; 16307:  *         shape = view.shape[dim]
; 16308:  *         stride = view.strides[dim]
; 16309:  *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
; 16310:  *             suboffset = view.suboffsets[dim]
; 16311:  * 
; 16312:  */
; 16313:     __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);

	mov	rax, QWORD PTR [rcx+64]
	test	rax, rax

; 16314:     if (__pyx_t_2) {

	je	SHORT $__pyx_L3$25442

; 16315: 
; 16316:       /* "View.MemoryView":911
; 16317:  *         stride = view.strides[dim]
; 16318:  *         if view.suboffsets != NULL:
; 16319:  *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
; 16320:  * 
; 16321:  *     if index < 0:
; 16322:  */
; 16323:       __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

	mov	r11, QWORD PTR [rax+r9*8]
$__pyx_L3$25442:

; 16324: 
; 16325:       /* "View.MemoryView":910
; 16326:  *         shape = view.shape[dim]
; 16327:  *         stride = view.strides[dim]
; 16328:  *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
; 16329:  *             suboffset = view.suboffsets[dim]
; 16330:  * 
; 16331:  */
; 16332:     }
; 16333:   }
; 16334:   __pyx_L3:;
; 16335: 
; 16336:   /* "View.MemoryView":913
; 16337:  *             suboffset = view.suboffsets[dim]
; 16338:  * 
; 16339:  *     if index < 0:             # <<<<<<<<<<<<<<
; 16340:  *         index += view.shape[dim]
; 16341:  *         if index < 0:
; 16342:  */
; 16343:   __pyx_t_2 = ((__pyx_v_index < 0) != 0);

	test	r8, r8

; 16344:   if (__pyx_t_2) {

	jns	$LN61@pyx_pybuff

; 16345: 
; 16346:     /* "View.MemoryView":914
; 16347:  * 
; 16348:  *     if index < 0:
; 16349:  *         index += view.shape[dim]             # <<<<<<<<<<<<<<
; 16350:  *         if index < 0:
; 16351:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16352:  */
; 16353:     __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

	mov	rax, QWORD PTR [rcx+48]
	add	r8, QWORD PTR [rax+r9*8]

; 16354: 
; 16355:     /* "View.MemoryView":915
; 16356:  *     if index < 0:
; 16357:  *         index += view.shape[dim]
; 16358:  *         if index < 0:             # <<<<<<<<<<<<<<
; 16359:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16360:  * 
; 16361:  */
; 16362:     __pyx_t_2 = ((__pyx_v_index < 0) != 0);
; 16363:     if (__pyx_t_2) {

	jns	$LN61@pyx_pybuff

; 16364: 
; 16365:       /* "View.MemoryView":916
; 16366:  *         index += view.shape[dim]
; 16367:  *         if index < 0:
; 16368:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
; 16369:  * 
; 16370:  *     if index >= shape:
; 16371:  */
; 16372:       __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 916, __pyx_L1_error)

	mov	rcx, r9
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN60@pyx_pybuff
	mov	DWORD PTR __pyx_lineno, 916		; 00000394H
	mov	DWORD PTR __pyx_clineno, 16372		; 00003ff4H
	jmp	$LN70@pyx_pybuff
$LN60@pyx_pybuff:

; 16373:       __Pyx_GOTREF(__pyx_t_3);
; 16374:       __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 916, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Out_of_bounds_on_buffer_access_a
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN58@pyx_pybuff
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 916		; 00000394H
	mov	DWORD PTR __pyx_clineno, 16374		; 00003ff6H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$25433
$LN58@pyx_pybuff:

; 16375:       __Pyx_GOTREF(__pyx_t_4);
; 16376:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN57@pyx_pybuff
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN57@pyx_pybuff:

; 16377:       __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 916, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN53@pyx_pybuff
	mov	DWORD PTR __pyx_lineno, 916		; 00000394H
	mov	DWORD PTR __pyx_clineno, 16377		; 00003ff9H
	jmp	$LN70@pyx_pybuff
$LN53@pyx_pybuff:

; 16378:       __Pyx_GOTREF(__pyx_t_3);
; 16379:       __Pyx_GIVEREF(__pyx_t_4);
; 16380:       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
; 16381:       __pyx_t_4 = 0;
; 16382:       __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 916, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rdi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN51@pyx_pybuff
	mov	DWORD PTR __pyx_lineno, 916		; 00000394H
	mov	DWORD PTR __pyx_clineno, 16382		; 00003ffeH
	jmp	$LN70@pyx_pybuff
$LN51@pyx_pybuff:

; 16383:       __Pyx_GOTREF(__pyx_t_4);
; 16384:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN50@pyx_pybuff
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN50@pyx_pybuff:

; 16385:       __Pyx_Raise(__pyx_t_4, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rdi
	call	__Pyx_Raise

; 16386:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN45@pyx_pybuff
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN45@pyx_pybuff:

; 16387:       __PYX_ERR(2, 916, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 916		; 00000394H
	mov	DWORD PTR __pyx_clineno, 16387		; 00004003H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pybuff
$LN61@pyx_pybuff:

; 16388: 
; 16389:       /* "View.MemoryView":915
; 16390:  *     if index < 0:
; 16391:  *         index += view.shape[dim]
; 16392:  *         if index < 0:             # <<<<<<<<<<<<<<
; 16393:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16394:  * 
; 16395:  */
; 16396:     }
; 16397: 
; 16398:     /* "View.MemoryView":913
; 16399:  *             suboffset = view.suboffsets[dim]
; 16400:  * 
; 16401:  *     if index < 0:             # <<<<<<<<<<<<<<
; 16402:  *         index += view.shape[dim]
; 16403:  *         if index < 0:
; 16404:  */
; 16405:   }
; 16406: 
; 16407:   /* "View.MemoryView":918
; 16408:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16409:  * 
; 16410:  *     if index >= shape:             # <<<<<<<<<<<<<<
; 16411:  *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16412:  * 
; 16413:  */
; 16414:   __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);

	cmp	r8, rdx

; 16415:   if (__pyx_t_2) {

	jl	$LN41@pyx_pybuff

; 16416: 
; 16417:     /* "View.MemoryView":919
; 16418:  * 
; 16419:  *     if index >= shape:
; 16420:  *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
; 16421:  * 
; 16422:  *     resultp = bufp + index * stride
; 16423:  */
; 16424:     __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 919, __pyx_L1_error)

	mov	rcx, r9
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN40@pyx_pybuff
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 919		; 00000397H
	mov	DWORD PTR __pyx_clineno, 16424		; 00004028H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_pybuff
$LN40@pyx_pybuff:

; 16425:     __Pyx_GOTREF(__pyx_t_4);
; 16426:     __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 919, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Out_of_bounds_on_buffer_access_a
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN38@pyx_pybuff
	mov	DWORD PTR __pyx_clineno, 16426		; 0000402aH
	jmp	SHORT $LN71@pyx_pybuff
$LN38@pyx_pybuff:

; 16427:     __Pyx_GOTREF(__pyx_t_3);
; 16428:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN37@pyx_pybuff
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN37@pyx_pybuff:

; 16429:     __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 919, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN33@pyx_pybuff
	mov	DWORD PTR __pyx_clineno, 16429		; 0000402dH
	jmp	SHORT $LN71@pyx_pybuff
$LN33@pyx_pybuff:

; 16430:     __Pyx_GOTREF(__pyx_t_4);
; 16431:     __Pyx_GIVEREF(__pyx_t_3);
; 16432:     PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
; 16433:     __pyx_t_3 = 0;
; 16434:     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 919, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN31@pyx_pybuff
	mov	DWORD PTR __pyx_clineno, 16434		; 00004032H
$LN71@pyx_pybuff:
	mov	DWORD PTR __pyx_lineno, 919		; 00000397H
$LN70@pyx_pybuff:
	mov	rax, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$25433:

; 16477: 
; 16478:     /* "View.MemoryView":922
; 16479:  * 
; 16480:  *     resultp = bufp + index * stride
; 16481:  *     if suboffset >= 0:             # <<<<<<<<<<<<<<
; 16482:  *         resultp = (<char **> resultp)[0] + suboffset
; 16483:  * 
; 16484:  */
; 16485:   }
; 16486: 
; 16487:   /* "View.MemoryView":925
; 16488:  *         resultp = (<char **> resultp)[0] + suboffset
; 16489:  * 
; 16490:  *     return resultp             # <<<<<<<<<<<<<<
; 16491:  * 
; 16492:  * 
; 16493:  */
; 16494:   __pyx_r = __pyx_v_resultp;
; 16495:   goto __pyx_L0;
; 16496: 
; 16497:   /* "View.MemoryView":898
; 16498:  * 
; 16499:  * @cname('__pyx_pybuffer_index')
; 16500:  * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
; 16501:  *                           Py_ssize_t dim) except NULL:
; 16502:  *     cdef Py_ssize_t shape, stride, suboffset = -1
; 16503:  */
; 16504: 
; 16505:   /* function exit code */
; 16506:   __pyx_L1_error:;
; 16507:   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN13@pyx_pybuff
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_pybuff
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@pyx_pybuff:

; 16508:   __Pyx_XDECREF(__pyx_t_4);

	test	rdi, rdi
	je	SHORT $LN3@pyx_pybuff
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@pyx_pybuff
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN3@pyx_pybuff
$LN31@pyx_pybuff:

; 16435:     __Pyx_GOTREF(__pyx_t_3);
; 16436:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN30@pyx_pybuff
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN30@pyx_pybuff:

; 16437:     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rbx
	call	__Pyx_Raise

; 16438:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN25@pyx_pybuff
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN25@pyx_pybuff:

; 16439:     __PYX_ERR(2, 919, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 919		; 00000397H
	mov	DWORD PTR __pyx_clineno, 16439		; 00004037H
	mov	QWORD PTR __pyx_filename, rcx
$LN3@pyx_pybuff:

; 16509:   __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BP@CKBMDJNI@View?4MemoryView?4pybuffer_index?$AA@
	call	__Pyx_AddTraceback

; 16510:   __pyx_r = NULL;
; 16511:   __pyx_L0:;
; 16512:   __Pyx_RefNannyFinishContext();
; 16513:   return __pyx_r;

	xor	eax, eax

; 16514: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN41@pyx_pybuff:

; 16440: 
; 16441:     /* "View.MemoryView":918
; 16442:  *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16443:  * 
; 16444:  *     if index >= shape:             # <<<<<<<<<<<<<<
; 16445:  *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16446:  * 
; 16447:  */
; 16448:   }
; 16449: 
; 16450:   /* "View.MemoryView":921
; 16451:  *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
; 16452:  * 
; 16453:  *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
; 16454:  *     if suboffset >= 0:
; 16455:  *         resultp = (<char **> resultp)[0] + suboffset
; 16456:  */
; 16457:   __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

	imul	r10, r8
	add	r10, rbx

; 16458: 
; 16459:   /* "View.MemoryView":922
; 16460:  * 
; 16461:  *     resultp = bufp + index * stride
; 16462:  *     if suboffset >= 0:             # <<<<<<<<<<<<<<
; 16463:  *         resultp = (<char **> resultp)[0] + suboffset
; 16464:  * 
; 16465:  */
; 16466:   __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);

	test	r11, r11

; 16467:   if (__pyx_t_2) {

	js	SHORT $LN21@pyx_pybuff

; 16468: 
; 16469:     /* "View.MemoryView":923
; 16470:  *     resultp = bufp + index * stride
; 16471:  *     if suboffset >= 0:
; 16472:  *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
; 16473:  * 
; 16474:  *     return resultp
; 16475:  */
; 16476:     __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

	mov	rcx, QWORD PTR [r10]
	lea	r10, QWORD PTR [r11+rcx]
$LN21@pyx_pybuff:

; 16510:   __pyx_r = NULL;
; 16511:   __pyx_L0:;
; 16512:   __Pyx_RefNannyFinishContext();
; 16513:   return __pyx_r;

	mov	rax, r10
$__pyx_L0$25522:

; 16514: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pybuffer_index ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__ PROC ; COMDAT

; 16705:   __Pyx_RefNannyDeclarations
; 16706:   __Pyx_RefNannySetupContext("__dealloc__", 0);
; 16707: 
; 16708:   /* "View.MemoryView":965
; 16709:  * 
; 16710:  *     def __dealloc__(self):
; 16711:  *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
; 16712:  * 
; 16713:  *     cdef convert_item_to_object(self, char *itemp):
; 16714:  */
; 16715:   __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

	add	rcx, 184				; 000000b8H
	mov	edx, 1
	mov	r8d, 16715				; 0000414bH

; 16716: 
; 16717:   /* "View.MemoryView":964
; 16718:  *     cdef int (*to_dtype_func)(char *, object) except 0
; 16719:  * 
; 16720:  *     def __dealloc__(self):             # <<<<<<<<<<<<<<
; 16721:  *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
; 16722:  * 
; 16723:  */
; 16724: 
; 16725:   /* function exit code */
; 16726:   __Pyx_RefNannyFinishContext();
; 16727: }

	jmp	__Pyx_XDEC_MEMVIEW
__pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GLPIIFE@View?4MemoryView?4_memoryviewslice@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryviewslice_assign_item_from_object DD imagerel __pyx_memoryviewslice_assign_item_from_object
	DD	imagerel __pyx_memoryviewslice_assign_item_from_object+142
	DD	imagerel $unwind$__pyx_memoryviewslice_assign_item_from_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryviewslice_assign_item_from_object DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DJ@GLPIIFE@View?4MemoryView?4_memoryviewslice@
CONST	SEGMENT
??_C@_0DJ@GLPIIFE@View?4MemoryView?4_memoryviewslice@ DB 'View.MemoryView'
	DB	'._memoryviewslice.assign_item_from_object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryviewslice_assign_item_from_object
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_itemp$ = 56
__pyx_v_value$ = 64
__pyx_memoryviewslice_assign_item_from_object PROC	; COMDAT

; 16820: static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {

	sub	rsp, 40					; 00000028H

; 16821:   PyObject *__pyx_r = NULL;
; 16822:   __Pyx_RefNannyDeclarations
; 16823:   int __pyx_t_1;
; 16824:   int __pyx_t_2;
; 16825:   PyObject *__pyx_t_3 = NULL;
; 16826:   __Pyx_RefNannySetupContext("assign_item_from_object", 0);
; 16827: 
; 16828:   /* "View.MemoryView":974
; 16829:  * 
; 16830:  *     cdef assign_item_from_object(self, char *itemp, object value):
; 16831:  *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
; 16832:  *             self.to_dtype_func(itemp, value)
; 16833:  *         else:
; 16834:  */
; 16835:   __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);

	mov	rax, QWORD PTR [rcx+408]
	mov	r9, rdx
	test	rax, rax

; 16836:   if (__pyx_t_1) {

	je	SHORT $LN18@pyx_memory@15

; 16837: 
; 16838:     /* "View.MemoryView":975
; 16839:  *     cdef assign_item_from_object(self, char *itemp, object value):
; 16840:  *         if self.to_dtype_func != NULL:
; 16841:  *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
; 16842:  *         else:
; 16843:  *             memoryview.assign_item_from_object(self, itemp, value)
; 16844:  */
; 16845:     __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 975, __pyx_L1_error)

	mov	rdx, r8
	mov	rcx, r9
	call	rax
	test	eax, eax
	jne	SHORT $__pyx_L3$25683
	mov	r8d, 975				; 000003cfH
	mov	edx, 16845				; 000041cdH
	jmp	SHORT $LN21@pyx_memory@15
$LN18@pyx_memory@15:

; 16846: 
; 16847:     /* "View.MemoryView":974
; 16848:  * 
; 16849:  *     cdef assign_item_from_object(self, char *itemp, object value):
; 16850:  *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
; 16851:  *             self.to_dtype_func(itemp, value)
; 16852:  *         else:
; 16853:  */
; 16854:     goto __pyx_L3;
; 16855:   }
; 16856: 
; 16857:   /* "View.MemoryView":977
; 16858:  *             self.to_dtype_func(itemp, value)
; 16859:  *         else:
; 16860:  *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
; 16861:  * 
; 16862:  *     @property
; 16863:  */
; 16864:   /*else*/ {
; 16865:     __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 977, __pyx_L1_error)

	call	__pyx_memoryview_assign_item_from_object
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN15@pyx_memory@15
	mov	r8d, 977				; 000003d1H
	mov	edx, 16865				; 000041e1H
$__pyx_L1_error$25682:
$LN21@pyx_memory@15:
	mov	r9, QWORD PTR __pyx_f+16

; 16881:   goto __pyx_L0;
; 16882:   __pyx_L1_error:;
; 16883:   __Pyx_XDECREF(__pyx_t_3);
; 16884:   __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DJ@GLPIIFE@View?4MemoryView?4_memoryviewslice@
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	call	__Pyx_AddTraceback

; 16885:   __pyx_r = 0;
; 16886:   __pyx_L0:;
; 16887:   __Pyx_XGIVEREF(__pyx_r);
; 16888:   __Pyx_RefNannyFinishContext();
; 16889:   return __pyx_r;

	xor	eax, eax

; 16890: }

	add	rsp, 40					; 00000028H
	ret	0
$LN15@pyx_memory@15:

; 16866:     __Pyx_GOTREF(__pyx_t_3);
; 16867:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $__pyx_L3$25683
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$__pyx_L3$25683:

; 16868:   }
; 16869:   __pyx_L3:;
; 16870: 
; 16871:   /* "View.MemoryView":973
; 16872:  *             return memoryview.convert_item_to_object(self, itemp)
; 16873:  * 
; 16874:  *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
; 16875:  *         if self.to_dtype_func != NULL:
; 16876:  *             self.to_dtype_func(itemp, value)
; 16877:  */
; 16878: 
; 16879:   /* function exit code */
; 16880:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$__pyx_L0$25697:
	inc	QWORD PTR [rax]

; 16890: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_memoryviewslice_assign_item_from_object ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__ PROC ; COMDAT

; 16903:   PyObject *__pyx_r = 0;
; 16904:   __Pyx_RefNannyDeclarations
; 16905:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 16906:   __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

	mov	rax, QWORD PTR [rcx+392]
$__pyx_L0$39878:
	inc	QWORD PTR [rax]

; 16907: 
; 16908:   /* function exit code */
; 16909:   __Pyx_RefNannyFinishContext();
; 16910:   return __pyx_r;

	mov	rax, QWORD PTR [rcx+392]

; 16911: }

	ret	0
__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@LOCJBELM@View?4MemoryView?4_memoryviewslice@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_memoryviewslice___reduce_cython__ DD imagerel __pyx_pf___pyx_memoryviewslice___reduce_cython__
	DD	imagerel __pyx_pf___pyx_memoryviewslice___reduce_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_memoryviewslice___reduce_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_memoryviewslice___reduce_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DD@LOCJBELM@View?4MemoryView?4_memoryviewslice@
CONST	SEGMENT
??_C@_0DD@LOCJBELM@View?4MemoryView?4_memoryviewslice@ DB 'View.MemoryVie'
	DB	'w._memoryviewslice.__reduce_cython__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_memoryviewslice___reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf___pyx_memoryviewslice___reduce_cython__ PROC	; COMDAT

; 16964: static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 16965:   PyObject *__pyx_r = NULL;
; 16966:   __Pyx_RefNannyDeclarations
; 16967:   PyObject *__pyx_t_1 = NULL;
; 16968:   __Pyx_RefNannySetupContext("__reduce_cython__", 0);
; 16969: 
; 16970:   /* "(tree fragment)":2
; 16971:  * def __reduce_cython__(self):
; 16972:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 16973:  * def __setstate_cython__(self, __pyx_state):
; 16974:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 16975:  */
; 16976:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__29
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p@5
	mov	edx, 16976				; 00004250H
	jmp	SHORT $LN19@pyx_pf___p@5
$LN16@pyx_pf___p@5:

; 16977:   __Pyx_GOTREF(__pyx_t_1);
; 16978:   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 16979:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@5:

; 16980:   __PYX_ERR(2, 2, __pyx_L1_error)

	mov	edx, 16980				; 00004254H
$LN19@pyx_pf___p@5:
	mov	r9, QWORD PTR __pyx_f+16

; 16981: 
; 16982:   /* "(tree fragment)":1
; 16983:  * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
; 16984:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 16985:  * def __setstate_cython__(self, __pyx_state):
; 16986:  */
; 16987: 
; 16988:   /* function exit code */
; 16989:   __pyx_L1_error:;
; 16990:   __Pyx_XDECREF(__pyx_t_1);
; 16991:   __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DD@LOCJBELM@View?4MemoryView?4_memoryviewslice@
	mov	r8d, 2
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 2
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 16992:   __pyx_r = NULL;
; 16993:   __Pyx_XGIVEREF(__pyx_r);
; 16994:   __Pyx_RefNannyFinishContext();
; 16995:   return __pyx_r;

	xor	eax, eax

; 16996: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_memoryviewslice___reduce_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@BPDNHAF@View?4MemoryView?4_memoryviewslice@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_memoryviewslice_2__setstate_cython__ DD imagerel __pyx_pf___pyx_memoryviewslice_2__setstate_cython__
	DD	imagerel __pyx_pf___pyx_memoryviewslice_2__setstate_cython__+136
	DD	imagerel $unwind$__pyx_pf___pyx_memoryviewslice_2__setstate_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_memoryviewslice_2__setstate_cython__ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT ??_C@_0DF@BPDNHAF@View?4MemoryView?4_memoryviewslice@
CONST	SEGMENT
??_C@_0DF@BPDNHAF@View?4MemoryView?4_memoryviewslice@ DB 'View.MemoryView'
	DB	'._memoryviewslice.__setstate_cython__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_memoryviewslice_2__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v___pyx_state$ = 56
__pyx_pf___pyx_memoryviewslice_2__setstate_cython__ PROC ; COMDAT

; 17018: static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 17019:   PyObject *__pyx_r = NULL;
; 17020:   __Pyx_RefNannyDeclarations
; 17021:   PyObject *__pyx_t_1 = NULL;
; 17022:   __Pyx_RefNannySetupContext("__setstate_cython__", 0);
; 17023: 
; 17024:   /* "(tree fragment)":4
; 17025:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 17026:  * def __setstate_cython__(self, __pyx_state):
; 17027:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
; 17028:  */
; 17029:   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__30
	mov	rcx, QWORD PTR __pyx_builtin_TypeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN16@pyx_pf___p@6
	mov	edx, 17029				; 00004285H
	jmp	SHORT $LN19@pyx_pf___p@6
$LN16@pyx_pf___p@6:

; 17030:   __Pyx_GOTREF(__pyx_t_1);
; 17031:   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 17032:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN14@pyx_pf___p@6
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@6:

; 17033:   __PYX_ERR(2, 4, __pyx_L1_error)

	mov	edx, 17033				; 00004289H
$LN19@pyx_pf___p@6:
	mov	r9, QWORD PTR __pyx_f+16

; 17034: 
; 17035:   /* "(tree fragment)":3
; 17036:  * def __reduce_cython__(self):
; 17037:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 17038:  * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
; 17039:  *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
; 17040:  */
; 17041: 
; 17042:   /* function exit code */
; 17043:   __pyx_L1_error:;
; 17044:   __Pyx_XDECREF(__pyx_t_1);
; 17045:   __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DF@BPDNHAF@View?4MemoryView?4_memoryviewslice@
	mov	r8d, 4
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 4
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 17046:   __pyx_r = NULL;
; 17047:   __Pyx_XGIVEREF(__pyx_r);
; 17048:   __Pyx_RefNannyFinishContext();
; 17049:   return __pyx_r;

	xor	eax, eax

; 17050: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_pf___pyx_memoryviewslice_2__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@GNFADLJ@View?4MemoryView?4memoryview_froms@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_fromslice DD imagerel __pyx_memoryview_fromslice
	DD	imagerel __pyx_memoryview_fromslice+81
	DD	imagerel $unwind$__pyx_memoryview_fromslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_fromslice DD imagerel __pyx_memoryview_fromslice+81
	DD	imagerel __pyx_memoryview_fromslice+1115
	DD	imagerel $chain$2$__pyx_memoryview_fromslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__pyx_memoryview_fromslice DD imagerel __pyx_memoryview_fromslice+1115
	DD	imagerel __pyx_memoryview_fromslice+1174
	DD	imagerel $chain$3$__pyx_memoryview_fromslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__pyx_memoryview_fromslice DD imagerel __pyx_memoryview_fromslice+1174
	DD	imagerel __pyx_memoryview_fromslice+1398
	DD	imagerel $chain$4$__pyx_memoryview_fromslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__pyx_memoryview_fromslice DD 060021H
	DD	010d400H
	DD	0117400H
	DD	0183400H
	DD	imagerel __pyx_memoryview_fromslice
	DD	imagerel __pyx_memoryview_fromslice+81
	DD	imagerel $unwind$__pyx_memoryview_fromslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__pyx_memoryview_fromslice DD 021H
	DD	imagerel __pyx_memoryview_fromslice
	DD	imagerel __pyx_memoryview_fromslice+81
	DD	imagerel $unwind$__pyx_memoryview_fromslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_fromslice DD 064521H
	DD	010d445H
	DD	018343dH
	DD	0117408H
	DD	imagerel __pyx_memoryview_fromslice
	DD	imagerel __pyx_memoryview_fromslice+81
	DD	imagerel $unwind$__pyx_memoryview_fromslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_fromslice DD 071d01H
	DD	012011dH
	DD	0e014f016H
	DD	06010c012H
	DD	0500fH
xdata	ENDS
;	COMDAT ??_C@_0CF@GNFADLJ@View?4MemoryView?4memoryview_froms@
CONST	SEGMENT
??_C@_0CF@GNFADLJ@View?4MemoryView?4memoryview_froms@ DB 'View.MemoryView'
	DB	'.memoryview_fromslice', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_fromslice
_TEXT	SEGMENT
__pyx_t_5$ = 32
__pyx_v_memviewslice$ = 192
__pyx_v_ndim$ = 200
__pyx_v_to_object_func$ = 208
__pyx_v_to_dtype_func$ = 216
__pyx_v_dtype_is_object$ = 224
__pyx_memoryview_fromslice PROC				; COMDAT

; 17060: static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	push	rbp
	push	rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 144				; 00000090H

; 17061:   struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
; 17062:   Py_ssize_t __pyx_v_suboffset;
; 17063:   PyObject *__pyx_v_length = NULL;
; 17064:   PyObject *__pyx_r = NULL;
; 17065:   __Pyx_RefNannyDeclarations
; 17066:   int __pyx_t_1;
; 17067:   PyObject *__pyx_t_2 = NULL;
; 17068:   PyObject *__pyx_t_3 = NULL;
; 17069:   __Pyx_TypeInfo *__pyx_t_4;
; 17070:   Py_buffer __pyx_t_5;
; 17071:   Py_ssize_t *__pyx_t_6;
; 17072:   Py_ssize_t *__pyx_t_7;
; 17073:   Py_ssize_t *__pyx_t_8;
; 17074:   Py_ssize_t __pyx_t_9;
; 17075:   __Pyx_RefNannySetupContext("memoryview_fromslice", 0);
; 17076: 
; 17077:   /* "View.MemoryView":995
; 17078:  *     cdef _memoryviewslice result
; 17079:  * 
; 17080:  *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
; 17081:  *         return None
; 17082:  * 
; 17083:  */
; 17084:   __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	xor	r15d, r15d
	mov	esi, edx
	mov	r14, rcx
	mov	rbp, r15
	mov	r12, r15
	cmp	QWORD PTR [rcx], rax

; 17085:   if (__pyx_t_1) {

	jne	SHORT $LN109@pyx_memory@16

; 17086: 
; 17087:     /* "View.MemoryView":996
; 17088:  * 
; 17089:  *     if <PyObject *> memviewslice.memview == Py_None:
; 17090:  *         return None             # <<<<<<<<<<<<<<
; 17091:  * 
; 17092:  * 
; 17093:  */
; 17094:     __Pyx_XDECREF(__pyx_r);
; 17095:     __Pyx_INCREF(Py_None);

	inc	QWORD PTR [rax]

; 17399:   __Pyx_XGIVEREF(__pyx_r);
; 17400:   __Pyx_RefNannyFinishContext();
; 17401:   return __pyx_r;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 17402: }

	add	rsp, 144				; 00000090H
	pop	r15
	pop	r14
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
$LN109@pyx_memory@16:
	mov	QWORD PTR [rsp+136], rdi

; 17096:     __pyx_r = Py_None;
; 17097:     goto __pyx_L0;
; 17098: 
; 17099:     /* "View.MemoryView":995
; 17100:  *     cdef _memoryviewslice result
; 17101:  * 
; 17102:  *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
; 17103:  *         return None
; 17104:  * 
; 17105:  */
; 17106:   }
; 17107: 
; 17108:   /* "View.MemoryView":1001
; 17109:  * 
; 17110:  * 
; 17111:  *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
; 17112:  * 
; 17113:  *     result.from_slice = memviewslice
; 17114:  */
; 17115:   __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1001, __pyx_L1_error)

	cmp	DWORD PTR __pyx_v_dtype_is_object$[rsp], ebp
	je	SHORT $LN112@pyx_memory@16
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rdi, QWORD PTR __imp__Py_TrueStruct
	jmp	SHORT $LN113@pyx_memory@16
$LN112@pyx_memory@16:
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rdi, QWORD PTR __imp__Py_ZeroStruct
$LN113@pyx_memory@16:
	mov	QWORD PTR [rsp+192], rbx
	mov	QWORD PTR [rsp+128], r13
	test	rdi, rdi
	jne	SHORT $LN98@pyx_memory@16
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1001		; 000003e9H
	mov	DWORD PTR __pyx_clineno, 17115		; 000042dbH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@16
$LN98@pyx_memory@16:

; 17116:   __Pyx_GOTREF(__pyx_t_2);
; 17117:   __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1001, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN97@pyx_memory@16
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1001		; 000003e9H
	mov	DWORD PTR __pyx_clineno, 17117		; 000042ddH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$25907
$LN97@pyx_memory@16:

; 17118:   __Pyx_GOTREF(__pyx_t_3);
; 17119:   __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 17120:   __Pyx_GIVEREF(Py_None);
; 17121:   PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
; 17122:   __Pyx_INCREF(__pyx_int_0);
; 17123:   __Pyx_GIVEREF(__pyx_int_0);
; 17124:   PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
; 17125:   __Pyx_GIVEREF(__pyx_t_2);
; 17126:   PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
; 17127:   __pyx_t_2 = 0;
; 17128:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1001, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_memoryviewslice_type
	xor	r8d, r8d
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rdx, rbx
	mov	QWORD PTR [rbx+24], rax
	mov	rax, QWORD PTR __pyx_int_0
	inc	QWORD PTR [rax]
	mov	QWORD PTR [rbx+32], rax
	mov	QWORD PTR [rbx+40], rdi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN95@pyx_memory@16
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1001		; 000003e9H
	mov	DWORD PTR __pyx_clineno, 17128		; 000042e8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@16
$LN95@pyx_memory@16:

; 17129:   __Pyx_GOTREF(__pyx_t_2);
; 17130:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN94@pyx_memory@16
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN94@pyx_memory@16:

; 17131:   __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
; 17132:   __pyx_t_2 = 0;
; 17133: 
; 17134:   /* "View.MemoryView":1003
; 17135:  *     result = _memoryviewslice(None, 0, dtype_is_object)
; 17136:  * 
; 17137:  *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
; 17138:  *     __PYX_INC_MEMVIEW(&memviewslice, 1)
; 17139:  * 
; 17140:  */
; 17141:   __pyx_v_result->from_slice = __pyx_v_memviewslice;

	lea	rcx, QWORD PTR [rdi+184]
	mov	rdx, r14
	mov	r8d, 208				; 000000d0H
	mov	rbp, rdi
	call	memcpy

; 17142: 
; 17143:   /* "View.MemoryView":1004
; 17144:  * 
; 17145:  *     result.from_slice = memviewslice
; 17146:  *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
; 17147:  * 
; 17148:  *     result.from_object = (<memoryview> memviewslice.memview).base
; 17149:  */
; 17150:   __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

	mov	r13, QWORD PTR [r14]
	test	r13, r13
	je	SHORT $LN118@pyx_memory@16
	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN118@pyx_memory@16
	mov	rax, QWORD PTR [r13+64]
	mov	ecx, DWORD PTR [rax]
	test	ecx, ecx
	jns	SHORT $LN117@pyx_memory@16
	mov	rax, QWORD PTR [r13+64]
	lea	rcx, OFFSET FLAT:??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
	mov	r8d, 17150				; 000042feH
	mov	edx, DWORD PTR [rax]
	call	__pyx_fatalerror
$LN117@pyx_memory@16:
	mov	rsi, QWORD PTR [r13+48]
	mov	rdi, QWORD PTR [r13+64]
	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	ebx, DWORD PTR [rdi]
	inc	DWORD PTR [rdi]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	test	ebx, ebx
	jne	SHORT $LN139@pyx_memory@16
	inc	QWORD PTR [r13]
	mov	esi, DWORD PTR __pyx_v_ndim$[rsp]
	jmp	SHORT $LN118@pyx_memory@16
$LN139@pyx_memory@16:

; 17060: static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {

	mov	esi, DWORD PTR __pyx_v_ndim$[rsp]

; 17142: 
; 17143:   /* "View.MemoryView":1004
; 17144:  * 
; 17145:  *     result.from_slice = memviewslice
; 17146:  *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
; 17147:  * 
; 17148:  *     result.from_object = (<memoryview> memviewslice.memview).base
; 17149:  */
; 17150:   __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

$LN118@pyx_memory@16:

; 17151: 
; 17152:   /* "View.MemoryView":1006
; 17153:  *     __PYX_INC_MEMVIEW(&memviewslice, 1)
; 17154:  * 
; 17155:  *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
; 17156:  *     result.typeinfo = memviewslice.memview.typeinfo
; 17157:  * 
; 17158:  */
; 17159:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1006, __pyx_L1_error)

	mov	rcx, QWORD PTR [r14]
	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN125@pyx_memory@16
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN126@pyx_memory@16
$LN125@pyx_memory@16:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN124@pyx_memory@16
	mov	rdx, QWORD PTR __pyx_n_s_base
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN126@pyx_memory@16
$LN124@pyx_memory@16:
	mov	rdx, QWORD PTR __pyx_n_s_base
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN126@pyx_memory@16:
	test	rbx, rbx
	jne	SHORT $LN89@pyx_memory@16
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1006		; 000003eeH
	mov	DWORD PTR __pyx_clineno, 17159		; 00004307H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memory@16
$LN89@pyx_memory@16:

; 17160:   __Pyx_GOTREF(__pyx_t_2);
; 17161:   __Pyx_GIVEREF(__pyx_t_2);
; 17162:   __Pyx_GOTREF(__pyx_v_result->from_object);
; 17163:   __Pyx_DECREF(__pyx_v_result->from_object);

	mov	rax, QWORD PTR [rbp+392]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbp+392]
	cmp	QWORD PTR [rcx], r12
	jne	SHORT $LN88@pyx_memory@16
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN88@pyx_memory@16:

; 17164:   __pyx_v_result->from_object = __pyx_t_2;

	mov	QWORD PTR [rbp+392], rbx

; 17165:   __pyx_t_2 = 0;
; 17166: 
; 17167:   /* "View.MemoryView":1007
; 17168:  * 
; 17169:  *     result.from_object = (<memoryview> memviewslice.memview).base
; 17170:  *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
; 17171:  * 
; 17172:  *     result.view = memviewslice.memview.view
; 17173:  */
; 17174:   __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
; 17175:   __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

	mov	rax, QWORD PTR [r14]

; 17176: 
; 17177:   /* "View.MemoryView":1009
; 17178:  *     result.typeinfo = memviewslice.memview.typeinfo
; 17179:  * 
; 17180:  *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
; 17181:  *     result.view.buf = <void *> memviewslice.data
; 17182:  *     result.view.ndim = ndim
; 17183:  */
; 17184:   __pyx_t_5 = __pyx_v_memviewslice.memview->view;

	mov	r8d, 96					; 00000060H
	mov	rcx, QWORD PTR [rax+176]
	mov	QWORD PTR [rbp+176], rcx
	mov	rdx, QWORD PTR [r14]
	lea	rcx, QWORD PTR __pyx_t_5$[rsp]
	add	rdx, 72					; 00000048H
	call	memcpy

; 17185:   __pyx_v_result->__pyx_base.view = __pyx_t_5;

	lea	rcx, QWORD PTR [rbp+72]
	lea	rdx, QWORD PTR __pyx_t_5$[rsp]
	mov	r8d, 96					; 00000060H
	call	memcpy

; 17186: 
; 17187:   /* "View.MemoryView":1010
; 17188:  * 
; 17189:  *     result.view = memviewslice.memview.view
; 17190:  *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
; 17191:  *     result.view.ndim = ndim
; 17192:  *     (<__pyx_buffer *> &result.view).obj = Py_None
; 17193:  */
; 17194:   __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

	mov	r11, QWORD PTR [r14+8]

; 17195: 
; 17196:   /* "View.MemoryView":1011
; 17197:  *     result.view = memviewslice.memview.view
; 17198:  *     result.view.buf = <void *> memviewslice.data
; 17199:  *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
; 17200:  *     (<__pyx_buffer *> &result.view).obj = Py_None
; 17201:  *     Py_INCREF(Py_None)
; 17202:  */
; 17203:   __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;
; 17204: 
; 17205:   /* "View.MemoryView":1012
; 17206:  *     result.view.buf = <void *> memviewslice.data
; 17207:  *     result.view.ndim = ndim
; 17208:  *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
; 17209:  *     Py_INCREF(Py_None)
; 17210:  * 
; 17211:  */
; 17212:   ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;
; 17213: 
; 17214:   /* "View.MemoryView":1013
; 17215:  *     result.view.ndim = ndim
; 17216:  *     (<__pyx_buffer *> &result.view).obj = Py_None
; 17217:  *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
; 17218:  * 
; 17219:  *     result.flags = PyBUF_RECORDS
; 17220:  */
; 17221:   Py_INCREF(Py_None);
; 17222: 
; 17223:   /* "View.MemoryView":1015
; 17224:  *     Py_INCREF(Py_None)
; 17225:  * 
; 17226:  *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
; 17227:  * 
; 17228:  *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
; 17229:  */
; 17230:   __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;
; 17231: 
; 17232:   /* "View.MemoryView":1017
; 17233:  *     result.flags = PyBUF_RECORDS
; 17234:  * 
; 17235:  *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
; 17236:  *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
; 17237:  * 
; 17238:  */
; 17239:   __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);
; 17240: 
; 17241:   /* "View.MemoryView":1018
; 17242:  * 
; 17243:  *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
; 17244:  *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
; 17245:  * 
; 17246:  * 
; 17247:  */
; 17248:   __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);
; 17249: 
; 17250:   /* "View.MemoryView":1021
; 17251:  * 
; 17252:  * 
; 17253:  *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
; 17254:  *     for suboffset in result.from_slice.suboffsets[:ndim]:
; 17255:  *         if suboffset >= 0:
; 17256:  */
; 17257:   __pyx_v_result->__pyx_base.view.suboffsets = NULL;
; 17258: 
; 17259:   /* "View.MemoryView":1022
; 17260:  * 
; 17261:  *     result.view.suboffsets = NULL
; 17262:  *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
; 17263:  *         if suboffset >= 0:
; 17264:  *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
; 17265:  */
; 17266:   __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);

	movsxd	r8, DWORD PTR __pyx_v_ndim$[rsp]
	mov	DWORD PTR [rbp+108], esi
	mov	QWORD PTR [rbp+72], r11
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbp+80], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 17267:   for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

	lea	rdx, QWORD PTR [rbp+328]
	inc	QWORD PTR [rax]
	lea	rax, QWORD PTR [rbp+264]
	lea	rcx, QWORD PTR [rbp+r8*8+328]
	lea	rsi, QWORD PTR [rbp+200]
	mov	QWORD PTR [rbp+128], rax
	mov	DWORD PTR [rbp+168], 29
	mov	rax, rdx
	mov	QWORD PTR [rbp+136], r15
	mov	QWORD PTR [rbp+120], rsi
	cmp	rdx, rcx
	jae	SHORT $__pyx_L5_break$25951
	npad	3
$LL84@pyx_memory@16:

; 17268:     __pyx_t_6 = __pyx_t_8;
; 17269:     __pyx_v_suboffset = (__pyx_t_6[0]);
; 17270: 
; 17271:     /* "View.MemoryView":1023
; 17272:  *     result.view.suboffsets = NULL
; 17273:  *     for suboffset in result.from_slice.suboffsets[:ndim]:
; 17274:  *         if suboffset >= 0:             # <<<<<<<<<<<<<<
; 17275:  *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
; 17276:  *             break
; 17277:  */
; 17278:     __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);

	cmp	QWORD PTR [rax], r12

; 17279:     if (__pyx_t_1) {

	jge	SHORT $LN130@pyx_memory@16
	add	rax, 8
	cmp	rax, rcx
	jb	SHORT $LL84@pyx_memory@16

; 17347:     __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1029, __pyx_L1_error)

	jmp	SHORT $__pyx_L5_break$25951
$LN130@pyx_memory@16:

; 17280: 
; 17281:       /* "View.MemoryView":1024
; 17282:  *     for suboffset in result.from_slice.suboffsets[:ndim]:
; 17283:  *         if suboffset >= 0:
; 17284:  *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
; 17285:  *             break
; 17286:  * 
; 17287:  */
; 17288:       __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

	mov	QWORD PTR [rbp+136], rdx
$__pyx_L5_break$25951:

; 17289: 
; 17290:       /* "View.MemoryView":1025
; 17291:  *         if suboffset >= 0:
; 17292:  *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
; 17293:  *             break             # <<<<<<<<<<<<<<
; 17294:  * 
; 17295:  *     result.view.len = result.view.itemsize
; 17296:  */
; 17297:       goto __pyx_L5_break;
; 17298: 
; 17299:       /* "View.MemoryView":1023
; 17300:  *     result.view.suboffsets = NULL
; 17301:  *     for suboffset in result.from_slice.suboffsets[:ndim]:
; 17302:  *         if suboffset >= 0:             # <<<<<<<<<<<<<<
; 17303:  *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
; 17304:  *             break
; 17305:  */
; 17306:     }
; 17307:   }
; 17308:   __pyx_L5_break:;
; 17309: 
; 17310:   /* "View.MemoryView":1027
; 17311:  *             break
; 17312:  * 
; 17313:  *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
; 17314:  *     for length in result.view.shape[:ndim]:
; 17315:  *         result.view.len *= length
; 17316:  */
; 17317:   __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
; 17318:   __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

	mov	rax, QWORD PTR [rbp+96]

; 17319: 
; 17320:   /* "View.MemoryView":1028
; 17321:  * 
; 17322:  *     result.view.len = result.view.itemsize
; 17323:  *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
; 17324:  *         result.view.len *= length
; 17325:  * 
; 17326:  */
; 17327:   __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);

	lea	r13, QWORD PTR [rsi+r8*8]
	mov	QWORD PTR [rbp+88], rax

; 17328:   for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

	cmp	rsi, r13
	jae	$LN78@pyx_memory@16
	npad	4
$LL80@pyx_memory@16:

; 17329:     __pyx_t_6 = __pyx_t_8;
; 17330:     __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1028, __pyx_L1_error)

	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	test	rax, rax
	je	$LN131@pyx_memory@16

; 17331:     __Pyx_GOTREF(__pyx_t_2);
; 17332:     __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);

	mov	rcx, r12
	mov	r12, rax
	test	rcx, rcx
	je	SHORT $LN66@pyx_memory@16
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN66@pyx_memory@16
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN66@pyx_memory@16:

; 17333:     __pyx_t_2 = 0;
; 17334: 
; 17335:     /* "View.MemoryView":1029
; 17336:  *     result.view.len = result.view.itemsize
; 17337:  *     for length in result.view.shape[:ndim]:
; 17338:  *         result.view.len *= length             # <<<<<<<<<<<<<<
; 17339:  * 
; 17340:  *     result.to_object_func = to_object_func
; 17341:  */
; 17342:     __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rcx, QWORD PTR [rbp+88]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rdi, rax
	test	rax, rax
	je	$LN132@pyx_memory@16

; 17343:     __Pyx_GOTREF(__pyx_t_2);
; 17344:     __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rdx, r12
	mov	rcx, rax
	call	QWORD PTR __imp_PyNumber_InPlaceMultiply
	mov	rbx, rax
	test	rax, rax
	je	$LN133@pyx_memory@16

; 17345:     __Pyx_GOTREF(__pyx_t_3);
; 17346:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN60@pyx_memory@16
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN60@pyx_memory@16:

; 17347:     __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_PyIndex_AsSsize_t
	mov	rdi, rax
	cmp	rax, -1
	jne	SHORT $LN55@pyx_memory@16
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN134@pyx_memory@16
$LN55@pyx_memory@16:

; 17348:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN54@pyx_memory@16
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN54@pyx_memory@16:
	add	rsi, 8

; 17349:     __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

	mov	QWORD PTR [rbp+88], rdi
	cmp	rsi, r13
	jb	$LL80@pyx_memory@16
$LN78@pyx_memory@16:

; 17350:   }
; 17351: 
; 17352:   /* "View.MemoryView":1031
; 17353:  *         result.view.len *= length
; 17354:  * 
; 17355:  *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
; 17356:  *     result.to_dtype_func = to_dtype_func
; 17357:  * 
; 17358:  */
; 17359:   __pyx_v_result->to_object_func = __pyx_v_to_object_func;

	mov	rax, QWORD PTR __pyx_v_to_object_func$[rsp]

; 17360: 
; 17361:   /* "View.MemoryView":1032
; 17362:  * 
; 17363:  *     result.to_object_func = to_object_func
; 17364:  *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
; 17365:  * 
; 17366:  *     return result
; 17367:  */
; 17368:   __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;
; 17369: 
; 17370:   /* "View.MemoryView":1034
; 17371:  *     result.to_dtype_func = to_dtype_func
; 17372:  * 
; 17373:  *     return result             # <<<<<<<<<<<<<<
; 17374:  * 
; 17375:  * @cname('__pyx_memoryview_get_slice_from_memoryview')
; 17376:  */
; 17377:   __Pyx_XDECREF(__pyx_r);
; 17378:   __Pyx_INCREF(((PyObject *)__pyx_v_result));

	inc	QWORD PTR [rbp]

; 17379:   __pyx_r = ((PyObject *)__pyx_v_result);

	mov	r15, rbp
	mov	QWORD PTR [rbp+400], rax
	mov	rax, QWORD PTR __pyx_v_to_dtype_func$[rsp]
	mov	QWORD PTR [rbp+408], rax
$__pyx_L0$25899:
	mov	r13, QWORD PTR [rsp+128]
	mov	rdi, QWORD PTR [rsp+136]
	mov	rbx, QWORD PTR [rsp+192]

; 17396:   __pyx_L0:;
; 17397:   __Pyx_XDECREF((PyObject *)__pyx_v_result);

	test	rbp, rbp
	je	SHORT $LN13@pyx_memory@16
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN13@pyx_memory@16
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@16:

; 17398:   __Pyx_XDECREF(__pyx_v_length);

	test	r12, r12
	je	SHORT $LN137@pyx_memory@16
	add	QWORD PTR [r12], -1
	jne	SHORT $LN137@pyx_memory@16
	mov	rdx, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rdx+48]
$LN137@pyx_memory@16:

; 17399:   __Pyx_XGIVEREF(__pyx_r);
; 17400:   __Pyx_RefNannyFinishContext();
; 17401:   return __pyx_r;

	mov	rax, r15

; 17402: }

	add	rsp, 144				; 00000090H
	pop	r15
	pop	r14
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
$LN134@pyx_memory@16:

; 17347:     __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1029		; 00000405H
	mov	DWORD PTR __pyx_clineno, 17347		; 000043c3H
	mov	QWORD PTR __pyx_filename, rax
$LN33@pyx_memory@16:

; 17393:   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	$LN23@pyx_memory@16
	add	QWORD PTR [rbx], -1
	jne	$LN23@pyx_memory@16
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN23@pyx_memory@16
$LN133@pyx_memory@16:

; 17343:     __Pyx_GOTREF(__pyx_t_2);
; 17344:     __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1029		; 00000405H
	mov	DWORD PTR __pyx_clineno, 17344		; 000043c0H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$25907:

; 17380:   goto __pyx_L0;
; 17381: 
; 17382:   /* "View.MemoryView":987
; 17383:  * 
; 17384:  * @cname('__pyx_memoryview_fromslice')
; 17385:  * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
; 17386:  *                           int ndim,
; 17387:  *                           object (*to_object_func)(char *),
; 17388:  */
; 17389: 
; 17390:   /* function exit code */
; 17391:   __pyx_L1_error:;
; 17392:   __Pyx_XDECREF(__pyx_t_2);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN23@pyx_memory@16
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]

; 17393:   __Pyx_XDECREF(__pyx_t_3);

	jmp	SHORT $LN23@pyx_memory@16
$LN132@pyx_memory@16:

; 17333:     __pyx_t_2 = 0;
; 17334: 
; 17335:     /* "View.MemoryView":1029
; 17336:  *     result.view.len = result.view.itemsize
; 17337:  *     for length in result.view.shape[:ndim]:
; 17338:  *         result.view.len *= length             # <<<<<<<<<<<<<<
; 17339:  * 
; 17340:  *     result.to_object_func = to_object_func
; 17341:  */
; 17342:     __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1029, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1029		; 00000405H
	mov	DWORD PTR __pyx_clineno, 17342		; 000043beH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN23@pyx_memory@16
$LN131@pyx_memory@16:

; 17329:     __pyx_t_6 = __pyx_t_8;
; 17330:     __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1028, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1028		; 00000404H
	mov	DWORD PTR __pyx_clineno, 17330		; 000043b2H
	mov	QWORD PTR __pyx_filename, rax
$LN23@pyx_memory@16:

; 17394:   __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CF@GNFADLJ@View?4MemoryView?4memoryview_froms@
	call	__Pyx_AddTraceback

; 17395:   __pyx_r = 0;

	jmp	$__pyx_L0$25899
__pyx_memoryview_fromslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@OMBIALNL@View?4MemoryView?4memoryview_copy_@ ; `string'
PUBLIC	$T39999
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_copy_object_from_slice DD imagerel __pyx_memoryview_copy_object_from_slice
	DD	imagerel __pyx_memoryview_copy_object_from_slice+279
	DD	imagerel $unwind$__pyx_memoryview_copy_object_from_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_copy_object_from_slice DD 071201H
	DD	0236412H
	DD	0223412H
	DD	0200112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0CL@OMBIALNL@View?4MemoryView?4memoryview_copy_@
CONST	SEGMENT
??_C@_0CL@OMBIALNL@View?4MemoryView?4memoryview_copy_@ DB 'View.MemoryVie'
	DB	'w.memoryview_copy_from_slice', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_copy_object_from_slice
_TEXT	SEGMENT
$T39999 = 48
__pyx_v_memview$ = 272
__pyx_v_memviewslice$ = 280
__pyx_memoryview_copy_object_from_slice PROC		; COMDAT

; 17693: static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 256				; 00000100H

; 17694:   PyObject *(*__pyx_v_to_object_func)(char *);
; 17695:   int (*__pyx_v_to_dtype_func)(char *, PyObject *);
; 17696:   PyObject *__pyx_r = NULL;
; 17697:   __Pyx_RefNannyDeclarations
; 17698:   int __pyx_t_1;
; 17699:   int __pyx_t_2;
; 17700:   PyObject *(*__pyx_t_3)(char *);
; 17701:   int (*__pyx_t_4)(char *, PyObject *);
; 17702:   PyObject *__pyx_t_5 = NULL;
; 17703:   __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);
; 17704: 
; 17705:   /* "View.MemoryView":1079
; 17706:  *     cdef int (*to_dtype_func)(char *, object) except 0
; 17707:  * 
; 17708:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17709:  *         to_object_func = (<_memoryviewslice> memview).to_object_func
; 17710:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17711:  */
; 17712:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

	mov	rax, QWORD PTR [rcx+8]
	mov	r9, QWORD PTR __pyx_memoryviewslice_type
	mov	rbx, rcx
	cmp	rax, r9
	je	SHORT $LN43@pyx_memory@17
	mov	r11, QWORD PTR [rax+344]
	test	r11, r11
	je	SHORT $LL35@pyx_memory@17
	mov	r10, QWORD PTR [r11+16]
	xor	r8d, r8d
	test	r10, r10
	jle	SHORT $LN22@pyx_memory@17
	lea	rax, QWORD PTR [r11+24]
$LL28@pyx_memory@17:
	cmp	QWORD PTR [rax], r9
	je	SHORT $LN43@pyx_memory@17
	inc	r8
	add	rax, 8
	cmp	r8, r10
	jl	SHORT $LL28@pyx_memory@17

; 17735: 
; 17736:     /* "View.MemoryView":1079
; 17737:  *     cdef int (*to_dtype_func)(char *, object) except 0
; 17738:  * 
; 17739:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17740:  *         to_object_func = (<_memoryviewslice> memview).to_object_func
; 17741:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17742:  */
; 17743:     goto __pyx_L3;
; 17744:   }
; 17745: 
; 17746:   /* "View.MemoryView":1083
; 17747:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17748:  *     else:
; 17749:  *         to_object_func = NULL             # <<<<<<<<<<<<<<
; 17750:  *         to_dtype_func = NULL
; 17751:  * 
; 17752:  */
; 17753:   /*else*/ {
; 17754:     __pyx_v_to_object_func = NULL;

	xor	edi, edi

; 17755: 
; 17756:     /* "View.MemoryView":1084
; 17757:  *     else:
; 17758:  *         to_object_func = NULL
; 17759:  *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
; 17760:  * 
; 17761:  *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
; 17762:  */
; 17763:     __pyx_v_to_dtype_func = NULL;

	xor	esi, esi
	jmp	SHORT $LN14@pyx_memory@17
	npad	8

; 17694:   PyObject *(*__pyx_v_to_object_func)(char *);
; 17695:   int (*__pyx_v_to_dtype_func)(char *, PyObject *);
; 17696:   PyObject *__pyx_r = NULL;
; 17697:   __Pyx_RefNannyDeclarations
; 17698:   int __pyx_t_1;
; 17699:   int __pyx_t_2;
; 17700:   PyObject *(*__pyx_t_3)(char *);
; 17701:   int (*__pyx_t_4)(char *, PyObject *);
; 17702:   PyObject *__pyx_t_5 = NULL;
; 17703:   __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);
; 17704: 
; 17705:   /* "View.MemoryView":1079
; 17706:  *     cdef int (*to_dtype_func)(char *, object) except 0
; 17707:  * 
; 17708:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17709:  *         to_object_func = (<_memoryviewslice> memview).to_object_func
; 17710:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17711:  */
; 17712:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

$LL35@pyx_memory@17:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, r9
	je	SHORT $LN43@pyx_memory@17
	test	rax, rax
	jne	SHORT $LL35@pyx_memory@17
	cmp	r9, QWORD PTR __imp_PyBaseObject_Type
	sete	al

; 17713:   __pyx_t_2 = (__pyx_t_1 != 0);

	test	eax, eax

; 17714:   if (__pyx_t_2) {

	jne	SHORT $LN43@pyx_memory@17
$LN22@pyx_memory@17:

; 17735: 
; 17736:     /* "View.MemoryView":1079
; 17737:  *     cdef int (*to_dtype_func)(char *, object) except 0
; 17738:  * 
; 17739:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17740:  *         to_object_func = (<_memoryviewslice> memview).to_object_func
; 17741:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17742:  */
; 17743:     goto __pyx_L3;
; 17744:   }
; 17745: 
; 17746:   /* "View.MemoryView":1083
; 17747:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17748:  *     else:
; 17749:  *         to_object_func = NULL             # <<<<<<<<<<<<<<
; 17750:  *         to_dtype_func = NULL
; 17751:  * 
; 17752:  */
; 17753:   /*else*/ {
; 17754:     __pyx_v_to_object_func = NULL;

	xor	edi, edi

; 17755: 
; 17756:     /* "View.MemoryView":1084
; 17757:  *     else:
; 17758:  *         to_object_func = NULL
; 17759:  *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
; 17760:  * 
; 17761:  *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
; 17762:  */
; 17763:     __pyx_v_to_dtype_func = NULL;

	xor	esi, esi
	jmp	SHORT $LN14@pyx_memory@17
$LN43@pyx_memory@17:

; 17715: 
; 17716:     /* "View.MemoryView":1080
; 17717:  * 
; 17718:  *     if isinstance(memview, _memoryviewslice):
; 17719:  *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
; 17720:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
; 17721:  *     else:
; 17722:  */
; 17723:     __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
; 17724:     __pyx_v_to_object_func = __pyx_t_3;

	mov	rdi, QWORD PTR [rcx+400]

; 17725: 
; 17726:     /* "View.MemoryView":1081
; 17727:  *     if isinstance(memview, _memoryviewslice):
; 17728:  *         to_object_func = (<_memoryviewslice> memview).to_object_func
; 17729:  *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
; 17730:  *     else:
; 17731:  *         to_object_func = NULL
; 17732:  */
; 17733:     __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
; 17734:     __pyx_v_to_dtype_func = __pyx_t_4;

	mov	rsi, QWORD PTR [rcx+408]
$LN14@pyx_memory@17:

; 17764:   }
; 17765:   __pyx_L3:;
; 17766: 
; 17767:   /* "View.MemoryView":1086
; 17768:  *         to_dtype_func = NULL
; 17769:  * 
; 17770:  *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
; 17771:  *                                 to_object_func, to_dtype_func,
; 17772:  *                                 memview.dtype_is_object)
; 17773:  */
; 17774:   __Pyx_XDECREF(__pyx_r);
; 17775: 
; 17776:   /* "View.MemoryView":1088
; 17777:  *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
; 17778:  *                                 to_object_func, to_dtype_func,
; 17779:  *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
; 17780:  * 
; 17781:  * 
; 17782:  */
; 17783:   __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1086, __pyx_L1_error)

	lea	rcx, QWORD PTR $T39999[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11d, DWORD PTR [rbx+172]
	mov	edx, DWORD PTR [rbx+108]
	lea	rcx, QWORD PTR $T39999[rsp]
	mov	r9, rsi
	mov	r8, rdi
	mov	DWORD PTR [rsp+32], r11d
	call	__pyx_memoryview_fromslice
	test	rax, rax
	jne	SHORT $__pyx_L0$26261
	mov	r9, QWORD PTR __pyx_f+16

; 17784:   __Pyx_GOTREF(__pyx_t_5);
; 17785:   __pyx_r = __pyx_t_5;
; 17786:   __pyx_t_5 = 0;
; 17787:   goto __pyx_L0;
; 17788: 
; 17789:   /* "View.MemoryView":1072
; 17790:  * 
; 17791:  * @cname('__pyx_memoryview_copy_object_from_slice')
; 17792:  * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
; 17793:  *     """
; 17794:  *     Create a new memoryview object from a given memoryview object and slice.
; 17795:  */
; 17796: 
; 17797:   /* function exit code */
; 17798:   __pyx_L1_error:;
; 17799:   __Pyx_XDECREF(__pyx_t_5);
; 17800:   __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CL@OMBIALNL@View?4MemoryView?4memoryview_copy_@
	mov	edx, 17783				; 00004577H
	mov	r8d, 1086				; 0000043eH
	mov	DWORD PTR __pyx_lineno, 1086		; 0000043eH
	mov	DWORD PTR __pyx_clineno, 17783		; 00004577H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$26260:
	call	__Pyx_AddTraceback

; 17801:   __pyx_r = 0;
; 17802:   __pyx_L0:;
; 17803:   __Pyx_XGIVEREF(__pyx_r);
; 17804:   __Pyx_RefNannyFinishContext();
; 17805:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$26261:

; 17806: }

	lea	r11, QWORD PTR [rsp+256]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
__pyx_memoryview_copy_object_from_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@JMINFJPA@View?4MemoryView?4_err_extents?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_err_extents DD imagerel __pyx_memoryview_err_extents
	DD	imagerel __pyx_memoryview_err_extents+617
	DD	imagerel $unwind$__pyx_memoryview_err_extents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_err_extents DD 0a1601H
	DD	0c5416H
	DD	0b3416H
	DD	0e0123216H
	DD	0c00ed010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BN@JMINFJPA@View?4MemoryView?4_err_extents?$AA@
CONST	SEGMENT
??_C@_0BN@JMINFJPA@View?4MemoryView?4_err_extents?$AA@ DB 'View.MemoryVie'
	DB	'w._err_extents', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_err_extents
_TEXT	SEGMENT
$T40074 = 80
__pyx_v_i$ = 80
__pyx_v_extent1$ = 88
__pyx_v_extent2$ = 96
__pyx_memoryview_err_extents PROC			; COMDAT

; 18773: static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 18774:   int __pyx_r;
; 18775:   __Pyx_RefNannyDeclarations
; 18776:   PyObject *__pyx_t_1 = NULL;
; 18777:   PyObject *__pyx_t_2 = NULL;
; 18778:   PyObject *__pyx_t_3 = NULL;

	xor	esi, esi
	mov	r13, r8
	mov	r12, rdx

; 18779:   PyObject *__pyx_t_4 = NULL;

	mov	rdi, rsi
	mov	ebx, ecx

; 18780:   #ifdef WITH_THREAD
; 18781:   PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 18782:   #endif
; 18783:   __Pyx_RefNannySetupContext("_err_extents", 0);
; 18784: 
; 18785:   /* "View.MemoryView":1240
; 18786:  *                              Py_ssize_t extent2) except -1 with gil:
; 18787:  *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
; 18788:  *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
; 18789:  * 
; 18790:  * @cname('__pyx_memoryview_err_dim')
; 18791:  */
; 18792:   __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1240, __pyx_L1_error)

	mov	ecx, ebx
	mov	DWORD PTR $T40074[rsp], ebx
	mov	r14d, eax
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN62@pyx_memory@18
	mov	DWORD PTR __pyx_lineno, 1240		; 000004d8H
	mov	DWORD PTR __pyx_clineno, 18792		; 00004968H
	jmp	$LN77@pyx_memory@18
$LN62@pyx_memory@18:

; 18793:   __Pyx_GOTREF(__pyx_t_1);
; 18794:   __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1240, __pyx_L1_error)

	mov	rcx, r12
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN61@pyx_memory@18
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 18794		; 0000496aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN78@pyx_memory@18
$LN61@pyx_memory@18:

; 18795:   __Pyx_GOTREF(__pyx_t_2);
; 18796:   __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1240, __pyx_L1_error)

	mov	rcx, r13
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN60@pyx_memory@18
	mov	DWORD PTR __pyx_clineno, 18796		; 0000496cH
	jmp	SHORT $LN79@pyx_memory@18
$LN60@pyx_memory@18:

; 18797:   __Pyx_GOTREF(__pyx_t_3);
; 18798:   __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1240, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN59@pyx_memory@18
	mov	DWORD PTR __pyx_clineno, 18798		; 0000496eH
$LN79@pyx_memory@18:
	mov	rcx, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rcx
$LN78@pyx_memory@18:

; 18831: 
; 18832:   /* "View.MemoryView":1237
; 18833:  * 
; 18834:  * @cname('__pyx_memoryview_err_extents')
; 18835:  * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
; 18836:  *                              Py_ssize_t extent2) except -1 with gil:
; 18837:  *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
; 18838:  */
; 18839: 
; 18840:   /* function exit code */
; 18841:   __pyx_L1_error:;
; 18842:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbp], -1
	mov	DWORD PTR __pyx_lineno, 1240		; 000004d8H
$__pyx_L1_error$26460:
	jne	SHORT $LN34@pyx_memory@18
	mov	rdx, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rdx+48]
$LN34@pyx_memory@18:

; 18843:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	$LN23@pyx_memory@18
	add	QWORD PTR [rbx], -1
	jne	$LN23@pyx_memory@18
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	jmp	$LN23@pyx_memory@18
$LN59@pyx_memory@18:

; 18799:   __Pyx_GOTREF(__pyx_t_4);
; 18800:   __Pyx_GIVEREF(__pyx_t_1);
; 18801:   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

	mov	QWORD PTR [rax+24], rbp

; 18802:   __Pyx_GIVEREF(__pyx_t_2);
; 18803:   PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);

	mov	QWORD PTR [rax+32], rbx

; 18804:   __Pyx_GIVEREF(__pyx_t_3);
; 18805:   PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);

	mov	QWORD PTR [rax+40], rsi

; 18806:   __pyx_t_1 = 0;
; 18807:   __pyx_t_2 = 0;
; 18808:   __pyx_t_3 = 0;
; 18809: 
; 18810:   /* "View.MemoryView":1239
; 18811:  * cdef int _err_extents(int i, Py_ssize_t extent1,
; 18812:  *                              Py_ssize_t extent2) except -1 with gil:
; 18813:  *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
; 18814:  *                                                         (i, extent1, extent2))
; 18815:  * 
; 18816:  */
; 18817:   __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1239, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_got_differing_extents_in_dimensi
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN57@pyx_memory@18
	mov	DWORD PTR __pyx_clineno, 18817		; 00004981H
	jmp	SHORT $LN80@pyx_memory@18
$LN57@pyx_memory@18:

; 18818:   __Pyx_GOTREF(__pyx_t_3);
; 18819:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN56@pyx_memory@18
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN56@pyx_memory@18:

; 18820:   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1239, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN52@pyx_memory@18
	mov	DWORD PTR __pyx_clineno, 18820		; 00004984H
	jmp	SHORT $LN80@pyx_memory@18
$LN52@pyx_memory@18:

; 18821:   __Pyx_GOTREF(__pyx_t_4);
; 18822:   __Pyx_GIVEREF(__pyx_t_3);
; 18823:   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
; 18824:   __pyx_t_3 = 0;
; 18825:   __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1239, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rsi
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN50@pyx_memory@18
	mov	DWORD PTR __pyx_clineno, 18825		; 00004989H
$LN80@pyx_memory@18:
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1239		; 000004d7H
	mov	QWORD PTR __pyx_filename, rax
$LN23@pyx_memory@18:

; 18844:   __Pyx_XDECREF(__pyx_t_3);

	test	rsi, rsi
	je	SHORT $LN13@pyx_memory@18
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN13@pyx_memory@18
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@18:

; 18845:   __Pyx_XDECREF(__pyx_t_4);

	test	rdi, rdi
	je	SHORT $LN3@pyx_memory@18
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN3@pyx_memory@18
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN3@pyx_memory@18
$LN50@pyx_memory@18:

; 18826:   __Pyx_GOTREF(__pyx_t_3);
; 18827:   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN49@pyx_memory@18
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN49@pyx_memory@18:

; 18828:   __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rsi
	call	__Pyx_Raise

; 18829:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN44@pyx_memory@18
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN44@pyx_memory@18:

; 18830:   __PYX_ERR(2, 1239, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1239		; 000004d7H
	mov	DWORD PTR __pyx_clineno, 18830		; 0000498eH
$LN77@pyx_memory@18:
	mov	rax, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rax
$LN3@pyx_memory@18:

; 18846:   __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BN@JMINFJPA@View?4MemoryView?4_err_extents?$AA@
	call	__Pyx_AddTraceback

; 18847:   __pyx_r = -1;
; 18848:   __Pyx_RefNannyFinishContext();
; 18849:   #ifdef WITH_THREAD
; 18850:   __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, r14d
	call	QWORD PTR __imp_PyGILState_Release

; 18851:   #endif
; 18852:   return __pyx_r;
; 18853: }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	or	eax, -1
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
__pyx_memoryview_err_extents ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@ONDHOIFM@View?4MemoryView?4_err_dim?$AA@ ; `string'
EXTRN	__imp_PyUnicodeUCS2_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_err_dim DD imagerel __pyx_memoryview_err_dim
	DD	imagerel __pyx_memoryview_err_dim+8
	DD	imagerel $unwind$__pyx_memoryview_err_dim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__pyx_memoryview_err_dim DD imagerel __pyx_memoryview_err_dim+8
	DD	imagerel __pyx_memoryview_err_dim+244
	DD	imagerel $chain$4$__pyx_memoryview_err_dim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memoryview_err_dim DD imagerel __pyx_memoryview_err_dim+244
	DD	imagerel __pyx_memoryview_err_dim+941
	DD	imagerel $chain$5$__pyx_memoryview_err_dim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_err_dim DD imagerel __pyx_memoryview_err_dim+941
	DD	imagerel __pyx_memoryview_err_dim+1065
	DD	imagerel $chain$6$__pyx_memoryview_err_dim
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memoryview_err_dim DD imagerel __pyx_memoryview_err_dim+1065
	DD	imagerel __pyx_memoryview_err_dim+1095
	DD	imagerel $chain$7$__pyx_memoryview_err_dim
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memoryview_err_dim DD 021H
	DD	imagerel __pyx_memoryview_err_dim
	DD	imagerel __pyx_memoryview_err_dim+8
	DD	imagerel $unwind$__pyx_memoryview_err_dim
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_err_dim DD 021H
	DD	imagerel __pyx_memoryview_err_dim+8
	DD	imagerel __pyx_memoryview_err_dim+244
	DD	imagerel $chain$4$__pyx_memoryview_err_dim
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memoryview_err_dim DD 020521H
	DD	06e405H
	DD	imagerel __pyx_memoryview_err_dim+8
	DD	imagerel __pyx_memoryview_err_dim+244
	DD	imagerel $chain$4$__pyx_memoryview_err_dim
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__pyx_memoryview_err_dim DD 0a1921H
	DD	07d419H
	DD	08c414H
	DD	0f740fH
	DD	0e640aH
	DD	0d3405H
	DD	imagerel __pyx_memoryview_err_dim
	DD	imagerel __pyx_memoryview_err_dim+8
	DD	imagerel $unwind$__pyx_memoryview_err_dim
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_err_dim DD 030801H
	DD	0f0048208H
	DD	05002H
xdata	ENDS
;	COMDAT ??_C@_0BJ@ONDHOIFM@View?4MemoryView?4_err_dim?$AA@
CONST	SEGMENT
??_C@_0BJ@ONDHOIFM@View?4MemoryView?4_err_dim?$AA@ DB 'View.MemoryView._e'
	DB	'rr_dim', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_err_dim
_TEXT	SEGMENT
__pyx_temp$26652 = 32
$T40129 = 96
__pyx_v_error$ = 96
__pyx_v_msg$ = 104
__pyx_v_dim$ = 112
__pyx_memoryview_err_dim PROC				; COMDAT

; 18863: static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {

	push	rbp
	push	r15
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR [rsp+104], rbx
	mov	QWORD PTR [rsp+112], rsi
	mov	QWORD PTR [rsp+120], rdi
	mov	QWORD PTR [rsp+64], r12
	mov	QWORD PTR [rsp+56], r13
	mov	ebx, r8d
	mov	r13, rdx
	mov	rbp, rcx

; 18864:   int __pyx_r;
; 18865:   __Pyx_RefNannyDeclarations
; 18866:   PyObject *__pyx_t_1 = NULL;
; 18867:   PyObject *__pyx_t_2 = NULL;
; 18868:   PyObject *__pyx_t_3 = NULL;
; 18869:   PyObject *__pyx_t_4 = NULL;

	xor	esi, esi

; 18870:   PyObject *__pyx_t_5 = NULL;

	xor	r12d, r12d

; 18871:   #ifdef WITH_THREAD
; 18872:   PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 18873:   #endif
; 18874:   __Pyx_RefNannySetupContext("_err_dim", 0);
; 18875:   __Pyx_INCREF(__pyx_v_error);

	inc	QWORD PTR [rbp]

; 18876: 
; 18877:   /* "View.MemoryView":1244
; 18878:  * @cname('__pyx_memoryview_err_dim')
; 18879:  * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
; 18880:  *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
; 18881:  * 
; 18882:  * @cname('__pyx_memoryview_err')
; 18883:  */
; 18884:   __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1244, __pyx_L1_error)

	or	rcx, -1
	mov	r15d, eax
	xor	eax, eax
	mov	rdi, r13
	repne scasb
	not	rcx
	sub	rcx, 1
	jns	SHORT $LN132@pyx_memory@19
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	rcx, rax
	jbe	SHORT $LN135@pyx_memory@19
	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN152@pyx_memory@19
$LN135@pyx_memory@19:
	test	rcx, rcx
	jns	SHORT $LN132@pyx_memory@19
	add	rcx, rcx
$LN132@pyx_memory@19:
	test	rcx, rcx
	jg	SHORT $LN131@pyx_memory@19
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_PyUnicodeUCS2_FromUnicode
	mov	rdi, rax
	jmp	SHORT $LN129@pyx_memory@19
$LN131@pyx_memory@19:
	cmp	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII, rsi
	je	SHORT $LN130@pyx_memory@19
	mov	rdx, rcx
	xor	r8d, r8d
	mov	rcx, r13
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII
	mov	rdi, rax
	jmp	SHORT $LN129@pyx_memory@19
$LN130@pyx_memory@19:
	mov	rdx, rcx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, r13
	call	QWORD PTR __imp_PyUnicodeUCS2_Decode
	mov	rdi, rax
$LN129@pyx_memory@19:
	test	rdi, rdi
	jne	SHORT $LN126@pyx_memory@19
$LN152@pyx_memory@19:
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18884		; 000049c4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_memory@19
$LN126@pyx_memory@19:

; 18885:   __Pyx_GOTREF(__pyx_t_2);
; 18886:   __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1244, __pyx_L1_error)

	mov	ecx, ebx
	mov	QWORD PTR [rsp+48], r14
	mov	DWORD PTR $T40129[rsp], ebx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN125@pyx_memory@19
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18886		; 000049c6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$26590
$LN125@pyx_memory@19:

; 18887:   __Pyx_GOTREF(__pyx_t_3);
; 18888:   __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1244, __pyx_L1_error)

	mov	rdx, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyUnicodeUCS2_Format
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN123@pyx_memory@19
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18888		; 000049c8H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$26590
$LN123@pyx_memory@19:

; 18889:   __Pyx_GOTREF(__pyx_t_4);
; 18890:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN122@pyx_memory@19
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN122@pyx_memory@19:

; 18891:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN117@pyx_memory@19
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN117@pyx_memory@19:

; 18892:   __Pyx_INCREF(__pyx_v_error);

	inc	QWORD PTR [rbp]

; 18893:   __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
; 18894:   if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	lea	r14, QWORD PTR [rbp+8]
	xor	edi, edi
	mov	rbx, rbp
	cmp	QWORD PTR [r14], rax
	jne	$LN151@pyx_memory@19

; 18895:     __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

	mov	rdi, QWORD PTR [rbp+24]

; 18896:     if (likely(__pyx_t_2)) {

	test	rdi, rdi
	je	$LN151@pyx_memory@19

; 18897:       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

	mov	rbx, QWORD PTR [rbp+16]

; 18898:       __Pyx_INCREF(__pyx_t_2);

	inc	QWORD PTR [rdi]

; 18899:       __Pyx_INCREF(function);

	inc	QWORD PTR [rbx]

; 18900:       __Pyx_DECREF_SET(__pyx_t_3, function);

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN103@pyx_memory@19
	mov	rax, QWORD PTR [r14]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN103@pyx_memory@19:

; 18906:     __Pyx_GOTREF(__pyx_t_1);
; 18907:   } else {
; 18908:     #if CYTHON_FAST_PYCALL
; 18909:     if (PyFunction_Check(__pyx_t_3)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	lea	r14, QWORD PTR [rbx+8]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN95@pyx_memory@19

; 18910:       PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
; 18911:       __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1244, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, QWORD PTR __pyx_temp$26652[rsp]
	mov	rcx, rbx
	lea	r8d, QWORD PTR [r9+2]
	mov	QWORD PTR __pyx_temp$26652[rsp], rdi
	mov	QWORD PTR __pyx_temp$26652[rsp+8], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN93@pyx_memory@19
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18911		; 000049dfH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$26590
$LN93@pyx_memory@19:

; 18912:       __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN87@pyx_memory@19
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN87@pyx_memory@19:
	xor	edi, edi

; 18913:       __Pyx_GOTREF(__pyx_t_1);
; 18914:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN82@pyx_memory@19
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN82@pyx_memory@19:
	xor	esi, esi

; 18915:     } else

	jmp	$LN70@pyx_memory@19
$LN95@pyx_memory@19:

; 18916:     #endif
; 18917:     #if CYTHON_FAST_PYCCALL
; 18918:     if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
; 18919:       PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
; 18920:       __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1244, __pyx_L1_error)
; 18921:       __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
; 18922:       __Pyx_GOTREF(__pyx_t_1);
; 18923:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 18924:     } else
; 18925:     #endif
; 18926:     {
; 18927:       __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1244, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN77@pyx_memory@19
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18927		; 000049efH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$26590
$LN77@pyx_memory@19:

; 18928:       __Pyx_GOTREF(__pyx_t_5);
; 18929:       __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;

	mov	QWORD PTR [rax+24], rdi

; 18930:       __Pyx_GIVEREF(__pyx_t_4);
; 18931:       PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);

	mov	QWORD PTR [rax+32], rsi

; 18932:       __pyx_t_4 = 0;
; 18933:       __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1244, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, rbx
	xor	edi, edi
	xor	esi, esi
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN75@pyx_memory@19
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18933		; 000049f5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_memory@19
$LN75@pyx_memory@19:

; 18934:       __Pyx_GOTREF(__pyx_t_1);
; 18935:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN74@pyx_memory@19
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN74@pyx_memory@19:
	xor	r12d, r12d
	jmp	SHORT $LN70@pyx_memory@19
$LN151@pyx_memory@19:

; 18901:     }
; 18902:   }
; 18903:   if (!__pyx_t_2) {
; 18904:     __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1244, __pyx_L1_error)

	mov	rdx, rsi
	mov	rcx, rbp
	call	__Pyx_PyObject_CallOneArg
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN101@pyx_memory@19
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18904		; 000049d8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$26590
$LN101@pyx_memory@19:

; 18905:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN100@pyx_memory@19
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN100@pyx_memory@19:
	xor	esi, esi
$LN70@pyx_memory@19:

; 18936:     }
; 18937:   }
; 18938:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN69@pyx_memory@19
	mov	rax, QWORD PTR [r14]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN69@pyx_memory@19:

; 18939:   __Pyx_Raise(__pyx_t_1, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, r13
	xor	ebx, ebx
	call	__Pyx_Raise

; 18940:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN64@pyx_memory@19
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN64@pyx_memory@19:

; 18941:   __PYX_ERR(2, 1244, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1244		; 000004dcH
	mov	DWORD PTR __pyx_clineno, 18941		; 000049fdH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$26590:

; 18942: 
; 18943:   /* "View.MemoryView":1243
; 18944:  * 
; 18945:  * @cname('__pyx_memoryview_err_dim')
; 18946:  * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
; 18947:  *     raise error(msg.decode('ascii') % dim)
; 18948:  * 
; 18949:  */
; 18950: 
; 18951:   /* function exit code */
; 18952:   __pyx_L1_error:;
; 18953:   __Pyx_XDECREF(__pyx_t_1);
; 18954:   __Pyx_XDECREF(__pyx_t_2);

	test	rdi, rdi
	je	SHORT $LN43@pyx_memory@19
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN43@pyx_memory@19
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@19:
	mov	r14, QWORD PTR [rsp+48]

; 18955:   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN33@pyx_memory@19
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN33@pyx_memory@19
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN33@pyx_memory@19:

; 18956:   __Pyx_XDECREF(__pyx_t_4);

	test	rsi, rsi
	je	SHORT $LN23@pyx_memory@19
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN23@pyx_memory@19
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@19:

; 18957:   __Pyx_XDECREF(__pyx_t_5);

	test	r12, r12
	je	SHORT $LN13@pyx_memory@19
	add	QWORD PTR [r12], -1
	jne	SHORT $LN13@pyx_memory@19
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@19:

; 18958:   __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BJ@ONDHOIFM@View?4MemoryView?4_err_dim?$AA@
	call	__Pyx_AddTraceback

; 18959:   __pyx_r = -1;
; 18960:   __Pyx_XDECREF(__pyx_v_error);

	add	QWORD PTR [rbp], -1
	mov	r13, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+104]
	jne	SHORT $LN4@pyx_memory@19
	mov	rdx, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rdx+48]
$LN4@pyx_memory@19:

; 18961:   __Pyx_RefNannyFinishContext();
; 18962:   #ifdef WITH_THREAD
; 18963:   __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, r15d
	call	QWORD PTR __imp_PyGILState_Release

; 18964:   #endif
; 18965:   return __pyx_r;

	or	eax, -1

; 18966: }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	rbp
	ret	0
__pyx_memoryview_err_dim ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@POEOPOC@View?4MemoryView?4_err?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_err DD imagerel __pyx_memoryview_err
	DD	imagerel __pyx_memoryview_err+8
	DD	imagerel $unwind$__pyx_memoryview_err
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_err DD imagerel __pyx_memoryview_err+8
	DD	imagerel __pyx_memoryview_err+244
	DD	imagerel $chain$2$__pyx_memoryview_err
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memoryview_err DD imagerel __pyx_memoryview_err+244
	DD	imagerel __pyx_memoryview_err+806
	DD	imagerel $chain$5$__pyx_memoryview_err
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_err DD imagerel __pyx_memoryview_err+806
	DD	imagerel __pyx_memoryview_err+949
	DD	imagerel $chain$6$__pyx_memoryview_err
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memoryview_err DD imagerel __pyx_memoryview_err+949
	DD	imagerel __pyx_memoryview_err+979
	DD	imagerel $chain$7$__pyx_memoryview_err
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memoryview_err DD 021H
	DD	imagerel __pyx_memoryview_err
	DD	imagerel __pyx_memoryview_err+8
	DD	imagerel $unwind$__pyx_memoryview_err
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_err DD 021H
	DD	imagerel __pyx_memoryview_err+8
	DD	imagerel __pyx_memoryview_err+244
	DD	imagerel $chain$2$__pyx_memoryview_err
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memoryview_err DD 060f21H
	DD	06e40fH
	DD	07d40aH
	DD	08c405H
	DD	imagerel __pyx_memoryview_err+8
	DD	imagerel __pyx_memoryview_err+244
	DD	imagerel $chain$2$__pyx_memoryview_err
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_err DD 061221H
	DD	0e7412H
	DD	0d540aH
	DD	0c3405H
	DD	imagerel __pyx_memoryview_err
	DD	imagerel __pyx_memoryview_err+8
	DD	imagerel $unwind$__pyx_memoryview_err
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_err DD 030801H
	DD	0f0048208H
	DD	06002H
xdata	ENDS
;	COMDAT ??_C@_0BF@POEOPOC@View?4MemoryView?4_err?$AA@
CONST	SEGMENT
??_C@_0BF@POEOPOC@View?4MemoryView?4_err?$AA@ DB 'View.MemoryView._err', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_err
_TEXT	SEGMENT
__pyx_temp$26879 = 32
__pyx_v_error$ = 96
__pyx_v_msg$ = 104
__pyx_memoryview_err PROC				; COMDAT

; 18976: static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {

	push	rsi
	push	r15
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR [rsp+96], rbx
	mov	QWORD PTR [rsp+104], rbp
	mov	rsi, rcx
	mov	QWORD PTR [rsp+112], rdi

; 18977:   int __pyx_r;
; 18978:   __Pyx_RefNannyDeclarations
; 18979:   int __pyx_t_1;
; 18980:   PyObject *__pyx_t_2 = NULL;
; 18981:   PyObject *__pyx_t_3 = NULL;
; 18982:   PyObject *__pyx_t_4 = NULL;
; 18983:   PyObject *__pyx_t_5 = NULL;
; 18984:   PyObject *__pyx_t_6 = NULL;

	xor	ebp, ebp
	mov	rbx, rdx

; 18985:   #ifdef WITH_THREAD
; 18986:   PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 18987:   #endif
; 18988:   __Pyx_RefNannySetupContext("_err", 0);
; 18989:   __Pyx_INCREF(__pyx_v_error);

	inc	QWORD PTR [rsi]
	mov	r15d, eax

; 18990: 
; 18991:   /* "View.MemoryView":1248
; 18992:  * @cname('__pyx_memoryview_err')
; 18993:  * cdef int _err(object error, char *msg) except -1 with gil:
; 18994:  *     if msg != NULL:             # <<<<<<<<<<<<<<
; 18995:  *         raise error(msg.decode('ascii'))
; 18996:  *     else:
; 18997:  */
; 18998:   __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);

	test	rbx, rbx

; 18999:   if (__pyx_t_1) {

	je	$LN115@pyx_memory@20

; 19000: 
; 19001:     /* "View.MemoryView":1249
; 19002:  * cdef int _err(object error, char *msg) except -1 with gil:
; 19003:  *     if msg != NULL:
; 19004:  *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
; 19005:  *     else:
; 19006:  *         raise error
; 19007:  */
; 19008:     __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1249, __pyx_L1_error)

	or	rcx, -1
	xor	eax, eax
	mov	rdi, rbx
	repne scasb
	not	rcx
	sub	rcx, 1
	jns	SHORT $LN121@pyx_memory@20
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	rcx, rax
	jbe	SHORT $LN124@pyx_memory@20
	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CH@OAAFGJNF@c?9string?5too?5long?5to?5convert?5to?5@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN129@pyx_memory@20
$LN124@pyx_memory@20:
	test	rcx, rcx
	jns	SHORT $LN121@pyx_memory@20
	add	rcx, rcx
$LN121@pyx_memory@20:
	test	rcx, rcx
	jg	SHORT $LN120@pyx_memory@20
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_PyUnicodeUCS2_FromUnicode
	mov	rdi, rax
	jmp	SHORT $LN118@pyx_memory@20
$LN120@pyx_memory@20:
	cmp	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII, rbp
	je	SHORT $LN119@pyx_memory@20
	mov	rdx, rcx
	xor	r8d, r8d
	mov	rcx, rbx
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeASCII
	mov	rdi, rax
	jmp	SHORT $LN118@pyx_memory@20
$LN119@pyx_memory@20:
	mov	rdx, rcx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rcx, rbx
	call	QWORD PTR __imp_PyUnicodeUCS2_Decode
	mov	rdi, rax
$LN118@pyx_memory@20:
	test	rdi, rdi
	jne	SHORT $LN114@pyx_memory@20
$LN129@pyx_memory@20:
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19008		; 00004a40H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_memory@20
$LN114@pyx_memory@20:

; 19009:     __Pyx_GOTREF(__pyx_t_3);
; 19010:     __Pyx_INCREF(__pyx_v_error);

	inc	QWORD PTR [rsi]

; 19011:     __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
; 19012:     if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	QWORD PTR [rsp+64], r12
	mov	QWORD PTR [rsp+56], r13
	mov	QWORD PTR [rsp+48], r14
	lea	r14, QWORD PTR [rsi+8]
	xor	ebx, ebx
	mov	r12, rsi
	cmp	QWORD PTR [r14], rax
	jne	$LN128@pyx_memory@20

; 19013:       __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

	mov	rbx, QWORD PTR [rsi+24]

; 19014:       if (likely(__pyx_t_5)) {

	test	rbx, rbx
	je	$LN128@pyx_memory@20

; 19015:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

	mov	r12, QWORD PTR [rsi+16]

; 19016:         __Pyx_INCREF(__pyx_t_5);

	inc	QWORD PTR [rbx]

; 19017:         __Pyx_INCREF(function);

	inc	QWORD PTR [r12]

; 19018:         __Pyx_DECREF_SET(__pyx_t_4, function);

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN103@pyx_memory@20
	mov	rax, QWORD PTR [r14]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN103@pyx_memory@20:

; 19024:       __Pyx_GOTREF(__pyx_t_2);
; 19025:     } else {
; 19026:       #if CYTHON_FAST_PYCALL
; 19027:       if (PyFunction_Check(__pyx_t_4)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	lea	r14, QWORD PTR [r12+8]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN95@pyx_memory@20

; 19028:         PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
; 19029:         __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1249, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, QWORD PTR __pyx_temp$26879[rsp]
	mov	rcx, r12
	lea	r8d, QWORD PTR [r9+2]
	mov	QWORD PTR __pyx_temp$26879[rsp], rbx
	mov	QWORD PTR __pyx_temp$26879[rsp+8], rdi
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN93@pyx_memory@20
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19029		; 00004a55H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$26839
$LN93@pyx_memory@20:

; 19030:         __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN87@pyx_memory@20
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN87@pyx_memory@20:
	xor	ebx, ebx

; 19031:         __Pyx_GOTREF(__pyx_t_2);
; 19032:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	$LN70@pyx_memory@20
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]

; 19033:       } else

	jmp	$LN70@pyx_memory@20
$LN95@pyx_memory@20:

; 19034:       #endif
; 19035:       #if CYTHON_FAST_PYCCALL
; 19036:       if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
; 19037:         PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
; 19038:         __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1249, __pyx_L1_error)
; 19039:         __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
; 19040:         __Pyx_GOTREF(__pyx_t_2);
; 19041:         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
; 19042:       } else
; 19043:       #endif
; 19044:       {
; 19045:         __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 1249, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN77@pyx_memory@20
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19045		; 00004a65H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$26839
$LN77@pyx_memory@20:

; 19046:         __Pyx_GOTREF(__pyx_t_6);
; 19047:         __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;

	mov	QWORD PTR [rax+24], rbx

; 19048:         __Pyx_GIVEREF(__pyx_t_3);
; 19049:         PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
; 19050:         __pyx_t_3 = 0;
; 19051:         __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1249, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, r12
	xor	ebx, ebx
	mov	QWORD PTR [rax+32], rdi
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN75@pyx_memory@20
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19051		; 00004a6bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN43@pyx_memory@20
$LN75@pyx_memory@20:

; 19052:         __Pyx_GOTREF(__pyx_t_2);
; 19053:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN74@pyx_memory@20
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN74@pyx_memory@20:
	xor	ebp, ebp
	jmp	SHORT $LN70@pyx_memory@20
$LN128@pyx_memory@20:

; 19019:       }
; 19020:     }
; 19021:     if (!__pyx_t_5) {
; 19022:       __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1249, __pyx_L1_error)

	mov	rdx, rdi
	mov	rcx, rsi
	call	__Pyx_PyObject_CallOneArg
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN101@pyx_memory@20
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19022		; 00004a4eH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$26839:

; 19080:   }
; 19081: 
; 19082:   /* "View.MemoryView":1247
; 19083:  * 
; 19084:  * @cname('__pyx_memoryview_err')
; 19085:  * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
; 19086:  *     if msg != NULL:
; 19087:  *         raise error(msg.decode('ascii'))
; 19088:  */
; 19089: 
; 19090:   /* function exit code */
; 19091:   __pyx_L1_error:;
; 19092:   __Pyx_XDECREF(__pyx_t_2);
; 19093:   __Pyx_XDECREF(__pyx_t_3);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN43@pyx_memory@20
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@20:

; 19094:   __Pyx_XDECREF(__pyx_t_4);

	add	QWORD PTR [r12], -1
	jne	SHORT $LN33@pyx_memory@20
	mov	rax, QWORD PTR [r14]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN33@pyx_memory@20
$LN101@pyx_memory@20:

; 19023:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN70@pyx_memory@20
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN70@pyx_memory@20:

; 19054:       }
; 19055:     }
; 19056:     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN69@pyx_memory@20
	mov	rax, QWORD PTR [r14]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN69@pyx_memory@20:

; 19057:     __Pyx_Raise(__pyx_t_2, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, r13
	call	__Pyx_Raise

; 19058:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN64@pyx_memory@20
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN64@pyx_memory@20:

; 19059:     __PYX_ERR(2, 1249, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1249		; 000004e1H
	mov	DWORD PTR __pyx_clineno, 19059		; 00004a73H
	mov	QWORD PTR __pyx_filename, rax
$LN33@pyx_memory@20:
	mov	r14, QWORD PTR [rsp+48]
	mov	r13, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+64]

; 19095:   __Pyx_XDECREF(__pyx_t_5);

	test	rbx, rbx
	je	SHORT $LN23@pyx_memory@20
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN23@pyx_memory@20
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@20:

; 19096:   __Pyx_XDECREF(__pyx_t_6);

	test	rbp, rbp
	je	SHORT $LN13@pyx_memory@20
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN13@pyx_memory@20
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN13@pyx_memory@20
$LN115@pyx_memory@20:

; 19060: 
; 19061:     /* "View.MemoryView":1248
; 19062:  * @cname('__pyx_memoryview_err')
; 19063:  * cdef int _err(object error, char *msg) except -1 with gil:
; 19064:  *     if msg != NULL:             # <<<<<<<<<<<<<<
; 19065:  *         raise error(msg.decode('ascii'))
; 19066:  *     else:
; 19067:  */
; 19068:   }
; 19069: 
; 19070:   /* "View.MemoryView":1251
; 19071:  *         raise error(msg.decode('ascii'))
; 19072:  *     else:
; 19073:  *         raise error             # <<<<<<<<<<<<<<
; 19074:  * 
; 19075:  * @cname('__pyx_memoryview_copy_contents')
; 19076:  */
; 19077:   /*else*/ {
; 19078:     __Pyx_Raise(__pyx_v_error, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rsi
	call	__Pyx_Raise

; 19079:     __PYX_ERR(2, 1251, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1251		; 000004e3H
	mov	QWORD PTR __pyx_filename, rdx
	mov	DWORD PTR __pyx_clineno, 19079		; 00004a87H
$LN13@pyx_memory@20:

; 19097:   __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BF@POEOPOC@View?4MemoryView?4_err?$AA@
	call	__Pyx_AddTraceback

; 19098:   __pyx_r = -1;
; 19099:   __Pyx_XDECREF(__pyx_v_error);

	add	QWORD PTR [rsi], -1
	mov	rdi, QWORD PTR [rsp+112]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rbx, QWORD PTR [rsp+96]
	jne	SHORT $LN4@pyx_memory@20
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN4@pyx_memory@20:

; 19100:   __Pyx_RefNannyFinishContext();
; 19101:   #ifdef WITH_THREAD
; 19102:   __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, r15d
	call	QWORD PTR __imp_PyGILState_Release

; 19103:   #endif
; 19104:   return __pyx_r;

	or	eax, -1

; 19105: }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	rsi
	ret	0
__pyx_memoryview_err ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_refcount_objects_in_slice_with_gil DD imagerel __pyx_memoryview_refcount_objects_in_slice_with_gil
	DD	imagerel __pyx_memoryview_refcount_objects_in_slice_with_gil+108
	DD	imagerel $unwind$__pyx_memoryview_refcount_objects_in_slice_with_gil
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_refcount_objects_in_slice_with_gil DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0c016521aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview_refcount_objects_in_slice_with_gil
_TEXT	SEGMENT
__pyx_v_data$ = 64
__pyx_v_shape$ = 72
__pyx_v_strides$ = 80
__pyx_v_ndim$ = 88
__pyx_v_inc$ = 96
__pyx_memoryview_refcount_objects_in_slice_with_gil PROC ; COMDAT

; 19850: static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 48					; 00000030H
	mov	edi, r9d
	mov	rsi, r8
	mov	rbp, rdx
	mov	r12, rcx

; 19851:   __Pyx_RefNannyDeclarations
; 19852:   #ifdef WITH_THREAD
; 19853:   PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 19854:   #endif
; 19855:   __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);
; 19856: 
; 19857:   /* "View.MemoryView":1360
; 19858:  *                                              Py_ssize_t *strides, int ndim,
; 19859:  *                                              bint inc) with gil:
; 19860:  *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
; 19861:  * 
; 19862:  * @cname('__pyx_memoryview_refcount_objects_in_slice')
; 19863:  */
; 19864:   __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

	mov	r10d, DWORD PTR __pyx_v_inc$[rsp]
	mov	r9d, edi
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], r10d
	mov	ebx, eax
	call	__pyx_memoryview_refcount_objects_in_slice

; 19865: 
; 19866:   /* "View.MemoryView":1357
; 19867:  * 
; 19868:  * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
; 19869:  * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
; 19870:  *                                              Py_ssize_t *strides, int ndim,
; 19871:  *                                              bint inc) with gil:
; 19872:  */
; 19873: 
; 19874:   /* function exit code */
; 19875:   __Pyx_RefNannyFinishContext();
; 19876:   #ifdef WITH_THREAD
; 19877:   __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, ebx

; 19878:   #endif
; 19879: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
	rex_jmp	QWORD PTR __imp_PyGILState_Release
__pyx_memoryview_refcount_objects_in_slice_with_gil ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@CBOKPIFB@View?4MemoryView?4__pyx_unpickle_E@ ; `string'
PUBLIC	??_C@_0CH@CKNMHKEB@object?5of?5type?5?8NoneType?8?5has?5no@ ; `string'
PUBLIC	??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_unpickle_Enum__set_state DD imagerel __pyx_unpickle_Enum__set_state
	DD	imagerel __pyx_unpickle_Enum__set_state+1196
	DD	imagerel $unwind$__pyx_unpickle_Enum__set_state
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_unpickle_Enum__set_state DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0d0145218H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CP@CBOKPIFB@View?4MemoryView?4__pyx_unpickle_E@
CONST	SEGMENT
??_C@_0CP@CBOKPIFB@View?4MemoryView?4__pyx_unpickle_E@ DB 'View.MemoryVie'
	DB	'w.__pyx_unpickle_Enum__set_state', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CKNMHKEB@object?5of?5type?5?8NoneType?8?5has?5no@
CONST	SEGMENT
??_C@_0CH@CKNMHKEB@object?5of?5type?5?8NoneType?8?5has?5no@ DB 'object of'
	DB	' type ''NoneType'' has no len()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@
CONST	SEGMENT
??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@ DB '''NoneType'
	DB	''' object is not subscriptable', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_unpickle_Enum__set_state
_TEXT	SEGMENT
__pyx_temp$27852 = 32
__pyx_v___pyx_result$ = 80
__pyx_v___pyx_state$ = 88
__pyx_unpickle_Enum__set_state PROC			; COMDAT

; 20512: static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 48					; 00000030H

; 20513:   PyObject *__pyx_r = NULL;
; 20514:   __Pyx_RefNannyDeclarations
; 20515:   PyObject *__pyx_t_1 = NULL;
; 20516:   int __pyx_t_2;
; 20517:   Py_ssize_t __pyx_t_3;
; 20518:   int __pyx_t_4;
; 20519:   int __pyx_t_5;
; 20520:   PyObject *__pyx_t_6 = NULL;
; 20521:   PyObject *__pyx_t_7 = NULL;
; 20522:   PyObject *__pyx_t_8 = NULL;

	xor	esi, esi

; 20523:   PyObject *__pyx_t_9 = NULL;

	xor	ebp, ebp
	mov	r12, rdx
	mov	rbx, rcx

; 20524:   __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);
; 20525: 
; 20526:   /* "(tree fragment)":10
; 20527:  *     return __pyx_result
; 20528:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
; 20529:  *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
; 20530:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
; 20531:  *         __pyx_result.__dict__.update(__pyx_state[1])
; 20532:  */
; 20533:   if (unlikely(__pyx_v___pyx_state == Py_None)) {

	cmp	rdx, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN125@pyx_unpick

; 20534:     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 20535:     __PYX_ERR(2, 10, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 10
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 20535		; 00005037H
	jmp	$LN3@pyx_unpick
$LN125@pyx_unpick:

; 20536:   }
; 20537:   __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 10, __pyx_L1_error)

	mov	rdi, QWORD PTR [rdx+24]
	inc	QWORD PTR [rdi]

; 20538:   __Pyx_GOTREF(__pyx_t_1);
; 20539:   __Pyx_GIVEREF(__pyx_t_1);
; 20540:   __Pyx_GOTREF(__pyx_v___pyx_result->name);
; 20541:   __Pyx_DECREF(__pyx_v___pyx_result->name);

	mov	rax, QWORD PTR [rcx+16]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN122@pyx_unpick
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN122@pyx_unpick:

; 20542:   __pyx_v___pyx_result->name = __pyx_t_1;

	mov	QWORD PTR [rbx+16], rdi

; 20543:   __pyx_t_1 = 0;
; 20544: 
; 20545:   /* "(tree fragment)":11
; 20546:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
; 20547:  *     __pyx_result.name = __pyx_state[0]
; 20548:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
; 20549:  *         __pyx_result.__dict__.update(__pyx_state[1])
; 20550:  */
; 20551:   if (unlikely(__pyx_v___pyx_state == Py_None)) {

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	cmp	r12, rcx
	jne	SHORT $LN118@pyx_unpick

; 20552:     PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CH@CKNMHKEB@object?5of?5type?5?8NoneType?8?5has?5no@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 20553:     __PYX_ERR(2, 11, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 20553		; 00005049H
	jmp	$LN3@pyx_unpick
$LN118@pyx_unpick:

; 20554:   }
; 20555:   __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 11, __pyx_L1_error)

	mov	rdx, QWORD PTR [r12+16]
	cmp	rdx, -1
	jne	SHORT $LN117@pyx_unpick
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 20555		; 0000504bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_unpick
$LN117@pyx_unpick:

; 20556:   __pyx_t_4 = ((__pyx_t_3 > 1) != 0);

	xor	eax, eax
	cmp	rdx, 1
	setg	al

; 20557:   if (__pyx_t_4) {

	test	eax, eax
	je	$LN54@pyx_unpick

; 20558:   } else {
; 20559:     __pyx_t_2 = __pyx_t_4;
; 20560:     goto __pyx_L4_bool_binop_done;
; 20561:   }
; 20562:   __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 11, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dict
	mov	rcx, rbx
	call	__Pyx_HasAttr
	mov	r11d, eax
	cmp	eax, -1
	jne	SHORT $LN114@pyx_unpick
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 20562		; 00005052H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_unpick
$LN114@pyx_unpick:

; 20563:   __pyx_t_5 = (__pyx_t_4 != 0);

	xor	eax, eax
	test	r11d, r11d
$__pyx_L4_bool_binop_done$27767:
	setne	al

; 20564:   __pyx_t_2 = __pyx_t_5;
; 20565:   __pyx_L4_bool_binop_done:;
; 20566:   if (__pyx_t_2) {

	test	eax, eax
	je	$LN163@pyx_unpick

; 20567: 
; 20568:     /* "(tree fragment)":12
; 20569:  *     __pyx_result.name = __pyx_state[0]
; 20570:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
; 20571:  *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
; 20572:  */
; 20573:     __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 12, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR __pyx_n_s_dict
	mov	rcx, rbx
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN142@pyx_unpick
	call	r8
	jmp	SHORT $LN164@pyx_unpick
$LN142@pyx_unpick:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN141@pyx_unpick
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN164@pyx_unpick
$LN141@pyx_unpick:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN164@pyx_unpick:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN112@pyx_unpick
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 12
	mov	DWORD PTR __pyx_clineno, 20573		; 0000505dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_unpick
$LN112@pyx_unpick:

; 20574:     __Pyx_GOTREF(__pyx_t_6);
; 20575:     __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 12, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR __pyx_n_s_update
	mov	rcx, rbx
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN146@pyx_unpick
	call	r8
	jmp	SHORT $LN165@pyx_unpick
$LN146@pyx_unpick:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN145@pyx_unpick
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN165@pyx_unpick
$LN145@pyx_unpick:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN165@pyx_unpick:
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN110@pyx_unpick
	mov	DWORD PTR __pyx_clineno, 20575		; 0000505fH
	jmp	$LN166@pyx_unpick
$LN110@pyx_unpick:

; 20576:     __Pyx_GOTREF(__pyx_t_7);
; 20577:     __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN109@pyx_unpick
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN109@pyx_unpick:

; 20578:     if (unlikely(__pyx_v___pyx_state == Py_None)) {

	cmp	r12, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN105@pyx_unpick

; 20579:       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 20580:       __PYX_ERR(2, 12, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 12
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 20580		; 00005064H
	jmp	$LN33@pyx_unpick
$LN105@pyx_unpick:

; 20581:     }
; 20582:     __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 12, __pyx_L1_error)

	mov	rbx, QWORD PTR [r12+32]

; 20583:     __Pyx_GOTREF(__pyx_t_6);
; 20584:     __pyx_t_8 = NULL;
; 20585:     if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

	lea	r13, QWORD PTR [rdi+8]
	inc	QWORD PTR [rbx]
	mov	rax, QWORD PTR __imp_PyMethod_Type
	cmp	QWORD PTR [r13], rax
	jne	$LN162@pyx_unpick

; 20586:       __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

	mov	rsi, QWORD PTR [rdi+24]

; 20587:       if (likely(__pyx_t_8)) {

	test	rsi, rsi
	je	$LN162@pyx_unpick

; 20588:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

	mov	r12, QWORD PTR [rdi+16]

; 20589:         __Pyx_INCREF(__pyx_t_8);

	inc	QWORD PTR [rsi]

; 20590:         __Pyx_INCREF(function);
; 20591:         __Pyx_DECREF_SET(__pyx_t_7, function);

	mov	rcx, rdi
	inc	QWORD PTR [r12]
	add	QWORD PTR [rcx], -1
	mov	rdi, r12
	jne	SHORT $LN93@pyx_unpick
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN93@pyx_unpick:

; 20597:       __Pyx_GOTREF(__pyx_t_1);
; 20598:     } else {
; 20599:       #if CYTHON_FAST_PYCALL
; 20600:       if (PyFunction_Check(__pyx_t_7)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	lea	r13, QWORD PTR [r12+8]
	cmp	QWORD PTR [r13], rax
	jne	$LN85@pyx_unpick

; 20601:         PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
; 20602:         __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, QWORD PTR __pyx_temp$27852[rsp]
	mov	rcx, r12
	lea	r8d, QWORD PTR [r9+2]
	mov	QWORD PTR __pyx_temp$27852[rsp], rsi
	mov	QWORD PTR __pyx_temp$27852[rsp+8], rbx
	call	__Pyx_PyFunction_FastCallDict
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN83@pyx_unpick
	mov	DWORD PTR __pyx_clineno, 20602		; 0000507aH
	jmp	$LN166@pyx_unpick
$LN83@pyx_unpick:

; 20603:         __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN91@pyx_unpick
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN91@pyx_unpick:

; 20596:       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN60@pyx_unpick
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
$LN169@pyx_unpick:
	call	QWORD PTR [rax+48]
$LN60@pyx_unpick:

; 20627:       }
; 20628:     }
; 20629:     __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN59@pyx_unpick
	mov	rax, QWORD PTR [r13]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN59@pyx_unpick:

; 20630:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN163@pyx_unpick
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN163@pyx_unpick:
	mov	rcx, QWORD PTR __imp__Py_NoneStruct
$LN54@pyx_unpick:

; 20631: 
; 20632:     /* "(tree fragment)":11
; 20633:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
; 20634:  *     __pyx_result.name = __pyx_state[0]
; 20635:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
; 20636:  *         __pyx_result.__dict__.update(__pyx_state[1])
; 20637:  */
; 20638:   }
; 20639: 
; 20640:   /* "(tree fragment)":9
; 20641:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 20642:  *     return __pyx_result
; 20643:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
; 20644:  *     __pyx_result.name = __pyx_state[0]
; 20645:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
; 20646:  */
; 20647: 
; 20648:   /* function exit code */
; 20649:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	inc	QWORD PTR [rcx]

; 20658:   __pyx_r = 0;
; 20659:   __pyx_L0:;
; 20660:   __Pyx_XGIVEREF(__pyx_r);
; 20661:   __Pyx_RefNannyFinishContext();
; 20662:   return __pyx_r;

	mov	rax, rcx
$__pyx_L0$27919:

; 20663: }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN85@pyx_unpick:

; 20604:         __Pyx_GOTREF(__pyx_t_1);
; 20605:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
; 20606:       } else
; 20607:       #endif
; 20608:       #if CYTHON_FAST_PYCCALL
; 20609:       if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
; 20610:         PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
; 20611:         __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
; 20612:         __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
; 20613:         __Pyx_GOTREF(__pyx_t_1);
; 20614:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
; 20615:       } else
; 20616:       #endif
; 20617:       {
; 20618:         __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 12, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN67@pyx_unpick
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 20618		; 0000508aH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN168@pyx_unpick
$LN67@pyx_unpick:

; 20619:         __Pyx_GOTREF(__pyx_t_9);
; 20620:         __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;

	mov	QWORD PTR [rax+24], rsi

; 20621:         __Pyx_GIVEREF(__pyx_t_6);
; 20622:         PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_6);
; 20623:         __pyx_t_6 = 0;
; 20624:         __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, r12
	xor	esi, esi
	mov	QWORD PTR [rax+32], rbx
	call	__Pyx_PyObject_Call
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN65@pyx_unpick
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 12
	mov	DWORD PTR __pyx_clineno, 20624		; 00005090H
	mov	QWORD PTR __pyx_filename, rax

; 20650:   goto __pyx_L0;
; 20651:   __pyx_L1_error:;
; 20652:   __Pyx_XDECREF(__pyx_t_1);
; 20653:   __Pyx_XDECREF(__pyx_t_6);

	jmp	SHORT $LN33@pyx_unpick
$LN65@pyx_unpick:

; 20625:         __Pyx_GOTREF(__pyx_t_1);
; 20626:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rbp], -1
	jne	$LN60@pyx_unpick
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	jmp	$LN169@pyx_unpick
$LN162@pyx_unpick:

; 20592:       }
; 20593:     }
; 20594:     if (!__pyx_t_8) {
; 20595:       __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)

	mov	rdx, rbx
	mov	rcx, rdi
	call	__Pyx_PyObject_CallOneArg
	mov	r12, rax
	test	rax, rax
	jne	$LN91@pyx_unpick
	mov	DWORD PTR __pyx_clineno, 20595		; 00005073H
$LN166@pyx_unpick:
	mov	rax, QWORD PTR __pyx_f+16
	mov	QWORD PTR __pyx_filename, rax
$LN168@pyx_unpick:
	mov	DWORD PTR __pyx_lineno, 12
$__pyx_L1_error$27722:

; 20650:   goto __pyx_L0;
; 20651:   __pyx_L1_error:;
; 20652:   __Pyx_XDECREF(__pyx_t_1);
; 20653:   __Pyx_XDECREF(__pyx_t_6);

	test	rbx, rbx
	je	SHORT $LN33@pyx_unpick
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN33@pyx_unpick
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN33@pyx_unpick:

; 20654:   __Pyx_XDECREF(__pyx_t_7);

	test	rdi, rdi
	je	SHORT $LN23@pyx_unpick
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN23@pyx_unpick
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN23@pyx_unpick:

; 20655:   __Pyx_XDECREF(__pyx_t_8);

	test	rsi, rsi
	je	SHORT $LN13@pyx_unpick
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN13@pyx_unpick
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN13@pyx_unpick:

; 20656:   __Pyx_XDECREF(__pyx_t_9);

	test	rbp, rbp
	je	SHORT $LN3@pyx_unpick
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN3@pyx_unpick
	mov	rdx, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rdx+48]
$LN3@pyx_unpick:

; 20657:   __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CP@CBOKPIFB@View?4MemoryView?4__pyx_unpickle_E@
	call	__Pyx_AddTraceback

; 20658:   __pyx_r = 0;
; 20659:   __pyx_L0:;
; 20660:   __Pyx_XGIVEREF(__pyx_r);
; 20661:   __Pyx_RefNannyFinishContext();
; 20662:   return __pyx_r;

	xor	eax, eax
	jmp	$__pyx_L0$27919
__pyx_unpickle_Enum__set_state ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_base
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_base PROC		; COMDAT

; 21053:   return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);

	mov	rax, QWORD PTR [rcx+24]
$__pyx_L0$40366:
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx+24]

; 21054: }

	ret	0
__pyx_getprop___pyx_memoryview_base ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_clear__memoryviewslice DD imagerel __pyx_tp_clear__memoryviewslice
	DD	imagerel __pyx_tp_clear__memoryviewslice+94
	DD	imagerel $unwind$__pyx_tp_clear__memoryviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_clear__memoryviewslice DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_clear__memoryviewslice
_TEXT	SEGMENT
o$ = 48
__pyx_tp_clear__memoryviewslice PROC			; COMDAT

; 21244: static int __pyx_tp_clear__memoryviewslice(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 21245:   PyObject* tmp;
; 21246:   struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
; 21247:   __pyx_tp_clear_memoryview(o);

	call	__pyx_tp_clear_memoryview

; 21248:   tmp = ((PyObject*)p->from_object);
; 21249:   p->from_object = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR [rbx+392]
	mov	QWORD PTR [rbx+392], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 21250:   Py_XDECREF(tmp);

	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_cle@3
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN3@pyx_tp_cle@3
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@pyx_tp_cle@3:

; 21251:   __PYX_XDEC_MEMVIEW(&p->from_slice, 1);

	lea	rcx, QWORD PTR [rbx+184]
	mov	edx, 1
	mov	r8d, 21251				; 00005303H
	call	__Pyx_XDEC_MEMVIEW

; 21252:   return 0;

	xor	eax, eax

; 21253: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_tp_clear__memoryviewslice ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryviewslice_base
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryviewslice_base PROC		; COMDAT

; 21256:   return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);

	mov	rax, QWORD PTR [rcx+392]
$__pyx_L0$40415:
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx+392]

; 21257: }

	ret	0
__pyx_getprop___pyx_memoryviewslice_base ENDP
_TEXT	ENDS
_BSS	SEGMENT
__pyx_builtin_enumerate DQ 01H DUP (?)
__pyx_builtin_MemoryError DQ 01H DUP (?)
__pyx_builtin_ImportError DQ 01H DUP (?)
__pyx_builtin_RuntimeError DQ 01H DUP (?)
__pyx_builtin_range DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_InitCachedBuiltins DD imagerel __Pyx_InitCachedBuiltins
	DD	imagerel __Pyx_InitCachedBuiltins+580
	DD	imagerel $unwind$__Pyx_InitCachedBuiltins
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_InitCachedBuiltins DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_InitCachedBuiltins
_TEXT	SEGMENT
__Pyx_InitCachedBuiltins PROC				; COMDAT

; 21501: static int __Pyx_InitCachedBuiltins(void) {

	sub	rsp, 40					; 00000028H

; 21502:   __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 171, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_range
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_range, rax
	test	rax, rax
	jne	SHORT $LN10@Pyx_InitCa@2
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 171		; 000000abH
	mov	DWORD PTR __pyx_clineno, 21502		; 000053feH

; 21511:   __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21513:   __pyx_L1_error:;
; 21514:   return -1;

	or	eax, -1
$__pyx_L1_error$28650:

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
$LN10@Pyx_InitCa@2:

; 21503:   __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 235, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_ValueError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_ValueError, rax
	test	rax, rax
	jne	SHORT $LN9@Pyx_InitCa@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 235		; 000000ebH
	mov	DWORD PTR __pyx_clineno, 21503		; 000053ffH

; 21511:   __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21513:   __pyx_L1_error:;
; 21514:   return -1;

	or	eax, -1
$__pyx_L1_error_1$28650:

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@Pyx_InitCa@2:

; 21504:   __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 823, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_RuntimeError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_RuntimeError, rax
	test	rax, rax
	jne	SHORT $LN8@Pyx_InitCa@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 823		; 00000337H
	mov	DWORD PTR __pyx_clineno, 21504		; 00005400H

; 21511:   __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21513:   __pyx_L1_error:;
; 21514:   return -1;

	or	eax, -1
$__pyx_L1_error_2$28650:

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@Pyx_InitCa@2:

; 21505:   __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 1013, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_ImportError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_ImportError, rax
	test	rax, rax
	jne	SHORT $LN7@Pyx_InitCa@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 1013		; 000003f5H
	mov	DWORD PTR __pyx_clineno, 21505		; 00005401H

; 21511:   __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	QWORD PTR __pyx_filename, rax

; 21513:   __pyx_L1_error:;
; 21514:   return -1;

	or	eax, -1
$__pyx_L1_error_3$28650:

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@Pyx_InitCa@2:

; 21506:   __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 146, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_MemoryError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_MemoryError, rax
	test	rax, rax
	jne	SHORT $LN6@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 146		; 00000092H
	mov	DWORD PTR __pyx_clineno, 21506		; 00005402H
	jmp	$LN14@Pyx_InitCa@2
$LN6@Pyx_InitCa@2:

; 21507:   __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 149, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_enumerate
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_enumerate, rax
	test	rax, rax
	jne	SHORT $LN5@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 149		; 00000095H
	mov	DWORD PTR __pyx_clineno, 21507		; 00005403H
	jmp	$LN14@Pyx_InitCa@2
$LN5@Pyx_InitCa@2:

; 21508:   __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_TypeError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_TypeError, rax
	test	rax, rax
	jne	SHORT $LN4@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 2
	mov	DWORD PTR __pyx_clineno, 21508		; 00005404H
	jmp	$LN14@Pyx_InitCa@2
$LN4@Pyx_InitCa@2:

; 21509:   __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 398, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_Ellipsis
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_Ellipsis, rax
	test	rax, rax
	jne	SHORT $LN3@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 398		; 0000018eH
	mov	DWORD PTR __pyx_clineno, 21509		; 00005405H
	jmp	SHORT $LN14@Pyx_InitCa@2
$LN3@Pyx_InitCa@2:

; 21510:   __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 601, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_id
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_id, rax
	test	rax, rax
	jne	SHORT $LN2@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 601		; 00000259H
	mov	DWORD PTR __pyx_clineno, 21510		; 00005406H
	jmp	SHORT $LN14@Pyx_InitCa@2
$LN2@Pyx_InitCa@2:

; 21511:   __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_IndexError
	call	__Pyx_GetBuiltinName
	mov	QWORD PTR __pyx_builtin_IndexError, rax
	test	rax, rax
	jne	SHORT $LN1@Pyx_InitCa@2
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 21511		; 00005407H
$LN14@Pyx_InitCa@2:
	mov	rax, QWORD PTR __pyx_f+16
$__pyx_L1_error_4$28650:
	mov	QWORD PTR __pyx_filename, rax

; 21513:   __pyx_L1_error:;
; 21514:   return -1;

	or	eax, -1

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@Pyx_InitCa@2:

; 21512:   return 0;

	xor	eax, eax

; 21515: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_InitCachedBuiltins ENDP
_TEXT	ENDS
_BSS	SEGMENT
__pyx_int_184977713 DQ 01H DUP (?)
__pyx_int_1000 DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_InitGlobals DD imagerel __Pyx_InitGlobals
	DD	imagerel __Pyx_InitGlobals+512
	DD	imagerel $unwind$__Pyx_InitGlobals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_InitGlobals DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_InitGlobals
_TEXT	SEGMENT
__Pyx_InitGlobals PROC					; COMDAT

; 21974: static int __Pyx_InitGlobals(void) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 21975:   if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);

	cmp	QWORD PTR __pyx_string_tab, 0
	je	SHORT $LN6@Pyx_InitGl
	lea	rbx, OFFSET FLAT:__pyx_string_tab+16
	npad	9
$LL16@Pyx_InitGl:
	cmp	BYTE PTR [rbx+16], 0
	mov	rcx, QWORD PTR [rbx-8]
	je	SHORT $LN14@Pyx_InitGl
	mov	rdx, QWORD PTR [rbx]
	xor	r8d, r8d
	dec	rdx
	call	QWORD PTR __imp_PyUnicodeUCS2_DecodeUTF8
	jmp	SHORT $LN23@Pyx_InitGl
$LN14@Pyx_InitGl:
	cmp	BYTE PTR [rbx+18], 0
	je	SHORT $LN12@Pyx_InitGl
	call	QWORD PTR __imp_PyString_InternFromString
	jmp	SHORT $LN23@Pyx_InitGl
$LN12@Pyx_InitGl:
	mov	rdx, QWORD PTR [rbx]
	dec	rdx
	call	QWORD PTR __imp_PyString_FromStringAndSize
$LN23@Pyx_InitGl:
	mov	r11, rax
	mov	rax, QWORD PTR [rbx-16]
	mov	QWORD PTR [rax], r11
	mov	rcx, QWORD PTR [rbx-16]
	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN22@Pyx_InitGl
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyObject_Hash
	cmp	eax, -1
	jne	SHORT $LN9@Pyx_InitGl
	call	QWORD PTR __imp_PyErr_Clear
$LN9@Pyx_InitGl:
	add	rbx, 40					; 00000028H
	cmp	QWORD PTR [rbx-16], 0
	jne	SHORT $LL16@Pyx_InitGl
$LN6@Pyx_InitGl:

; 21976:   __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	QWORD PTR __pyx_int_0, rax
	test	rax, rax
	jne	SHORT $LN5@Pyx_InitGl
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21976		; 000055d8H

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1
	mov	QWORD PTR __pyx_filename, rax

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
$__pyx_L1_error$28723:

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN22@Pyx_InitGl:

; 21975:   if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21975		; 000055d7H

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1
	mov	QWORD PTR __pyx_filename, rax

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
$__pyx_L1_error_1$28723:

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@Pyx_InitGl:

; 21977:   __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyInt_FromLong
	mov	QWORD PTR __pyx_int_1, rax
	test	rax, rax
	jne	SHORT $LN4@Pyx_InitGl
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21977		; 000055d9H

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1
	mov	QWORD PTR __pyx_filename, rax

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
$__pyx_L1_error_2$28723:

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@Pyx_InitGl:

; 21978:   __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	ecx, 1000				; 000003e8H
	call	QWORD PTR __imp_PyInt_FromLong
	mov	QWORD PTR __pyx_int_1000, rax
	test	rax, rax
	jne	SHORT $LN3@Pyx_InitGl
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21978		; 000055daH

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1
	mov	QWORD PTR __pyx_filename, rax

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
$__pyx_L1_error_3$28723:

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN3@Pyx_InitGl:

; 21979:   __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	ecx, 184977713				; 0b068931H
	call	QWORD PTR __imp_PyInt_FromLong
	mov	QWORD PTR __pyx_int_184977713, rax
	test	rax, rax
	jne	SHORT $LN2@Pyx_InitGl
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21979		; 000055dbH

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1
	mov	QWORD PTR __pyx_filename, rax

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
$__pyx_L1_error_4$28723:

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@Pyx_InitGl:

; 21980:   __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)

	or	ecx, -1
	call	QWORD PTR __imp_PyInt_FromLong
	mov	QWORD PTR __pyx_int_neg_1, rax
	test	rax, rax
	jne	SHORT $LN1@Pyx_InitGl
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 21980		; 000055dcH
	mov	DWORD PTR __pyx_lineno, 1
$__pyx_L1_error_5$28723:

; 21982:   __pyx_L1_error:;
; 21983:   return -1;

	or	eax, -1
	mov	QWORD PTR __pyx_filename, rcx

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN1@Pyx_InitGl:

; 21981:   return 0;

	xor	eax, eax

; 21984: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_InitGlobals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@ ; `string'
PUBLIC	??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@	; `string'
EXTRN	__imp_PyUnicode_Type:BYTE
EXTRN	__imp_PyBaseString_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__ArgTypeTest DD imagerel __Pyx__ArgTypeTest
	DD	imagerel __Pyx__ArgTypeTest+154
	DD	imagerel $unwind$__Pyx__ArgTypeTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__ArgTypeTest DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
CONST	SEGMENT
??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@ DB 'Argume'
	DB	'nt ''%.200s'' has incorrect type (expected %.200s, got %.200s'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
CONST	SEGMENT
??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@ DB 'Missing type object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx__ArgTypeTest
_TEXT	SEGMENT
obj$ = 64
type$ = 72
name$ = 80
exact$ = 88
__Pyx__ArgTypeTest PROC					; COMDAT

; 22662: {

	sub	rsp, 56					; 00000038H
	mov	r11, r8
	mov	r10, rcx

; 22663:     if (unlikely(!type)) {

	test	rdx, rdx
	jne	SHORT $LN7@Pyx__ArgTy

; 22664:         PyErr_SetString(PyExc_SystemError, "Missing type object");

	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 22678:     return 0;

	xor	eax, eax

; 22679: }

	add	rsp, 56					; 00000038H
	ret	0
$LN7@Pyx__ArgTy:

; 22665:         return 0;
; 22666:     }
; 22667:     else if (exact) {

	test	r9d, r9d
	je	SHORT $LN5@Pyx__ArgTy

; 22668:         #if PY_MAJOR_VERSION == 2
; 22669:         if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;

	cmp	rdx, QWORD PTR __imp_PyBaseString_Type
	jne	SHORT $LN1@Pyx__ArgTy
	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyString_Type
	je	SHORT $LN3@Pyx__ArgTy
	cmp	rax, QWORD PTR __imp_PyUnicode_Type
	jne	SHORT $LN1@Pyx__ArgTy
$LN3@Pyx__ArgTy:
	mov	eax, 1

; 22679: }

	add	rsp, 56					; 00000038H
	ret	0
$LN5@Pyx__ArgTy:

; 22670:         #endif
; 22671:     }
; 22672:     else {
; 22673:         if (likely(__Pyx_TypeCheck(obj, type))) return 1;

	mov	rcx, QWORD PTR [rcx+8]
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN3@Pyx__ArgTy
$LN1@Pyx__ArgTy:

; 22674:     }
; 22675:     PyErr_Format(PyExc_TypeError,
; 22676:         "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
; 22677:         name, type->tp_name, Py_TYPE(obj)->tp_name);

	mov	rax, QWORD PTR [r10+8]
	mov	r9, QWORD PTR [rdx+24]
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	rcx, QWORD PTR [rax+24]
	mov	r8, r11
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 22678:     return 0;

	xor	eax, eax

; 22679: }

	add	rsp, 56					; 00000038H
	ret	0
__Pyx__ArgTypeTest ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@CBEFFJGG@memviewslice?5is?5already?5initiali@ ; `string'
PUBLIC	??_C@_0N@KOLHFGJN@buf?5is?5NULL?4?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_init_memviewslice DD imagerel __Pyx_init_memviewslice
	DD	imagerel __Pyx_init_memviewslice+72
	DD	imagerel $unwind$__Pyx_init_memviewslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_init_memviewslice DD imagerel __Pyx_init_memviewslice+72
	DD	imagerel __Pyx_init_memviewslice+302
	DD	imagerel $chain$1$__Pyx_init_memviewslice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_init_memviewslice DD imagerel __Pyx_init_memviewslice+302
	DD	imagerel __Pyx_init_memviewslice+388
	DD	imagerel $chain$2$__Pyx_init_memviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_init_memviewslice DD 021H
	DD	imagerel __Pyx_init_memviewslice
	DD	imagerel __Pyx_init_memviewslice+72
	DD	imagerel $unwind$__Pyx_init_memviewslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_init_memviewslice DD 040d21H
	DD	07740dH
	DD	066405H
	DD	imagerel __Pyx_init_memviewslice
	DD	imagerel __Pyx_init_memviewslice+72
	DD	imagerel $unwind$__Pyx_init_memviewslice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_init_memviewslice DD 061001H
	DD	095410H
	DD	083410H
	DD	0c00c3210H
xdata	ENDS
;	COMDAT ??_C@_0CF@CBEFFJGG@memviewslice?5is?5already?5initiali@
CONST	SEGMENT
??_C@_0CF@CBEFFJGG@memviewslice?5is?5already?5initiali@ DB 'memviewslice '
	DB	'is already initialized!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KOLHFGJN@buf?5is?5NULL?4?$AA@
CONST	SEGMENT
??_C@_0N@KOLHFGJN@buf?5is?5NULL?4?$AA@ DB 'buf is NULL.', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_init_memviewslice
_TEXT	SEGMENT
memview$ = 48
ndim$ = 56
memviewslice$ = 64
memview_is_new_reference$ = 72
__Pyx_init_memviewslice PROC				; COMDAT

; 23245: {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	r12
	sub	rsp, 32					; 00000020H

; 23246:     __Pyx_RefNannyDeclarations
; 23247:     int i, retval=-1;
; 23248:     Py_buffer *buf = &memview->view;

	lea	r10, QWORD PTR [rcx+72]
	mov	r12d, r9d
	mov	rbx, r8
	mov	rbp, rcx

; 23249:     __Pyx_RefNannySetupContext("init_memviewslice", 0);
; 23250:     if (!buf) {

	test	r10, r10
	jne	SHORT $LN18@Pyx_init_m

; 23251:         PyErr_SetString(PyExc_ValueError,
; 23252:             "buf is NULL.");

	lea	rdx, OFFSET FLAT:??_C@_0N@KOLHFGJN@buf?5is?5NULL?4?$AA@
	jmp	$LN29@Pyx_init_m
$LN18@Pyx_init_m:

; 23253:         goto fail;
; 23254:     } else if (memviewslice->memview || memviewslice->data) {

	cmp	QWORD PTR [r8], 0
	jne	$LN15@Pyx_init_m
	cmp	QWORD PTR [r8+8], 0
	jne	$LN15@Pyx_init_m

; 23257:         goto fail;
; 23258:     }
; 23259:     if (buf->strides) {

	cmp	QWORD PTR [r10+56], 0
	mov	QWORD PTR [rsp+48], rsi

; 23260:         for (i = 0; i < ndim; i++) {

	movsxd	r9, edx
	mov	QWORD PTR [rsp+56], rdi
	je	SHORT $LN14@Pyx_init_m
	xor	edx, edx
	test	r9, r9
	jle	SHORT $LN7@Pyx_init_m

; 23261:             memviewslice->strides[i] = buf->strides[i];

	add	r8, 80					; 00000050H
$LL13@Pyx_init_m:
	mov	rax, QWORD PTR [r10+56]
	inc	rdx
	add	r8, 8
	cmp	rdx, r9
	mov	rcx, QWORD PTR [rax+rdx*8-8]
	mov	QWORD PTR [r8-8], rcx
	jl	SHORT $LL13@Pyx_init_m

; 23262:         }
; 23263:     } else {

	jmp	SHORT $LN7@Pyx_init_m
$LN14@Pyx_init_m:

; 23264:         Py_ssize_t stride = buf->itemsize;

	mov	r8, QWORD PTR [r10+24]

; 23265:         for (i = ndim - 1; i >= 0; i--) {

	lea	eax, DWORD PTR [rdx-1]
	movsxd	rcx, eax
	test	eax, eax
	js	SHORT $LN7@Pyx_init_m

; 23264:         Py_ssize_t stride = buf->itemsize;

	lea	rdx, QWORD PTR [rbx+rcx*8+80]
$LL9@Pyx_init_m:

; 23266:             memviewslice->strides[i] = stride;

	mov	QWORD PTR [rdx], r8

; 23267:             stride *= buf->shape[i];

	mov	rax, QWORD PTR [r10+48]
	sub	rdx, 8
	imul	r8, QWORD PTR [rax+rcx*8]
	sub	rcx, 1
	jns	SHORT $LL9@Pyx_init_m
$LN7@Pyx_init_m:

; 23268:         }
; 23269:     }
; 23270:     for (i = 0; i < ndim; i++) {

	test	r9, r9
	jle	SHORT $LN4@Pyx_init_m

; 23271:         memviewslice->shape[i]   = buf->shape[i];

	mov	r11, -144				; ffffffffffffff70H
	lea	rdx, QWORD PTR [rbx+144]
	sub	r11, rbx
	npad	4
$LL6@Pyx_init_m:
	mov	rax, QWORD PTR [r10+48]
	lea	r8, QWORD PTR [r11+rdx]
	mov	rcx, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx-128], rcx

; 23272:         if (buf->suboffsets) {

	mov	rax, QWORD PTR [r10+64]
	test	rax, rax
	je	SHORT $LN3@Pyx_init_m

; 23273:             memviewslice->suboffsets[i] = buf->suboffsets[i];

	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx], rax

; 23274:         } else {

	jmp	SHORT $LN5@Pyx_init_m
$LN3@Pyx_init_m:

; 23275:             memviewslice->suboffsets[i] = -1;

	mov	QWORD PTR [rdx], -1
$LN5@Pyx_init_m:

; 23268:         }
; 23269:     }
; 23270:     for (i = 0; i < ndim; i++) {

	add	rdx, 8
	sub	r9, 1
	jne	SHORT $LL6@Pyx_init_m
$LN4@Pyx_init_m:

; 23276:         }
; 23277:     }
; 23278:     memviewslice->memview = memview;

	mov	QWORD PTR [rbx], rbp

; 23279:     memviewslice->data = (char *)buf->buf;

	mov	rax, QWORD PTR [r10]

; 23280:     if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {

	mov	edx, 1
	mov	QWORD PTR [rbx+8], rax
	mov	rsi, QWORD PTR [rbp+48]
	mov	rdi, QWORD PTR [rbp+64]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	ebx, DWORD PTR [rdi]
	inc	DWORD PTR [rdi]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	mov	rdi, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+48]
	test	ebx, ebx
	jne	SHORT $LN1@Pyx_init_m
	test	r12d, r12d
	jne	SHORT $LN1@Pyx_init_m

; 23281:         Py_INCREF(memview);

	inc	QWORD PTR [rbp]
$LN1@Pyx_init_m:

; 23282:     }
; 23283:     retval = 0;
; 23284:     goto no_fail;
; 23285: fail:
; 23286:     memviewslice->memview = 0;
; 23287:     memviewslice->data = 0;
; 23288:     retval = -1;
; 23289: no_fail:
; 23290:     __Pyx_RefNannyFinishContext();
; 23291:     return retval;

	xor	eax, eax

; 23292: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
$LN15@Pyx_init_m:

; 23255:         PyErr_SetString(PyExc_ValueError,
; 23256:             "memviewslice is already initialized!");

	lea	rdx, OFFSET FLAT:??_C@_0CF@CBEFFJGG@memviewslice?5is?5already?5initiali@
$LN29@Pyx_init_m:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 23292: }

	mov	rbp, QWORD PTR [rsp+72]
	mov	QWORD PTR [rbx], 0
	mov	QWORD PTR [rbx+8], 0
	mov	rbx, QWORD PTR [rsp+64]
$fail$29827:
	or	eax, -1
$no_fail$29849:
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
__Pyx_init_memviewslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@PIIFOEEO@Cannot?5convert?5?$CF?4200s?5to?5?$CF?4200s?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_TypeTest DD imagerel __Pyx_TypeTest
	DD	imagerel __Pyx_TypeTest+191
	DD	imagerel $unwind$__Pyx_TypeTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_TypeTest DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CA@PIIFOEEO@Cannot?5convert?5?$CF?4200s?5to?5?$CF?4200s?$AA@
CONST	SEGMENT
??_C@_0CA@PIIFOEEO@Cannot?5convert?5?$CF?4200s?5to?5?$CF?4200s?$AA@ DB 'C'
	DB	'annot convert %.200s to %.200s', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_TypeTest
_TEXT	SEGMENT
obj$ = 48
type$ = 56
__Pyx_TypeTest PROC					; COMDAT

; 23630:     static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {

	sub	rsp, 40					; 00000028H

; 23631:     if (unlikely(!type)) {

	test	rdx, rdx
	jne	SHORT $LN2@Pyx_TypeTe

; 23632:         PyErr_SetString(PyExc_SystemError, "Missing type object");

	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 23633:         return 0;

	xor	eax, eax

; 23640: }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@Pyx_TypeTe:

; 23634:     }
; 23635:     if (likely(__Pyx_TypeCheck(obj, type)))

	mov	r10, QWORD PTR [rcx+8]
	cmp	r10, rdx
	je	$LN23@Pyx_TypeTe
	mov	rcx, QWORD PTR [r10+344]
	test	rcx, rcx
	je	SHORT $LN9@Pyx_TypeTe
	mov	r8, QWORD PTR [rcx+16]
	xor	eax, eax
	test	r8, r8
	jle	SHORT $LN1@Pyx_TypeTe
	add	rcx, 24
	npad	1
$LL8@Pyx_TypeTe:
	cmp	QWORD PTR [rcx], rdx
	je	SHORT $LN23@Pyx_TypeTe
	inc	rax
	add	rcx, 8
	cmp	rax, r8
	jl	SHORT $LL8@Pyx_TypeTe
	jmp	SHORT $LN1@Pyx_TypeTe
$LN9@Pyx_TypeTe:
	mov	rax, r10
	npad	10
$LL15@Pyx_TypeTe:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rdx
	je	SHORT $LN23@Pyx_TypeTe
	test	rax, rax
	jne	SHORT $LL15@Pyx_TypeTe
	cmp	rdx, QWORD PTR __imp_PyBaseObject_Type
	sete	al
	test	eax, eax
	jne	SHORT $LN23@Pyx_TypeTe
$LN1@Pyx_TypeTe:

; 23637:     PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
; 23638:                  Py_TYPE(obj)->tp_name, type->tp_name);

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [rdx+24]
	mov	r8, QWORD PTR [r10+24]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0CA@PIIFOEEO@Cannot?5convert?5?$CF?4200s?5to?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format

; 23639:     return 0;

	xor	eax, eax

; 23640: }

	add	rsp, 40					; 00000028H
	ret	0
$LN23@Pyx_TypeTe:

; 23636:         return 1;

	mov	eax, 1

; 23640: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_TypeTest ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyErr_ExceptionMatchesTuple DD imagerel __Pyx_PyErr_ExceptionMatchesTuple
	DD	imagerel __Pyx_PyErr_ExceptionMatchesTuple+151
	DD	imagerel $unwind$__Pyx_PyErr_ExceptionMatchesTuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyErr_ExceptionMatchesTuple DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyErr_ExceptionMatchesTuple
_TEXT	SEGMENT
exc_type$ = 48
tuple$ = 56
__Pyx_PyErr_ExceptionMatchesTuple PROC			; COMDAT

; 23947: static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 23948:     Py_ssize_t i, n;
; 23949:     n = PyTuple_GET_SIZE(tuple);

	mov	rbp, QWORD PTR [rdx+16]

; 23950: #if PY_MAJOR_VERSION >= 3
; 23951:     for (i=0; i<n; i++) {
; 23952:         if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
; 23953:     }
; 23954: #endif
; 23955:     for (i=0; i<n; i++) {

	xor	edi, edi
	mov	rbx, rcx
	test	rbp, rbp
	jle	SHORT $LN2@Pyx_PyErr_@2

; 23948:     Py_ssize_t i, n;
; 23949:     n = PyTuple_GET_SIZE(tuple);

	lea	rsi, QWORD PTR [rdx+24]
$LL4@Pyx_PyErr_@2:

; 23956:         if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;

	mov	r8, QWORD PTR [rsi]
	cmp	rbx, r8
	je	SHORT $LN13@Pyx_PyErr_@2
	mov	rax, QWORD PTR [rbx+8]
	cmp	rax, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN7@Pyx_PyErr_@2
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN8@Pyx_PyErr_@2
	bt	DWORD PTR [rbx+168], 30
	jb	SHORT $LN7@Pyx_PyErr_@2
$LN8@Pyx_PyErr_@2:
	mov	rdx, r8
	mov	rcx, rbx
	call	QWORD PTR __imp_PyErr_GivenExceptionMatches
	jmp	SHORT $LN10@Pyx_PyErr_@2
$LN7@Pyx_PyErr_@2:
	xor	edx, edx
	mov	rcx, rbx
	call	__Pyx_inner_PyErr_GivenExceptionMatches2
$LN10@Pyx_PyErr_@2:
	test	eax, eax
	jne	SHORT $LN13@Pyx_PyErr_@2
	inc	rdi
	add	rsi, 8
	cmp	rdi, rbp
	jl	SHORT $LL4@Pyx_PyErr_@2
$LN2@Pyx_PyErr_@2:

; 23957:     }
; 23958:     return 0;

	xor	eax, eax
$LN5@Pyx_PyErr_@2:

; 23959: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN13@Pyx_PyErr_@2:

; 23956:         if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;

	mov	eax, 1
	jmp	SHORT $LN5@Pyx_PyErr_@2
__Pyx_PyErr_ExceptionMatchesTuple ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __Pyx_PyErr_ExceptionMatchesInState
_TEXT	SEGMENT
tstate$ = 8
err$ = 16
__Pyx_PyErr_ExceptionMatchesInState PROC		; COMDAT

; 23961:     PyObject *exc_type = tstate->curexc_type;

	mov	rcx, QWORD PTR [rcx+72]

; 23962:     if (exc_type == err) return 1;

	cmp	rcx, rdx
	jne	SHORT $LN3@Pyx_PyErr_@3
	mov	eax, 1

; 23967: }

	ret	0
$LN3@Pyx_PyErr_@3:

; 23963:     if (unlikely(!exc_type)) return 0;

	test	rcx, rcx
	jne	SHORT $LN2@Pyx_PyErr_@3
	xor	eax, eax

; 23967: }

	ret	0
$LN2@Pyx_PyErr_@3:

; 23964:     if (unlikely(PyTuple_Check(err)))

	mov	rax, QWORD PTR [rdx+8]
	bt	DWORD PTR [rax+168], 26
	jae	SHORT $LN1@Pyx_PyErr_@3

; 23967: }

	jmp	__Pyx_PyErr_ExceptionMatchesTuple
$LN1@Pyx_PyErr_@3:

; 23965:         return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
; 23966:     return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);

	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN6@Pyx_PyErr_@3
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN7@Pyx_PyErr_@3
	bt	DWORD PTR [rcx+168], 30
	jb	SHORT $LN6@Pyx_PyErr_@3
$LN7@Pyx_PyErr_@3:

; 23967: }

	rex_jmp	QWORD PTR __imp_PyErr_GivenExceptionMatches

; 23965:         return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
; 23966:     return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);

$LN6@Pyx_PyErr_@3:
	mov	r8, rdx
	xor	edx, edx

; 23967: }

	jmp	__Pyx_inner_PyErr_GivenExceptionMatches2
__Pyx_PyErr_ExceptionMatchesInState ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_RichCompare:PROC
EXTRN	memcmp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyBytes_Equals DD imagerel __Pyx_PyBytes_Equals
	DD	imagerel __Pyx_PyBytes_Equals+331
	DD	imagerel $unwind$__Pyx_PyBytes_Equals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyBytes_Equals DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyBytes_Equals
_TEXT	SEGMENT
s1$ = 48
s2$ = 56
equals$ = 64
__Pyx_PyBytes_Equals PROC				; COMDAT

; 24041:       static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 24042: #if CYTHON_COMPILING_IN_PYPY
; 24043:     return PyObject_RichCompareBool(s1, s2, equals);
; 24044: #else
; 24045:     if (s1 == s2) {
; 24046:         return (equals == Py_EQ);

	xor	ebx, ebx
	mov	edi, r8d
	mov	r9, rcx
	cmp	rcx, rdx
	jne	SHORT $LN20@Pyx_PyByte
	cmp	r8d, 2
	sete	bl
	mov	eax, ebx

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@Pyx_PyByte:

; 24047:     } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {

	mov	rax, QWORD PTR __imp_PyString_Type
	mov	r10d, ebx
	cmp	QWORD PTR [rcx+8], rax
	mov	ecx, ebx
	sete	r10b
	cmp	QWORD PTR [rdx+8], rax
	sete	cl
	test	ecx, r10d
	je	$LN18@Pyx_PyByte

; 24048:         const char *ps1, *ps2;
; 24049:         Py_ssize_t length = PyBytes_GET_SIZE(s1);

	mov	r8, QWORD PTR [r9+16]

; 24050:         if (length != PyBytes_GET_SIZE(s2))

	cmp	r8, QWORD PTR [rdx+16]
	je	SHORT $LN17@Pyx_PyByte
$LN25@Pyx_PyByte:

; 24051:             return (equals == Py_NE);

	cmp	edi, 3
	sete	bl
	mov	eax, ebx

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN17@Pyx_PyByte:

; 24052:         ps1 = PyBytes_AS_STRING(s1);
; 24053:         ps2 = PyBytes_AS_STRING(s2);
; 24054:         if (ps1[0] != ps2[0]) {

	movzx	eax, BYTE PTR [rdx+32]
	cmp	BYTE PTR [r9+32], al

; 24055:             return (equals == Py_NE);

	jne	SHORT $LN25@Pyx_PyByte

; 24056:         } else if (length == 1) {

	cmp	r8, 1
	jne	SHORT $LN14@Pyx_PyByte

; 24057:             return (equals == Py_EQ);

	cmp	edi, 2
	sete	bl
	mov	eax, ebx

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@Pyx_PyByte:

; 24058:         } else {
; 24059:             int result;
; 24060: #if CYTHON_USE_UNICODE_INTERNALS
; 24061:             Py_hash_t hash1, hash2;
; 24062:             hash1 = ((PyBytesObject*)s1)->ob_shash;

	mov	ecx, DWORD PTR [r9+24]

; 24063:             hash2 = ((PyBytesObject*)s2)->ob_shash;

	mov	eax, DWORD PTR [rdx+24]

; 24064:             if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {

	cmp	ecx, eax
	je	SHORT $LN12@Pyx_PyByte
	cmp	ecx, -1
	je	SHORT $LN12@Pyx_PyByte
	cmp	eax, -1

; 24065:                 return (equals == Py_NE);

	jne	SHORT $LN25@Pyx_PyByte
$LN12@Pyx_PyByte:

; 24066:             }
; 24067: #endif
; 24068:             result = memcmp(ps1, ps2, (size_t)length);

	lea	rcx, QWORD PTR [r9+32]
	add	rdx, 32					; 00000020H
	call	memcmp

; 24069:             return (equals == Py_EQ) ? (result == 0) : (result != 0);

	cmp	edi, 2
	jne	SHORT $LN23@Pyx_PyByte
	test	eax, eax
	sete	bl
	mov	eax, ebx

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN23@Pyx_PyByte:

; 24069:             return (equals == Py_EQ) ? (result == 0) : (result != 0);

	test	eax, eax
	setne	bl
	mov	eax, ebx

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN18@Pyx_PyByte:

; 24070:         }
; 24071:     } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {

	mov	r8, QWORD PTR __imp__Py_NoneStruct
	mov	eax, ebx
	cmp	r9, r8
	sete	al
	test	eax, ecx

; 24072:         return (equals == Py_NE);

	jne	$LN25@Pyx_PyByte

; 24073:     } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {

	cmp	rdx, r8
	mov	ecx, ebx
	sete	cl
	test	ecx, r10d

; 24074:         return (equals == Py_NE);

	jne	$LN25@Pyx_PyByte

; 24075:     } else {
; 24076:         int result;
; 24077:         PyObject* py_result = PyObject_RichCompare(s1, s2, equals);

	mov	r8d, edi
	mov	rcx, r9
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax

; 24078:         if (!py_result)

	test	rax, rax
	jne	SHORT $LN6@Pyx_PyByte

; 24079:             return -1;

	or	eax, -1

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@Pyx_PyByte:

; 24080:         result = __Pyx_PyObject_IsTrue(py_result);

	mov	rcx, rax
	call	__Pyx_PyObject_IsTrue

; 24081:         Py_DECREF(py_result);

	add	QWORD PTR [rbx], -1
	mov	edi, eax
	jne	SHORT $LN4@Pyx_PyByte
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyByte:

; 24082:         return result;

	mov	eax, edi

; 24083:     }
; 24084: #endif
; 24085: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_PyBytes_Equals ENDP
_TEXT	ENDS
EXTRN	__imp_PyUnicodeUCS2_FromObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyUnicode_Equals DD imagerel __Pyx_PyUnicode_Equals
	DD	imagerel __Pyx_PyUnicode_Equals+551
	DD	imagerel $unwind$__Pyx_PyUnicode_Equals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyUnicode_Equals DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0e01a321eH
	DD	0c016d018H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyUnicode_Equals
_TEXT	SEGMENT
s1$ = 64
s2$ = 72
equals$ = 80
__Pyx_PyUnicode_Equals PROC				; COMDAT

; 24088:       static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 24089: #if CYTHON_COMPILING_IN_PYPY
; 24090:     return PyObject_RichCompareBool(s1, s2, equals);
; 24091: #else
; 24092: #if PY_MAJOR_VERSION < 3
; 24093:     PyObject* owned_ref = NULL;

	xor	edi, edi
	mov	r12d, r8d
	mov	rsi, rdx
	mov	rbp, rcx
	mov	rbx, rdi

; 24094: #endif
; 24095:     int s1_is_unicode, s2_is_unicode;
; 24096:     if (s1 == s2) {

	cmp	rcx, rdx
	je	$LN13@Pyx_PyUnic

; 24097:         goto return_eq;
; 24098:     }
; 24099:     s1_is_unicode = PyUnicode_CheckExact(s1);

	mov	r9, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR __imp_PyUnicode_Type

; 24100:     s2_is_unicode = PyUnicode_CheckExact(s2);

	mov	rdx, QWORD PTR [rdx+8]

; 24101: #if PY_MAJOR_VERSION < 3
; 24102:     if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {

	mov	rcx, QWORD PTR __imp_PyString_Type
	cmp	r9, rax
	mov	r14d, edi
	sete	r14b
	cmp	rdx, rax
	mov	r13d, edi
	sete	r13b
	mov	r8d, edi
	test	r13d, r13d
	sete	r8b
	test	r8d, r14d
	je	$LN57@Pyx_PyUnic
	cmp	rdx, rcx
	jne	$LN57@Pyx_PyUnic

; 24103:         owned_ref = PyUnicode_FromObject(s2);

	mov	rcx, rsi
	call	QWORD PTR __imp_PyUnicodeUCS2_FromObject
	mov	rbx, rax

; 24104:         if (unlikely(!owned_ref))

	test	rax, rax
	jne	SHORT $LN56@Pyx_PyUnic
$LN64@Pyx_PyUnic:

; 24105:             return -1;

	or	eax, -1
	jmp	SHORT $LN59@Pyx_PyUnic
$LN56@Pyx_PyUnic:

; 24106:         s2 = owned_ref;

	mov	rsi, rax

; 24107:         s2_is_unicode = 1;

	mov	r13d, 1
$LN51@Pyx_PyUnic:

; 24116:     }
; 24117: #endif
; 24118:     if (s1_is_unicode & s2_is_unicode) {

	test	r13d, r14d
	je	$LN50@Pyx_PyUnic

; 24119:         Py_ssize_t length;
; 24120:         int kind;
; 24121:         void *data1, *data2;
; 24122:         if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
; 24123:             return -1;
; 24124:         length = __Pyx_PyUnicode_GET_LENGTH(s1);

	mov	r8, QWORD PTR [rbp+16]

; 24125:         if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {

	cmp	r8, QWORD PTR [rsi+16]
	jne	$return_ne$30811

; 24126:             goto return_ne;
; 24127:         }
; 24128: #if CYTHON_USE_UNICODE_INTERNALS
; 24129:         {
; 24130:             Py_hash_t hash1, hash2;
; 24131:         #if CYTHON_PEP393_ENABLED
; 24132:             hash1 = ((PyASCIIObject*)s1)->hash;
; 24133:             hash2 = ((PyASCIIObject*)s2)->hash;
; 24134:         #else
; 24135:             hash1 = ((PyUnicodeObject*)s1)->hash;

	mov	eax, DWORD PTR [rbp+32]

; 24136:             hash2 = ((PyUnicodeObject*)s2)->hash;

	mov	ecx, DWORD PTR [rsi+32]

; 24137:         #endif
; 24138:             if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {

	cmp	eax, ecx
	je	SHORT $LN47@Pyx_PyUnic
	cmp	eax, -1
	je	SHORT $LN47@Pyx_PyUnic
	cmp	ecx, -1
	jne	$return_ne$30811
$LN47@Pyx_PyUnic:

; 24139:                 goto return_ne;
; 24140:             }
; 24141:         }
; 24142: #endif
; 24143:         kind = __Pyx_PyUnicode_KIND(s1);
; 24144:         if (kind != __Pyx_PyUnicode_KIND(s2)) {
; 24145:             goto return_ne;
; 24146:         }
; 24147:         data1 = __Pyx_PyUnicode_DATA(s1);
; 24148:         data2 = __Pyx_PyUnicode_DATA(s2);

	mov	rdx, QWORD PTR [rsi+24]
	mov	rcx, QWORD PTR [rbp+24]

; 24149:         if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {

	movzx	eax, WORD PTR [rdx]
	cmp	WORD PTR [rcx], ax
	jne	$return_ne$30811

; 24150:             goto return_ne;
; 24151:         } else if (length == 1) {

	cmp	r8, 1
	jne	$LN43@Pyx_PyUnic
$return_eq$30790:

; 24172:     }
; 24173: return_eq:
; 24174:     #if PY_MAJOR_VERSION < 3
; 24175:     Py_XDECREF(owned_ref);

	test	rbx, rbx
	je	SHORT $LN13@Pyx_PyUnic
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@Pyx_PyUnic
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@Pyx_PyUnic:

; 24176:     #endif
; 24177:     return (equals == Py_EQ);

	cmp	r12d, 2
$LN63@Pyx_PyUnic:
	sete	dil
$LN62@Pyx_PyUnic:
	mov	eax, edi
$LN59@Pyx_PyUnic:

; 24183: #endif
; 24184: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	ret	0
$LN57@Pyx_PyUnic:

; 24108:     } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {

	test	r14d, r14d
	mov	eax, edi
	sete	al
	test	eax, r13d
	je	SHORT $LN54@Pyx_PyUnic
	cmp	r9, rcx
	jne	SHORT $LN54@Pyx_PyUnic

; 24109:         owned_ref = PyUnicode_FromObject(s1);

	mov	rcx, rbp
	call	QWORD PTR __imp_PyUnicodeUCS2_FromObject
	mov	rbx, rax

; 24110:         if (unlikely(!owned_ref))

	test	rax, rax

; 24111:             return -1;

	je	$LN64@Pyx_PyUnic

; 24112:         s1 = owned_ref;

	mov	rbp, rax

; 24113:         s1_is_unicode = 1;

	mov	r14d, 1
	jmp	$LN51@Pyx_PyUnic
$LN54@Pyx_PyUnic:

; 24114:     } else if (((!s2_is_unicode) & (!s1_is_unicode))) {

	test	eax, r8d
	je	$LN51@Pyx_PyUnic

; 24115:         return __Pyx_PyBytes_Equals(s1, s2, equals);

	mov	r8d, r12d
	mov	rdx, rsi
	mov	rcx, rbp
	call	__Pyx_PyBytes_Equals
	jmp	SHORT $LN59@Pyx_PyUnic
$LN43@Pyx_PyUnic:

; 24152:             goto return_eq;
; 24153:         } else {
; 24154:             int result = memcmp(data1, data2, (size_t)(length * kind));

	add	r8, r8
	call	memcmp
	mov	esi, eax

; 24155:             #if PY_MAJOR_VERSION < 3
; 24156:             Py_XDECREF(owned_ref);

	test	rbx, rbx
	je	SHORT $LN34@Pyx_PyUnic
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN34@Pyx_PyUnic
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN34@Pyx_PyUnic:

; 24157:             #endif
; 24158:             return (equals == Py_EQ) ? (result == 0) : (result != 0);

	cmp	r12d, 2
	jne	SHORT $LN61@Pyx_PyUnic
	test	esi, esi
	jmp	$LN63@Pyx_PyUnic
$LN61@Pyx_PyUnic:
	test	esi, esi
	setne	dil
	jmp	$LN62@Pyx_PyUnic
$LN50@Pyx_PyUnic:

; 24159:         }
; 24160:     } else if ((s1 == Py_None) & s2_is_unicode) {

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	eax, edi
	cmp	rbp, rcx
	sete	al
	test	eax, r13d
	jne	SHORT $return_ne$30811

; 24161:         goto return_ne;
; 24162:     } else if ((s2 == Py_None) & s1_is_unicode) {

	cmp	rsi, rcx
	mov	eax, edi
	sete	al
	test	eax, r14d
	jne	SHORT $return_ne$30811

; 24163:         goto return_ne;
; 24164:     } else {
; 24165:         int result;
; 24166:         PyObject* py_result = PyObject_RichCompare(s1, s2, equals);

	mov	r8d, r12d
	mov	rdx, rsi
	mov	rcx, rbp
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax

; 24167:         if (!py_result)

	test	rax, rax

; 24168:             return -1;

	je	$LN64@Pyx_PyUnic

; 24169:         result = __Pyx_PyObject_IsTrue(py_result);

	mov	rcx, rax
	call	__Pyx_PyObject_IsTrue

; 24170:         Py_DECREF(py_result);

	add	QWORD PTR [rbx], -1
	mov	edi, eax
	jne	$LN62@Pyx_PyUnic
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]

; 24171:         return result;

	jmp	$LN62@Pyx_PyUnic
$return_ne$30811:

; 24178: return_ne:
; 24179:     #if PY_MAJOR_VERSION < 3
; 24180:     Py_XDECREF(owned_ref);

	test	rbx, rbx
	je	SHORT $LN3@Pyx_PyUnic
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_PyUnic
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx_PyUnic:

; 24181:     #endif
; 24182:     return (equals == Py_NE);

	cmp	r12d, 3
	jmp	$LN63@Pyx_PyUnic
__Pyx_PyUnicode_Equals ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetAttr3Default DD imagerel __Pyx_GetAttr3Default
	DD	imagerel __Pyx_GetAttr3Default+156
	DD	imagerel $unwind$__Pyx_GetAttr3Default
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__Pyx_GetAttr3Default DD imagerel __Pyx_GetAttr3Default+156
	DD	imagerel __Pyx_GetAttr3Default+226
	DD	imagerel $chain$1$__Pyx_GetAttr3Default
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__Pyx_GetAttr3Default DD imagerel __Pyx_GetAttr3Default+226
	DD	imagerel __Pyx_GetAttr3Default+264
	DD	imagerel $chain$2$__Pyx_GetAttr3Default
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__Pyx_GetAttr3Default DD 021H
	DD	imagerel __Pyx_GetAttr3Default
	DD	imagerel __Pyx_GetAttr3Default+156
	DD	imagerel $unwind$__Pyx_GetAttr3Default
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__Pyx_GetAttr3Default DD 020521H
	DD	077405H
	DD	imagerel __Pyx_GetAttr3Default
	DD	imagerel __Pyx_GetAttr3Default+156
	DD	imagerel $unwind$__Pyx_GetAttr3Default
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetAttr3Default DD 069801H
	DD	063498H
	DD	08540aH
	DD	06006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetAttr3Default
_TEXT	SEGMENT
d$ = 48
__Pyx_GetAttr3Default PROC				; COMDAT

; 24233:       static PyObject *__Pyx_GetAttr3Default(PyObject *d) {

	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H

; 24234:     __Pyx_PyThreadState_declare
; 24235:     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rsi, rcx
	mov	rbp, QWORD PTR [rax]

; 24236:     if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))

	mov	rax, QWORD PTR __imp_PyExc_AttributeError
	mov	r8, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbp+72]
	cmp	rcx, r8
	je	SHORT $LN1@Pyx_GetAtt@2
	test	rcx, rcx
	je	SHORT $LN46@Pyx_GetAtt@2
	mov	rax, QWORD PTR [r8+8]
	bt	DWORD PTR [rax+168], 26
	jae	SHORT $LN4@Pyx_GetAtt@2
	mov	rdx, r8
	call	__Pyx_PyErr_ExceptionMatchesTuple
	jmp	SHORT $LN12@Pyx_GetAtt@2
$LN4@Pyx_GetAtt@2:
	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN9@Pyx_GetAtt@2
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN10@Pyx_GetAtt@2
	bt	DWORD PTR [rcx+168], 30
	jb	SHORT $LN9@Pyx_GetAtt@2
$LN10@Pyx_GetAtt@2:
	mov	rdx, r8
	call	QWORD PTR __imp_PyErr_GivenExceptionMatches
	jmp	SHORT $LN12@Pyx_GetAtt@2
$LN9@Pyx_GetAtt@2:
	xor	edx, edx
	call	__Pyx_inner_PyErr_GivenExceptionMatches2
$LN12@Pyx_GetAtt@2:
	test	eax, eax
	jne	SHORT $LN1@Pyx_GetAtt@2
$LN46@Pyx_GetAtt@2:

; 24237:         return NULL;

	xor	eax, eax

; 24240:     return d;
; 24241: }

	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN1@Pyx_GetAtt@2:

; 24238:     __Pyx_PyErr_Clear();

	mov	rcx, QWORD PTR [rbp+72]
	xor	eax, eax
	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rbp+88]
	mov	QWORD PTR [rsp+56], rdi
	mov	rdi, QWORD PTR [rbp+80]
	mov	QWORD PTR [rbp+72], rax
	mov	QWORD PTR [rbp+80], rax
	mov	QWORD PTR [rbp+88], rax
	test	rcx, rcx
	je	SHORT $LN36@Pyx_GetAtt@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN36@Pyx_GetAtt@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN36@Pyx_GetAtt@2:
	test	rdi, rdi
	je	SHORT $LN26@Pyx_GetAtt@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN26@Pyx_GetAtt@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN26@Pyx_GetAtt@2:
	mov	rdi, QWORD PTR [rsp+56]
	test	rbx, rbx
	je	SHORT $LN16@Pyx_GetAtt@2
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN16@Pyx_GetAtt@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN16@Pyx_GetAtt@2:

; 24239:     Py_INCREF(d);

	inc	QWORD PTR [rsi]
	mov	rbx, QWORD PTR [rsp+48]

; 24240:     return d;
; 24241: }

	mov	rbp, QWORD PTR [rsp+64]
	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
__Pyx_GetAttr3Default ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetAttr3 DD imagerel __Pyx_GetAttr3
	DD	imagerel __Pyx_GetAttr3+87
	DD	imagerel $unwind$__Pyx_GetAttr3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetAttr3 DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_GetAttr3
_TEXT	SEGMENT
o$ = 48
n$ = 56
d$ = 64
__Pyx_GetAttr3 PROC					; COMDAT

; 24242: static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 24243:     PyObject *r = __Pyx_GetAttr(o, n);

	mov	rax, QWORD PTR [rdx+8]
	mov	rbx, r8
	bt	DWORD PTR [rax+168], 27
	jae	SHORT $LN5@Pyx_GetAtt@3
	mov	rax, QWORD PTR [rcx+8]
	mov	r9, QWORD PTR [rax+144]
	test	r9, r9
	je	SHORT $LN9@Pyx_GetAtt@3
	call	r9
	jmp	SHORT $LN6@Pyx_GetAtt@3
$LN9@Pyx_GetAtt@3:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN5@Pyx_GetAtt@3
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN6@Pyx_GetAtt@3
$LN5@Pyx_GetAtt@3:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN6@Pyx_GetAtt@3:

; 24244:     return (likely(r)) ? r : __Pyx_GetAttr3Default(d);

	test	rax, rax
	jne	SHORT $LN4@Pyx_GetAtt@3
	mov	rcx, rbx
	call	__Pyx_GetAttr3Default
$LN4@Pyx_GetAtt@3:

; 24245: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__Pyx_GetAttr3 ENDP
_TEXT	ENDS
EXTRN	__imp_PyBuffer_Release:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ReleaseBuffer DD imagerel __Pyx_ReleaseBuffer
	DD	imagerel __Pyx_ReleaseBuffer+147
	DD	imagerel $unwind$__Pyx_ReleaseBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ReleaseBuffer DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_ReleaseBuffer
_TEXT	SEGMENT
view$ = 48
__Pyx_ReleaseBuffer PROC				; COMDAT

; 24859: static void __Pyx_ReleaseBuffer(Py_buffer *view) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 24860:     PyObject *obj = view->obj;

	mov	rbx, QWORD PTR [rcx+8]
	mov	rdi, rcx

; 24861:     if (!obj) return;

	test	rbx, rbx
	je	SHORT $LN3@Pyx_Releas

; 24862:     if (PyObject_CheckBuffer(obj)) {

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+160]
	test	rax, rax
	je	SHORT $LN9@Pyx_Releas
	bt	DWORD PTR [rcx+168], 21
	jae	SHORT $LN9@Pyx_Releas
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN9@Pyx_Releas

; 24863:         PyBuffer_Release(view);

	mov	rcx, rdi

; 24870: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_PyBuffer_Release
$LN9@Pyx_Releas:

; 24864:         return;
; 24865:     }
; 24866:     if ((0)) {}
; 24867:         else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);

	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	call	__Pyx_IsSubtype
	test	eax, eax
	je	SHORT $LN16@Pyx_Releas
	mov	rax, QWORD PTR [rbx+56]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN16@Pyx_Releas
	mov	rcx, QWORD PTR [rdi+40]
	call	QWORD PTR __imp_PyObject_Free
$LN16@Pyx_Releas:

; 24868:     view->obj = NULL;

	mov	QWORD PTR [rdi+8], 0

; 24869:     Py_DECREF(obj);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN3@Pyx_Releas
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN3@Pyx_Releas:

; 24870: }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__Pyx_ReleaseBuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@MPCGIGO@can?8t?5convert?5negative?5value?5to?5@ ; `string'
EXTRN	__imp_PyLong_AsUnsignedLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_As_unsigned_int DD imagerel __Pyx_PyInt_As_unsigned_int
	DD	imagerel __Pyx_PyInt_As_unsigned_int+122
	DD	imagerel $unwind$__Pyx_PyInt_As_unsigned_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyInt_As_unsigned_int DD imagerel __Pyx_PyInt_As_unsigned_int+122
	DD	imagerel __Pyx_PyInt_As_unsigned_int+153
	DD	imagerel $chain$0$__Pyx_PyInt_As_unsigned_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyInt_As_unsigned_int DD imagerel __Pyx_PyInt_As_unsigned_int+153
	DD	imagerel __Pyx_PyInt_As_unsigned_int+201
	DD	imagerel $chain$3$__Pyx_PyInt_As_unsigned_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyInt_As_unsigned_int DD 040821H
	DD	047408H
	DD	063400H
	DD	imagerel __Pyx_PyInt_As_unsigned_int
	DD	imagerel __Pyx_PyInt_As_unsigned_int+122
	DD	imagerel $unwind$__Pyx_PyInt_As_unsigned_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyInt_As_unsigned_int DD 020521H
	DD	063405H
	DD	imagerel __Pyx_PyInt_As_unsigned_int
	DD	imagerel __Pyx_PyInt_As_unsigned_int+122
	DD	imagerel $unwind$__Pyx_PyInt_As_unsigned_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_As_unsigned_int DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CN@MPCGIGO@can?8t?5convert?5negative?5value?5to?5@
CONST	SEGMENT
??_C@_0CN@MPCGIGO@can?8t?5convert?5negative?5value?5to?5@ DB 'can''t conv'
	DB	'ert negative value to unsigned int', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_PyInt_As_unsigned_int
_TEXT	SEGMENT
x$ = 48
__Pyx_PyInt_As_unsigned_int PROC			; COMDAT

; 25438:       static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {

	sub	rsp, 40					; 00000028H

; 25439:     const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
; 25440:     const int is_unsigned = neg_one > const_zero;
; 25441: #if PY_MAJOR_VERSION < 3
; 25442:     if (likely(PyInt_Check(x))) {

	mov	rax, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR [rax+168]
	bt	edx, 23
	jae	SHORT $LN174@Pyx_PyInt_@2

; 25443:         if (sizeof(unsigned int) < sizeof(long)) {
; 25444:             __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
; 25445:         } else {
; 25446:             long val = PyInt_AS_LONG(x);

	mov	eax, DWORD PTR [rcx+16]

; 25447:             if (is_unsigned && unlikely(val < 0)) {

	test	eax, eax
	js	SHORT $raise_neg_overflow$32232

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
$LN174@Pyx_PyInt_@2:

; 25448:                 goto raise_neg_overflow;
; 25449:             }
; 25450:             return (unsigned int) val;
; 25451:         }
; 25452:     } else
; 25453: #endif
; 25454:     if (likely(PyLong_Check(x))) {

	bt	edx, 24
	jae	SHORT $LN164@Pyx_PyInt_@2

; 25455:         if (is_unsigned) {
; 25456: #if CYTHON_USE_PYLONG_INTERNALS
; 25457:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25458:             switch (Py_SIZE(x)) {

	mov	rdx, QWORD PTR [rcx+16]
	mov	rax, rdx
	test	rdx, rdx
	je	SHORT $LN160@Pyx_PyInt_@2
	sub	rax, 1
	je	SHORT $LN159@Pyx_PyInt_@2
	sub	rax, 1

; 25461:                 case 2:
; 25462:                     if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
; 25463:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25464:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25465:                         } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
; 25466:                             return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
; 25467:                         }
; 25468:                     }
; 25469:                     break;
; 25470:                 case 3:
; 25471:                     if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
; 25472:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25473:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25474:                         } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
; 25475:                             return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
; 25476:                         }
; 25477:                     }
; 25478:                     break;
; 25479:                 case 4:
; 25480:                     if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
; 25481:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25482:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25483:                         } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
; 25484:                             return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
; 25485:                         }
; 25486:                     }
; 25487:                     break;
; 25488:             }
; 25489: #endif
; 25490: #if CYTHON_COMPILING_IN_CPYTHON
; 25491:             if (unlikely(Py_SIZE(x) < 0)) {

	test	rdx, rdx
	jns	SHORT $LN123@Pyx_PyInt_@2
$raise_neg_overflow$32232:

; 25615:     }
; 25616: raise_overflow:
; 25617:     PyErr_SetString(PyExc_OverflowError,
; 25618:         "value too large to convert to unsigned int");
; 25619:     return (unsigned int) -1;
; 25620: raise_neg_overflow:
; 25621:     PyErr_SetString(PyExc_OverflowError,
; 25622:         "can't convert negative value to unsigned int");

	mov	rcx, QWORD PTR __imp_PyExc_OverflowError
	lea	rdx, OFFSET FLAT:??_C@_0CN@MPCGIGO@can?8t?5convert?5negative?5value?5to?5@
$raise_overflow$32234:
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 25623:     return (unsigned int) -1;

	or	eax, -1					; ffffffffH

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
$LN123@Pyx_PyInt_@2:
	add	rsp, 40					; 00000028H
	rex_jmp	QWORD PTR __imp_PyLong_AsUnsignedLong
$LN159@Pyx_PyInt_@2:

; 25460:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])

	mov	eax, DWORD PTR [rcx+24]

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
$LN160@Pyx_PyInt_@2:

; 25459:                 case  0: return (unsigned int) 0;

	xor	eax, eax

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
$LN164@Pyx_PyInt_@2:
	mov	QWORD PTR [rsp+48], rbx

; 25492:                 goto raise_neg_overflow;
; 25493:             }
; 25494: #else
; 25495:             {
; 25496:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
; 25497:                 if (unlikely(result < 0))
; 25498:                     return (unsigned int) -1;
; 25499:                 if (unlikely(result == 1))
; 25500:                     goto raise_neg_overflow;
; 25501:             }
; 25502: #endif
; 25503:             if (sizeof(unsigned int) <= sizeof(unsigned long)) {
; 25504:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
; 25505: #ifdef HAVE_LONG_LONG
; 25506:             } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
; 25507:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
; 25508: #endif
; 25509:             }
; 25510:         } else {
; 25511: #if CYTHON_USE_PYLONG_INTERNALS
; 25512:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25513:             switch (Py_SIZE(x)) {
; 25514:                 case  0: return (unsigned int) 0;
; 25515:                 case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
; 25516:                 case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
; 25517:                 case -2:
; 25518:                     if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
; 25519:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25520:                             __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25521:                         } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
; 25522:                             return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25523:                         }
; 25524:                     }
; 25525:                     break;
; 25526:                 case 2:
; 25527:                     if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
; 25528:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25529:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25530:                         } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
; 25531:                             return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25532:                         }
; 25533:                     }
; 25534:                     break;
; 25535:                 case -3:
; 25536:                     if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
; 25537:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25538:                             __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25539:                         } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
; 25540:                             return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25541:                         }
; 25542:                     }
; 25543:                     break;
; 25544:                 case 3:
; 25545:                     if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
; 25546:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25547:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25548:                         } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
; 25549:                             return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25550:                         }
; 25551:                     }
; 25552:                     break;
; 25553:                 case -4:
; 25554:                     if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
; 25555:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25556:                             __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25557:                         } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
; 25558:                             return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25559:                         }
; 25560:                     }
; 25561:                     break;
; 25562:                 case 4:
; 25563:                     if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
; 25564:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25565:                             __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25566:                         } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
; 25567:                             return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
; 25568:                         }
; 25569:                     }
; 25570:                     break;
; 25571:             }
; 25572: #endif
; 25573:             if (sizeof(unsigned int) <= sizeof(long)) {
; 25574:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
; 25575: #ifdef HAVE_LONG_LONG
; 25576:             } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
; 25577:                 __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
; 25578: #endif
; 25579:             }
; 25580:         }
; 25581:         {
; 25582: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
; 25583:             PyErr_SetString(PyExc_RuntimeError,
; 25584:                             "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
; 25585: #else
; 25586:             unsigned int val;
; 25587:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);
; 25588:  #if PY_MAJOR_VERSION < 3
; 25589:             if (likely(v) && !PyLong_Check(v)) {
; 25590:                 PyObject *tmp = v;
; 25591:                 v = PyNumber_Long(tmp);
; 25592:                 Py_DECREF(tmp);
; 25593:             }
; 25594:  #endif
; 25595:             if (likely(v)) {
; 25596:                 int one = 1; int is_little = (int)*(unsigned char *)&one;
; 25597:                 unsigned char *bytes = (unsigned char *)&val;
; 25598:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,
; 25599:                                               bytes, sizeof(val),
; 25600:                                               is_little, !is_unsigned);
; 25601:                 Py_DECREF(v);
; 25602:                 if (likely(!ret))
; 25603:                     return val;
; 25604:             }
; 25605: #endif
; 25606:             return (unsigned int) -1;
; 25607:         }
; 25608:     } else {
; 25609:         unsigned int val;
; 25610:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);

	call	__Pyx_PyNumber_IntOrLong
	mov	rbx, rax

; 25611:         if (!tmp) return (unsigned int) -1;

	test	rax, rax
	jne	SHORT $LN6@Pyx_PyInt_@2
	or	eax, -1					; ffffffffH
	mov	rbx, QWORD PTR [rsp+48]

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_PyInt_@2:

; 25612:         val = __Pyx_PyInt_As_unsigned_int(tmp);

	mov	rcx, rax
	mov	QWORD PTR [rsp+32], rdi
	call	__Pyx_PyInt_As_unsigned_int

; 25613:         Py_DECREF(tmp);

	add	QWORD PTR [rbx], -1
	mov	edi, eax
	jne	SHORT $LN4@Pyx_PyInt_@2
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyInt_@2:
	mov	rbx, QWORD PTR [rsp+48]

; 25614:         return val;

	mov	eax, edi
	mov	rdi, QWORD PTR [rsp+32]

; 25624: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_PyInt_As_unsigned_int ENDP
_TEXT	ENDS
EXTRN	__imp_PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_As_int DD imagerel __Pyx_PyInt_As_int
	DD	imagerel __Pyx_PyInt_As_int+103
	DD	imagerel $unwind$__Pyx_PyInt_As_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyInt_As_int DD imagerel __Pyx_PyInt_As_int+103
	DD	imagerel __Pyx_PyInt_As_int+134
	DD	imagerel $chain$0$__Pyx_PyInt_As_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyInt_As_int DD imagerel __Pyx_PyInt_As_int+134
	DD	imagerel __Pyx_PyInt_As_int+184
	DD	imagerel $chain$3$__Pyx_PyInt_As_int
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__Pyx_PyInt_As_int DD imagerel __Pyx_PyInt_As_int+184
	DD	imagerel __Pyx_PyInt_As_int+220
	DD	imagerel $chain$4$__Pyx_PyInt_As_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__Pyx_PyInt_As_int DD 021H
	DD	imagerel __Pyx_PyInt_As_int
	DD	imagerel __Pyx_PyInt_As_int+103
	DD	imagerel $unwind$__Pyx_PyInt_As_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyInt_As_int DD 040821H
	DD	047408H
	DD	063400H
	DD	imagerel __Pyx_PyInt_As_int
	DD	imagerel __Pyx_PyInt_As_int+103
	DD	imagerel $unwind$__Pyx_PyInt_As_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyInt_As_int DD 020521H
	DD	063405H
	DD	imagerel __Pyx_PyInt_As_int
	DD	imagerel __Pyx_PyInt_As_int+103
	DD	imagerel $unwind$__Pyx_PyInt_As_int
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_As_int DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_As_int
_TEXT	SEGMENT
x$ = 48
__Pyx_PyInt_As_int PROC					; COMDAT

; 25627:       static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {

	sub	rsp, 40					; 00000028H

; 25628:     const int neg_one = (int) -1, const_zero = (int) 0;
; 25629:     const int is_unsigned = neg_one > const_zero;
; 25630: #if PY_MAJOR_VERSION < 3
; 25631:     if (likely(PyInt_Check(x))) {

	mov	rax, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR [rax+168]
	bt	edx, 23
	jae	SHORT $LN174@Pyx_PyInt_@3

; 25632:         if (sizeof(int) < sizeof(long)) {
; 25633:             __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
; 25634:         } else {
; 25635:             long val = PyInt_AS_LONG(x);
; 25636:             if (is_unsigned && unlikely(val < 0)) {
; 25637:                 goto raise_neg_overflow;
; 25638:             }
; 25639:             return (int) val;

	mov	eax, DWORD PTR [rcx+16]

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
$LN174@Pyx_PyInt_@3:

; 25640:         }
; 25641:     } else
; 25642: #endif
; 25643:     if (likely(PyLong_Check(x))) {

	bt	edx, 24
	jae	SHORT $LN164@Pyx_PyInt_@3

; 25644:         if (is_unsigned) {
; 25645: #if CYTHON_USE_PYLONG_INTERNALS
; 25646:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25647:             switch (Py_SIZE(x)) {
; 25648:                 case  0: return (int) 0;
; 25649:                 case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
; 25650:                 case 2:
; 25651:                     if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
; 25652:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25653:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25654:                         } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
; 25655:                             return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
; 25656:                         }
; 25657:                     }
; 25658:                     break;
; 25659:                 case 3:
; 25660:                     if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
; 25661:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25662:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25663:                         } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
; 25664:                             return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
; 25665:                         }
; 25666:                     }
; 25667:                     break;
; 25668:                 case 4:
; 25669:                     if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
; 25670:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25671:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25672:                         } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
; 25673:                             return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
; 25674:                         }
; 25675:                     }
; 25676:                     break;
; 25677:             }
; 25678: #endif
; 25679: #if CYTHON_COMPILING_IN_CPYTHON
; 25680:             if (unlikely(Py_SIZE(x) < 0)) {
; 25681:                 goto raise_neg_overflow;
; 25682:             }
; 25683: #else
; 25684:             {
; 25685:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
; 25686:                 if (unlikely(result < 0))
; 25687:                     return (int) -1;
; 25688:                 if (unlikely(result == 1))
; 25689:                     goto raise_neg_overflow;
; 25690:             }
; 25691: #endif
; 25692:             if (sizeof(int) <= sizeof(unsigned long)) {
; 25693:                 __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
; 25694: #ifdef HAVE_LONG_LONG
; 25695:             } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
; 25696:                 __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
; 25697: #endif
; 25698:             }
; 25699:         } else {
; 25700: #if CYTHON_USE_PYLONG_INTERNALS
; 25701:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25702:             switch (Py_SIZE(x)) {

	mov	rax, QWORD PTR [rcx+16]
	add	rax, 4
	cmp	rax, 8
	ja	SHORT $LN93@Pyx_PyInt_@3
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN177@Pyx_PyInt_@3[rdx+rax*4]
	add	rax, rdx
	jmp	rax
$LN106@Pyx_PyInt_@3:

; 25703:                 case  0: return (int) 0;

	xor	eax, eax

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
$LN105@Pyx_PyInt_@3:

; 25704:                 case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))

	mov	eax, DWORD PTR [rcx+24]
	neg	eax

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
$LN99@Pyx_PyInt_@3:

; 25705:                 case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])

	mov	eax, DWORD PTR [rcx+24]

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
$LN93@Pyx_PyInt_@3:
	add	rsp, 40					; 00000028H
	rex_jmp	QWORD PTR __imp_PyLong_AsLong
$LN164@Pyx_PyInt_@3:
	mov	QWORD PTR [rsp+48], rbx

; 25706:                 case -2:
; 25707:                     if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
; 25708:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25709:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25710:                         } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
; 25711:                             return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25712:                         }
; 25713:                     }
; 25714:                     break;
; 25715:                 case 2:
; 25716:                     if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
; 25717:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25718:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25719:                         } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
; 25720:                             return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25721:                         }
; 25722:                     }
; 25723:                     break;
; 25724:                 case -3:
; 25725:                     if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
; 25726:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25727:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25728:                         } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
; 25729:                             return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25730:                         }
; 25731:                     }
; 25732:                     break;
; 25733:                 case 3:
; 25734:                     if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
; 25735:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25736:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25737:                         } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
; 25738:                             return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25739:                         }
; 25740:                     }
; 25741:                     break;
; 25742:                 case -4:
; 25743:                     if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
; 25744:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25745:                             __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25746:                         } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
; 25747:                             return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25748:                         }
; 25749:                     }
; 25750:                     break;
; 25751:                 case 4:
; 25752:                     if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
; 25753:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25754:                             __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25755:                         } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
; 25756:                             return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
; 25757:                         }
; 25758:                     }
; 25759:                     break;
; 25760:             }
; 25761: #endif
; 25762:             if (sizeof(int) <= sizeof(long)) {
; 25763:                 __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
; 25764: #ifdef HAVE_LONG_LONG
; 25765:             } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
; 25766:                 __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
; 25767: #endif
; 25768:             }
; 25769:         }
; 25770:         {
; 25771: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
; 25772:             PyErr_SetString(PyExc_RuntimeError,
; 25773:                             "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
; 25774: #else
; 25775:             int val;
; 25776:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);
; 25777:  #if PY_MAJOR_VERSION < 3
; 25778:             if (likely(v) && !PyLong_Check(v)) {
; 25779:                 PyObject *tmp = v;
; 25780:                 v = PyNumber_Long(tmp);
; 25781:                 Py_DECREF(tmp);
; 25782:             }
; 25783:  #endif
; 25784:             if (likely(v)) {
; 25785:                 int one = 1; int is_little = (int)*(unsigned char *)&one;
; 25786:                 unsigned char *bytes = (unsigned char *)&val;
; 25787:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,
; 25788:                                               bytes, sizeof(val),
; 25789:                                               is_little, !is_unsigned);
; 25790:                 Py_DECREF(v);
; 25791:                 if (likely(!ret))
; 25792:                     return val;
; 25793:             }
; 25794: #endif
; 25795:             return (int) -1;
; 25796:         }
; 25797:     } else {
; 25798:         int val;
; 25799:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);

	call	__Pyx_PyNumber_IntOrLong
	mov	rbx, rax

; 25800:         if (!tmp) return (int) -1;

	test	rax, rax
	jne	SHORT $LN6@Pyx_PyInt_@3
	or	eax, -1
	mov	rbx, QWORD PTR [rsp+48]

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_PyInt_@3:

; 25801:         val = __Pyx_PyInt_As_int(tmp);

	mov	rcx, rax
	mov	QWORD PTR [rsp+32], rdi
	call	__Pyx_PyInt_As_int

; 25802:         Py_DECREF(tmp);

	add	QWORD PTR [rbx], -1
	mov	edi, eax
	jne	SHORT $LN4@Pyx_PyInt_@3
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyInt_@3:
	mov	rbx, QWORD PTR [rsp+48]

; 25803:         return val;

	mov	eax, edi
	mov	rdi, QWORD PTR [rsp+32]

; 25804:     }
; 25805: raise_overflow:
; 25806:     PyErr_SetString(PyExc_OverflowError,
; 25807:         "value too large to convert to int");
; 25808:     return (int) -1;
; 25809: raise_neg_overflow:
; 25810:     PyErr_SetString(PyExc_OverflowError,
; 25811:         "can't convert negative value to int");
; 25812:     return (int) -1;
; 25813: }

	add	rsp, 40					; 00000028H
	ret	0
	npad	2
$LN177@Pyx_PyInt_@3:
	DD	$LN93@Pyx_PyInt_@3
	DD	$LN93@Pyx_PyInt_@3
	DD	$LN93@Pyx_PyInt_@3
	DD	$LN105@Pyx_PyInt_@3
	DD	$LN106@Pyx_PyInt_@3
	DD	$LN99@Pyx_PyInt_@3
	DD	$LN93@Pyx_PyInt_@3
	DD	$LN93@Pyx_PyInt_@3
	DD	$LN93@Pyx_PyInt_@3
__Pyx_PyInt_As_int ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyInt_As_long DD imagerel __Pyx_PyInt_As_long
	DD	imagerel __Pyx_PyInt_As_long+103
	DD	imagerel $unwind$__Pyx_PyInt_As_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__Pyx_PyInt_As_long DD imagerel __Pyx_PyInt_As_long+103
	DD	imagerel __Pyx_PyInt_As_long+134
	DD	imagerel $chain$0$__Pyx_PyInt_As_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__Pyx_PyInt_As_long DD imagerel __Pyx_PyInt_As_long+134
	DD	imagerel __Pyx_PyInt_As_long+184
	DD	imagerel $chain$3$__Pyx_PyInt_As_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__Pyx_PyInt_As_long DD imagerel __Pyx_PyInt_As_long+184
	DD	imagerel __Pyx_PyInt_As_long+220
	DD	imagerel $chain$4$__Pyx_PyInt_As_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__Pyx_PyInt_As_long DD 021H
	DD	imagerel __Pyx_PyInt_As_long
	DD	imagerel __Pyx_PyInt_As_long+103
	DD	imagerel $unwind$__Pyx_PyInt_As_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__Pyx_PyInt_As_long DD 040821H
	DD	047408H
	DD	063400H
	DD	imagerel __Pyx_PyInt_As_long
	DD	imagerel __Pyx_PyInt_As_long+103
	DD	imagerel $unwind$__Pyx_PyInt_As_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__Pyx_PyInt_As_long DD 020521H
	DD	063405H
	DD	imagerel __Pyx_PyInt_As_long
	DD	imagerel __Pyx_PyInt_As_long+103
	DD	imagerel $unwind$__Pyx_PyInt_As_long
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyInt_As_long DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyInt_As_long
_TEXT	SEGMENT
x$ = 48
__Pyx_PyInt_As_long PROC				; COMDAT

; 25816:       static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {

	sub	rsp, 40					; 00000028H

; 25817:     const long neg_one = (long) -1, const_zero = (long) 0;
; 25818:     const int is_unsigned = neg_one > const_zero;
; 25819: #if PY_MAJOR_VERSION < 3
; 25820:     if (likely(PyInt_Check(x))) {

	mov	rax, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR [rax+168]
	bt	edx, 23
	jae	SHORT $LN174@Pyx_PyInt_@4

; 25821:         if (sizeof(long) < sizeof(long)) {
; 25822:             __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
; 25823:         } else {
; 25824:             long val = PyInt_AS_LONG(x);
; 25825:             if (is_unsigned && unlikely(val < 0)) {
; 25826:                 goto raise_neg_overflow;
; 25827:             }
; 25828:             return (long) val;

	mov	eax, DWORD PTR [rcx+16]

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
$LN174@Pyx_PyInt_@4:

; 25829:         }
; 25830:     } else
; 25831: #endif
; 25832:     if (likely(PyLong_Check(x))) {

	bt	edx, 24
	jae	SHORT $LN164@Pyx_PyInt_@4

; 25833:         if (is_unsigned) {
; 25834: #if CYTHON_USE_PYLONG_INTERNALS
; 25835:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25836:             switch (Py_SIZE(x)) {
; 25837:                 case  0: return (long) 0;
; 25838:                 case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
; 25839:                 case 2:
; 25840:                     if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
; 25841:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25842:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25843:                         } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
; 25844:                             return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
; 25845:                         }
; 25846:                     }
; 25847:                     break;
; 25848:                 case 3:
; 25849:                     if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
; 25850:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25851:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25852:                         } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
; 25853:                             return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
; 25854:                         }
; 25855:                     }
; 25856:                     break;
; 25857:                 case 4:
; 25858:                     if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
; 25859:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25860:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25861:                         } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
; 25862:                             return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
; 25863:                         }
; 25864:                     }
; 25865:                     break;
; 25866:             }
; 25867: #endif
; 25868: #if CYTHON_COMPILING_IN_CPYTHON
; 25869:             if (unlikely(Py_SIZE(x) < 0)) {
; 25870:                 goto raise_neg_overflow;
; 25871:             }
; 25872: #else
; 25873:             {
; 25874:                 int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
; 25875:                 if (unlikely(result < 0))
; 25876:                     return (long) -1;
; 25877:                 if (unlikely(result == 1))
; 25878:                     goto raise_neg_overflow;
; 25879:             }
; 25880: #endif
; 25881:             if (sizeof(long) <= sizeof(unsigned long)) {
; 25882:                 __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
; 25883: #ifdef HAVE_LONG_LONG
; 25884:             } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
; 25885:                 __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
; 25886: #endif
; 25887:             }
; 25888:         } else {
; 25889: #if CYTHON_USE_PYLONG_INTERNALS
; 25890:             const digit* digits = ((PyLongObject*)x)->ob_digit;
; 25891:             switch (Py_SIZE(x)) {

	mov	rax, QWORD PTR [rcx+16]
	add	rax, 4
	cmp	rax, 8
	ja	SHORT $LN93@Pyx_PyInt_@4
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN177@Pyx_PyInt_@4[rdx+rax*4]
	add	rax, rdx
	jmp	rax
$LN106@Pyx_PyInt_@4:

; 25892:                 case  0: return (long) 0;

	xor	eax, eax

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
$LN105@Pyx_PyInt_@4:

; 25893:                 case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))

	mov	eax, DWORD PTR [rcx+24]
	neg	eax

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
$LN99@Pyx_PyInt_@4:

; 25894:                 case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])

	mov	eax, DWORD PTR [rcx+24]

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
$LN93@Pyx_PyInt_@4:
	add	rsp, 40					; 00000028H
	rex_jmp	QWORD PTR __imp_PyLong_AsLong
$LN164@Pyx_PyInt_@4:
	mov	QWORD PTR [rsp+48], rbx

; 25895:                 case -2:
; 25896:                     if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
; 25897:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25898:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25899:                         } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
; 25900:                             return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25901:                         }
; 25902:                     }
; 25903:                     break;
; 25904:                 case 2:
; 25905:                     if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
; 25906:                         if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
; 25907:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25908:                         } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
; 25909:                             return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25910:                         }
; 25911:                     }
; 25912:                     break;
; 25913:                 case -3:
; 25914:                     if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
; 25915:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25916:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25917:                         } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
; 25918:                             return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25919:                         }
; 25920:                     }
; 25921:                     break;
; 25922:                 case 3:
; 25923:                     if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
; 25924:                         if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
; 25925:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25926:                         } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
; 25927:                             return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25928:                         }
; 25929:                     }
; 25930:                     break;
; 25931:                 case -4:
; 25932:                     if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
; 25933:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25934:                             __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25935:                         } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
; 25936:                             return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25937:                         }
; 25938:                     }
; 25939:                     break;
; 25940:                 case 4:
; 25941:                     if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
; 25942:                         if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
; 25943:                             __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
; 25944:                         } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
; 25945:                             return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
; 25946:                         }
; 25947:                     }
; 25948:                     break;
; 25949:             }
; 25950: #endif
; 25951:             if (sizeof(long) <= sizeof(long)) {
; 25952:                 __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
; 25953: #ifdef HAVE_LONG_LONG
; 25954:             } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
; 25955:                 __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
; 25956: #endif
; 25957:             }
; 25958:         }
; 25959:         {
; 25960: #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
; 25961:             PyErr_SetString(PyExc_RuntimeError,
; 25962:                             "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
; 25963: #else
; 25964:             long val;
; 25965:             PyObject *v = __Pyx_PyNumber_IntOrLong(x);
; 25966:  #if PY_MAJOR_VERSION < 3
; 25967:             if (likely(v) && !PyLong_Check(v)) {
; 25968:                 PyObject *tmp = v;
; 25969:                 v = PyNumber_Long(tmp);
; 25970:                 Py_DECREF(tmp);
; 25971:             }
; 25972:  #endif
; 25973:             if (likely(v)) {
; 25974:                 int one = 1; int is_little = (int)*(unsigned char *)&one;
; 25975:                 unsigned char *bytes = (unsigned char *)&val;
; 25976:                 int ret = _PyLong_AsByteArray((PyLongObject *)v,
; 25977:                                               bytes, sizeof(val),
; 25978:                                               is_little, !is_unsigned);
; 25979:                 Py_DECREF(v);
; 25980:                 if (likely(!ret))
; 25981:                     return val;
; 25982:             }
; 25983: #endif
; 25984:             return (long) -1;
; 25985:         }
; 25986:     } else {
; 25987:         long val;
; 25988:         PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);

	call	__Pyx_PyNumber_IntOrLong
	mov	rbx, rax

; 25989:         if (!tmp) return (long) -1;

	test	rax, rax
	jne	SHORT $LN6@Pyx_PyInt_@4
	or	eax, -1
	mov	rbx, QWORD PTR [rsp+48]

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@Pyx_PyInt_@4:

; 25990:         val = __Pyx_PyInt_As_long(tmp);

	mov	rcx, rax
	mov	QWORD PTR [rsp+32], rdi
	call	__Pyx_PyInt_As_long

; 25991:         Py_DECREF(tmp);

	add	QWORD PTR [rbx], -1
	mov	edi, eax
	jne	SHORT $LN4@Pyx_PyInt_@4
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@Pyx_PyInt_@4:
	mov	rbx, QWORD PTR [rsp+48]

; 25992:         return val;

	mov	eax, edi
	mov	rdi, QWORD PTR [rsp+32]

; 25993:     }
; 25994: raise_overflow:
; 25995:     PyErr_SetString(PyExc_OverflowError,
; 25996:         "value too large to convert to long");
; 25997:     return (long) -1;
; 25998: raise_neg_overflow:
; 25999:     PyErr_SetString(PyExc_OverflowError,
; 26000:         "can't convert negative value to long");
; 26001:     return (long) -1;
; 26002: }

	add	rsp, 40					; 00000028H
	ret	0
	npad	2
$LN177@Pyx_PyInt_@4:
	DD	$LN93@Pyx_PyInt_@4
	DD	$LN93@Pyx_PyInt_@4
	DD	$LN93@Pyx_PyInt_@4
	DD	$LN105@Pyx_PyInt_@4
	DD	$LN106@Pyx_PyInt_@4
	DD	$LN99@Pyx_PyInt_@4
	DD	$LN93@Pyx_PyInt_@4
	DD	$LN93@Pyx_PyInt_@4
	DD	$LN93@Pyx_PyInt_@4
__Pyx_PyInt_As_long ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@IAMMAFD@Item?5size?5of?5buffer?5?$CI?$CFzu?5byte?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0DM@GDDBHIIN@Buffer?5has?5wrong?5number?5of?5dimen@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_ValidateAndInit_memviewslice DD imagerel __Pyx_ValidateAndInit_memviewslice
	DD	imagerel __Pyx_ValidateAndInit_memviewslice+610
	DD	imagerel $unwind$__Pyx_ValidateAndInit_memviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_ValidateAndInit_memviewslice DD 0d2301H
	DD	01b6423H
	DD	01a5423H
	DD	0183423H
	DD	0120123H
	DD	0e01af01cH
	DD	0c016d018H
	DD	07014H
xdata	ENDS
;	COMDAT ??_C@_0EK@IAMMAFD@Item?5size?5of?5buffer?5?$CI?$CFzu?5byte?$CFs?$CJ@
CONST	SEGMENT
??_C@_0EK@IAMMAFD@Item?5size?5of?5buffer?5?$CI?$CFzu?5byte?$CFs?$CJ@ DB 'I'
	DB	'tem size of buffer (%zu byte%s) does not match size of ''%s'''
	DB	' (%zu byte%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GDDBHIIN@Buffer?5has?5wrong?5number?5of?5dimen@
CONST	SEGMENT
??_C@_0DM@GDDBHIIN@Buffer?5has?5wrong?5number?5of?5dimen@ DB 'Buffer has '
	DB	'wrong number of dimensions (expected %d, got %d)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_ValidateAndInit_memviewslice
_TEXT	SEGMENT
ctx$ = 64
axes_specs$ = 192
c_or_f_flag$ = 200
buf_flags$ = 208
ndim$ = 216
dtype$ = 224
stack$ = 232
memviewslice$ = 240
original_obj$ = 248
__Pyx_ValidateAndInit_memviewslice PROC			; COMDAT

; 26455: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	DWORD PTR [rsp+16], edx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 144				; 00000090H

; 26456:     struct __pyx_memoryview_obj *memview, *new_memview;
; 26457:     __Pyx_RefNannyDeclarations
; 26458:     Py_buffer *buf;
; 26459:     int i, spec = 0, retval = -1;
; 26460:     __Pyx_BufFmt_Context ctx;
; 26461:     int from_memoryview = __pyx_memoryview_check(original_obj);

	mov	r15, QWORD PTR original_obj$[rsp]
	mov	r14, rcx
	mov	r12d, r9d
	mov	rcx, r15
	mov	r11d, r8d
	mov	edi, edx
	call	__pyx_memoryview_check

; 26462:     __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
; 26463:     if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
; 26464:                                                             original_obj)->typeinfo)) {

	mov	rbx, QWORD PTR dtype$[rsp]
	test	eax, eax
	je	SHORT $LN24@Pyx_Valida
	mov	rdx, QWORD PTR [r15+176]
	mov	rcx, rbx
	call	__pyx_typeinfo_cmp
	test	eax, eax
	je	SHORT $LN24@Pyx_Valida

; 26465:         memview = (struct __pyx_memoryview_obj *) original_obj;
; 26466:         new_memview = NULL;

	xor	r13d, r13d

; 26467:     } else {

	jmp	SHORT $LN22@Pyx_Valida
$LN24@Pyx_Valida:

; 26468:         memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
; 26469:                                             original_obj, buf_flags, 0, dtype);

	mov	r9, rbx
	xor	r8d, r8d
	mov	edx, r11d
	mov	rcx, r15
	call	__pyx_memoryview_new
	mov	r15, rax

; 26470:         new_memview = memview;

	mov	r13, rax

; 26471:         if (unlikely(!memview))

	test	rax, rax
	je	$LN3@Pyx_Valida
$LN22@Pyx_Valida:

; 26472:             goto fail;
; 26473:     }
; 26474:     buf = &memview->view;
; 26475:     if (buf->ndim != ndim) {

	mov	r9d, DWORD PTR [r15+108]
	cmp	r9d, r12d
	je	SHORT $LN21@Pyx_Valida

; 26476:         PyErr_Format(PyExc_ValueError,
; 26477:                 "Buffer has wrong number of dimensions (expected %d, got %d)",
; 26478:                 ndim, buf->ndim);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0DM@GDDBHIIN@Buffer?5has?5wrong?5number?5of?5dimen@
	mov	r8d, r12d
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 26479:         goto fail;

	jmp	$fail$34447
$LN21@Pyx_Valida:

; 26480:     }
; 26481:     if (new_memview) {

	test	r13, r13
	je	SHORT $LN19@Pyx_Valida

; 26482:         __Pyx_BufFmt_Init(&ctx, stack, dtype);

	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR ctx$[rsp]
	mov	r8, rbx
	call	__Pyx_BufFmt_Init

; 26483:         if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;

	mov	rdx, QWORD PTR [r15+112]
	lea	rcx, QWORD PTR ctx$[rsp]
	call	__Pyx_BufFmt_CheckString
	test	rax, rax
	je	$fail$34447
$LN19@Pyx_Valida:

; 26484:     }
; 26485:     if ((unsigned) buf->itemsize != dtype->size) {

	mov	rcx, QWORD PTR [rbx+16]
	mov	eax, DWORD PTR [r15+96]
	cmp	rax, rcx
	je	SHORT $LN18@Pyx_Valida

; 26486:         PyErr_Format(PyExc_ValueError,
; 26487:                      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
; 26488:                      "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
; 26489:                      buf->itemsize,
; 26490:                      (buf->itemsize > 1) ? "s" : "",
; 26491:                      dtype->name,
; 26492:                      dtype->size,
; 26493:                      (dtype->size > 1) ? "s" : "");

	mov	r8, QWORD PTR [r15+96]
	cmp	rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	lea	r9, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	rax, r9
	cmova	rax, rdx
	cmp	r8, 1
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	cmovg	r9, rdx
	lea	rdx, OFFSET FLAT:??_C@_0EK@IAMMAFD@Item?5size?5of?5buffer?5?$CI?$CFzu?5byte?$CFs?$CJ@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format

; 26494:         goto fail;

	jmp	$fail$34447
$LN18@Pyx_Valida:

; 26495:     }
; 26496:     for (i = 0; i < ndim; i++) {

	xor	ebx, ebx
	test	r12d, r12d
	jle	SHORT $LN15@Pyx_Valida
	xor	edi, edi
	npad	12
$LL17@Pyx_Valida:

; 26497:         spec = axes_specs[i];

	mov	ebp, DWORD PTR [r14]

; 26498:         if (!__pyx_check_strides(buf, i, ndim, spec))

	lea	rcx, QWORD PTR [r15+72]
	mov	r8d, r12d
	mov	r9d, ebp
	mov	edx, ebx
	call	__pyx_check_strides
	test	eax, eax
	je	$fail$34447

; 26499:             goto fail;
; 26500:         if (!__pyx_check_suboffsets(buf, i, ndim, spec))

	test	bpl, 1
	je	SHORT $LN30@Pyx_Valida
	mov	rax, QWORD PTR [r15+136]
	test	rax, rax
	je	SHORT $LN30@Pyx_Valida
	cmp	QWORD PTR [rdi+rax], 0
	jge	$LN39@Pyx_Valida
$LN30@Pyx_Valida:
	test	bpl, 2
	je	SHORT $LN28@Pyx_Valida
	mov	rax, QWORD PTR [r15+136]
	test	rax, rax
	je	$LN27@Pyx_Valida
	cmp	QWORD PTR [rdi+rax], 0
	jl	$LN27@Pyx_Valida
$LN28@Pyx_Valida:
	inc	ebx
	add	r14, 4
	add	rdi, 8
	cmp	ebx, r12d
	jl	SHORT $LL17@Pyx_Valida

; 26455: {

	mov	edi, DWORD PTR c_or_f_flag$[rsp]
$LN15@Pyx_Valida:

; 26501:             goto fail;
; 26502:     }
; 26503:     if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))

	cmp	QWORD PTR [r15+128], 0
	je	SHORT $LN12@Pyx_Valida
	lea	rcx, QWORD PTR [r15+72]
	mov	r8d, edi
	mov	edx, r12d
	call	__pyx_verify_contig
	test	eax, eax
	je	SHORT $fail$34447
$LN12@Pyx_Valida:

; 26504:         goto fail;
; 26505:     if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
; 26506:                                          new_memview != NULL) == -1)) {

	mov	r8, QWORD PTR memviewslice$[rsp]
	xor	r9d, r9d
	test	r13, r13
	mov	edx, r12d
	mov	rcx, r15
	setne	r9b
	call	__Pyx_init_memviewslice
	cmp	eax, -1
	jne	SHORT $LN11@Pyx_Valida
$fail$34447:

; 26507:         goto fail;
; 26508:     }
; 26509:     retval = 0;
; 26510:     goto no_fail;
; 26511: fail:
; 26512:     Py_XDECREF(new_memview);

	test	r13, r13
	je	SHORT $LN3@Pyx_Valida
	add	QWORD PTR [r13], -1
	jne	SHORT $LN3@Pyx_Valida
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN3@Pyx_Valida:

; 26513:     retval = -1;
; 26514: no_fail:
; 26515:     __Pyx_RefNannyFinishContext();
; 26516:     return retval;

	or	eax, -1
$no_fail$34462:

; 26517: }

	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN39@Pyx_Valida:

; 26499:             goto fail;
; 26500:         if (!__pyx_check_suboffsets(buf, i, ndim, spec))

	lea	rdx, OFFSET FLAT:??_C@_0DK@EJAHNONE@Buffer?5not?5compatible?5with?5direc@
	jmp	SHORT $LN43@Pyx_Valida
$LN27@Pyx_Valida:
	lea	rdx, OFFSET FLAT:??_C@_0DF@JIEHOLBF@Buffer?5is?5not?5indirectly?5accessi@
$LN43@Pyx_Valida:
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	mov	r8d, ebx
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
$fail$40883:
	jmp	SHORT $fail$34447
$LN11@Pyx_Valida:

; 26513:     retval = -1;
; 26514: no_fail:
; 26515:     __Pyx_RefNannyFinishContext();
; 26516:     return retval;

	xor	eax, eax
	jmp	SHORT $no_fail$34462
__Pyx_ValidateAndInit_memviewslice ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t DD imagerel __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t
	DD	imagerel __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t+265
	DD	imagerel $unwind$__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t DD 040a01H
	DD	0d340aH
	DD	07006920aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t
_TEXT	SEGMENT
stack$ = 64
$T40918 = 96
axes_specs$ = 96
obj$ = 104
__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t PROC ; COMDAT

; 26520:       static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t(PyObject *obj) {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 80					; 00000050H

; 26521:     __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };

	xor	eax, eax
	xor	edi, edi
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rdi
	mov	QWORD PTR [rcx+8], rdi
	mov	QWORD PTR [rcx+16], rdi
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax
	mov	QWORD PTR [rcx+56], rax
	mov	QWORD PTR [rcx+64], rax
	mov	QWORD PTR [rcx+72], rax
	mov	QWORD PTR [rcx+80], rdi
	mov	QWORD PTR [rcx+88], rax
	mov	QWORD PTR [rcx+96], rax
	mov	QWORD PTR [rcx+104], rax
	mov	QWORD PTR [rcx+112], rax
	mov	QWORD PTR [rcx+120], rax
	mov	QWORD PTR [rcx+128], rax
	mov	QWORD PTR [rcx+136], rax
	mov	QWORD PTR [rcx+144], rdi
	mov	QWORD PTR [rcx+152], rax
	mov	QWORD PTR [rcx+160], rax
	mov	QWORD PTR [rcx+168], rax
	mov	QWORD PTR [rcx+176], rax
	mov	QWORD PTR [rcx+184], rax
	mov	QWORD PTR [rcx+192], rax
	mov	QWORD PTR [rcx+200], rax

; 26522:     __Pyx_BufFmt_StackElem stack[1];
; 26523:     int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
; 26524:     int retcode;
; 26525:     if (obj == Py_None) {

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	DWORD PTR axes_specs$[rsp], 17
	cmp	rdx, rax
	jne	SHORT $LN2@Pyx_PyObje@6

; 26526:         result.memview = (struct __pyx_memoryview_obj *) Py_None;

	mov	QWORD PTR [rcx], rax

; 26534:         goto __pyx_fail;
; 26535:     return result;

	mov	rax, rcx

; 26539:     return result;
; 26540: }

	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN2@Pyx_PyObje@6:

; 26527:         return result;
; 26528:     }
; 26529:     retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
; 26530:                                                  PyBUF_RECORDS, 1,
; 26531:                                                  &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, stack,
; 26532:                                                  &result, obj);

	mov	QWORD PTR [rsp+56], rdx
	mov	QWORD PTR [rsp+48], rcx
	xor	edx, edx
	lea	rax, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR axes_specs$[rsp]
	lea	r9d, QWORD PTR [rdx+1]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	r8d, QWORD PTR [rdx+29]
	mov	QWORD PTR [rsp+32], rax
	call	__Pyx_ValidateAndInit_memviewslice

; 26533:     if (unlikely(retcode == -1))

	cmp	eax, -1
	jne	SHORT $LN1@Pyx_PyObje@6

; 26536: __pyx_fail:
; 26537:     result.memview = NULL;

	mov	QWORD PTR [rbx], rdi

; 26538:     result.data = NULL;

	mov	QWORD PTR [rbx+8], rdi
$__pyx_fail$34489:
$LN1@Pyx_PyObje@6:

; 26534:         goto __pyx_fail;
; 26535:     return result;

	mov	rax, rbx

; 26539:     return result;
; 26540: }

	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
EXTRN	__imp_PyFloat_AsDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_8rsrpsinr_1degree_to_rad DD imagerel __pyx_pw_8rsrpsinr_1degree_to_rad
	DD	imagerel __pyx_pw_8rsrpsinr_1degree_to_rad+188
	DD	imagerel $unwind$__pyx_pw_8rsrpsinr_1degree_to_rad
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_8rsrpsinr_1degree_to_rad DD 031001H
	DD	026810H
	DD	06204H
xdata	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pw_8rsrpsinr_1degree_to_rad
_TEXT	SEGMENT
__pyx_self$ = 64
__pyx_arg_d$ = 72
__pyx_pw_8rsrpsinr_1degree_to_rad PROC			; COMDAT

; 2481 : static PyObject *__pyx_pw_8rsrpsinr_1degree_to_rad(PyObject *__pyx_self, PyObject *__pyx_arg_d) {

	sub	rsp, 56					; 00000038H

; 2482 :   double __pyx_v_d;
; 2483 :   PyObject *__pyx_r = 0;
; 2484 :   __Pyx_RefNannyDeclarations
; 2485 :   __Pyx_RefNannySetupContext("degree_to_rad (wrapper)", 0);
; 2486 :   assert(__pyx_arg_d); {
; 2487 :     __pyx_v_d = __pyx_PyFloat_AsDouble(__pyx_arg_d); if (unlikely((__pyx_v_d == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 22, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	movaps	XMMWORD PTR [rsp+32], xmm6
	cmp	QWORD PTR [rdx+8], rax
	jne	SHORT $LN4@pyx_pw_8rs
	movsdx	xmm6, QWORD PTR [rdx+16]
	jmp	SHORT $LN5@pyx_pw_8rs
$LN4@pyx_pw_8rs:
	mov	rcx, rdx
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm6, xmm0
$LN5@pyx_pw_8rs:
	ucomisd	xmm6, QWORD PTR __real@bff0000000000000
	jp	SHORT $__pyx_L4_argument_unpacking_done$14398
	jne	SHORT $__pyx_L4_argument_unpacking_done$14398
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$14398
	mov	DWORD PTR __pyx_lineno, 22
	mov	DWORD PTR __pyx_clineno, 2487		; 000009b7H

; 2488 :   }
; 2489 :   goto __pyx_L4_argument_unpacking_done;
; 2490 :   __pyx_L3_error:;
; 2491 :   __Pyx_AddTraceback("rsrpsinr.degree_to_rad", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	edx, 2487				; 000009b7H
	mov	r8d, 22
$__pyx_L3_error$14397:

; 2492 :   __Pyx_RefNannyFinishContext();
; 2493 :   return NULL;

	jmp	SHORT $LN29@pyx_pw_8rs
$__pyx_L4_argument_unpacking_done$14398:

; 2494 :   __pyx_L4_argument_unpacking_done:;
; 2495 :   __pyx_r = __pyx_pf_8rsrpsinr_degree_to_rad(__pyx_self, ((double)__pyx_v_d));

	movsdx	xmm0, QWORD PTR __pyx_v_8rsrpsinr_pi180
	mulsd	xmm0, xmm6
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $__pyx_L0$40947
	mov	DWORD PTR __pyx_lineno, 23
	mov	DWORD PTR __pyx_clineno, 2516		; 000009d4H
	mov	edx, 2516				; 000009d4H
	lea	r8d, QWORD PTR [rax+23]
$__pyx_L1_error$40946:
$LN29@pyx_pw_8rs:
	mov	r9, QWORD PTR __pyx_f
	lea	rcx, OFFSET FLAT:??_C@_0BH@HPIBJOGJ@rsrpsinr?4degree_to_rad?$AA@
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback
	xor	eax, eax
$__pyx_L0$40947:

; 2496 : 
; 2497 :   /* function exit code */
; 2498 :   __Pyx_RefNannyFinishContext();
; 2499 :   return __pyx_r;
; 2500 : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	add	rsp, 56					; 00000038H
	ret	0
__pyx_pw_8rsrpsinr_1degree_to_rad ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_8rsrpsinr_3rad_to_degree DD imagerel __pyx_pw_8rsrpsinr_3rad_to_degree
	DD	imagerel __pyx_pw_8rsrpsinr_3rad_to_degree+188
	DD	imagerel $unwind$__pyx_pw_8rsrpsinr_3rad_to_degree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_8rsrpsinr_3rad_to_degree DD 031001H
	DD	026810H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_8rsrpsinr_3rad_to_degree
_TEXT	SEGMENT
__pyx_self$ = 64
__pyx_arg_d$ = 72
__pyx_pw_8rsrpsinr_3rad_to_degree PROC			; COMDAT

; 2552 : static PyObject *__pyx_pw_8rsrpsinr_3rad_to_degree(PyObject *__pyx_self, PyObject *__pyx_arg_d) {

	sub	rsp, 56					; 00000038H

; 2553 :   double __pyx_v_d;
; 2554 :   PyObject *__pyx_r = 0;
; 2555 :   __Pyx_RefNannyDeclarations
; 2556 :   __Pyx_RefNannySetupContext("rad_to_degree (wrapper)", 0);
; 2557 :   assert(__pyx_arg_d); {
; 2558 :     __pyx_v_d = __pyx_PyFloat_AsDouble(__pyx_arg_d); if (unlikely((__pyx_v_d == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	movaps	XMMWORD PTR [rsp+32], xmm6
	cmp	QWORD PTR [rdx+8], rax
	jne	SHORT $LN4@pyx_pw_8rs@2
	movsdx	xmm6, QWORD PTR [rdx+16]
	jmp	SHORT $LN5@pyx_pw_8rs@2
$LN4@pyx_pw_8rs@2:
	mov	rcx, rdx
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm6, xmm0
$LN5@pyx_pw_8rs@2:
	ucomisd	xmm6, QWORD PTR __real@bff0000000000000
	jp	SHORT $__pyx_L4_argument_unpacking_done$14468
	jne	SHORT $__pyx_L4_argument_unpacking_done$14468
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$14468
	mov	DWORD PTR __pyx_lineno, 25
	mov	DWORD PTR __pyx_clineno, 2558		; 000009feH

; 2559 :   }
; 2560 :   goto __pyx_L4_argument_unpacking_done;
; 2561 :   __pyx_L3_error:;
; 2562 :   __Pyx_AddTraceback("rsrpsinr.rad_to_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	edx, 2558				; 000009feH
	mov	r8d, 25
$__pyx_L3_error$14467:

; 2563 :   __Pyx_RefNannyFinishContext();
; 2564 :   return NULL;

	jmp	SHORT $LN29@pyx_pw_8rs@2
$__pyx_L4_argument_unpacking_done$14468:

; 2565 :   __pyx_L4_argument_unpacking_done:;
; 2566 :   __pyx_r = __pyx_pf_8rsrpsinr_2rad_to_degree(__pyx_self, ((double)__pyx_v_d));

	divsd	xmm6, QWORD PTR __pyx_v_8rsrpsinr_pi180
	movapd	xmm0, xmm6
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $__pyx_L0$40994
	mov	DWORD PTR __pyx_lineno, 26
	mov	DWORD PTR __pyx_clineno, 2587		; 00000a1bH
	mov	edx, 2587				; 00000a1bH
	lea	r8d, QWORD PTR [rax+26]
$__pyx_L1_error$40993:
$LN29@pyx_pw_8rs@2:
	mov	r9, QWORD PTR __pyx_f
	lea	rcx, OFFSET FLAT:??_C@_0BH@PJKCGDP@rsrpsinr?4rad_to_degree?$AA@
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback
	xor	eax, eax
$__pyx_L0$40994:

; 2567 : 
; 2568 :   /* function exit code */
; 2569 :   __Pyx_RefNannyFinishContext();
; 2570 :   return __pyx_r;
; 2571 : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	add	rsp, 56					; 00000038H
	ret	0
__pyx_pw_8rsrpsinr_3rad_to_degree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_f_8rsrpsinr_antenna_h_rad
_TEXT	SEGMENT
__pyx_v_angle$ = 8
__pyx_f_8rsrpsinr_antenna_h_rad PROC			; COMDAT

; 2859 :   double __pyx_v_d;
; 2860 :   double __pyx_r;
; 2861 :   __Pyx_RefNannyDeclarations
; 2862 :   __Pyx_RefNannySetupContext("antenna_h_rad", 0);
; 2863 : 
; 2864 :   /* "rsrpsinr.pyx":46
; 2865 :  *     @return dB
; 2866 :  *     """
; 2867 :  *     cdef double d = angle/pi180             # <<<<<<<<<<<<<<
; 2868 :  *     return antenna_h_deg(d)
; 2869 :  * 
; 2870 :  */
; 2871 :   __pyx_v_d = (__pyx_v_angle / __pyx_v_8rsrpsinr_pi180);

	divsd	xmm0, QWORD PTR __pyx_v_8rsrpsinr_pi180
$__pyx_L0$14659:

; 2872 : 
; 2873 :   /* "rsrpsinr.pyx":47
; 2874 :  *     """
; 2875 :  *     cdef double d = angle/pi180
; 2876 :  *     return antenna_h_deg(d)             # <<<<<<<<<<<<<<
; 2877 :  * 
; 2878 :  * 
; 2879 :  */
; 2880 :   __pyx_r = __pyx_f_8rsrpsinr_antenna_h_deg(__pyx_v_d);
; 2881 :   goto __pyx_L0;
; 2882 : 
; 2883 :   /* "rsrpsinr.pyx":41
; 2884 :  *     avv = vv #.copy()
; 2885 :  * 
; 2886 :  * cdef inline double antenna_h_rad(double angle):             # <<<<<<<<<<<<<<
; 2887 :  *     """
; 2888 :  *     @param angle: 0~2$\pi$
; 2889 :  */
; 2890 : 
; 2891 :   /* function exit code */
; 2892 :   __pyx_L0:;
; 2893 :   __Pyx_RefNannyFinishContext();
; 2894 :   return __pyx_r;
; 2895 : }

	jmp	__pyx_f_8rsrpsinr_antenna_h_deg
__pyx_f_8rsrpsinr_antenna_h_rad ENDP
_TEXT	ENDS
PUBLIC	__real@4066800000000000
_BSS	SEGMENT
__pyx_v_8rsrpsinr_pi DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_antenna_v_rad
_TEXT	SEGMENT
__pyx_v_angle$ = 8
__pyx_f_8rsrpsinr_antenna_v_rad PROC			; COMDAT

; 2981 :   double __pyx_v_d;
; 2982 :   double __pyx_r;
; 2983 :   __Pyx_RefNannyDeclarations
; 2984 :   __Pyx_RefNannySetupContext("antenna_v_rad", 0);
; 2985 : 
; 2986 :   /* "rsrpsinr.pyx":66
; 2987 :  *     @return dB
; 2988 :  *     """
; 2989 :  *     cdef double d = angle/pi*180             # <<<<<<<<<<<<<<
; 2990 :  *     return antenna_v_deg(d)
; 2991 :  * 
; 2992 :  */
; 2993 :   __pyx_v_d = ((__pyx_v_angle / __pyx_v_8rsrpsinr_pi) * 180.0);

	divsd	xmm0, QWORD PTR __pyx_v_8rsrpsinr_pi
$__pyx_L0$14682:
	mulsd	xmm0, QWORD PTR __real@4066800000000000

; 2994 : 
; 2995 :   /* "rsrpsinr.pyx":67
; 2996 :  *     """
; 2997 :  *     cdef double d = angle/pi*180
; 2998 :  *     return antenna_v_deg(d)             # <<<<<<<<<<<<<<
; 2999 :  * 
; 3000 :  * 
; 3001 :  */
; 3002 :   __pyx_r = __pyx_f_8rsrpsinr_antenna_v_deg(__pyx_v_d);
; 3003 :   goto __pyx_L0;
; 3004 : 
; 3005 :   /* "rsrpsinr.pyx":61
; 3006 :  *     return ahv[i]*(1-f) + ahv[i+1]*f
; 3007 :  * 
; 3008 :  * cdef inline double antenna_v_rad(double angle):             # <<<<<<<<<<<<<<
; 3009 :  *     """
; 3010 :  *     @param angle: 0~2$\pi$
; 3011 :  */
; 3012 : 
; 3013 :   /* function exit code */
; 3014 :   __pyx_L0:;
; 3015 :   __Pyx_RefNannyFinishContext();
; 3016 :   return __pyx_r;
; 3017 : }

	jmp	__pyx_f_8rsrpsinr_antenna_v_deg
__pyx_f_8rsrpsinr_antenna_v_rad ENDP
_TEXT	ENDS
PUBLIC	__mask@@AbsDouble@
PUBLIC	__real@4000000000000000
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_8rsrpsinr_cgain DD imagerel __pyx_f_8rsrpsinr_cgain
	DD	imagerel __pyx_f_8rsrpsinr_cgain+358
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_cgain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_8rsrpsinr_cgain DD 0104501H
	DD	02c845H
	DD	03b840H
	DD	04a829H
	DD	059824H
	DD	06881fH
	DD	07781aH
	DD	08680eH
	DD	013010aH
xdata	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_cgain
_TEXT	SEGMENT
__pyx_v_alpha$ = 160
__pyx_v_beta$ = 168
__pyx_f_8rsrpsinr_cgain PROC				; COMDAT

; 3102 : static CYTHON_INLINE double __pyx_f_8rsrpsinr_cgain(double __pyx_v_alpha, double __pyx_v_beta) {

	mov	rax, rsp
	sub	rsp, 152				; 00000098H
	movaps	XMMWORD PTR [rax-24], xmm6

; 3103 :   double __pyx_v_f;
; 3104 :   double __pyx_v_C1;
; 3105 :   double __pyx_v_C2;
; 3106 :   double __pyx_r;
; 3107 :   __Pyx_RefNannyDeclarations
; 3108 :   int __pyx_t_1;
; 3109 :   __Pyx_RefNannySetupContext("cgain", 0);
; 3110 : 
; 3111 :   /* "rsrpsinr.pyx":83
; 3112 :  * cdef inline double cgain(double alpha, double beta):
; 3113 :  *     ## alpha --> [-pi, pi]
; 3114 :  *     alpha -= floor(alpha/(2*pi)) * 2 * pi             # <<<<<<<<<<<<<<
; 3115 :  *     if alpha > pi:
; 3116 :  *         alpha = alpha - 2 * pi
; 3117 :  */
; 3118 :   __pyx_v_alpha = (__pyx_v_alpha - ((floor((__pyx_v_alpha / (2.0 * __pyx_v_8rsrpsinr_pi))) * 2.0) * __pyx_v_8rsrpsinr_pi));

	movsdx	xmm6, QWORD PTR __real@4000000000000000
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movsdx	xmm8, QWORD PTR __pyx_v_8rsrpsinr_pi
	movapd	xmm7, xmm8
	mulsd	xmm7, xmm6
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movapd	xmm11, xmm0
	divsd	xmm0, xmm7
	movapd	xmm12, xmm1
	call	floor
	mulsd	xmm0, xmm6
	mulsd	xmm0, xmm8
	subsd	xmm11, xmm0

; 3119 : 
; 3120 :   /* "rsrpsinr.pyx":84
; 3121 :  *     ## alpha --> [-pi, pi]
; 3122 :  *     alpha -= floor(alpha/(2*pi)) * 2 * pi
; 3123 :  *     if alpha > pi:             # <<<<<<<<<<<<<<
; 3124 :  *         alpha = alpha - 2 * pi
; 3125 :  *     cdef double f  = fabs(alpha) / pi
; 3126 :  */
; 3127 :   __pyx_t_1 = ((__pyx_v_alpha > __pyx_v_8rsrpsinr_pi) != 0);

	comisd	xmm11, xmm8
	jbe	SHORT $LN1@pyx_f_8rsr@4

; 3128 :   if (__pyx_t_1) {
; 3129 : 
; 3130 :     /* "rsrpsinr.pyx":85
; 3131 :  *     alpha -= floor(alpha/(2*pi)) * 2 * pi
; 3132 :  *     if alpha > pi:
; 3133 :  *         alpha = alpha - 2 * pi             # <<<<<<<<<<<<<<
; 3134 :  *     cdef double f  = fabs(alpha) / pi
; 3135 :  *     cdef double C1 = f * ( antenna_h_rad(pi) - antenna_v_rad(pi-beta) )
; 3136 :  */
; 3137 :     __pyx_v_alpha = (__pyx_v_alpha - (2.0 * __pyx_v_8rsrpsinr_pi));

	subsd	xmm11, xmm7
$LN1@pyx_f_8rsr@4:

; 3138 : 
; 3139 :     /* "rsrpsinr.pyx":84
; 3140 :  *     ## alpha --> [-pi, pi]
; 3141 :  *     alpha -= floor(alpha/(2*pi)) * 2 * pi
; 3142 :  *     if alpha > pi:             # <<<<<<<<<<<<<<
; 3143 :  *         alpha = alpha - 2 * pi
; 3144 :  *     cdef double f  = fabs(alpha) / pi
; 3145 :  */
; 3146 :   }
; 3147 : 
; 3148 :   /* "rsrpsinr.pyx":86
; 3149 :  *     if alpha > pi:
; 3150 :  *         alpha = alpha - 2 * pi
; 3151 :  *     cdef double f  = fabs(alpha) / pi             # <<<<<<<<<<<<<<
; 3152 :  *     cdef double C1 = f * ( antenna_h_rad(pi) - antenna_v_rad(pi-beta) )
; 3153 :  *     cdef double C2 = (1-f) * ( antenna_h_rad(0) - antenna_v_rad(beta) )
; 3154 :  */
; 3155 :   __pyx_v_f = (fabs(__pyx_v_alpha) / __pyx_v_8rsrpsinr_pi);

	movapd	xmm10, xmm11
	andpd	xmm10, QWORD PTR __mask@@AbsDouble@
	divsd	xmm10, xmm8

; 3156 : 
; 3157 :   /* "rsrpsinr.pyx":87
; 3158 :  *         alpha = alpha - 2 * pi
; 3159 :  *     cdef double f  = fabs(alpha) / pi
; 3160 :  *     cdef double C1 = f * ( antenna_h_rad(pi) - antenna_v_rad(pi-beta) )             # <<<<<<<<<<<<<<
; 3161 :  *     cdef double C2 = (1-f) * ( antenna_h_rad(0) - antenna_v_rad(beta) )
; 3162 :  *     return antenna_h_rad(alpha) - C1 - C2
; 3163 :  */
; 3164 :   __pyx_v_C1 = (__pyx_v_f * (__pyx_f_8rsrpsinr_antenna_h_rad(__pyx_v_8rsrpsinr_pi) - __pyx_f_8rsrpsinr_antenna_v_rad((__pyx_v_8rsrpsinr_pi - __pyx_v_beta))));

	divsd	xmm8, QWORD PTR __pyx_v_8rsrpsinr_pi180
	movapd	xmm0, xmm8
	call	__pyx_f_8rsrpsinr_antenna_h_deg
	movsdx	xmm1, QWORD PTR __pyx_v_8rsrpsinr_pi
	movsdx	xmm6, QWORD PTR __real@4066800000000000
$__pyx_L0$41040:
	movapd	xmm9, xmm0
	movapd	xmm0, xmm1
	subsd	xmm0, xmm12
	divsd	xmm0, xmm1
	mulsd	xmm0, xmm6
	call	__pyx_f_8rsrpsinr_antenna_v_deg
$__pyx_L0$41047:
	movapd	xmm7, xmm0

; 3165 : 
; 3166 :   /* "rsrpsinr.pyx":88
; 3167 :  *     cdef double f  = fabs(alpha) / pi
; 3168 :  *     cdef double C1 = f * ( antenna_h_rad(pi) - antenna_v_rad(pi-beta) )
; 3169 :  *     cdef double C2 = (1-f) * ( antenna_h_rad(0) - antenna_v_rad(beta) )             # <<<<<<<<<<<<<<
; 3170 :  *     return antenna_h_rad(alpha) - C1 - C2
; 3171 :  * 
; 3172 :  */
; 3173 :   __pyx_v_C2 = ((1.0 - __pyx_v_f) * (__pyx_f_8rsrpsinr_antenna_h_rad(0.0) - __pyx_f_8rsrpsinr_antenna_v_rad(__pyx_v_beta)));

	xorpd	xmm0, xmm0
	divsd	xmm0, QWORD PTR __pyx_v_8rsrpsinr_pi180
	call	__pyx_f_8rsrpsinr_antenna_h_deg
	divsd	xmm12, QWORD PTR __pyx_v_8rsrpsinr_pi
$__pyx_L0$41054:
	movapd	xmm8, xmm0
	mulsd	xmm12, xmm6
	movapd	xmm0, xmm12
	call	__pyx_f_8rsrpsinr_antenna_v_deg

; 3174 : 
; 3175 :   /* "rsrpsinr.pyx":89
; 3176 :  *     cdef double C1 = f * ( antenna_h_rad(pi) - antenna_v_rad(pi-beta) )
; 3177 :  *     cdef double C2 = (1-f) * ( antenna_h_rad(0) - antenna_v_rad(beta) )
; 3178 :  *     return antenna_h_rad(alpha) - C1 - C2             # <<<<<<<<<<<<<<
; 3179 :  * 
; 3180 :  * cdef inline double loss(double d, double hB, double hR, double f, double C=3):
; 3181 :  */
; 3182 :   __pyx_r = ((__pyx_f_8rsrpsinr_antenna_h_rad(__pyx_v_alpha) - __pyx_v_C1) - __pyx_v_C2);

	divsd	xmm11, QWORD PTR __pyx_v_8rsrpsinr_pi180
$__pyx_L0$41060:
$__pyx_L0$41066:
$__pyx_L0$14711:
	movapd	xmm6, xmm0
	movapd	xmm0, xmm11
	call	__pyx_f_8rsrpsinr_antenna_h_deg
	movsdx	xmm1, QWORD PTR __real@3ff0000000000000

; 3183 :   goto __pyx_L0;
; 3184 : 
; 3185 :   /* "rsrpsinr.pyx":81
; 3186 :  *     return avv[i]*(1-f) + avv[i+1]*f
; 3187 :  * 
; 3188 :  * cdef inline double cgain(double alpha, double beta):             # <<<<<<<<<<<<<<
; 3189 :  *     ## alpha --> [-pi, pi]
; 3190 :  *     alpha -= floor(alpha/(2*pi)) * 2 * pi
; 3191 :  */
; 3192 : 
; 3193 :   /* function exit code */
; 3194 :   __pyx_L0:;
; 3195 :   __Pyx_RefNannyFinishContext();
; 3196 :   return __pyx_r;
; 3197 : }

	lea	r11, QWORD PTR [rsp+152]
	subsd	xmm9, xmm7
	subsd	xmm8, xmm6
	subsd	xmm1, xmm10
	movaps	xmm7, XMMWORD PTR [rsp+112]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm12, XMMWORD PTR [r11-120]
	mulsd	xmm9, xmm10
	mulsd	xmm8, xmm1
	subsd	xmm0, xmm9
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	subsd	xmm0, xmm8
	movaps	xmm8, XMMWORD PTR [r11-56]
	mov	rsp, r11
	ret	0
__pyx_f_8rsrpsinr_cgain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_8rsrpsinr_6gain DD imagerel __pyx_pf_8rsrpsinr_6gain
	DD	imagerel __pyx_pf_8rsrpsinr_6gain+92
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_6gain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_8rsrpsinr_6gain DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@
CONST	SEGMENT
??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@ DB 'rsrpsinr.gain', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_8rsrpsinr_6gain
_TEXT	SEGMENT
__pyx_self$ = 48
__pyx_v_alpha$ = 56
__pyx_v_beta$ = 64
__pyx_pf_8rsrpsinr_6gain PROC				; COMDAT

; 4967 : static PyObject *__pyx_pf_8rsrpsinr_6gain(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_alpha, double __pyx_v_beta) {

	sub	rsp, 40					; 00000028H
	movapd	xmm0, xmm1

; 4968 :   PyObject *__pyx_r = NULL;
; 4969 :   __Pyx_RefNannyDeclarations
; 4970 :   PyObject *__pyx_t_1 = NULL;
; 4971 :   __Pyx_RefNannySetupContext("gain", 0);
; 4972 : 
; 4973 :   /* "rsrpsinr.pyx":239
; 4974 :  * """
; 4975 :  * def gain(double alpha, double beta):
; 4976 :  *     return cgain(alpha, beta)             # <<<<<<<<<<<<<<
; 4977 :  * 
; 4978 :  * def get_coverage(
; 4979 :  */
; 4980 :   __Pyx_XDECREF(__pyx_r);
; 4981 :   __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8rsrpsinr_cgain(__pyx_v_alpha, __pyx_v_beta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)

	movapd	xmm1, xmm2
	call	__pyx_f_8rsrpsinr_cgain
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $__pyx_L0$16696
	mov	r9, QWORD PTR __pyx_f

; 4982 :   __Pyx_GOTREF(__pyx_t_1);
; 4983 :   __pyx_r = __pyx_t_1;
; 4984 :   __pyx_t_1 = 0;
; 4985 :   goto __pyx_L0;
; 4986 : 
; 4987 :   /* "rsrpsinr.pyx":238
; 4988 :  * Interface
; 4989 :  * """
; 4990 :  * def gain(double alpha, double beta):             # <<<<<<<<<<<<<<
; 4991 :  *     return cgain(alpha, beta)
; 4992 :  * 
; 4993 :  */
; 4994 : 
; 4995 :   /* function exit code */
; 4996 :   __pyx_L1_error:;
; 4997 :   __Pyx_XDECREF(__pyx_t_1);
; 4998 :   __Pyx_AddTraceback("rsrpsinr.gain", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@
	mov	edx, 4981				; 00001375H
	mov	r8d, 239				; 000000efH
	mov	DWORD PTR __pyx_lineno, 239		; 000000efH
	mov	DWORD PTR __pyx_clineno, 4981		; 00001375H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$16695:
	call	__Pyx_AddTraceback

; 4999 :   __pyx_r = NULL;
; 5000 :   __pyx_L0:;
; 5001 :   __Pyx_XGIVEREF(__pyx_r);
; 5002 :   __Pyx_RefNannyFinishContext();
; 5003 :   return __pyx_r;

	xor	eax, eax
$__pyx_L0$16696:

; 5004 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf_8rsrpsinr_6gain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@MEAEJAPM@numpy?4_util_dtypestring?$AA@ ; `string'
PUBLIC	??_C@_05NNMEHDAO@tuple?$AA@			; `string'
EXTRN	__imp_PyNumber_Subtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_5numpy__util_dtypestring DD imagerel __pyx_f_5numpy__util_dtypestring
	DD	imagerel __pyx_f_5numpy__util_dtypestring+7567
	DD	imagerel $unwind$__pyx_f_5numpy__util_dtypestring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_5numpy__util_dtypestring DD 061f01H
	DD	021011fH
	DD	060177018H
	DD	030155016H
xdata	ENDS
;	COMDAT ??_C@_0BI@MEAEJAPM@numpy?4_util_dtypestring?$AA@
CONST	SEGMENT
??_C@_0BI@MEAEJAPM@numpy?4_util_dtypestring?$AA@ DB 'numpy._util_dtypestr'
	DB	'ing', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMEHDAO@tuple?$AA@
CONST	SEGMENT
??_C@_05NNMEHDAO@tuple?$AA@ DB 'tuple', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_5numpy__util_dtypestring
_TEXT	SEGMENT
__pyx_v_t$1$ = 32
__pyx_v_child$1$ = 40
__pyx_v_new_offset$1$ = 48
__pyx_v_childname$1$ = 56
__pyx_v_fields$1$ = 64
$T41154 = 72
__pyx_t_1$1$ = 80
$T41418 = 88
$T41498 = 96
$T41318 = 104
$T41518 = 112
$T41358 = 120
$T41538 = 128
$T41398 = 136
$T41180 = 144
$T41438 = 152
$T41200 = 160
$T41478 = 168
$T41226 = 176
$T41378 = 184
$T41252 = 192
$T41458 = 200
$T41278 = 208
$T41134 = 216
$T41298 = 224
$T41338 = 232
__pyx_t_2$1$ = 240
__pyx_v_descr$ = 304
__pyx_v_f$ = 312
__pyx_v_end$ = 320
__pyx_v_offset$ = 328
__pyx_f_5numpy__util_dtypestring PROC			; COMDAT

; 6557 : static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H

; 6558 :   PyArray_Descr *__pyx_v_child = 0;

	xor	ebp, ebp
	mov	r9, rcx

; 6559 :   int __pyx_v_endian_detector;
; 6560 :   int __pyx_v_little_endian;
; 6561 :   PyObject *__pyx_v_fields = 0;
; 6562 :   PyObject *__pyx_v_childname = NULL;
; 6563 :   PyObject *__pyx_v_new_offset = NULL;
; 6564 :   PyObject *__pyx_v_t = NULL;
; 6565 :   char *__pyx_r;
; 6566 :   __Pyx_RefNannyDeclarations
; 6567 :   PyObject *__pyx_t_1 = NULL;
; 6568 :   Py_ssize_t __pyx_t_2;
; 6569 :   PyObject *__pyx_t_3 = NULL;
; 6570 :   PyObject *__pyx_t_4 = NULL;
; 6571 :   int __pyx_t_5;
; 6572 :   int __pyx_t_6;
; 6573 :   int __pyx_t_7;
; 6574 :   long __pyx_t_8;
; 6575 :   char *__pyx_t_9;
; 6576 :   __Pyx_RefNannySetupContext("_util_dtypestring", 0);
; 6577 : 
; 6578 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":814
; 6579 :  * 
; 6580 :  *     cdef dtype child
; 6581 :  *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
; 6582 :  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
; 6583 :  *     cdef tuple fields
; 6584 :  */
; 6585 :   __pyx_v_endian_detector = 1;
; 6586 : 
; 6587 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
; 6588 :  *     cdef dtype child
; 6589 :  *     cdef int endian_detector = 1
; 6590 :  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
; 6591 :  *     cdef tuple fields
; 6592 :  * 
; 6593 :  */
; 6594 :   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
; 6595 : 
; 6596 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
; 6597 :  *     cdef tuple fields
; 6598 :  * 
; 6599 :  *     for childname in descr.names:             # <<<<<<<<<<<<<<
; 6600 :  *         fields = descr.fields[childname]
; 6601 :  *         child, new_offset = fields
; 6602 :  */
; 6603 :   if (unlikely(__pyx_v_descr->names == Py_None)) {

	mov	rcx, QWORD PTR [rcx+56]
	mov	rbx, rbp
	mov	QWORD PTR __pyx_v_fields$1$[rsp], rbp
	mov	r8, rbp
	mov	QWORD PTR __pyx_v_childname$1$[rsp], rbp
	mov	QWORD PTR __pyx_v_new_offset$1$[rsp], rbp
	mov	rsi, rbp
	mov	QWORD PTR __pyx_v_child$1$[rsp], rbx
	mov	QWORD PTR __pyx_v_t$1$[rsp], rbp
	mov	rdi, rbp
	mov	QWORD PTR __pyx_t_1$1$[rsp], rcx
	cmp	rcx, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN475@pyx_f_5num

; 6604 :     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 6605 :     __PYX_ERR(1, 818, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 818		; 00000332H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 6605		; 000019cdH
	jmp	$LN53@pyx_f_5num
$LN475@pyx_f_5num:

; 6606 :   }
; 6607 :   __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

	inc	QWORD PTR [rcx]
	mov	rdx, rbp

; 6608 :   for (;;) {
; 6609 :     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

	cmp	QWORD PTR [rcx+16], rdx
	jle	$LN85@pyx_f_5num
	npad	7
$LL474@pyx_f_5num:

; 6610 :     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 6611 :     __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 818, __pyx_L1_error)

	mov	rax, QWORD PTR [rcx+rdx*8+24]
	inc	rdx

; 6612 :     #else
; 6613 :     __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 818, __pyx_L1_error)
; 6614 :     __Pyx_GOTREF(__pyx_t_3);
; 6615 :     #endif
; 6616 :     __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);

	mov	rcx, r8
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_t_2$1$[rsp], rdx
	mov	QWORD PTR __pyx_v_childname$1$[rsp], rax
	test	r8, r8
	je	SHORT $LN460@pyx_f_5num
	add	QWORD PTR [r8], -1
	jne	SHORT $LN460@pyx_f_5num
	mov	rax, QWORD PTR [r8+8]
	call	QWORD PTR [rax+48]
	mov	rax, QWORD PTR __pyx_v_childname$1$[rsp]
	mov	r9, QWORD PTR __pyx_v_descr$[rsp]
$LN460@pyx_f_5num:

; 6617 :     __pyx_t_3 = 0;
; 6618 : 
; 6619 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
; 6620 :  * 
; 6621 :  *     for childname in descr.names:
; 6622 :  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
; 6623 :  *         child, new_offset = fields
; 6624 :  * 
; 6625 :  */
; 6626 :     if (unlikely(__pyx_v_descr->fields == Py_None)) {

	mov	rcx, QWORD PTR [r9+48]
	mov	rbx, rbp
	cmp	rcx, QWORD PTR __imp__Py_NoneStruct
	je	$LN746@pyx_f_5num

; 6629 :     }
; 6630 :     __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 819, __pyx_L1_error)

	mov	rdx, rax
	call	QWORD PTR __imp_PyObject_GetItem
	mov	rbx, rax
	test	rax, rax
	je	$LN747@pyx_f_5num

; 6631 :     __Pyx_GOTREF(__pyx_t_3);
; 6632 :     if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 819, __pyx_L1_error)

	mov	rax, QWORD PTR __imp_PyTuple_Type
	mov	rdx, QWORD PTR __imp__Py_NoneStruct
	cmp	QWORD PTR [rbx+8], rax
	je	SHORT $LN454@pyx_f_5num
	cmp	rbx, rdx
	jne	$LN748@pyx_f_5num
$LN454@pyx_f_5num:

; 6633 :     __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));

	mov	rcx, QWORD PTR __pyx_v_fields$1$[rsp]
	mov	rax, rbx
	mov	QWORD PTR __pyx_v_fields$1$[rsp], rbx
	test	rcx, rcx
	je	SHORT $LN444@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN445@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
	mov	rax, rbx
$LN445@pyx_f_5num:
	mov	rdx, QWORD PTR __imp__Py_NoneStruct
$LN444@pyx_f_5num:

; 6634 :     __pyx_t_3 = 0;

	mov	rbx, rbp

; 6635 : 
; 6636 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":820
; 6637 :  *     for childname in descr.names:
; 6638 :  *         fields = descr.fields[childname]
; 6639 :  *         child, new_offset = fields             # <<<<<<<<<<<<<<
; 6640 :  * 
; 6641 :  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
; 6642 :  */
; 6643 :     if (likely(__pyx_v_fields != Py_None)) {

	cmp	rax, rdx
	je	$LN441@pyx_f_5num

; 6644 :       PyObject* sequence = __pyx_v_fields;
; 6645 :       #if !CYTHON_COMPILING_IN_PYPY
; 6646 :       Py_ssize_t size = Py_SIZE(sequence);

	mov	rcx, QWORD PTR [rax+16]

; 6647 :       #else
; 6648 :       Py_ssize_t size = PySequence_Size(sequence);
; 6649 :       #endif
; 6650 :       if (unlikely(size != 2)) {

	cmp	rcx, 2
	jne	$LN817@pyx_f_5num

; 6654 :       }
; 6655 :       #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 6656 :       __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

	mov	rbx, QWORD PTR [rax+24]

; 6657 :       __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

	mov	rdi, QWORD PTR [rax+32]

; 6658 :       __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [rbx]

; 6659 :       __Pyx_INCREF(__pyx_t_4);

	inc	QWORD PTR [rdi]

; 6668 :     }
; 6669 :     if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 820, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN434@pyx_f_5num
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_dtype
	mov	rcx, rbx
	call	__Pyx_TypeTest
	test	eax, eax
	je	$LN750@pyx_f_5num
$LN434@pyx_f_5num:

; 6670 :     __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));

	mov	rax, QWORD PTR __pyx_v_child$1$[rsp]
	mov	QWORD PTR __pyx_v_child$1$[rsp], rbx
	mov	rcx, rax
	test	rax, rax
	je	SHORT $LN424@pyx_f_5num
	add	QWORD PTR [rax], -1
	jne	SHORT $LN424@pyx_f_5num
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$LN424@pyx_f_5num:

; 6671 :     __pyx_t_3 = 0;
; 6672 :     __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);

	mov	rcx, QWORD PTR __pyx_v_new_offset$1$[rsp]
	mov	rbx, rbp
	mov	QWORD PTR __pyx_v_new_offset$1$[rsp], rdi
	test	rcx, rcx
	je	SHORT $LN411@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN411@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN411@pyx_f_5num:

; 6673 :     __pyx_t_4 = 0;
; 6674 : 
; 6675 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
; 6676 :  *         child, new_offset = fields
; 6677 :  * 
; 6678 :  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
; 6679 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6680 :  * 
; 6681 :  */
; 6682 :     __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_v_offset$[rsp]
	mov	ecx, DWORD PTR [rax]
	mov	DWORD PTR $T41134[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rdi, rax
	test	rax, rax
	je	$LN751@pyx_f_5num

; 6683 :     __Pyx_GOTREF(__pyx_t_4);
; 6684 :     __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_v_new_offset$1$[rsp]
	mov	rdx, rax
	call	QWORD PTR __imp_PyNumber_Subtract
	mov	rbx, rax
	test	rax, rax
	je	$LN752@pyx_f_5num

; 6685 :     __Pyx_GOTREF(__pyx_t_3);
; 6686 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN405@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN405@pyx_f_5num:

; 6687 :     __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyInt_As_int
	movsxd	rsi, eax
	cmp	esi, -1
	jne	SHORT $LN400@pyx_f_5num
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN753@pyx_f_5num
$LN400@pyx_f_5num:

; 6688 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN399@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN399@pyx_f_5num:

; 6689 :     __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
; 6690 :     if (__pyx_t_6) {

	mov	rcx, QWORD PTR __pyx_v_end$[rsp]
	sub	rcx, rsi
	sub	rcx, QWORD PTR __pyx_v_f$[rsp]
	cmp	rcx, 15
	jl	$LN754@pyx_f_5num

; 6704 : 
; 6705 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
; 6706 :  *         child, new_offset = fields
; 6707 :  * 
; 6708 :  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
; 6709 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6710 :  * 
; 6711 :  */
; 6712 :     }
; 6713 : 
; 6714 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
; 6715 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6716 :  * 
; 6717 :  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 6718 :  *             (child.byteorder == c'<' and not little_endian)):
; 6719 :  *             raise ValueError(u"Non-native byte order not supported")
; 6720 :  */
; 6721 :     __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);

	mov	rax, QWORD PTR __pyx_v_child$1$[rsp]
	movzx	ecx, BYTE PTR [rax+26]
	cmp	cl, 62					; 0000003eH

; 6722 :     if (!__pyx_t_7) {

	je	$LN755@pyx_f_5num
$__pyx_L8_next_or$17860:
	mov	rax, QWORD PTR __pyx_v_offset$[rsp]
	npad	11
$LL375@pyx_f_5num:

; 6772 : 
; 6773 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
; 6774 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6775 :  * 
; 6776 :  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 6777 :  *             (child.byteorder == c'<' and not little_endian)):
; 6778 :  *             raise ValueError(u"Non-native byte order not supported")
; 6779 :  */
; 6780 :     }
; 6781 : 
; 6782 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
; 6783 :  * 
; 6784 :  *         # Output padding bytes
; 6785 :  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
; 6786 :  *             f[0] = 120 # "x"; pad byte
; 6787 :  *             f += 1
; 6788 :  */
; 6789 :     while (1) {
; 6790 :       __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)

	mov	ecx, DWORD PTR [rax]
	mov	DWORD PTR $T41154[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	je	$LN741@pyx_f_5num

; 6791 :       __Pyx_GOTREF(__pyx_t_3);
; 6792 :       __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_v_new_offset$1$[rsp]
	xor	r8d, r8d
	mov	rcx, rax
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN742@pyx_f_5num

; 6793 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN370@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN370@pyx_f_5num:

; 6794 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)

	cmp	rdi, QWORD PTR __imp__Py_TrueStruct
	mov	esi, ebp
	mov	ecx, ebp
	sete	sil
	cmp	rdi, QWORD PTR __imp__Py_ZeroStruct
	mov	eax, ebp
	sete	cl
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	mov	rbx, rbp
	sete	al
	or	ecx, eax
	or	ecx, esi
	jne	SHORT $LN506@pyx_f_5num
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	esi, eax
$LN506@pyx_f_5num:
	test	esi, esi
	js	$LN743@pyx_f_5num

; 6795 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN364@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN364@pyx_f_5num:
	mov	rdi, rbp

; 6796 :       if (!__pyx_t_6) break;

	test	esi, esi
	je	SHORT $LN744@pyx_f_5num

; 6797 : 
; 6798 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
; 6799 :  *         # Output padding bytes
; 6800 :  *         while offset[0] < new_offset:
; 6801 :  *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
; 6802 :  *             f += 1
; 6803 :  *             offset[0] += 1
; 6804 :  */
; 6805 :       (__pyx_v_f[0]) = 0x78;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 6806 : 
; 6807 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":839
; 6808 :  *         while offset[0] < new_offset:
; 6809 :  *             f[0] = 120 # "x"; pad byte
; 6810 :  *             f += 1             # <<<<<<<<<<<<<<
; 6811 :  *             offset[0] += 1
; 6812 :  * 
; 6813 :  */
; 6814 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 120			; 00000078H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 6815 : 
; 6816 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
; 6817 :  *             f[0] = 120 # "x"; pad byte
; 6818 :  *             f += 1
; 6819 :  *             offset[0] += 1             # <<<<<<<<<<<<<<
; 6820 :  * 
; 6821 :  *         offset[0] += child.itemsize
; 6822 :  */
; 6823 :       __pyx_t_8 = 0;
; 6824 :       (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);

	mov	rax, QWORD PTR __pyx_v_offset$[rsp]
	inc	DWORD PTR [rax]

; 6825 :     }

	jmp	$LL375@pyx_f_5num
$LN744@pyx_f_5num:

; 6826 : 
; 6827 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
; 6828 :  *             offset[0] += 1
; 6829 :  * 
; 6830 :  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
; 6831 :  * 
; 6832 :  *         if not PyDataType_HASFIELDS(child):
; 6833 :  */
; 6834 :     __pyx_t_8 = 0;
; 6835 :     (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

	mov	r10, QWORD PTR __pyx_v_child$1$[rsp]
	mov	rcx, QWORD PTR __pyx_v_offset$[rsp]
	mov	eax, DWORD PTR [r10+32]
	add	DWORD PTR [rcx], eax

; 6836 : 
; 6837 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 6838 :  *         offset[0] += child.itemsize
; 6839 :  * 
; 6840 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 6841 :  *             t = child.type_num
; 6842 :  *             if end - f < 5:
; 6843 :  */
; 6844 :     __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);

	cmp	QWORD PTR [r10+56], rbx

; 6845 :     if (__pyx_t_6) {

	jne	$LN359@pyx_f_5num

; 6846 : 
; 6847 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
; 6848 :  * 
; 6849 :  *         if not PyDataType_HASFIELDS(child):
; 6850 :  *             t = child.type_num             # <<<<<<<<<<<<<<
; 6851 :  *             if end - f < 5:
; 6852 :  *                 raise RuntimeError(u"Format string allocated too short.")
; 6853 :  */
; 6854 :       __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)

	mov	ecx, DWORD PTR [r10+28]
	mov	DWORD PTR $T41180[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rdi, rax
	test	rax, rax
	je	$LN756@pyx_f_5num

; 6855 :       __Pyx_GOTREF(__pyx_t_4);
; 6856 :       __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);

	mov	rcx, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rsi, rax
	mov	QWORD PTR __pyx_v_t$1$[rsp], rax
	test	rcx, rcx
	je	SHORT $LN347@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN347@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN347@pyx_f_5num:

; 6857 :       __pyx_t_4 = 0;
; 6858 : 
; 6859 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
; 6860 :  *         if not PyDataType_HASFIELDS(child):
; 6861 :  *             t = child.type_num
; 6862 :  *             if end - f < 5:             # <<<<<<<<<<<<<<
; 6863 :  *                 raise RuntimeError(u"Format string allocated too short.")
; 6864 :  * 
; 6865 :  */
; 6866 :       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);

	mov	rax, QWORD PTR __pyx_v_end$[rsp]
	sub	rax, QWORD PTR __pyx_v_f$[rsp]
	cmp	rax, 5

; 6867 :       if (__pyx_t_6) {

	jl	$LN757@pyx_f_5num

; 6881 : 
; 6882 :         /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
; 6883 :  *         if not PyDataType_HASFIELDS(child):
; 6884 :  *             t = child.type_num
; 6885 :  *             if end - f < 5:             # <<<<<<<<<<<<<<
; 6886 :  *                 raise RuntimeError(u"Format string allocated too short.")
; 6887 :  * 
; 6888 :  */
; 6889 :       }
; 6890 : 
; 6891 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":850
; 6892 :  * 
; 6893 :  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 6894 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
; 6895 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6896 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6897 :  */
; 6898 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 850, __pyx_L1_error)

	mov	ecx, 1
	mov	DWORD PTR $T41200[rsp], 1
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rdi, rax
	test	rax, rax
	je	$LN758@pyx_f_5num

; 6899 :       __Pyx_GOTREF(__pyx_t_4);
; 6900 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 850, __pyx_L1_error)

	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN759@pyx_f_5num

; 6901 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN334@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN334@pyx_f_5num:

; 6902 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 850, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_TrueStruct
	mov	esi, ebp
	mov	ecx, ebp
	sete	sil
	cmp	rbx, QWORD PTR __imp__Py_ZeroStruct
	mov	eax, ebp
	sete	cl
	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	mov	rdi, rbp
	sete	al
	or	ecx, eax
	or	ecx, esi
	jne	SHORT $LN534@pyx_f_5num
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	esi, eax
$LN534@pyx_f_5num:
	test	esi, esi
	js	$LN760@pyx_f_5num

; 6903 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN328@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN328@pyx_f_5num:

; 6904 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN324@pyx_f_5num

; 6905 :         (__pyx_v_f[0]) = 98;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 98			; 00000062H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN324@pyx_f_5num:

; 6906 :         goto __pyx_L15;
; 6907 :       }
; 6908 : 
; 6909 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
; 6910 :  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 6911 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
; 6912 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
; 6913 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6914 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6915 :  */
; 6916 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 851, __pyx_L1_error)

	mov	ecx, 2
	mov	DWORD PTR $T41226[rsp], 2
	call	QWORD PTR __imp_PyInt_FromLong

; 6917 :       __Pyx_GOTREF(__pyx_t_3);
; 6918 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 851, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN761@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN762@pyx_f_5num

; 6919 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN320@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN320@pyx_f_5num:

; 6920 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 851, __pyx_L1_error)

	cmp	rdi, QWORD PTR __imp__Py_TrueStruct
	mov	esi, ebp
	mov	ecx, ebp
	sete	sil
	cmp	rdi, QWORD PTR __imp__Py_ZeroStruct
	mov	eax, ebp
	sete	cl
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	mov	rbx, rbp
	sete	al
	or	ecx, eax
	or	ecx, esi
	jne	SHORT $LN550@pyx_f_5num
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	esi, eax
$LN550@pyx_f_5num:
	test	esi, esi
	js	$LN763@pyx_f_5num

; 6921 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN314@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN314@pyx_f_5num:
	mov	rdi, rbp

; 6922 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN310@pyx_f_5num

; 6923 :         (__pyx_v_f[0]) = 66;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 66			; 00000042H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN310@pyx_f_5num:

; 6924 :         goto __pyx_L15;
; 6925 :       }
; 6926 : 
; 6927 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
; 6928 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
; 6929 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6930 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
; 6931 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6932 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6933 :  */
; 6934 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 852, __pyx_L1_error)

	mov	ecx, 3
	mov	DWORD PTR $T41252[rsp], 3
	call	QWORD PTR __imp_PyInt_FromLong

; 6935 :       __Pyx_GOTREF(__pyx_t_4);
; 6936 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 852, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN764@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN765@pyx_f_5num

; 6937 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN306@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN306@pyx_f_5num:

; 6938 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 852, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_TrueStruct
	mov	esi, ebp
	mov	ecx, ebp
	sete	sil
	cmp	rbx, QWORD PTR __imp__Py_ZeroStruct
	mov	eax, ebp
	sete	cl
	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	mov	rdi, rbp
	sete	al
	or	ecx, eax
	or	ecx, esi
	jne	SHORT $LN566@pyx_f_5num
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	esi, eax
$LN566@pyx_f_5num:
	test	esi, esi
	js	$LN766@pyx_f_5num

; 6939 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN300@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN300@pyx_f_5num:

; 6940 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN296@pyx_f_5num

; 6941 :         (__pyx_v_f[0]) = 0x68;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 104			; 00000068H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN296@pyx_f_5num:

; 6942 :         goto __pyx_L15;
; 6943 :       }
; 6944 : 
; 6945 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
; 6946 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6947 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6948 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
; 6949 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6950 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 6951 :  */
; 6952 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	ecx, 4
	mov	DWORD PTR $T41278[rsp], 4
	call	QWORD PTR __imp_PyInt_FromLong

; 6953 :       __Pyx_GOTREF(__pyx_t_3);
; 6954 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN767@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN768@pyx_f_5num

; 6955 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN292@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN292@pyx_f_5num:

; 6956 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN769@pyx_f_5num

; 6957 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN286@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN286@pyx_f_5num:
	mov	rdi, rbp

; 6958 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN282@pyx_f_5num

; 6959 :         (__pyx_v_f[0]) = 72;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 72			; 00000048H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN282@pyx_f_5num:

; 6960 :         goto __pyx_L15;
; 6961 :       }
; 6962 : 
; 6963 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":854
; 6964 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6965 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6966 :  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
; 6967 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 6968 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 6969 :  */
; 6970 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	ecx, 5
	mov	DWORD PTR $T41298[rsp], 5
	call	QWORD PTR __imp_PyInt_FromLong

; 6971 :       __Pyx_GOTREF(__pyx_t_4);
; 6972 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN770@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN771@pyx_f_5num

; 6973 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN278@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN278@pyx_f_5num:

; 6974 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN772@pyx_f_5num

; 6975 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN272@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN272@pyx_f_5num:

; 6976 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN268@pyx_f_5num

; 6977 :         (__pyx_v_f[0]) = 0x69;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 105			; 00000069H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN268@pyx_f_5num:

; 6978 :         goto __pyx_L15;
; 6979 :       }
; 6980 : 
; 6981 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
; 6982 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6983 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6984 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
; 6985 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 6986 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 6987 :  */
; 6988 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	ecx, 6
	mov	DWORD PTR $T41318[rsp], 6
	call	QWORD PTR __imp_PyInt_FromLong

; 6989 :       __Pyx_GOTREF(__pyx_t_3);
; 6990 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN773@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN774@pyx_f_5num

; 6991 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN264@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN264@pyx_f_5num:

; 6992 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN775@pyx_f_5num

; 6993 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN258@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN258@pyx_f_5num:
	mov	rdi, rbp

; 6994 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN254@pyx_f_5num

; 6995 :         (__pyx_v_f[0]) = 73;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 73			; 00000049H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN254@pyx_f_5num:

; 6996 :         goto __pyx_L15;
; 6997 :       }
; 6998 : 
; 6999 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
; 7000 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 7001 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 7002 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
; 7003 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7004 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7005 :  */
; 7006 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	ecx, 7
	mov	DWORD PTR $T41338[rsp], 7
	call	QWORD PTR __imp_PyInt_FromLong

; 7007 :       __Pyx_GOTREF(__pyx_t_4);
; 7008 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN776@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN777@pyx_f_5num

; 7009 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN250@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN250@pyx_f_5num:

; 7010 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN778@pyx_f_5num

; 7011 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN244@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN244@pyx_f_5num:

; 7012 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN240@pyx_f_5num

; 7013 :         (__pyx_v_f[0]) = 0x6C;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 108			; 0000006cH
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN240@pyx_f_5num:

; 7014 :         goto __pyx_L15;
; 7015 :       }
; 7016 : 
; 7017 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":857
; 7018 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 7019 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 7020 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
; 7021 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7022 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7023 :  */
; 7024 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	ecx, 8
	mov	DWORD PTR $T41358[rsp], 8
	call	QWORD PTR __imp_PyInt_FromLong

; 7025 :       __Pyx_GOTREF(__pyx_t_3);
; 7026 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN779@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN780@pyx_f_5num

; 7027 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN236@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN236@pyx_f_5num:

; 7028 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN781@pyx_f_5num

; 7029 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN230@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN230@pyx_f_5num:
	mov	rdi, rbp

; 7030 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN226@pyx_f_5num

; 7031 :         (__pyx_v_f[0]) = 76;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 76			; 0000004cH
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN226@pyx_f_5num:

; 7032 :         goto __pyx_L15;
; 7033 :       }
; 7034 : 
; 7035 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
; 7036 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 7037 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7038 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
; 7039 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7040 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7041 :  */
; 7042 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	ecx, 9
	mov	DWORD PTR $T41378[rsp], 9
	call	QWORD PTR __imp_PyInt_FromLong

; 7043 :       __Pyx_GOTREF(__pyx_t_4);
; 7044 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN782@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN783@pyx_f_5num

; 7045 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN222@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN222@pyx_f_5num:

; 7046 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN784@pyx_f_5num

; 7047 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN216@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN216@pyx_f_5num:

; 7048 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN212@pyx_f_5num

; 7049 :         (__pyx_v_f[0]) = 0x71;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 113			; 00000071H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN212@pyx_f_5num:

; 7050 :         goto __pyx_L15;
; 7051 :       }
; 7052 : 
; 7053 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
; 7054 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7055 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7056 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
; 7057 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7058 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7059 :  */
; 7060 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	ecx, 10
	mov	DWORD PTR $T41398[rsp], 10
	call	QWORD PTR __imp_PyInt_FromLong

; 7061 :       __Pyx_GOTREF(__pyx_t_3);
; 7062 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN785@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN786@pyx_f_5num

; 7063 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN208@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN208@pyx_f_5num:

; 7064 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN787@pyx_f_5num

; 7065 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN202@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN202@pyx_f_5num:
	mov	rdi, rbp

; 7066 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN198@pyx_f_5num

; 7067 :         (__pyx_v_f[0]) = 81;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 81			; 00000051H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN198@pyx_f_5num:

; 7068 :         goto __pyx_L15;
; 7069 :       }
; 7070 : 
; 7071 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
; 7072 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7073 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7074 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
; 7075 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7076 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7077 :  */
; 7078 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	ecx, 11
	mov	DWORD PTR $T41418[rsp], 11
	call	QWORD PTR __imp_PyInt_FromLong

; 7079 :       __Pyx_GOTREF(__pyx_t_4);
; 7080 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN788@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN789@pyx_f_5num

; 7081 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN194@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN194@pyx_f_5num:

; 7082 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN790@pyx_f_5num

; 7083 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN188@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN188@pyx_f_5num:

; 7084 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN184@pyx_f_5num

; 7085 :         (__pyx_v_f[0]) = 0x66;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 102			; 00000066H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN184@pyx_f_5num:

; 7086 :         goto __pyx_L15;
; 7087 :       }
; 7088 : 
; 7089 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
; 7090 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7091 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7092 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
; 7093 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7094 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7095 :  */
; 7096 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	ecx, 12
	mov	DWORD PTR $T41438[rsp], 12
	call	QWORD PTR __imp_PyInt_FromLong

; 7097 :       __Pyx_GOTREF(__pyx_t_3);
; 7098 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN791@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN792@pyx_f_5num

; 7099 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN180@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN180@pyx_f_5num:

; 7100 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN793@pyx_f_5num

; 7101 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN174@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN174@pyx_f_5num:
	mov	rdi, rbp

; 7102 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN170@pyx_f_5num

; 7103 :         (__pyx_v_f[0]) = 0x64;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 100			; 00000064H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN170@pyx_f_5num:

; 7104 :         goto __pyx_L15;
; 7105 :       }
; 7106 : 
; 7107 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":862
; 7108 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7109 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7110 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
; 7111 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7112 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7113 :  */
; 7114 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	ecx, 13
	mov	DWORD PTR $T41458[rsp], 13
	call	QWORD PTR __imp_PyInt_FromLong

; 7115 :       __Pyx_GOTREF(__pyx_t_4);
; 7116 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN794@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN795@pyx_f_5num

; 7117 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN166@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN166@pyx_f_5num:

; 7118 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN796@pyx_f_5num

; 7119 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN160@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN160@pyx_f_5num:

; 7120 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN156@pyx_f_5num

; 7121 :         (__pyx_v_f[0]) = 0x67;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 103			; 00000067H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN156@pyx_f_5num:

; 7122 :         goto __pyx_L15;
; 7123 :       }
; 7124 : 
; 7125 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":863
; 7126 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7127 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7128 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
; 7129 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7130 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7131 :  */
; 7132 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	ecx, 14
	mov	DWORD PTR $T41478[rsp], 14
	call	QWORD PTR __imp_PyInt_FromLong

; 7133 :       __Pyx_GOTREF(__pyx_t_3);
; 7134 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN797@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN798@pyx_f_5num

; 7135 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN152@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN152@pyx_f_5num:

; 7136 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN799@pyx_f_5num

; 7137 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN146@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN146@pyx_f_5num:
	mov	rdi, rbp

; 7138 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN142@pyx_f_5num

; 7139 :         (__pyx_v_f[0]) = 90;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7140 :         (__pyx_v_f[1]) = 0x66;

	inc	rax
	mov	BYTE PTR [rax-1], 90			; 0000005aH

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 102			; 00000066H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN142@pyx_f_5num:

; 7141 :         __pyx_v_f = (__pyx_v_f + 1);
; 7142 :         goto __pyx_L15;
; 7143 :       }
; 7144 : 
; 7145 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":864
; 7146 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7147 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7148 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
; 7149 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7150 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
; 7151 :  */
; 7152 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	ecx, 15
	mov	DWORD PTR $T41498[rsp], 15
	call	QWORD PTR __imp_PyInt_FromLong

; 7153 :       __Pyx_GOTREF(__pyx_t_4);
; 7154 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN800@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN801@pyx_f_5num

; 7155 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN138@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN138@pyx_f_5num:

; 7156 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN802@pyx_f_5num

; 7157 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN132@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN132@pyx_f_5num:

; 7158 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN128@pyx_f_5num

; 7159 :         (__pyx_v_f[0]) = 90;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7160 :         (__pyx_v_f[1]) = 0x64;

	inc	rax
	mov	BYTE PTR [rax-1], 90			; 0000005aH

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 100			; 00000064H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN128@pyx_f_5num:

; 7161 :         __pyx_v_f = (__pyx_v_f + 1);
; 7162 :         goto __pyx_L15;
; 7163 :       }
; 7164 : 
; 7165 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":865
; 7166 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7167 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7168 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
; 7169 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
; 7170 :  *             else:
; 7171 :  */
; 7172 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	ecx, 16
	mov	DWORD PTR $T41518[rsp], 16
	call	QWORD PTR __imp_PyInt_FromLong

; 7173 :       __Pyx_GOTREF(__pyx_t_3);
; 7174 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rax
	test	rax, rax
	je	$LN803@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN804@pyx_f_5num

; 7175 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN124@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN124@pyx_f_5num:

; 7176 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	rcx, rdi
	mov	rbx, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN805@pyx_f_5num

; 7177 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN118@pyx_f_5num
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN118@pyx_f_5num:
	mov	rdi, rbp

; 7178 :       if (__pyx_t_6) {

	test	esi, esi
	je	SHORT $LN114@pyx_f_5num

; 7179 :         (__pyx_v_f[0]) = 90;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]

; 7180 :         (__pyx_v_f[1]) = 0x67;

	inc	rax
	mov	BYTE PTR [rax-1], 90			; 0000005aH

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 103			; 00000067H
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	$__pyx_L13$18379
$LN114@pyx_f_5num:

; 7181 :         __pyx_v_f = (__pyx_v_f + 1);
; 7182 :         goto __pyx_L15;
; 7183 :       }
; 7184 : 
; 7185 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":866
; 7186 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7187 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7188 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
; 7189 :  *             else:
; 7190 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7191 :  */
; 7192 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	ecx, 17
	mov	DWORD PTR $T41538[rsp], 17
	call	QWORD PTR __imp_PyInt_FromLong

; 7193 :       __Pyx_GOTREF(__pyx_t_4);
; 7194 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rdi, rax
	test	rax, rax
	je	$LN806@pyx_f_5num
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rbx, rax
	test	rax, rax
	je	$LN807@pyx_f_5num

; 7195 :       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN110@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN110@pyx_f_5num:

; 7196 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_PyObject_IsTrue
	mov	esi, eax
	test	eax, eax
	js	$LN808@pyx_f_5num

; 7197 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN104@pyx_f_5num
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN104@pyx_f_5num:

; 7198 :       if (__pyx_t_6) {

	test	esi, esi
	je	$LN100@pyx_f_5num

; 7199 :         (__pyx_v_f[0]) = 79;

	mov	rax, QWORD PTR __pyx_v_f$[rsp]
$__pyx_L15$17969:

; 7224 :       }
; 7225 :       __pyx_L15:;
; 7226 : 
; 7227 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
; 7228 :  *             else:
; 7229 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7230 :  *             f += 1             # <<<<<<<<<<<<<<
; 7231 :  *         else:
; 7232 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7233 :  */
; 7234 :       __pyx_v_f = (__pyx_v_f + 1);

	inc	rax
	mov	BYTE PTR [rax-1], 79			; 0000004fH
	mov	QWORD PTR __pyx_v_f$[rsp], rax

; 7235 : 
; 7236 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
; 7237 :  *         offset[0] += child.itemsize
; 7238 :  * 
; 7239 :  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
; 7240 :  *             t = child.type_num
; 7241 :  *             if end - f < 5:
; 7242 :  */
; 7243 :       goto __pyx_L13;

	jmp	SHORT $__pyx_L13$18379
$LN359@pyx_f_5num:

; 7244 :     }
; 7245 : 
; 7246 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
; 7247 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7248 :  *             # so don't output it
; 7249 :  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
; 7250 :  *     return f
; 7251 :  * 
; 7252 :  */
; 7253 :     /*else*/ {
; 7254 :       __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(1, 873, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_v_end$[rsp]
	mov	rdx, QWORD PTR __pyx_v_f$[rsp]
	mov	r9, rcx
	mov	rcx, r10
	call	__pyx_f_5numpy__util_dtypestring
	mov	QWORD PTR __pyx_v_f$[rsp], rax
	test	rax, rax
	je	$LN809@pyx_f_5num
$__pyx_L13$18379:

; 6608 :   for (;;) {
; 6609 :     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

	mov	rcx, QWORD PTR __pyx_t_1$1$[rsp]
	mov	rdx, QWORD PTR __pyx_t_2$1$[rsp]
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	cmp	rdx, QWORD PTR [rcx+16]
	jge	$LN815@pyx_f_5num
	mov	r8, QWORD PTR __pyx_v_childname$1$[rsp]
	mov	r9, QWORD PTR __pyx_v_descr$[rsp]
	jmp	$LL474@pyx_f_5num
$LN748@pyx_f_5num:

; 6631 :     __Pyx_GOTREF(__pyx_t_3);
; 6632 :     if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 819, __pyx_L1_error)

	mov	r9, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r8, OFFSET FLAT:??_C@_05NNMEHDAO@tuple?$AA@
	mov	r9, QWORD PTR [r9+24]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	DWORD PTR __pyx_clineno, 6632		; 000019e8H
	jmp	$LN818@pyx_f_5num
$LN750@pyx_f_5num:

; 6668 :     }
; 6669 :     if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 820, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 6669		; 00001a0dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN753@pyx_f_5num:

; 6687 :     __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 822		; 00000336H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6687		; 00001a1fH
	jmp	$__pyx_L1_error$17703
$LN100@pyx_f_5num:

; 7200 :         goto __pyx_L15;
; 7201 :       }
; 7202 : 
; 7203 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":868
; 7204 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
; 7205 :  *             else:
; 7206 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
; 7207 :  *             f += 1
; 7208 :  *         else:
; 7209 :  */
; 7210 :       /*else*/ {
; 7211 :         __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 868, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rcx, QWORD PTR __pyx_kp_u_unknown_dtype_code_in_numpy_pxd
	mov	rdx, rsi
	call	QWORD PTR __imp_PyUnicodeUCS2_Format
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN99@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 868		; 00000364H
	mov	DWORD PTR __pyx_clineno, 7211		; 00001c2bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN99@pyx_f_5num:

; 7212 :         __Pyx_GOTREF(__pyx_t_3);
; 7213 :         __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 868, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN98@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 868		; 00000364H
	mov	DWORD PTR __pyx_clineno, 7213		; 00001c2dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN98@pyx_f_5num:

; 7214 :         __Pyx_GOTREF(__pyx_t_4);
; 7215 :         __Pyx_GIVEREF(__pyx_t_3);
; 7216 :         PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
; 7217 :         __pyx_t_3 = 0;
; 7218 :         __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 868, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rbx
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN96@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 868		; 00000364H
	mov	DWORD PTR __pyx_clineno, 7218		; 00001c32H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN96@pyx_f_5num:

; 7219 :         __Pyx_GOTREF(__pyx_t_3);
; 7220 :         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN95@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN95@pyx_f_5num:

; 7221 :         __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rbx
	mov	rdi, rbp
	call	__Pyx_Raise

; 7222 :         __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN90@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN90@pyx_f_5num:

; 7223 :         __PYX_ERR(1, 868, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rbx, rbp
	mov	DWORD PTR __pyx_lineno, 868		; 00000364H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7223		; 00001c37H
	jmp	$__pyx_L1_error$17703
$LN808@pyx_f_5num:

; 7196 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 866		; 00000362H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7196		; 00001c1cH
	jmp	$__pyx_L1_error$17703
$LN807@pyx_f_5num:

; 7193 :       __Pyx_GOTREF(__pyx_t_4);
; 7194 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 866		; 00000362H
	mov	DWORD PTR __pyx_clineno, 7194		; 00001c1aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN806@pyx_f_5num:

; 7181 :         __pyx_v_f = (__pyx_v_f + 1);
; 7182 :         goto __pyx_L15;
; 7183 :       }
; 7184 : 
; 7185 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":866
; 7186 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7187 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7188 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
; 7189 :  *             else:
; 7190 :  *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 7191 :  */
; 7192 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 866, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 866		; 00000362H
	mov	DWORD PTR __pyx_clineno, 7192		; 00001c18H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN805@pyx_f_5num:

; 7176 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 865		; 00000361H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7176		; 00001c08H
	jmp	$__pyx_L1_error$17703
$LN804@pyx_f_5num:

; 7173 :       __Pyx_GOTREF(__pyx_t_3);
; 7174 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 865		; 00000361H
	mov	DWORD PTR __pyx_clineno, 7174		; 00001c06H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN803@pyx_f_5num:

; 7161 :         __pyx_v_f = (__pyx_v_f + 1);
; 7162 :         goto __pyx_L15;
; 7163 :       }
; 7164 : 
; 7165 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":865
; 7166 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7167 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7168 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
; 7169 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
; 7170 :  *             else:
; 7171 :  */
; 7172 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 865, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 865		; 00000361H
	mov	DWORD PTR __pyx_clineno, 7172		; 00001c04H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN802@pyx_f_5num:

; 7156 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 864		; 00000360H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7156		; 00001bf4H
	jmp	$__pyx_L1_error$17703
$LN801@pyx_f_5num:

; 7153 :       __Pyx_GOTREF(__pyx_t_4);
; 7154 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 864		; 00000360H
	mov	DWORD PTR __pyx_clineno, 7154		; 00001bf2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN800@pyx_f_5num:

; 7141 :         __pyx_v_f = (__pyx_v_f + 1);
; 7142 :         goto __pyx_L15;
; 7143 :       }
; 7144 : 
; 7145 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":864
; 7146 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7147 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7148 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
; 7149 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7150 :  *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
; 7151 :  */
; 7152 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 864, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 864		; 00000360H
	mov	DWORD PTR __pyx_clineno, 7152		; 00001bf0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN799@pyx_f_5num:

; 7136 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 863		; 0000035fH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7136		; 00001be0H
	jmp	$__pyx_L1_error$17703
$LN798@pyx_f_5num:

; 7133 :       __Pyx_GOTREF(__pyx_t_3);
; 7134 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 863		; 0000035fH
	mov	DWORD PTR __pyx_clineno, 7134		; 00001bdeH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN797@pyx_f_5num:

; 7122 :         goto __pyx_L15;
; 7123 :       }
; 7124 : 
; 7125 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":863
; 7126 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7127 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7128 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
; 7129 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7130 :  *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
; 7131 :  */
; 7132 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 863, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 863		; 0000035fH
	mov	DWORD PTR __pyx_clineno, 7132		; 00001bdcH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN796@pyx_f_5num:

; 7118 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 862		; 0000035eH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7118		; 00001bceH
	jmp	$__pyx_L1_error$17703
$LN795@pyx_f_5num:

; 7115 :       __Pyx_GOTREF(__pyx_t_4);
; 7116 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 862		; 0000035eH
	mov	DWORD PTR __pyx_clineno, 7116		; 00001bccH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN794@pyx_f_5num:

; 7104 :         goto __pyx_L15;
; 7105 :       }
; 7106 : 
; 7107 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":862
; 7108 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7109 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7110 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
; 7111 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7112 :  *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
; 7113 :  */
; 7114 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 862, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 862		; 0000035eH
	mov	DWORD PTR __pyx_clineno, 7114		; 00001bcaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN793@pyx_f_5num:

; 7100 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 861		; 0000035dH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7100		; 00001bbcH
	jmp	$__pyx_L1_error$17703
$LN792@pyx_f_5num:

; 7097 :       __Pyx_GOTREF(__pyx_t_3);
; 7098 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 861		; 0000035dH
	mov	DWORD PTR __pyx_clineno, 7098		; 00001bbaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN791@pyx_f_5num:

; 7086 :         goto __pyx_L15;
; 7087 :       }
; 7088 : 
; 7089 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
; 7090 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7091 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7092 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
; 7093 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7094 :  *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
; 7095 :  */
; 7096 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 861, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 861		; 0000035dH
	mov	DWORD PTR __pyx_clineno, 7096		; 00001bb8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN790@pyx_f_5num:

; 7082 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 860		; 0000035cH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7082		; 00001baaH
	jmp	$__pyx_L1_error$17703
$LN789@pyx_f_5num:

; 7079 :       __Pyx_GOTREF(__pyx_t_4);
; 7080 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 860		; 0000035cH
	mov	DWORD PTR __pyx_clineno, 7080		; 00001ba8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN788@pyx_f_5num:

; 7068 :         goto __pyx_L15;
; 7069 :       }
; 7070 : 
; 7071 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
; 7072 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7073 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7074 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
; 7075 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7076 :  *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
; 7077 :  */
; 7078 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 860		; 0000035cH
	mov	DWORD PTR __pyx_clineno, 7078		; 00001ba6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN787@pyx_f_5num:

; 7064 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 859		; 0000035bH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7064		; 00001b98H
	jmp	$__pyx_L1_error$17703
$LN786@pyx_f_5num:

; 7061 :       __Pyx_GOTREF(__pyx_t_3);
; 7062 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 859		; 0000035bH
	mov	DWORD PTR __pyx_clineno, 7062		; 00001b96H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN785@pyx_f_5num:

; 7050 :         goto __pyx_L15;
; 7051 :       }
; 7052 : 
; 7053 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
; 7054 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7055 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7056 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
; 7057 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7058 :  *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
; 7059 :  */
; 7060 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 859, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 859		; 0000035bH
	mov	DWORD PTR __pyx_clineno, 7060		; 00001b94H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN784@pyx_f_5num:

; 7046 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 858		; 0000035aH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7046		; 00001b86H
	jmp	$__pyx_L1_error$17703
$LN783@pyx_f_5num:

; 7043 :       __Pyx_GOTREF(__pyx_t_4);
; 7044 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 858		; 0000035aH
	mov	DWORD PTR __pyx_clineno, 7044		; 00001b84H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN782@pyx_f_5num:

; 7032 :         goto __pyx_L15;
; 7033 :       }
; 7034 : 
; 7035 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
; 7036 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 7037 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7038 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
; 7039 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7040 :  *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
; 7041 :  */
; 7042 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 858, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 858		; 0000035aH
	mov	DWORD PTR __pyx_clineno, 7042		; 00001b82H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN781@pyx_f_5num:

; 7028 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 857		; 00000359H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7028		; 00001b74H
	jmp	$__pyx_L1_error$17703
$LN780@pyx_f_5num:

; 7025 :       __Pyx_GOTREF(__pyx_t_3);
; 7026 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 857		; 00000359H
	mov	DWORD PTR __pyx_clineno, 7026		; 00001b72H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN779@pyx_f_5num:

; 7014 :         goto __pyx_L15;
; 7015 :       }
; 7016 : 
; 7017 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":857
; 7018 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 7019 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 7020 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
; 7021 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7022 :  *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
; 7023 :  */
; 7024 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 857, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 857		; 00000359H
	mov	DWORD PTR __pyx_clineno, 7024		; 00001b70H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN778@pyx_f_5num:

; 7010 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 856		; 00000358H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7010		; 00001b62H
	jmp	$__pyx_L1_error$17703
$LN777@pyx_f_5num:

; 7007 :       __Pyx_GOTREF(__pyx_t_4);
; 7008 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 856		; 00000358H
	mov	DWORD PTR __pyx_clineno, 7008		; 00001b60H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN776@pyx_f_5num:

; 6996 :         goto __pyx_L15;
; 6997 :       }
; 6998 : 
; 6999 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
; 7000 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 7001 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 7002 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
; 7003 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 7004 :  *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
; 7005 :  */
; 7006 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 856, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 856		; 00000358H
	mov	DWORD PTR __pyx_clineno, 7006		; 00001b5eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN775@pyx_f_5num:

; 6992 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 855		; 00000357H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6992		; 00001b50H
	jmp	$__pyx_L1_error$17703
$LN774@pyx_f_5num:

; 6989 :       __Pyx_GOTREF(__pyx_t_3);
; 6990 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 855		; 00000357H
	mov	DWORD PTR __pyx_clineno, 6990		; 00001b4eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN773@pyx_f_5num:

; 6978 :         goto __pyx_L15;
; 6979 :       }
; 6980 : 
; 6981 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
; 6982 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6983 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6984 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
; 6985 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 6986 :  *             elif t == NPY_ULONG:       f[0] = 76  #"L"
; 6987 :  */
; 6988 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 855		; 00000357H
	mov	DWORD PTR __pyx_clineno, 6988		; 00001b4cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN772@pyx_f_5num:

; 6974 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 854		; 00000356H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6974		; 00001b3eH
	jmp	$__pyx_L1_error$17703
$LN771@pyx_f_5num:

; 6971 :       __Pyx_GOTREF(__pyx_t_4);
; 6972 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 854		; 00000356H
	mov	DWORD PTR __pyx_clineno, 6972		; 00001b3cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN770@pyx_f_5num:

; 6960 :         goto __pyx_L15;
; 6961 :       }
; 6962 : 
; 6963 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":854
; 6964 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6965 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6966 :  *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
; 6967 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 6968 :  *             elif t == NPY_LONG:        f[0] = 108 #"l"
; 6969 :  */
; 6970 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 854, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 854		; 00000356H
	mov	DWORD PTR __pyx_clineno, 6970		; 00001b3aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN769@pyx_f_5num:

; 6956 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 853		; 00000355H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6956		; 00001b2cH
	jmp	$__pyx_L1_error$17703
$LN768@pyx_f_5num:

; 6953 :       __Pyx_GOTREF(__pyx_t_3);
; 6954 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 853		; 00000355H
	mov	DWORD PTR __pyx_clineno, 6954		; 00001b2aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN767@pyx_f_5num:

; 6942 :         goto __pyx_L15;
; 6943 :       }
; 6944 : 
; 6945 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
; 6946 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6947 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6948 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
; 6949 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6950 :  *             elif t == NPY_UINT:        f[0] =  73 #"I"
; 6951 :  */
; 6952 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 853		; 00000355H
	mov	DWORD PTR __pyx_clineno, 6952		; 00001b28H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN766@pyx_f_5num:

; 6938 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 852, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 852		; 00000354H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6938		; 00001b1aH
	jmp	$__pyx_L1_error$17703
$LN765@pyx_f_5num:

; 6935 :       __Pyx_GOTREF(__pyx_t_4);
; 6936 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 852, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 852		; 00000354H
	mov	DWORD PTR __pyx_clineno, 6936		; 00001b18H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN764@pyx_f_5num:

; 6924 :         goto __pyx_L15;
; 6925 :       }
; 6926 : 
; 6927 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
; 6928 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
; 6929 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6930 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
; 6931 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6932 :  *             elif t == NPY_INT:         f[0] = 105 #"i"
; 6933 :  */
; 6934 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 852, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 852		; 00000354H
	mov	DWORD PTR __pyx_clineno, 6934		; 00001b16H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN763@pyx_f_5num:

; 6920 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 851, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 851		; 00000353H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6920		; 00001b08H
	jmp	$__pyx_L1_error$17703
$LN762@pyx_f_5num:

; 6917 :       __Pyx_GOTREF(__pyx_t_3);
; 6918 :       __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 851, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 851		; 00000353H
	mov	DWORD PTR __pyx_clineno, 6918		; 00001b06H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN761@pyx_f_5num:

; 6906 :         goto __pyx_L15;
; 6907 :       }
; 6908 : 
; 6909 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
; 6910 :  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 6911 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"
; 6912 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
; 6913 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6914 :  *             elif t == NPY_USHORT:      f[0] =  72 #"H"
; 6915 :  */
; 6916 :       __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 851, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 851		; 00000353H
	mov	DWORD PTR __pyx_clineno, 6916		; 00001b04H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN760@pyx_f_5num:

; 6902 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 850, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 850		; 00000352H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6902		; 00001af6H
	jmp	$__pyx_L1_error$17703
$LN759@pyx_f_5num:

; 6899 :       __Pyx_GOTREF(__pyx_t_4);
; 6900 :       __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 850, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 850		; 00000352H
	mov	DWORD PTR __pyx_clineno, 6900		; 00001af4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN758@pyx_f_5num:

; 6881 : 
; 6882 :         /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
; 6883 :  *         if not PyDataType_HASFIELDS(child):
; 6884 :  *             t = child.type_num
; 6885 :  *             if end - f < 5:             # <<<<<<<<<<<<<<
; 6886 :  *                 raise RuntimeError(u"Format string allocated too short.")
; 6887 :  * 
; 6888 :  */
; 6889 :       }
; 6890 : 
; 6891 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":850
; 6892 :  * 
; 6893 :  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 6894 :  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
; 6895 :  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
; 6896 :  *             elif t == NPY_SHORT:       f[0] = 104 #"h"
; 6897 :  */
; 6898 :       __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 850, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 850		; 00000352H
	mov	DWORD PTR __pyx_clineno, 6898		; 00001af2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN757@pyx_f_5num:

; 6868 : 
; 6869 :         /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
; 6870 :  *             t = child.type_num
; 6871 :  *             if end - f < 5:
; 6872 :  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
; 6873 :  * 
; 6874 :  *             # Until ticket #99 is fixed, use integers to avoid warnings
; 6875 :  */
; 6876 :         __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 847, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__8
	mov	rcx, QWORD PTR __pyx_builtin_RuntimeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN343@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 847		; 0000034fH
	mov	DWORD PTR __pyx_clineno, 6876		; 00001adcH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN343@pyx_f_5num:

; 6877 :         __Pyx_GOTREF(__pyx_t_4);
; 6878 :         __Pyx_Raise(__pyx_t_4, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 6879 :         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN341@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN341@pyx_f_5num:

; 6880 :         __PYX_ERR(1, 847, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rdi, rbp
	mov	DWORD PTR __pyx_lineno, 847		; 0000034fH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6880		; 00001ae0H
	jmp	$__pyx_L1_error$17703
$LN756@pyx_f_5num:

; 6846 : 
; 6847 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
; 6848 :  * 
; 6849 :  *         if not PyDataType_HASFIELDS(child):
; 6850 :  *             t = child.type_num             # <<<<<<<<<<<<<<
; 6851 :  *             if end - f < 5:
; 6852 :  *                 raise RuntimeError(u"Format string allocated too short.")
; 6853 :  */
; 6854 :       __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 845		; 0000034dH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6854		; 00001ac6H
	jmp	$__pyx_L1_error$17703
$LN815@pyx_f_5num:

; 6608 :   for (;;) {
; 6609 :     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

	mov	rbx, QWORD PTR __pyx_v_child$1$[rsp]
$LN85@pyx_f_5num:

; 7255 :       __pyx_v_f = __pyx_t_9;
; 7256 :     }
; 7257 :     __pyx_L13:;
; 7258 : 
; 7259 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":818
; 7260 :  *     cdef tuple fields
; 7261 :  * 
; 7262 :  *     for childname in descr.names:             # <<<<<<<<<<<<<<
; 7263 :  *         fields = descr.fields[childname]
; 7264 :  *         child, new_offset = fields
; 7265 :  */
; 7266 :   }
; 7267 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rcx], -1
	jne	SHORT $LN84@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN84@pyx_f_5num:

; 7268 : 
; 7269 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":874
; 7270 :  *             # so don't output it
; 7271 :  *             f = _util_dtypestring(child, f, end, offset)
; 7272 :  *     return f             # <<<<<<<<<<<<<<
; 7273 :  * 
; 7274 :  * 
; 7275 :  */
; 7276 :   __pyx_r = __pyx_v_f;

	mov	rbp, QWORD PTR __pyx_v_f$[rsp]
$__pyx_L0$18393:

; 7294 :   __pyx_L0:;
; 7295 :   __Pyx_XDECREF((PyObject *)__pyx_v_child);

	test	rbx, rbx
	je	SHORT $LN43@pyx_f_5num
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN43@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN43@pyx_f_5num:

; 7296 :   __Pyx_XDECREF(__pyx_v_fields);

	mov	rcx, QWORD PTR __pyx_v_fields$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN33@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN33@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN33@pyx_f_5num:

; 7297 :   __Pyx_XDECREF(__pyx_v_childname);

	mov	rcx, QWORD PTR __pyx_v_childname$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN23@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN23@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN23@pyx_f_5num:

; 7298 :   __Pyx_XDECREF(__pyx_v_new_offset);

	mov	rcx, QWORD PTR __pyx_v_new_offset$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN13@pyx_f_5num
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN13@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@pyx_f_5num:

; 7299 :   __Pyx_XDECREF(__pyx_v_t);

	test	rsi, rsi
	je	SHORT $LN814@pyx_f_5num
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN814@pyx_f_5num
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN814@pyx_f_5num:

; 7300 :   __Pyx_RefNannyFinishContext();
; 7301 :   return __pyx_r;

	mov	rax, rbp

; 7302 : }

	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN809@pyx_f_5num:

; 7244 :     }
; 7245 : 
; 7246 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
; 7247 :  *             # Cython ignores struct boundary information ("T{...}"),
; 7248 :  *             # so don't output it
; 7249 :  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
; 7250 :  *     return f
; 7251 :  * 
; 7252 :  */
; 7253 :     /*else*/ {
; 7254 :       __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(1, 873, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 873		; 00000369H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 7254		; 00001c56H
	jmp	$__pyx_L1_error$17703
$LN743@pyx_f_5num:

; 6794 :       __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 837		; 00000345H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6794		; 00001a8aH
	jmp	$__pyx_L1_error$17703
$LN742@pyx_f_5num:

; 6791 :       __Pyx_GOTREF(__pyx_t_3);
; 6792 :       __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 837		; 00000345H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6792		; 00001a88H
	jmp	$__pyx_L1_error$17703
$LN741@pyx_f_5num:

; 6772 : 
; 6773 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
; 6774 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6775 :  * 
; 6776 :  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 6777 :  *             (child.byteorder == c'<' and not little_endian)):
; 6778 :  *             raise ValueError(u"Non-native byte order not supported")
; 6779 :  */
; 6780 :     }
; 6781 : 
; 6782 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
; 6783 :  * 
; 6784 :  *         # Output padding bytes
; 6785 :  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
; 6786 :  *             f[0] = 120 # "x"; pad byte
; 6787 :  *             f += 1
; 6788 :  */
; 6789 :     while (1) {
; 6790 :       __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 837		; 00000345H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6790		; 00001a86H
	jmp	$__pyx_L1_error$17703
$LN755@pyx_f_5num:

; 6723 :       goto __pyx_L8_next_or;
; 6724 :     } else {
; 6725 :     }
; 6726 :     __pyx_t_7 = (__pyx_v_little_endian != 0);
; 6727 :     if (!__pyx_t_7) {
; 6728 :     } else {
; 6729 :       __pyx_t_6 = __pyx_t_7;
; 6730 :       goto __pyx_L7_bool_binop_done;
; 6731 :     }
; 6732 :     __pyx_L8_next_or:;
; 6733 : 
; 6734 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
; 6735 :  * 
; 6736 :  *         if ((child.byteorder == c'>' and little_endian) or
; 6737 :  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
; 6738 :  *             raise ValueError(u"Non-native byte order not supported")
; 6739 :  *             # One could encode it in the format string and have Cython
; 6740 :  */
; 6741 :     __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
; 6742 :     if (__pyx_t_7) {
; 6743 :     } else {
; 6744 :       __pyx_t_6 = __pyx_t_7;
; 6745 :       goto __pyx_L7_bool_binop_done;
; 6746 :     }
; 6747 :     __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
; 6748 :     __pyx_t_6 = __pyx_t_7;
; 6749 :     __pyx_L7_bool_binop_done:;
; 6750 : 
; 6751 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
; 6752 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6753 :  * 
; 6754 :  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 6755 :  *             (child.byteorder == c'<' and not little_endian)):
; 6756 :  *             raise ValueError(u"Non-native byte order not supported")
; 6757 :  */
; 6758 :     if (__pyx_t_6) {
; 6759 : 
; 6760 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
; 6761 :  *         if ((child.byteorder == c'>' and little_endian) or
; 6762 :  *             (child.byteorder == c'<' and not little_endian)):
; 6763 :  *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
; 6764 :  *             # One could encode it in the format string and have Cython
; 6765 :  *             # complain instead, BUT: < and > in format strings also imply
; 6766 :  */
; 6767 :       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__7
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN381@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 827		; 0000033bH
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6767		; 00001a6fH
	jmp	$__pyx_L1_error$17703
$LN381@pyx_f_5num:

; 6768 :       __Pyx_GOTREF(__pyx_t_3);
; 6769 :       __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 6770 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN379@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN379@pyx_f_5num:

; 6771 :       __PYX_ERR(1, 827, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rbp
	mov	DWORD PTR __pyx_lineno, 827		; 0000033bH
	mov	DWORD PTR __pyx_clineno, 6771		; 00001a73H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN754@pyx_f_5num:

; 6691 : 
; 6692 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
; 6693 :  * 
; 6694 :  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
; 6695 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
; 6696 :  * 
; 6697 :  *         if ((child.byteorder == c'>' and little_endian) or
; 6698 :  */
; 6699 :       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 823, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__6
	mov	rcx, QWORD PTR __pyx_builtin_RuntimeError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN394@pyx_f_5num
	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 823		; 00000337H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 6699		; 00001a2bH
	jmp	$__pyx_L1_error$17703
$LN394@pyx_f_5num:

; 6700 :       __Pyx_GOTREF(__pyx_t_3);
; 6701 :       __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 6702 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN392@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN392@pyx_f_5num:

; 6703 :       __PYX_ERR(1, 823, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	rsi, QWORD PTR __pyx_v_t$1$[rsp]
	mov	rbx, rbp
	mov	DWORD PTR __pyx_lineno, 823		; 00000337H
	mov	DWORD PTR __pyx_clineno, 6703		; 00001a2fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN752@pyx_f_5num:

; 6683 :     __Pyx_GOTREF(__pyx_t_4);
; 6684 :     __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 822		; 00000336H
	mov	DWORD PTR __pyx_clineno, 6684		; 00001a1cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN751@pyx_f_5num:

; 6673 :     __pyx_t_4 = 0;
; 6674 : 
; 6675 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
; 6676 :  *         child, new_offset = fields
; 6677 :  * 
; 6678 :  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
; 6679 :  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
; 6680 :  * 
; 6681 :  */
; 6682 :     __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 822, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 822		; 00000336H
	mov	DWORD PTR __pyx_clineno, 6682		; 00001a1aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN817@pyx_f_5num:

; 6651 :         if (size > 2) __Pyx_RaiseTooManyValuesError(2);

	jle	SHORT $LN439@pyx_f_5num
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@
	mov	r8d, 2
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	jmp	SHORT $LN437@pyx_f_5num
$LN439@pyx_f_5num:

; 6652 :         else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

	test	rcx, rcx
	js	SHORT $LN437@pyx_f_5num
	call	__Pyx_RaiseNeedMoreValuesError
$LN437@pyx_f_5num:

; 6653 :         __PYX_ERR(1, 820, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 6653		; 000019fdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17703
$LN441@pyx_f_5num:

; 6660 :       #else
; 6661 :       __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 820, __pyx_L1_error)
; 6662 :       __Pyx_GOTREF(__pyx_t_3);
; 6663 :       __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 820, __pyx_L1_error)
; 6664 :       __Pyx_GOTREF(__pyx_t_4);
; 6665 :       #endif
; 6666 :     } else {
; 6667 :       __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 820, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 6667		; 00001a0bH
	jmp	SHORT $LN819@pyx_f_5num
$LN747@pyx_f_5num:

; 6629 :     }
; 6630 :     __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 819, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 819		; 00000333H
	mov	DWORD PTR __pyx_clineno, 6630		; 000019e6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$17703
$LN746@pyx_f_5num:

; 6627 :       PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CH@KEHLFGEI@?8NoneType?8?5object?5is?5not?5subscri@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 6628 :       __PYX_ERR(1, 819, __pyx_L1_error)

	mov	DWORD PTR __pyx_clineno, 6628		; 000019e4H
$LN818@pyx_f_5num:
	mov	DWORD PTR __pyx_lineno, 819		; 00000333H
$LN819@pyx_f_5num:
	mov	r11, QWORD PTR __pyx_f+8
	mov	QWORD PTR __pyx_filename, r11
$__pyx_L1_error$17703:

; 7277 :   goto __pyx_L0;
; 7278 : 
; 7279 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
; 7280 :  *         return ()
; 7281 :  * 
; 7282 :  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
; 7283 :  *     # Recursive utility function used in __getbuffer__ to get format
; 7284 :  *     # string. The new location in the format string is returned.
; 7285 :  */
; 7286 : 
; 7287 :   /* function exit code */
; 7288 :   __pyx_L1_error:;
; 7289 :   __Pyx_XDECREF(__pyx_t_1);

	mov	rcx, QWORD PTR __pyx_t_1$1$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN74@pyx_f_5num
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN74@pyx_f_5num:

; 7290 :   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN63@pyx_f_5num
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN63@pyx_f_5num
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN63@pyx_f_5num:

; 7291 :   __Pyx_XDECREF(__pyx_t_4);

	test	rdi, rdi
	je	SHORT $LN816@pyx_f_5num
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN816@pyx_f_5num
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN816@pyx_f_5num:

; 6608 :   for (;;) {
; 6609 :     if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

	mov	rbx, QWORD PTR __pyx_v_child$1$[rsp]
$LN53@pyx_f_5num:

; 7292 :   __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BI@MEAEJAPM@numpy?4_util_dtypestring?$AA@
	call	__Pyx_AddTraceback

; 7293 :   __pyx_r = NULL;

	jmp	$__pyx_L0$18393
__pyx_f_5numpy__util_dtypestring ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@NAILOBKL@View?4MemoryView?4array?4__cinit__?$AA@ ; `string'
PUBLIC	??_C@_0BP@EDLDBDLK@expected?5bytes?0?5NoneType?5found?$AA@ ; `string'
EXTRN	__imp_malloc:PROC
EXTRN	__imp_PyObject_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+22
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+22
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+3493
	DD	imagerel $chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+3493
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+3515
	DD	imagerel $chain$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD 021H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+22
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD 0c1b21H
	DD	0ad41bH
	DD	0bc417H
	DD	0c7413H
	DD	0d640cH
	DD	0e5408H
	DD	0123404H
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__+22
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ DD 031301H
	DD	0f00fe213H
	DD	0e00dH
xdata	ENDS
;	COMDAT ??_C@_0CA@NAILOBKL@View?4MemoryView?4array?4__cinit__?$AA@
CONST	SEGMENT
??_C@_0CA@NAILOBKL@View?4MemoryView?4array?4__cinit__?$AA@ DB 'View.Memor'
	DB	'yView.array.__cinit__', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EDLDBDLK@expected?5bytes?0?5NoneType?5found?$AA@
CONST	SEGMENT
??_C@_0BP@EDLDBDLK@expected?5bytes?0?5NoneType?5found?$AA@ DB 'expected b'
	DB	'ytes, NoneType found', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
_TEXT	SEGMENT
tv1835 = 48
__pyx_t_1$2$ = 56
tv1834 = 64
__pyx_v_self$ = 144
__pyx_t_7$1$ = 152
$T41702 = 152
__pyx_v_shape$ = 152
__pyx_v_itemsize$ = 160
__pyx_v_format$ = 168
__pyx_v_mode$ = 176
__pyx_v_allocate_buffer$ = 184
__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ PROC ; COMDAT

; 7993 : static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {

	mov	rax, rsp
	mov	QWORD PTR [rax+32], r9
	mov	QWORD PTR [rax+24], r8
	push	r14
	push	r15
	sub	rsp, 120				; 00000078H

; 7994 :   int __pyx_v_idx;
; 7995 :   Py_ssize_t __pyx_v_i;
; 7996 :   Py_ssize_t __pyx_v_dim;
; 7997 :   PyObject **__pyx_v_p;
; 7998 :   char __pyx_v_order;
; 7999 :   int __pyx_r;
; 8000 :   __Pyx_RefNannyDeclarations
; 8001 :   Py_ssize_t __pyx_t_1;
; 8002 :   int __pyx_t_2;
; 8003 :   PyObject *__pyx_t_3 = NULL;
; 8004 :   int __pyx_t_4;
; 8005 :   PyObject *__pyx_t_5 = NULL;
; 8006 :   char *__pyx_t_6;
; 8007 :   int __pyx_t_7;
; 8008 :   Py_ssize_t __pyx_t_8;
; 8009 :   PyObject *__pyx_t_9 = NULL;
; 8010 :   PyObject *__pyx_t_10 = NULL;
; 8011 :   __Pyx_RefNannySetupContext("__cinit__", 0);
; 8012 :   __Pyx_INCREF(__pyx_v_format);

	inc	QWORD PTR [r9]
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax-24], rbp
	mov	QWORD PTR [rax-32], rsi
	xor	r15d, r15d
	mov	QWORD PTR [rax-40], rdi
	mov	QWORD PTR [rax-48], r12
	mov	QWORD PTR [rax-56], r13
	mov	r14, r9
	mov	r13, rdx
	mov	r12, rcx
	mov	rdi, r15
	mov	rsi, r15
	mov	rbp, r15

; 8013 : 
; 8014 :   /* "View.MemoryView":127
; 8015 :  *         cdef PyObject **p
; 8016 :  * 
; 8017 :  *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
; 8018 :  *         self.itemsize = itemsize
; 8019 :  * 
; 8020 :  */
; 8021 :   if (unlikely(__pyx_v_shape == Py_None)) {

	cmp	rdx, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN183@pyx_array_@7

; 8022 :     PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CH@CKNMHKEB@object?5of?5type?5?8NoneType?8?5has?5no@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 8023 :     __PYX_ERR(2, 127, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 127		; 0000007fH
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 8023		; 00001f57H
	jmp	$LN13@pyx_array_@7
$LN183@pyx_array_@7:

; 8024 :   }
; 8025 :   __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 127, __pyx_L1_error)

	mov	rax, QWORD PTR [rdx+16]
	cmp	rax, -1
	jne	SHORT $LN182@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 127		; 0000007fH
	mov	DWORD PTR __pyx_clineno, 8025		; 00001f59H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN182@pyx_array_@7:

; 8026 :   __pyx_v_self->ndim = ((int)__pyx_t_1);

	mov	DWORD PTR [rcx+48], eax

; 8027 : 
; 8028 :   /* "View.MemoryView":128
; 8029 :  * 
; 8030 :  *         self.ndim = <int> len(shape)
; 8031 :  *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
; 8032 :  * 
; 8033 :  *         if not self.ndim:
; 8034 :  */
; 8035 :   __pyx_v_self->itemsize = __pyx_v_itemsize;

	mov	QWORD PTR [rcx+72], r8

; 8036 : 
; 8037 :   /* "View.MemoryView":130
; 8038 :  *         self.itemsize = itemsize
; 8039 :  * 
; 8040 :  *         if not self.ndim:             # <<<<<<<<<<<<<<
; 8041 :  *             raise ValueError("Empty shape tuple for cython.array")
; 8042 :  * 
; 8043 :  */
; 8044 :   __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);

	test	eax, eax

; 8045 :   if (__pyx_t_2) {

	jne	$LN181@pyx_array_@7

; 8046 : 
; 8047 :     /* "View.MemoryView":131
; 8048 :  * 
; 8049 :  *         if not self.ndim:
; 8050 :  *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
; 8051 :  * 
; 8052 :  *         if itemsize <= 0:
; 8053 :  */
; 8054 :     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 131, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__12
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN180@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 131		; 00000083H
	mov	DWORD PTR __pyx_clineno, 8054		; 00001f76H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$19217
$LN180@pyx_array_@7:

; 8055 :     __Pyx_GOTREF(__pyx_t_3);
; 8056 :     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 8057 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN178@pyx_array_@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN178@pyx_array_@7:

; 8058 :     __PYX_ERR(2, 131, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 131		; 00000083H
	mov	DWORD PTR __pyx_clineno, 8058		; 00001f7aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN181@pyx_array_@7:

; 8059 : 
; 8060 :     /* "View.MemoryView":130
; 8061 :  *         self.itemsize = itemsize
; 8062 :  * 
; 8063 :  *         if not self.ndim:             # <<<<<<<<<<<<<<
; 8064 :  *             raise ValueError("Empty shape tuple for cython.array")
; 8065 :  * 
; 8066 :  */
; 8067 :   }
; 8068 : 
; 8069 :   /* "View.MemoryView":133
; 8070 :  *             raise ValueError("Empty shape tuple for cython.array")
; 8071 :  * 
; 8072 :  *         if itemsize <= 0:             # <<<<<<<<<<<<<<
; 8073 :  *             raise ValueError("itemsize <= 0 for cython.array")
; 8074 :  * 
; 8075 :  */
; 8076 :   __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);

	test	r8, r8

; 8077 :   if (__pyx_t_2) {

	jg	$LN174@pyx_array_@7

; 8078 : 
; 8079 :     /* "View.MemoryView":134
; 8080 :  * 
; 8081 :  *         if itemsize <= 0:
; 8082 :  *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
; 8083 :  * 
; 8084 :  *         if not isinstance(format, bytes):
; 8085 :  */
; 8086 :     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 134, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__13
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN173@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 134		; 00000086H
	mov	DWORD PTR __pyx_clineno, 8086		; 00001f96H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$19217
$LN173@pyx_array_@7:

; 8087 :     __Pyx_GOTREF(__pyx_t_3);
; 8088 :     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 8089 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN171@pyx_array_@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN171@pyx_array_@7:

; 8090 :     __PYX_ERR(2, 134, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 134		; 00000086H
	mov	DWORD PTR __pyx_clineno, 8090		; 00001f9aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN174@pyx_array_@7:

; 8091 : 
; 8092 :     /* "View.MemoryView":133
; 8093 :  *             raise ValueError("Empty shape tuple for cython.array")
; 8094 :  * 
; 8095 :  *         if itemsize <= 0:             # <<<<<<<<<<<<<<
; 8096 :  *             raise ValueError("itemsize <= 0 for cython.array")
; 8097 :  * 
; 8098 :  */
; 8099 :   }
; 8100 : 
; 8101 :   /* "View.MemoryView":136
; 8102 :  *             raise ValueError("itemsize <= 0 for cython.array")
; 8103 :  * 
; 8104 :  *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
; 8105 :  *             format = format.encode('ASCII')
; 8106 :  *         self._format = format  # keep a reference to the byte string
; 8107 :  */
; 8108 :   __pyx_t_2 = PyBytes_Check(__pyx_v_format); 

	mov	rax, QWORD PTR [r9+8]

; 8109 :   __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);

	bt	DWORD PTR [rax+168], 27

; 8110 :   if (__pyx_t_4) {

	jb	$LN155@pyx_array_@7

; 8111 : 
; 8112 :     /* "View.MemoryView":137
; 8113 :  * 
; 8114 :  *         if not isinstance(format, bytes):
; 8115 :  *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
; 8116 :  *         self._format = format  # keep a reference to the byte string
; 8117 :  *         self.format = self._format
; 8118 :  */
; 8119 :     __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)

	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN187@pyx_array_@7
	mov	rdx, QWORD PTR __pyx_n_s_encode
	mov	rcx, r9
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN188@pyx_array_@7
$LN187@pyx_array_@7:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN186@pyx_array_@7
	mov	rdx, QWORD PTR __pyx_n_s_encode
	mov	rcx, r9
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN188@pyx_array_@7
$LN186@pyx_array_@7:
	mov	rdx, QWORD PTR __pyx_n_s_encode
	mov	rcx, r9
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN188@pyx_array_@7:
	test	rbx, rbx
	jne	SHORT $LN166@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 137		; 00000089H
	mov	DWORD PTR __pyx_clineno, 8119		; 00001fb7H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN166@pyx_array_@7:

; 8120 :     __Pyx_GOTREF(__pyx_t_3);
; 8121 :     __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 137, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__14
	xor	r8d, r8d
	mov	rcx, rbx
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN164@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 137		; 00000089H
	mov	DWORD PTR __pyx_clineno, 8121		; 00001fb9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$19217
$LN164@pyx_array_@7:

; 8122 :     __Pyx_GOTREF(__pyx_t_5);
; 8123 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN163@pyx_array_@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN163@pyx_array_@7:

; 8124 :     __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);

	mov	rcx, r14
	mov	QWORD PTR __pyx_v_format$[rsp], rdi
	mov	r14, rdi
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN155@pyx_array_@7
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN155@pyx_array_@7:

; 8125 :     __pyx_t_5 = 0;
; 8126 : 
; 8127 :     /* "View.MemoryView":136
; 8128 :  *             raise ValueError("itemsize <= 0 for cython.array")
; 8129 :  * 
; 8130 :  *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
; 8131 :  *             format = format.encode('ASCII')
; 8132 :  *         self._format = format  # keep a reference to the byte string
; 8133 :  */
; 8134 :   }
; 8135 : 
; 8136 :   /* "View.MemoryView":138
; 8137 :  *         if not isinstance(format, bytes):
; 8138 :  *             format = format.encode('ASCII')
; 8139 :  *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
; 8140 :  *         self.format = self._format
; 8141 :  * 
; 8142 :  */
; 8143 :   if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 138, __pyx_L1_error)

	mov	r9, QWORD PTR [r14+8]
	cmp	r9, QWORD PTR __imp_PyString_Type
	je	SHORT $LN151@pyx_array_@7
	cmp	r14, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN151@pyx_array_@7
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	lea	r8, OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 138		; 0000008aH
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 8143		; 00001fcfH
	jmp	$LN13@pyx_array_@7
$LN151@pyx_array_@7:

; 8144 :   __pyx_t_5 = __pyx_v_format;
; 8145 :   __Pyx_INCREF(__pyx_t_5);

	inc	QWORD PTR [r14]

; 8146 :   __Pyx_GIVEREF(__pyx_t_5);
; 8147 :   __Pyx_GOTREF(__pyx_v_self->_format);
; 8148 :   __Pyx_DECREF(__pyx_v_self->_format);

	mov	rax, QWORD PTR [r12+88]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r12+88]
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN149@pyx_array_@7
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN149@pyx_array_@7:

; 8149 :   __pyx_v_self->_format = ((PyObject*)__pyx_t_5);

	mov	QWORD PTR [r12+88], r14

; 8150 :   __pyx_t_5 = 0;
; 8151 : 
; 8152 :   /* "View.MemoryView":139
; 8153 :  *             format = format.encode('ASCII')
; 8154 :  *         self._format = format  # keep a reference to the byte string
; 8155 :  *         self.format = self._format             # <<<<<<<<<<<<<<
; 8156 :  * 
; 8157 :  * 
; 8158 :  */
; 8159 :   if (unlikely(__pyx_v_self->_format == Py_None)) {

	cmp	r14, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN145@pyx_array_@7

; 8160 :     PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0BP@EDLDBDLK@expected?5bytes?0?5NoneType?5found?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString

; 8161 :     __PYX_ERR(2, 139, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 139		; 0000008bH
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 8161		; 00001fe1H
	jmp	$LN13@pyx_array_@7
$LN145@pyx_array_@7:

; 8162 :   }
; 8163 :   __pyx_t_6 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 139, __pyx_L1_error)

	lea	rbx, QWORD PTR [r14+32]
	test	rbx, rbx
	jne	SHORT $LN144@pyx_array_@7
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN144@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 139		; 0000008bH
	mov	DWORD PTR __pyx_clineno, 8163		; 00001fe3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN144@pyx_array_@7:

; 8164 :   __pyx_v_self->format = __pyx_t_6;
; 8165 : 
; 8166 :   /* "View.MemoryView":142
; 8167 :  * 
; 8168 :  * 
; 8169 :  *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
; 8170 :  *         self._strides = self._shape + self.ndim
; 8171 :  * 
; 8172 :  */
; 8173 :   __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

	movsxd	rcx, DWORD PTR [r12+48]
	mov	QWORD PTR [r12+40], rbx
	shl	rcx, 4
	call	QWORD PTR __imp_PyObject_Malloc
	mov	r11, rax
	mov	QWORD PTR [r12+56], rax

; 8174 : 
; 8175 :   /* "View.MemoryView":143
; 8176 :  * 
; 8177 :  *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
; 8178 :  *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
; 8179 :  * 
; 8180 :  *         if not self._shape:
; 8181 :  */
; 8182 :   __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

	movsxd	rax, DWORD PTR [r12+48]
	lea	rcx, QWORD PTR [r11+rax*8]
	mov	QWORD PTR [r12+64], rcx

; 8183 : 
; 8184 :   /* "View.MemoryView":145
; 8185 :  *         self._strides = self._shape + self.ndim
; 8186 :  * 
; 8187 :  *         if not self._shape:             # <<<<<<<<<<<<<<
; 8188 :  *             raise MemoryError("unable to allocate shape and strides.")
; 8189 :  * 
; 8190 :  */
; 8191 :   __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);

	test	r11, r11

; 8192 :   if (__pyx_t_4) {

	jne	$LN143@pyx_array_@7

; 8193 : 
; 8194 :     /* "View.MemoryView":146
; 8195 :  * 
; 8196 :  *         if not self._shape:
; 8197 :  *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
; 8198 :  * 
; 8199 :  * 
; 8200 :  */
; 8201 :     __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__15
	mov	rcx, QWORD PTR __pyx_builtin_MemoryError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN142@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 146		; 00000092H
	mov	DWORD PTR __pyx_clineno, 8201		; 00002009H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN142@pyx_array_@7:

; 8202 :     __Pyx_GOTREF(__pyx_t_5);
; 8203 :     __Pyx_Raise(__pyx_t_5, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 8204 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN140@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN140@pyx_array_@7:

; 8205 :     __PYX_ERR(2, 146, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 146		; 00000092H
	mov	DWORD PTR __pyx_clineno, 8205		; 0000200dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN143@pyx_array_@7:

; 8206 : 
; 8207 :     /* "View.MemoryView":145
; 8208 :  *         self._strides = self._shape + self.ndim
; 8209 :  * 
; 8210 :  *         if not self._shape:             # <<<<<<<<<<<<<<
; 8211 :  *             raise MemoryError("unable to allocate shape and strides.")
; 8212 :  * 
; 8213 :  */
; 8214 :   }
; 8215 : 
; 8216 :   /* "View.MemoryView":149
; 8217 :  * 
; 8218 :  * 
; 8219 :  *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
; 8220 :  *             if dim <= 0:
; 8221 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
; 8222 :  */
; 8223 :   __pyx_t_7 = 0;
; 8224 :   __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;

	inc	QWORD PTR [r13]
	mov	rax, r15
	mov	DWORD PTR __pyx_t_7$1$[rsp], r15d

; 8225 :   for (;;) {
; 8226 :     if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;

	cmp	QWORD PTR [r13+16], rax
	mov	rdi, r13
	jle	$LN104@pyx_array_@7
	mov	QWORD PTR tv1835[rsp], r15
	lea	rcx, QWORD PTR [r13+24]
	npad	5
$LL136@pyx_array_@7:

; 8227 :     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 8228 :     __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 149, __pyx_L1_error)

	mov	rbx, QWORD PTR [rcx]
	add	rcx, 8
	inc	rax
	inc	QWORD PTR [rbx]
	mov	QWORD PTR tv1834[rsp], rcx

; 8229 :     #else
; 8230 :     __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
; 8231 :     __Pyx_GOTREF(__pyx_t_3);
; 8232 :     #endif
; 8233 :     __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 149, __pyx_L1_error)

	mov	rcx, rbx
	mov	QWORD PTR __pyx_t_1$2$[rsp], rax
	call	__Pyx_PyIndex_AsSsize_t
	mov	r14, rax
	cmp	rax, -1
	jne	SHORT $LN131@pyx_array_@7
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN254@pyx_array_@7
$LN131@pyx_array_@7:

; 8234 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN130@pyx_array_@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN130@pyx_array_@7:

; 8235 :     __pyx_v_dim = __pyx_t_8;
; 8236 :     __pyx_v_idx = __pyx_t_7;

	mov	eax, DWORD PTR __pyx_t_7$1$[rsp]
	mov	r8, QWORD PTR tv1835[rsp]
	mov	ecx, eax

; 8237 :     __pyx_t_7 = (__pyx_t_7 + 1);

	inc	eax
	mov	rdx, r8
	add	r8, 8
	mov	DWORD PTR __pyx_t_7$1$[rsp], eax
	mov	QWORD PTR tv1835[rsp], r8

; 8238 : 
; 8239 :     /* "View.MemoryView":150
; 8240 :  * 
; 8241 :  *         for idx, dim in enumerate(shape):
; 8242 :  *             if dim <= 0:             # <<<<<<<<<<<<<<
; 8243 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
; 8244 :  *             self._shape[idx] = dim
; 8245 :  */
; 8246 :     __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);

	test	r14, r14

; 8247 :     if (__pyx_t_4) {

	jle	$LN255@pyx_array_@7

; 8282 : 
; 8283 :       /* "View.MemoryView":150
; 8284 :  * 
; 8285 :  *         for idx, dim in enumerate(shape):
; 8286 :  *             if dim <= 0:             # <<<<<<<<<<<<<<
; 8287 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
; 8288 :  *             self._shape[idx] = dim
; 8289 :  */
; 8290 :     }
; 8291 : 
; 8292 :     /* "View.MemoryView":152
; 8293 :  *             if dim <= 0:
; 8294 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
; 8295 :  *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
; 8296 :  * 
; 8297 :  *         cdef char order
; 8298 :  */
; 8299 :     (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

	mov	rax, QWORD PTR [r12+56]
	mov	QWORD PTR [rdx+rax], r14
	mov	rax, QWORD PTR __pyx_t_1$2$[rsp]
	cmp	rax, QWORD PTR [r13+16]
	jge	SHORT $LN264@pyx_array_@7

; 8225 :   for (;;) {
; 8226 :     if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;

	mov	rcx, QWORD PTR tv1834[rsp]
	jmp	$LL136@pyx_array_@7
$LN254@pyx_array_@7:

; 8229 :     #else
; 8230 :     __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
; 8231 :     __Pyx_GOTREF(__pyx_t_3);
; 8232 :     #endif
; 8233 :     __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 149, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 149		; 00000095H
	mov	DWORD PTR __pyx_clineno, 8233		; 00002029H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$19217
$LN264@pyx_array_@7:

; 8225 :   for (;;) {
; 8226 :     if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;

	mov	r14, QWORD PTR __pyx_v_format$[rsp]
$LN104@pyx_array_@7:

; 8300 : 
; 8301 :     /* "View.MemoryView":149
; 8302 :  * 
; 8303 :  * 
; 8304 :  *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
; 8305 :  *             if dim <= 0:
; 8306 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
; 8307 :  */
; 8308 :   }
; 8309 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN103@pyx_array_@7
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN103@pyx_array_@7:

; 8310 : 
; 8311 :   /* "View.MemoryView":155
; 8312 :  * 
; 8313 :  *         cdef char order
; 8314 :  *         if mode == 'fortran':             # <<<<<<<<<<<<<<
; 8315 :  *             order = b'F'
; 8316 :  *             self.mode = u'fortran'
; 8317 :  */
; 8318 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 155, __pyx_L1_error)

	mov	rbx, QWORD PTR __pyx_v_mode$[rsp]
	mov	rdx, QWORD PTR __pyx_n_s_fortran
	cmp	rbx, rdx
	je	$LN258@pyx_array_@7
	mov	rdi, QWORD PTR __imp_PyString_Type
	mov	r8d, r15d
	mov	r9d, r15d
	cmp	QWORD PTR [rdx+8], rdi
	sete	r8b
	cmp	QWORD PTR [rbx+8], rdi
	sete	r9b
	test	r8d, r9d
	je	$LN219@pyx_array_@7
	mov	r8, QWORD PTR [rbx+16]
	cmp	r8, QWORD PTR [rdx+16]
	jne	$LN263@pyx_array_@7
	movzx	eax, BYTE PTR [rdx+32]
	lea	rcx, QWORD PTR [rbx+32]
	cmp	BYTE PTR [rcx], al
	jne	$LN263@pyx_array_@7
	cmp	r8, 1
	je	$LN258@pyx_array_@7
	mov	eax, DWORD PTR [rbx+24]
	mov	r9d, DWORD PTR [rdx+24]
	cmp	eax, r9d
	je	SHORT $LN213@pyx_array_@7
	cmp	eax, -1
	je	SHORT $LN213@pyx_array_@7
	cmp	r9d, -1
	jne	$LN263@pyx_array_@7
$LN213@pyx_array_@7:
	add	rdx, 32					; 00000020H
	call	memcmp
	mov	r13d, r15d
	test	eax, eax
	sete	r13b
	jmp	$LN208@pyx_array_@7
$LN255@pyx_array_@7:

; 8248 : 
; 8249 :       /* "View.MemoryView":151
; 8250 :  *         for idx, dim in enumerate(shape):
; 8251 :  *             if dim <= 0:
; 8252 :  *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
; 8253 :  *             self._shape[idx] = dim
; 8254 :  * 
; 8255 :  */
; 8256 :       __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	DWORD PTR $T41702[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN125@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8256		; 00002040H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$19217
$LN125@pyx_array_@7:

; 8257 :       __Pyx_GOTREF(__pyx_t_3);
; 8258 :       __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	rcx, r14
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN124@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8258		; 00002042H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$19217
$LN124@pyx_array_@7:

; 8259 :       __Pyx_GOTREF(__pyx_t_9);
; 8260 :       __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN123@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8260		; 00002044H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$19217:

; 8555 :       }
; 8556 : 
; 8557 :       /* "View.MemoryView":176
; 8558 :  *                 raise MemoryError("unable to allocate array data.")
; 8559 :  * 
; 8560 :  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 8561 :  *                 p = <PyObject **> self.data
; 8562 :  *                 for i in range(self.len / itemsize):
; 8563 :  */
; 8564 :     }
; 8565 : 
; 8566 :     /* "View.MemoryView":169
; 8567 :  *         self.free_data = allocate_buffer
; 8568 :  *         self.dtype_is_object = format == b'O'
; 8569 :  *         if allocate_buffer:             # <<<<<<<<<<<<<<
; 8570 :  * 
; 8571 :  * 
; 8572 :  */
; 8573 :   }
; 8574 : 
; 8575 :   /* "View.MemoryView":120
; 8576 :  *         cdef bint dtype_is_object
; 8577 :  * 
; 8578 :  *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
; 8579 :  *                   mode="c", bint allocate_buffer=True):
; 8580 :  * 
; 8581 :  */
; 8582 : 
; 8583 :   /* function exit code */
; 8584 :   __pyx_r = 0;
; 8585 :   goto __pyx_L0;
; 8586 :   __pyx_L1_error:;
; 8587 :   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	$LN43@pyx_array_@7
	add	QWORD PTR [rbx], -1
	jne	$LN43@pyx_array_@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	jmp	$LN43@pyx_array_@7
$LN123@pyx_array_@7:

; 8261 :       __Pyx_GOTREF(__pyx_t_10);
; 8262 :       __Pyx_GIVEREF(__pyx_t_3);
; 8263 :       PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);

	mov	QWORD PTR [rax+24], rbx

; 8264 :       __Pyx_GIVEREF(__pyx_t_9);
; 8265 :       PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);

	mov	QWORD PTR [rax+32], rsi

; 8266 :       __pyx_t_3 = 0;
; 8267 :       __pyx_t_9 = 0;
; 8268 :       __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Invalid_shape_in_axis_d_d
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN121@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8268		; 0000204cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN121@pyx_array_@7:

; 8269 :       __Pyx_GOTREF(__pyx_t_9);
; 8270 :       __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN120@pyx_array_@7
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN120@pyx_array_@7:

; 8271 :       __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN116@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8271		; 0000204fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN116@pyx_array_@7:

; 8272 :       __Pyx_GOTREF(__pyx_t_10);
; 8273 :       __Pyx_GIVEREF(__pyx_t_9);
; 8274 :       PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
; 8275 :       __pyx_t_9 = 0;
; 8276 :       __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rsi
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN114@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	DWORD PTR __pyx_clineno, 8276		; 00002054H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN114@pyx_array_@7:

; 8277 :       __Pyx_GOTREF(__pyx_t_9);
; 8278 :       __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN113@pyx_array_@7
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN113@pyx_array_@7:

; 8279 :       __Pyx_Raise(__pyx_t_9, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rsi
	mov	rbp, r15
	call	__Pyx_Raise

; 8280 :       __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN108@pyx_array_@7
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN108@pyx_array_@7:

; 8281 :       __PYX_ERR(2, 151, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	rsi, r15
	mov	DWORD PTR __pyx_lineno, 151		; 00000097H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 8281		; 00002059H

; 8555 :       }
; 8556 : 
; 8557 :       /* "View.MemoryView":176
; 8558 :  *                 raise MemoryError("unable to allocate array data.")
; 8559 :  * 
; 8560 :  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 8561 :  *                 p = <PyObject **> self.data
; 8562 :  *                 for i in range(self.len / itemsize):
; 8563 :  */
; 8564 :     }
; 8565 : 
; 8566 :     /* "View.MemoryView":169
; 8567 :  *         self.free_data = allocate_buffer
; 8568 :  *         self.dtype_is_object = format == b'O'
; 8569 :  *         if allocate_buffer:             # <<<<<<<<<<<<<<
; 8570 :  * 
; 8571 :  * 
; 8572 :  */
; 8573 :   }
; 8574 : 
; 8575 :   /* "View.MemoryView":120
; 8576 :  *         cdef bint dtype_is_object
; 8577 :  * 
; 8578 :  *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
; 8579 :  *                   mode="c", bint allocate_buffer=True):
; 8580 :  * 
; 8581 :  */
; 8582 : 
; 8583 :   /* function exit code */
; 8584 :   __pyx_r = 0;
; 8585 :   goto __pyx_L0;
; 8586 :   __pyx_L1_error:;
; 8587 :   __Pyx_XDECREF(__pyx_t_3);

	jmp	$LN43@pyx_array_@7

; 8310 : 
; 8311 :   /* "View.MemoryView":155
; 8312 :  * 
; 8313 :  *         cdef char order
; 8314 :  *         if mode == 'fortran':             # <<<<<<<<<<<<<<
; 8315 :  *             order = b'F'
; 8316 :  *             self.mode = u'fortran'
; 8317 :  */
; 8318 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 155, __pyx_L1_error)

$LN219@pyx_array_@7:
	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	mov	eax, r15d
	cmp	rbx, rcx
	sete	al
	test	eax, r8d
	jne	SHORT $LN98@pyx_array_@7
	cmp	rdx, rcx
	mov	eax, r15d
	sete	al
	test	eax, r9d
	jne	SHORT $LN98@pyx_array_@7
	mov	r8d, 2
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	$LN259@pyx_array_@7
	mov	rcx, rax
	call	__Pyx_PyObject_IsTrue
	add	QWORD PTR [rdi], -1
	mov	r13d, eax
	jne	SHORT $LN205@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN205@pyx_array_@7:
	mov	rdi, QWORD PTR __imp_PyString_Type
$LN208@pyx_array_@7:
	test	r13d, r13d
	js	$LN259@pyx_array_@7

; 8319 :   if (__pyx_t_4) {

	test	r13d, r13d
	jne	$LN258@pyx_array_@7
$LN263@pyx_array_@7:

; 8342 : 
; 8343 :     /* "View.MemoryView":155
; 8344 :  * 
; 8345 :  *         cdef char order
; 8346 :  *         if mode == 'fortran':             # <<<<<<<<<<<<<<
; 8347 :  *             order = b'F'
; 8348 :  *             self.mode = u'fortran'
; 8349 :  */
; 8350 :     goto __pyx_L10;

	mov	rcx, QWORD PTR __imp__Py_NoneStruct
$LN98@pyx_array_@7:

; 8351 :   }
; 8352 : 
; 8353 :   /* "View.MemoryView":158
; 8354 :  *             order = b'F'
; 8355 :  *             self.mode = u'fortran'
; 8356 :  *         elif mode == 'c':             # <<<<<<<<<<<<<<
; 8357 :  *             order = b'C'
; 8358 :  *             self.mode = u'c'
; 8359 :  */
; 8360 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_c
	cmp	rbx, rdx
	je	$LN260@pyx_array_@7
	cmp	QWORD PTR [rdx+8], rdi
	mov	r8d, r15d
	mov	r9d, r15d
	sete	r8b
	cmp	QWORD PTR [rbx+8], rdi
	sete	r9b
	test	r8d, r9d
	je	SHORT $LN243@pyx_array_@7
	mov	r8, QWORD PTR [rbx+16]
	cmp	r8, QWORD PTR [rdx+16]
	jne	$LN91@pyx_array_@7
	movzx	eax, BYTE PTR [rdx+32]
	lea	rcx, QWORD PTR [rbx+32]
	cmp	BYTE PTR [rcx], al
	jne	$LN91@pyx_array_@7
	cmp	r8, 1
	je	$LN260@pyx_array_@7
	mov	eax, DWORD PTR [rbx+24]
	mov	r9d, DWORD PTR [rdx+24]
	cmp	eax, r9d
	je	SHORT $LN237@pyx_array_@7
	cmp	eax, -1
	je	SHORT $LN237@pyx_array_@7
	cmp	r9d, -1
	jne	$LN91@pyx_array_@7
$LN237@pyx_array_@7:
	add	rdx, 32					; 00000020H
	call	memcmp
	mov	r13d, r15d
	test	eax, eax
	sete	r13b
	jmp	SHORT $LN229@pyx_array_@7
$LN259@pyx_array_@7:

; 8310 : 
; 8311 :   /* "View.MemoryView":155
; 8312 :  * 
; 8313 :  *         cdef char order
; 8314 :  *         if mode == 'fortran':             # <<<<<<<<<<<<<<
; 8315 :  *             order = b'F'
; 8316 :  *             self.mode = u'fortran'
; 8317 :  */
; 8318 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 155, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 8318		; 0000207eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7

; 8351 :   }
; 8352 : 
; 8353 :   /* "View.MemoryView":158
; 8354 :  *             order = b'F'
; 8355 :  *             self.mode = u'fortran'
; 8356 :  *         elif mode == 'c':             # <<<<<<<<<<<<<<
; 8357 :  *             order = b'C'
; 8358 :  *             self.mode = u'c'
; 8359 :  */
; 8360 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)

$LN243@pyx_array_@7:
	cmp	rbx, rcx
	mov	eax, r15d
	sete	al
	test	eax, r8d
	jne	$LN91@pyx_array_@7
	cmp	rdx, rcx
	mov	eax, r15d
	sete	al
	test	eax, r9d
	jne	$LN91@pyx_array_@7
	mov	r8d, 2
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN261@pyx_array_@7
	mov	rcx, rax
	call	__Pyx_PyObject_IsTrue
	add	QWORD PTR [rdi], -1
	mov	r13d, eax
	jne	SHORT $LN229@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN229@pyx_array_@7:
	test	r13d, r13d
	js	SHORT $LN261@pyx_array_@7

; 8361 :   if (__pyx_t_4) {

	test	r13d, r13d
	je	SHORT $LN91@pyx_array_@7
$LN260@pyx_array_@7:

; 8362 : 
; 8363 :     /* "View.MemoryView":159
; 8364 :  *             self.mode = u'fortran'
; 8365 :  *         elif mode == 'c':
; 8366 :  *             order = b'C'             # <<<<<<<<<<<<<<
; 8367 :  *             self.mode = u'c'
; 8368 :  *         else:
; 8369 :  */
; 8370 :     __pyx_v_order = 'C';
; 8371 : 
; 8372 :     /* "View.MemoryView":160
; 8373 :  *         elif mode == 'c':
; 8374 :  *             order = b'C'
; 8375 :  *             self.mode = u'c'             # <<<<<<<<<<<<<<
; 8376 :  *         else:
; 8377 :  *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
; 8378 :  */
; 8379 :     __Pyx_INCREF(__pyx_n_u_c);

	mov	rax, QWORD PTR __pyx_n_u_c
	mov	bl, 67					; 00000043H
	inc	QWORD PTR [rax]

; 8380 :     __Pyx_GIVEREF(__pyx_n_u_c);
; 8381 :     __Pyx_GOTREF(__pyx_v_self->mode);
; 8382 :     __Pyx_DECREF(__pyx_v_self->mode);

	mov	rax, QWORD PTR [r12+80]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r12+80]
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN89@pyx_array_@7
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN89@pyx_array_@7:

; 8383 :     __pyx_v_self->mode = __pyx_n_u_c;

	mov	rax, QWORD PTR __pyx_n_u_c
	mov	QWORD PTR [r12+80], rax
	jmp	$__pyx_L10$19399
$LN261@pyx_array_@7:

; 8351 :   }
; 8352 : 
; 8353 :   /* "View.MemoryView":158
; 8354 :  *             order = b'F'
; 8355 :  *             self.mode = u'fortran'
; 8356 :  *         elif mode == 'c':             # <<<<<<<<<<<<<<
; 8357 :  *             order = b'C'
; 8358 :  *             self.mode = u'c'
; 8359 :  */
; 8360 :   __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 8360		; 000020a8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN91@pyx_array_@7:

; 8384 : 
; 8385 :     /* "View.MemoryView":158
; 8386 :  *             order = b'F'
; 8387 :  *             self.mode = u'fortran'
; 8388 :  *         elif mode == 'c':             # <<<<<<<<<<<<<<
; 8389 :  *             order = b'C'
; 8390 :  *             self.mode = u'c'
; 8391 :  */
; 8392 :     goto __pyx_L10;
; 8393 :   }
; 8394 : 
; 8395 :   /* "View.MemoryView":162
; 8396 :  *             self.mode = u'c'
; 8397 :  *         else:
; 8398 :  *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
; 8399 :  * 
; 8400 :  *         self.len = fill_contig_strides_array(self._shape, self._strides,
; 8401 :  */
; 8402 :   /*else*/ {
; 8403 :     __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Invalid_mode_expected_c_or_fortr
	mov	rdx, rbx
	call	QWORD PTR __imp_PyString_Format
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN85@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 8403		; 000020d3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN85@pyx_array_@7:

; 8404 :     __Pyx_GOTREF(__pyx_t_5);
; 8405 :     __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 162, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN84@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 8405		; 000020d5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN84@pyx_array_@7:

; 8406 :     __Pyx_GOTREF(__pyx_t_9);
; 8407 :     __Pyx_GIVEREF(__pyx_t_5);
; 8408 :     PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
; 8409 :     __pyx_t_5 = 0;
; 8410 :     __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rdi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN82@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 8410		; 000020daH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN82@pyx_array_@7:

; 8411 :     __Pyx_GOTREF(__pyx_t_5);
; 8412 :     __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN81@pyx_array_@7
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN81@pyx_array_@7:

; 8413 :     __Pyx_Raise(__pyx_t_5, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rdi
	call	__Pyx_Raise

; 8414 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN76@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN76@pyx_array_@7:

; 8415 :     __PYX_ERR(2, 162, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 8415		; 000020dfH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN13@pyx_array_@7
$LN258@pyx_array_@7:

; 8320 : 
; 8321 :     /* "View.MemoryView":156
; 8322 :  *         cdef char order
; 8323 :  *         if mode == 'fortran':
; 8324 :  *             order = b'F'             # <<<<<<<<<<<<<<
; 8325 :  *             self.mode = u'fortran'
; 8326 :  *         elif mode == 'c':
; 8327 :  */
; 8328 :     __pyx_v_order = 'F';
; 8329 : 
; 8330 :     /* "View.MemoryView":157
; 8331 :  *         if mode == 'fortran':
; 8332 :  *             order = b'F'
; 8333 :  *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
; 8334 :  *         elif mode == 'c':
; 8335 :  *             order = b'C'
; 8336 :  */
; 8337 :     __Pyx_INCREF(__pyx_n_u_fortran);

	mov	rax, QWORD PTR __pyx_n_u_fortran
	mov	bl, 70					; 00000046H
	inc	QWORD PTR [rax]

; 8338 :     __Pyx_GIVEREF(__pyx_n_u_fortran);
; 8339 :     __Pyx_GOTREF(__pyx_v_self->mode);
; 8340 :     __Pyx_DECREF(__pyx_v_self->mode);

	mov	rax, QWORD PTR [r12+80]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [r12+80]
	cmp	QWORD PTR [rcx], rsi
	jne	SHORT $LN96@pyx_array_@7
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN96@pyx_array_@7:

; 8341 :     __pyx_v_self->mode = __pyx_n_u_fortran;

	mov	rax, QWORD PTR __pyx_n_u_fortran
	mov	QWORD PTR [r12+80], rax
$__pyx_L10$19399:

; 8416 :   }
; 8417 :   __pyx_L10:;
; 8418 : 
; 8419 :   /* "View.MemoryView":164
; 8420 :  *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
; 8421 :  * 
; 8422 :  *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
; 8423 :  *                                              itemsize, self.ndim, order)
; 8424 :  * 
; 8425 :  */
; 8426 :   __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

	mov	r9d, DWORD PTR [r12+48]
	mov	r8, QWORD PTR __pyx_v_itemsize$[rsp]
	mov	rdx, QWORD PTR [r12+64]
	mov	rcx, QWORD PTR [r12+56]
	mov	BYTE PTR [rsp+32], bl
	call	__pyx_fill_contig_strides_array

; 8427 : 
; 8428 :   /* "View.MemoryView":167
; 8429 :  *                                              itemsize, self.ndim, order)
; 8430 :  * 
; 8431 :  *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
; 8432 :  *         self.dtype_is_object = format == b'O'
; 8433 :  *         if allocate_buffer:
; 8434 :  */
; 8435 :   __pyx_v_self->free_data = __pyx_v_allocate_buffer;

	mov	r13d, DWORD PTR __pyx_v_allocate_buffer$[rsp]

; 8436 : 
; 8437 :   /* "View.MemoryView":168
; 8438 :  * 
; 8439 :  *         self.free_data = allocate_buffer
; 8440 :  *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
; 8441 :  *         if allocate_buffer:
; 8442 :  * 
; 8443 :  */
; 8444 :   __pyx_t_5 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 168, __pyx_L1_error)

	mov	r8d, 2
	mov	DWORD PTR [r12+104], r13d
	mov	QWORD PTR [r12+32], rax
	mov	rdx, QWORD PTR __pyx_n_b_O
	mov	rcx, r14
	call	QWORD PTR __imp_PyObject_RichCompare
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN72@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 168		; 000000a8H
	mov	DWORD PTR __pyx_clineno, 8444		; 000020fcH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_array_@7
$LN72@pyx_array_@7:

; 8445 :   __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 168, __pyx_L1_error)

	mov	rcx, rax
	call	__Pyx_PyObject_IsTrue
	mov	ebx, eax
	cmp	eax, -1
	jne	SHORT $LN70@pyx_array_@7
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN70@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 168		; 000000a8H
	mov	DWORD PTR __pyx_clineno, 8445		; 000020fdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN43@pyx_array_@7
$LN70@pyx_array_@7:

; 8446 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN69@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN69@pyx_array_@7:

; 8447 :   __pyx_v_self->dtype_is_object = __pyx_t_4;

	mov	DWORD PTR [r12+108], ebx

; 8448 : 
; 8449 :   /* "View.MemoryView":169
; 8450 :  *         self.free_data = allocate_buffer
; 8451 :  *         self.dtype_is_object = format == b'O'
; 8452 :  *         if allocate_buffer:             # <<<<<<<<<<<<<<
; 8453 :  * 
; 8454 :  * 
; 8455 :  */
; 8456 :   __pyx_t_4 = (__pyx_v_allocate_buffer != 0);

	test	r13d, r13d

; 8457 :   if (__pyx_t_4) {

	je	$__pyx_L0$19483

; 8458 : 
; 8459 :     /* "View.MemoryView":172
; 8460 :  * 
; 8461 :  * 
; 8462 :  *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
; 8463 :  *             if not self.data:
; 8464 :  *                 raise MemoryError("unable to allocate array data.")
; 8465 :  */
; 8466 :     __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

	mov	rcx, QWORD PTR [r12+32]
	call	QWORD PTR __imp_malloc
	mov	r11, rax
	mov	QWORD PTR [r12+24], rax

; 8467 : 
; 8468 :     /* "View.MemoryView":173
; 8469 :  * 
; 8470 :  *             self.data = <char *>malloc(self.len)
; 8471 :  *             if not self.data:             # <<<<<<<<<<<<<<
; 8472 :  *                 raise MemoryError("unable to allocate array data.")
; 8473 :  * 
; 8474 :  */
; 8475 :     __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);

	test	rax, rax

; 8476 :     if (__pyx_t_4) {

	jne	$LN64@pyx_array_@7

; 8477 : 
; 8478 :       /* "View.MemoryView":174
; 8479 :  *             self.data = <char *>malloc(self.len)
; 8480 :  *             if not self.data:
; 8481 :  *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
; 8482 :  * 
; 8483 :  *             if self.dtype_is_object:
; 8484 :  */
; 8485 :       __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 174, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__16
	mov	rcx, QWORD PTR __pyx_builtin_MemoryError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN63@pyx_array_@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 174		; 000000aeH
	mov	DWORD PTR __pyx_clineno, 8485		; 00002125H
	mov	QWORD PTR __pyx_filename, rax
$LN43@pyx_array_@7:

; 8588 :   __Pyx_XDECREF(__pyx_t_5);

	test	rdi, rdi
	je	SHORT $LN33@pyx_array_@7
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN33@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN33@pyx_array_@7:

; 8589 :   __Pyx_XDECREF(__pyx_t_9);

	test	rsi, rsi
	je	SHORT $LN23@pyx_array_@7
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN23@pyx_array_@7
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN23@pyx_array_@7:

; 8590 :   __Pyx_XDECREF(__pyx_t_10);

	test	rbp, rbp
	je	SHORT $LN13@pyx_array_@7
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN13@pyx_array_@7
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]

; 8592 :   __pyx_r = -1;

	jmp	SHORT $LN13@pyx_array_@7
$LN63@pyx_array_@7:

; 8486 :       __Pyx_GOTREF(__pyx_t_5);
; 8487 :       __Pyx_Raise(__pyx_t_5, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 8488 :       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN61@pyx_array_@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN61@pyx_array_@7:

; 8489 :       __PYX_ERR(2, 174, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 174		; 000000aeH
	mov	DWORD PTR __pyx_clineno, 8489		; 00002129H
	mov	QWORD PTR __pyx_filename, rax
$LN13@pyx_array_@7:

; 8591 :   __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CA@NAILOBKL@View?4MemoryView?4array?4__cinit__?$AA@
	call	__Pyx_AddTraceback

; 8592 :   __pyx_r = -1;

	mov	r14, QWORD PTR __pyx_v_format$[rsp]
	or	r15d, -1
	jmp	SHORT $__pyx_L0$19483
$LN64@pyx_array_@7:

; 8490 : 
; 8491 :       /* "View.MemoryView":173
; 8492 :  * 
; 8493 :  *             self.data = <char *>malloc(self.len)
; 8494 :  *             if not self.data:             # <<<<<<<<<<<<<<
; 8495 :  *                 raise MemoryError("unable to allocate array data.")
; 8496 :  * 
; 8497 :  */
; 8498 :     }
; 8499 : 
; 8500 :     /* "View.MemoryView":176
; 8501 :  *                 raise MemoryError("unable to allocate array data.")
; 8502 :  * 
; 8503 :  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 8504 :  *                 p = <PyObject **> self.data
; 8505 :  *                 for i in range(self.len / itemsize):
; 8506 :  */
; 8507 :     __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);

	cmp	DWORD PTR [r12+108], esi

; 8508 :     if (__pyx_t_4) {

	je	SHORT $__pyx_L0$19483

; 8509 : 
; 8510 :       /* "View.MemoryView":177
; 8511 :  * 
; 8512 :  *             if self.dtype_is_object:
; 8513 :  *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
; 8514 :  *                 for i in range(self.len / itemsize):
; 8515 :  *                     p[i] = Py_None
; 8516 :  */
; 8517 :       __pyx_v_p = ((PyObject **)__pyx_v_self->data);
; 8518 : 
; 8519 :       /* "View.MemoryView":178
; 8520 :  *             if self.dtype_is_object:
; 8521 :  *                 p = <PyObject **> self.data
; 8522 :  *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
; 8523 :  *                     p[i] = Py_None
; 8524 :  *                     Py_INCREF(Py_None)
; 8525 :  */
; 8526 :       if (unlikely(__pyx_v_itemsize == 0)) {
; 8527 :         PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
; 8528 :         __PYX_ERR(2, 178, __pyx_L1_error)
; 8529 :       }
; 8530 :       else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
; 8531 :         PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
; 8532 :         __PYX_ERR(2, 178, __pyx_L1_error)
; 8533 :       }
; 8534 :       __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);

	mov	rax, QWORD PTR [r12+32]

; 8535 :       for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {

	mov	rcx, r15
	cdq
	idiv	QWORD PTR __pyx_v_itemsize$[rsp]
	mov	r8, rax
	test	rax, rax
	jle	SHORT $__pyx_L0$19483
	npad	10
$LL53@pyx_array_@7:

; 8536 :         __pyx_v_i = __pyx_t_8;
; 8537 : 
; 8538 :         /* "View.MemoryView":179
; 8539 :  *                 p = <PyObject **> self.data
; 8540 :  *                 for i in range(self.len / itemsize):
; 8541 :  *                     p[i] = Py_None             # <<<<<<<<<<<<<<
; 8542 :  *                     Py_INCREF(Py_None)
; 8543 :  * 
; 8544 :  */
; 8545 :         (__pyx_v_p[__pyx_v_i]) = Py_None;

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	rcx
	mov	QWORD PTR [r11+rcx*8-8], rax

; 8546 : 
; 8547 :         /* "View.MemoryView":180
; 8548 :  *                 for i in range(self.len / itemsize):
; 8549 :  *                     p[i] = Py_None
; 8550 :  *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
; 8551 :  * 
; 8552 :  *     @cname('getbuffer')
; 8553 :  */
; 8554 :         Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	cmp	rcx, r8
	jl	SHORT $LL53@pyx_array_@7
$__pyx_L0$19483:

; 8593 :   __pyx_L0:;
; 8594 :   __Pyx_XDECREF(__pyx_v_format);

	add	QWORD PTR [r14], -1
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+144]
	jne	SHORT $LN262@pyx_array_@7
	mov	rdx, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rdx+48]
$LN262@pyx_array_@7:

; 8595 :   __Pyx_RefNannyFinishContext();
; 8596 :   return __pyx_r;

	mov	eax, r15d

; 8597 : }

	add	rsp, 120				; 00000078H
	pop	r15
	pop	r14
	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MPCIJPMF@View?4MemoryView?4array?4__getbuffe@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__ DD imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__
	DD	imagerel __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__+594
	DD	imagerel $unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__ DD 084801H
	DD	067448H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT ??_C@_0CE@MPCIJPMF@View?4MemoryView?4array?4__getbuffe@
CONST	SEGMENT
??_C@_0CE@MPCIJPMF@View?4MemoryView?4array?4__getbuffe@ DB 'View.MemoryVi'
	DB	'ew.array.__getbuffer__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_info$ = 56
__pyx_v_flags$ = 64
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__ PROC ; COMDAT

; 8620 : static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	ebp, r8d
	mov	rbx, rdx
	mov	rsi, rcx

; 8621 :   int __pyx_v_bufmode;
; 8622 :   int __pyx_r;
; 8623 :   __Pyx_RefNannyDeclarations
; 8624 :   int __pyx_t_1;
; 8625 :   int __pyx_t_2;
; 8626 :   PyObject *__pyx_t_3 = NULL;
; 8627 :   char *__pyx_t_4;
; 8628 :   Py_ssize_t __pyx_t_5;
; 8629 :   int __pyx_t_6;
; 8630 :   Py_ssize_t *__pyx_t_7;
; 8631 :   __Pyx_RefNannySetupContext("__getbuffer__", 0);
; 8632 :   if (__pyx_v_info != NULL) {

	test	rdx, rdx
	je	SHORT $LN40@pyx_array_@8

; 8633 :     __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
$LN40@pyx_array_@8:

; 8634 :     __Pyx_GIVEREF(__pyx_v_info->obj);
; 8635 :   }
; 8636 : 
; 8637 :   /* "View.MemoryView":184
; 8638 :  *     @cname('getbuffer')
; 8639 :  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 8640 :  *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
; 8641 :  *         if self.mode == u"c":
; 8642 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8643 :  */
; 8644 :   __pyx_v_bufmode = -1;
; 8645 : 
; 8646 :   /* "View.MemoryView":185
; 8647 :  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 8648 :  *         cdef int bufmode = -1
; 8649 :  *         if self.mode == u"c":             # <<<<<<<<<<<<<<
; 8650 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8651 :  *         elif self.mode == u"fortran":
; 8652 :  */
; 8653 :   __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 185, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_u_c
	mov	rcx, QWORD PTR [rcx+80]
	mov	r8d, 2
	mov	QWORD PTR [rsp+48], rdi
	call	__Pyx_PyUnicode_Equals
	test	eax, eax
	jns	SHORT $LN39@pyx_array_@8
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 185				; 000000b9H
	mov	edx, 8653				; 000021cdH
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$19602
$LN39@pyx_array_@8:

; 8654 :   __pyx_t_2 = (__pyx_t_1 != 0);

	test	eax, eax

; 8655 :   if (__pyx_t_2) {

	je	SHORT $LN38@pyx_array_@8

; 8656 : 
; 8657 :     /* "View.MemoryView":186
; 8658 :  *         cdef int bufmode = -1
; 8659 :  *         if self.mode == u"c":
; 8660 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
; 8661 :  *         elif self.mode == u"fortran":
; 8662 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8663 :  */
; 8664 :     __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

	mov	eax, 184				; 000000b8H

; 8665 : 
; 8666 :     /* "View.MemoryView":185
; 8667 :  *     def __getbuffer__(self, Py_buffer *info, int flags):
; 8668 :  *         cdef int bufmode = -1
; 8669 :  *         if self.mode == u"c":             # <<<<<<<<<<<<<<
; 8670 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8671 :  *         elif self.mode == u"fortran":
; 8672 :  */
; 8673 :     goto __pyx_L3;

	jmp	SHORT $__pyx_L3$19604
$LN38@pyx_array_@8:

; 8674 :   }
; 8675 : 
; 8676 :   /* "View.MemoryView":187
; 8677 :  *         if self.mode == u"c":
; 8678 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8679 :  *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
; 8680 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8681 :  *         if not (flags & bufmode):
; 8682 :  */
; 8683 :   __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 187, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_u_fortran
	mov	rcx, QWORD PTR [rsi+80]
	mov	r8d, 2
	call	__Pyx_PyUnicode_Equals
	mov	r11d, eax
	test	eax, eax
	jns	SHORT $LN37@pyx_array_@8
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 187				; 000000bbH
	mov	edx, 8683				; 000021ebH
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$19602
$LN37@pyx_array_@8:

; 8684 :   __pyx_t_1 = (__pyx_t_2 != 0);
; 8685 :   if (__pyx_t_1) {

	or	eax, -1
	mov	ecx, 216				; 000000d8H
	test	r11d, r11d
	cmovne	eax, ecx
$__pyx_L3$19604:

; 8686 : 
; 8687 :     /* "View.MemoryView":188
; 8688 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8689 :  *         elif self.mode == u"fortran":
; 8690 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
; 8691 :  *         if not (flags & bufmode):
; 8692 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")
; 8693 :  */
; 8694 :     __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);
; 8695 : 
; 8696 :     /* "View.MemoryView":187
; 8697 :  *         if self.mode == u"c":
; 8698 :  *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8699 :  *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
; 8700 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8701 :  *         if not (flags & bufmode):
; 8702 :  */
; 8703 :   }
; 8704 :   __pyx_L3:;
; 8705 : 
; 8706 :   /* "View.MemoryView":189
; 8707 :  *         elif self.mode == u"fortran":
; 8708 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8709 :  *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
; 8710 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")
; 8711 :  *         info.buf = self.data
; 8712 :  */
; 8713 :   __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);

	test	eax, ebp

; 8714 :   if (__pyx_t_1) {

	jne	$LN35@pyx_array_@8

; 8715 : 
; 8716 :     /* "View.MemoryView":190
; 8717 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8718 :  *         if not (flags & bufmode):
; 8719 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
; 8720 :  *         info.buf = self.data
; 8721 :  *         info.len = self.len
; 8722 :  */
; 8723 :     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 190, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__17
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN34@pyx_array_@8
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 190				; 000000beH
	mov	edx, 8723				; 00002213H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	SHORT $__pyx_L1_error$19602
$LN34@pyx_array_@8:

; 8724 :     __Pyx_GOTREF(__pyx_t_3);
; 8725 :     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 8726 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN32@pyx_array_@8
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN32@pyx_array_@8:

; 8727 :     __PYX_ERR(2, 190, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 190				; 000000beH
	mov	edx, 8727				; 00002217H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L1_error$19602:

; 8870 : 
; 8871 :   /* "View.MemoryView":183
; 8872 :  * 
; 8873 :  *     @cname('getbuffer')
; 8874 :  *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
; 8875 :  *         cdef int bufmode = -1
; 8876 :  *         if self.mode == u"c":
; 8877 :  */
; 8878 : 
; 8879 :   /* function exit code */
; 8880 :   __pyx_r = 0;
; 8881 :   goto __pyx_L0;
; 8882 :   __pyx_L1_error:;
; 8883 :   __Pyx_XDECREF(__pyx_t_3);
; 8884 :   __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CE@MPCIJPMF@View?4MemoryView?4array?4__getbuffe@
	call	__Pyx_AddTraceback

; 8885 :   __pyx_r = -1;
; 8886 :   if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

	test	rbx, rbx
	je	SHORT $LN44@pyx_array_@8
	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN44@pyx_array_@8

; 8887 :     __Pyx_GOTREF(__pyx_v_info->obj);
; 8888 :     __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

	dec	QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rbx+8]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN10@pyx_array_@8
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN10@pyx_array_@8:
	xor	edi, edi
	mov	QWORD PTR [rbx+8], rdi
$LN44@pyx_array_@8:

; 8895 :   }
; 8896 :   __pyx_L2:;
; 8897 :   __Pyx_RefNannyFinishContext();
; 8898 :   return __pyx_r;

	or	eax, -1

; 8889 :   }
; 8890 :   goto __pyx_L2;

	jmp	$__pyx_L2$19669
$LN35@pyx_array_@8:

; 8728 : 
; 8729 :     /* "View.MemoryView":189
; 8730 :  *         elif self.mode == u"fortran":
; 8731 :  *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
; 8732 :  *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
; 8733 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")
; 8734 :  *         info.buf = self.data
; 8735 :  */
; 8736 :   }
; 8737 : 
; 8738 :   /* "View.MemoryView":191
; 8739 :  *         if not (flags & bufmode):
; 8740 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")
; 8741 :  *         info.buf = self.data             # <<<<<<<<<<<<<<
; 8742 :  *         info.len = self.len
; 8743 :  *         info.ndim = self.ndim
; 8744 :  */
; 8745 :   __pyx_t_4 = __pyx_v_self->data;
; 8746 :   __pyx_v_info->buf = __pyx_t_4;

	mov	rax, QWORD PTR [rsi+24]

; 8747 : 
; 8748 :   /* "View.MemoryView":192
; 8749 :  *             raise ValueError("Can only create a buffer that is contiguous in memory.")
; 8750 :  *         info.buf = self.data
; 8751 :  *         info.len = self.len             # <<<<<<<<<<<<<<
; 8752 :  *         info.ndim = self.ndim
; 8753 :  *         info.shape = self._shape
; 8754 :  */
; 8755 :   __pyx_t_5 = __pyx_v_self->len;
; 8756 :   __pyx_v_info->len = __pyx_t_5;
; 8757 : 
; 8758 :   /* "View.MemoryView":193
; 8759 :  *         info.buf = self.data
; 8760 :  *         info.len = self.len
; 8761 :  *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
; 8762 :  *         info.shape = self._shape
; 8763 :  *         info.strides = self._strides
; 8764 :  */
; 8765 :   __pyx_t_6 = __pyx_v_self->ndim;
; 8766 :   __pyx_v_info->ndim = __pyx_t_6;
; 8767 : 
; 8768 :   /* "View.MemoryView":194
; 8769 :  *         info.len = self.len
; 8770 :  *         info.ndim = self.ndim
; 8771 :  *         info.shape = self._shape             # <<<<<<<<<<<<<<
; 8772 :  *         info.strides = self._strides
; 8773 :  *         info.suboffsets = NULL
; 8774 :  */
; 8775 :   __pyx_t_7 = __pyx_v_self->_shape;
; 8776 :   __pyx_v_info->shape = __pyx_t_7;
; 8777 : 
; 8778 :   /* "View.MemoryView":195
; 8779 :  *         info.ndim = self.ndim
; 8780 :  *         info.shape = self._shape
; 8781 :  *         info.strides = self._strides             # <<<<<<<<<<<<<<
; 8782 :  *         info.suboffsets = NULL
; 8783 :  *         info.itemsize = self.itemsize
; 8784 :  */
; 8785 :   __pyx_t_7 = __pyx_v_self->_strides;
; 8786 :   __pyx_v_info->strides = __pyx_t_7;
; 8787 : 
; 8788 :   /* "View.MemoryView":196
; 8789 :  *         info.shape = self._shape
; 8790 :  *         info.strides = self._strides
; 8791 :  *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
; 8792 :  *         info.itemsize = self.itemsize
; 8793 :  *         info.readonly = 0
; 8794 :  */
; 8795 :   __pyx_v_info->suboffsets = NULL;

	xor	edi, edi
	mov	QWORD PTR [rbx], rax
	mov	rax, QWORD PTR [rsi+32]
	mov	QWORD PTR [rbx+16], rax
	mov	eax, DWORD PTR [rsi+48]
	mov	DWORD PTR [rbx+36], eax
	mov	rax, QWORD PTR [rsi+56]
	mov	QWORD PTR [rbx+48], rax
	mov	rax, QWORD PTR [rsi+64]
	mov	QWORD PTR [rbx+64], rdi
	mov	QWORD PTR [rbx+56], rax

; 8796 : 
; 8797 :   /* "View.MemoryView":197
; 8798 :  *         info.strides = self._strides
; 8799 :  *         info.suboffsets = NULL
; 8800 :  *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
; 8801 :  *         info.readonly = 0
; 8802 :  * 
; 8803 :  */
; 8804 :   __pyx_t_5 = __pyx_v_self->itemsize;
; 8805 :   __pyx_v_info->itemsize = __pyx_t_5;

	mov	rax, QWORD PTR [rsi+72]

; 8806 : 
; 8807 :   /* "View.MemoryView":198
; 8808 :  *         info.suboffsets = NULL
; 8809 :  *         info.itemsize = self.itemsize
; 8810 :  *         info.readonly = 0             # <<<<<<<<<<<<<<
; 8811 :  * 
; 8812 :  *         if flags & PyBUF_FORMAT:
; 8813 :  */
; 8814 :   __pyx_v_info->readonly = 0;

	mov	DWORD PTR [rbx+32], edi
	mov	QWORD PTR [rbx+24], rax

; 8815 : 
; 8816 :   /* "View.MemoryView":200
; 8817 :  *         info.readonly = 0
; 8818 :  * 
; 8819 :  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 8820 :  *             info.format = self.format
; 8821 :  *         else:
; 8822 :  */
; 8823 :   __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
; 8824 :   if (__pyx_t_1) {

	test	bpl, 4
	je	SHORT $LN28@pyx_array_@8

; 8825 : 
; 8826 :     /* "View.MemoryView":201
; 8827 :  * 
; 8828 :  *         if flags & PyBUF_FORMAT:
; 8829 :  *             info.format = self.format             # <<<<<<<<<<<<<<
; 8830 :  *         else:
; 8831 :  *             info.format = NULL
; 8832 :  */
; 8833 :     __pyx_t_4 = __pyx_v_self->format;
; 8834 :     __pyx_v_info->format = __pyx_t_4;

	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR [rbx+40], rax

; 8835 : 
; 8836 :     /* "View.MemoryView":200
; 8837 :  *         info.readonly = 0
; 8838 :  * 
; 8839 :  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 8840 :  *             info.format = self.format
; 8841 :  *         else:
; 8842 :  */
; 8843 :     goto __pyx_L5;

	jmp	SHORT $__pyx_L5$19622
$LN28@pyx_array_@8:

; 8844 :   }
; 8845 : 
; 8846 :   /* "View.MemoryView":203
; 8847 :  *             info.format = self.format
; 8848 :  *         else:
; 8849 :  *             info.format = NULL             # <<<<<<<<<<<<<<
; 8850 :  * 
; 8851 :  *         info.obj = self
; 8852 :  */
; 8853 :   /*else*/ {
; 8854 :     __pyx_v_info->format = NULL;

	mov	QWORD PTR [rbx+40], rdi
$__pyx_L5$19622:

; 8855 :   }
; 8856 :   __pyx_L5:;
; 8857 : 
; 8858 :   /* "View.MemoryView":205
; 8859 :  *             info.format = NULL
; 8860 :  * 
; 8861 :  *         info.obj = self             # <<<<<<<<<<<<<<
; 8862 :  * 
; 8863 :  *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
; 8864 :  */
; 8865 :   __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rsi]

; 8866 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
; 8867 :   __Pyx_GOTREF(__pyx_v_info->obj);
; 8868 :   __Pyx_DECREF(__pyx_v_info->obj);

	mov	rax, QWORD PTR [rbx+8]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbx+8]
	cmp	QWORD PTR [rcx], rdi
	jne	SHORT $LN26@pyx_array_@8
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN26@pyx_array_@8:

; 8869 :   __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

	mov	QWORD PTR [rbx+8], rsi

; 8891 :   __pyx_L0:;
; 8892 :   if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$__pyx_L0$19637:
	cmp	rsi, rax
	jne	SHORT $LN43@pyx_array_@8

; 8893 :     __Pyx_GOTREF(Py_None);
; 8894 :     __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	cmp	QWORD PTR [rcx], rdi
	jne	SHORT $LN4@pyx_array_@8
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN4@pyx_array_@8:
	mov	QWORD PTR [rbx+8], rdi
$LN43@pyx_array_@8:

; 8895 :   }
; 8896 :   __pyx_L2:;
; 8897 :   __Pyx_RefNannyFinishContext();
; 8898 :   return __pyx_r;

	mov	eax, edi
$__pyx_L2$19669:
	mov	rdi, QWORD PTR [rsp+48]

; 8899 : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_array___dealloc__ PROC				; COMDAT

; 8912 :   __Pyx_RefNannyDeclarations
; 8913 :   __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
; 8914 :   __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));
; 8915 : 
; 8916 :   /* function exit code */
; 8917 :   __Pyx_RefNannyFinishContext();
; 8918 : }

	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__
__pyx_array___dealloc__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__ DD imagerel __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__
	DD	imagerel __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__+79
	DD	imagerel $unwind$__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__ PROC ; COMDAT

; 9042 : static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 9043 :   PyObject *__pyx_r = 0;
; 9044 :   __Pyx_RefNannyDeclarations
; 9045 :   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 9046 :   __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

	mov	rax, QWORD PTR [rcx+16]
	call	QWORD PTR [rax]
	test	rax, rax
	jne	SHORT $__pyx_L0$41898
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@
	mov	edx, 9067				; 0000236bH
	mov	r8d, 221				; 000000ddH
	mov	DWORD PTR __pyx_lineno, 221		; 000000ddH
	mov	DWORD PTR __pyx_clineno, 9067		; 0000236bH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$41897:
	call	__Pyx_AddTraceback

; 9047 : 
; 9048 :   /* function exit code */
; 9049 :   __Pyx_RefNannyFinishContext();
; 9050 :   return __pyx_r;

	xor	eax, eax
$__pyx_L0$41898:

; 9051 : }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___getattr__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_attr$ = 16
__pyx_array___getattr__ PROC				; COMDAT

; 9230 :   PyObject *__pyx_r = 0;
; 9231 :   __Pyx_RefNannyDeclarations
; 9232 :   __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
; 9233 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
; 9234 : 
; 9235 :   /* function exit code */
; 9236 :   __Pyx_RefNannyFinishContext();
; 9237 :   return __pyx_r;
; 9238 : }

	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__
__pyx_array___getattr__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___getitem__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_item$ = 16
__pyx_array___getitem__ PROC				; COMDAT

; 9295 :   PyObject *__pyx_r = 0;
; 9296 :   __Pyx_RefNannyDeclarations
; 9297 :   __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
; 9298 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));
; 9299 : 
; 9300 :   /* function exit code */
; 9301 :   __Pyx_RefNannyFinishContext();
; 9302 :   return __pyx_r;
; 9303 : }

	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__
__pyx_array___getitem__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array___setitem__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_item$ = 16
__pyx_v_value$ = 24
__pyx_array___setitem__ PROC				; COMDAT

; 9360 :   int __pyx_r;
; 9361 :   __Pyx_RefNannyDeclarations
; 9362 :   __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
; 9363 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));
; 9364 : 
; 9365 :   /* function exit code */
; 9366 :   __Pyx_RefNannyFinishContext();
; 9367 :   return __pyx_r;
; 9368 : }

	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__
__pyx_array___setitem__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_array_1__reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_pw___pyx_array_1__reduce_cython__ PROC		; COMDAT

; 9417 :   PyObject *__pyx_r = 0;
; 9418 :   __Pyx_RefNannyDeclarations
; 9419 :   __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
; 9420 :   __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));
; 9421 : 
; 9422 :   /* function exit code */
; 9423 :   __Pyx_RefNannyFinishContext();
; 9424 :   return __pyx_r;
; 9425 : }

	jmp	__pyx_pf___pyx_array___reduce_cython__
__pyx_pw___pyx_array_1__reduce_cython__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_array_3__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v___pyx_state$ = 16
__pyx_pw___pyx_array_3__setstate_cython__ PROC		; COMDAT

; 9471 :   PyObject *__pyx_r = 0;
; 9472 :   __Pyx_RefNannyDeclarations
; 9473 :   __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
; 9474 :   __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
; 9475 : 
; 9476 :   /* function exit code */
; 9477 :   __Pyx_RefNannyFinishContext();
; 9478 :   return __pyx_r;
; 9479 : }

	jmp	__pyx_pf___pyx_array_2__setstate_cython__
__pyx_pw___pyx_array_3__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@PONDBPMG@View?4MemoryView?4Enum?4__reduce_cy@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+8
	DD	imagerel $unwind$__pyx_pf___pyx_MemviewEnum___reduce_cython__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+8
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+1046
	DD	imagerel $chain$3$__pyx_pf___pyx_MemviewEnum___reduce_cython__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+1046
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+1073
	DD	imagerel $chain$4$__pyx_pf___pyx_MemviewEnum___reduce_cython__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+1073
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+1102
	DD	imagerel $chain$5$__pyx_pf___pyx_MemviewEnum___reduce_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD 021H
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+8
	DD	imagerel $unwind$__pyx_pf___pyx_MemviewEnum___reduce_cython__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD 020021H
	DD	095400H
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+8
	DD	imagerel $unwind$__pyx_pf___pyx_MemviewEnum___reduce_cython__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD 081621H
	DD	04d416H
	DD	0a640fH
	DD	09540aH
	DD	083405H
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__
	DD	imagerel __pyx_pf___pyx_MemviewEnum___reduce_cython__+8
	DD	imagerel $unwind$__pyx_pf___pyx_MemviewEnum___reduce_cython__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_MemviewEnum___reduce_cython__ DD 030801H
	DD	0c0044208H
	DD	07002H
xdata	ENDS
;	COMDAT ??_C@_0CH@PONDBPMG@View?4MemoryView?4Enum?4__reduce_cy@
CONST	SEGMENT
??_C@_0CH@PONDBPMG@View?4MemoryView?4Enum?4__reduce_cy@ DB 'View.MemoryVi'
	DB	'ew.Enum.__reduce_cython__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_MemviewEnum___reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 64
__pyx_pf___pyx_MemviewEnum___reduce_cython__ PROC	; COMDAT

; 9849 : static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {

	push	rdi
	push	r12
	sub	rsp, 40					; 00000028H
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rbp
	mov	QWORD PTR [rsp+80], rsi

; 9850 :   int __pyx_v_use_setstate;
; 9851 :   PyObject *__pyx_v_state = NULL;

	xor	ebp, ebp
	mov	QWORD PTR [rsp+32], r13
	mov	r13, rcx

; 9852 :   PyObject *__pyx_v__dict = NULL;
; 9853 :   PyObject *__pyx_r = NULL;
; 9854 :   __Pyx_RefNannyDeclarations
; 9855 :   PyObject *__pyx_t_1 = NULL;
; 9856 :   int __pyx_t_2;
; 9857 :   int __pyx_t_3;
; 9858 :   PyObject *__pyx_t_4 = NULL;
; 9859 :   PyObject *__pyx_t_5 = NULL;
; 9860 :   __Pyx_RefNannySetupContext("__reduce_cython__", 0);
; 9861 : 
; 9862 :   /* "(tree fragment)":3
; 9863 :  * def __reduce_cython__(self):
; 9864 :  *     cdef bint use_setstate
; 9865 :  *     state = (self.name,)             # <<<<<<<<<<<<<<
; 9866 :  *     _dict = getattr(self, '__dict__', None)
; 9867 :  *     if _dict is not None:
; 9868 :  */
; 9869 :   __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 3, __pyx_L1_error)

	lea	ecx, QWORD PTR [rbp+1]
	xor	r12d, r12d
	xor	esi, esi
	xor	edi, edi
	call	QWORD PTR __imp_PyTuple_New
	mov	r11, rax
	test	rax, rax
	jne	SHORT $LN95@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 3
	mov	DWORD PTR __pyx_clineno, 9869		; 0000268dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_pf___p@7
$LN95@pyx_pf___p@7:

; 9870 :   __Pyx_GOTREF(__pyx_t_1);
; 9871 :   __Pyx_INCREF(__pyx_v_self->name);

	mov	rax, QWORD PTR [r13+16]

; 9872 :   __Pyx_GIVEREF(__pyx_v_self->name);
; 9873 :   PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
; 9874 :   __pyx_v_state = ((PyObject*)__pyx_t_1);

	mov	rbp, r11
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [r13+16]
	mov	QWORD PTR [r11+24], rax

; 9875 :   __pyx_t_1 = 0;
; 9876 : 
; 9877 :   /* "(tree fragment)":4
; 9878 :  *     cdef bint use_setstate
; 9879 :  *     state = (self.name,)
; 9880 :  *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
; 9881 :  *     if _dict is not None:
; 9882 :  *         state += (_dict,)
; 9883 :  */
; 9884 :   __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dict
	mov	rbx, QWORD PTR __imp__Py_NoneStruct
	mov	rax, QWORD PTR [rdx+8]
	bt	DWORD PTR [rax+168], 27
	jae	SHORT $LN102@pyx_pf___p@7
	mov	rax, QWORD PTR [r13+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN106@pyx_pf___p@7
	mov	rcx, r13
	call	r8
	jmp	SHORT $LN103@pyx_pf___p@7
$LN106@pyx_pf___p@7:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN105@pyx_pf___p@7
	add	rdx, 32					; 00000020H
	mov	rcx, r13
	call	r8
	jmp	SHORT $LN103@pyx_pf___p@7
$LN105@pyx_pf___p@7:
	mov	rcx, r13
	call	QWORD PTR __imp_PyObject_GetAttr
	jmp	SHORT $LN103@pyx_pf___p@7
$LN102@pyx_pf___p@7:
	mov	rcx, r13
	call	QWORD PTR __imp_PyObject_GetAttr
$LN103@pyx_pf___p@7:
	test	rax, rax
	jne	SHORT $LN101@pyx_pf___p@7
	mov	rcx, rbx
	call	__Pyx_GetAttr3Default
$LN101@pyx_pf___p@7:
	test	rax, rax
	jne	SHORT $LN94@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 9884		; 0000269cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_pf___p@7
$LN94@pyx_pf___p@7:

; 9885 :   __Pyx_GOTREF(__pyx_t_1);
; 9886 :   __pyx_v__dict = __pyx_t_1;
; 9887 :   __pyx_t_1 = 0;
; 9888 : 
; 9889 :   /* "(tree fragment)":5
; 9890 :  *     state = (self.name,)
; 9891 :  *     _dict = getattr(self, '__dict__', None)
; 9892 :  *     if _dict is not None:             # <<<<<<<<<<<<<<
; 9893 :  *         state += (_dict,)
; 9894 :  *         use_setstate = True
; 9895 :  */
; 9896 :   __pyx_t_2 = (__pyx_v__dict != Py_None);

	mov	rdx, QWORD PTR __imp__Py_NoneStruct
	mov	r12, rax
	cmp	rax, rdx

; 9897 :   __pyx_t_3 = (__pyx_t_2 != 0);
; 9898 :   if (__pyx_t_3) {

	je	$LN93@pyx_pf___p@7

; 9899 : 
; 9900 :     /* "(tree fragment)":6
; 9901 :  *     _dict = getattr(self, '__dict__', None)
; 9902 :  *     if _dict is not None:
; 9903 :  *         state += (_dict,)             # <<<<<<<<<<<<<<
; 9904 :  *         use_setstate = True
; 9905 :  *     else:
; 9906 :  */
; 9907 :     __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN92@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 6
	mov	DWORD PTR __pyx_clineno, 9907		; 000026b3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$20541
$LN92@pyx_pf___p@7:

; 9908 :     __Pyx_GOTREF(__pyx_t_1);
; 9909 :     __Pyx_INCREF(__pyx_v__dict);

	inc	QWORD PTR [r12]

; 9910 :     __Pyx_GIVEREF(__pyx_v__dict);
; 9911 :     PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
; 9912 :     __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)

	mov	rdx, rax
	mov	rcx, rbp
	mov	QWORD PTR [rax+24], r12
	call	QWORD PTR __imp_PyNumber_InPlaceAdd
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN90@pyx_pf___p@7
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 6
	mov	DWORD PTR __pyx_clineno, 9912		; 000026b8H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$20541
$LN90@pyx_pf___p@7:

; 9913 :     __Pyx_GOTREF(__pyx_t_4);
; 9914 :     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN89@pyx_pf___p@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN89@pyx_pf___p@7:

; 9915 :     __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));

	mov	rcx, rbp
	mov	rbp, rsi
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN69@pyx_pf___p@7
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]

; 9916 :     __pyx_t_4 = 0;
; 9917 : 
; 9918 :     /* "(tree fragment)":7
; 9919 :  *     if _dict is not None:
; 9920 :  *         state += (_dict,)
; 9921 :  *         use_setstate = True             # <<<<<<<<<<<<<<
; 9922 :  *     else:
; 9923 :  *         use_setstate = self.name is not None
; 9924 :  */
; 9925 :     __pyx_v_use_setstate = 1;
; 9926 : 
; 9927 :     /* "(tree fragment)":5
; 9928 :  *     state = (self.name,)
; 9929 :  *     _dict = getattr(self, '__dict__', None)
; 9930 :  *     if _dict is not None:             # <<<<<<<<<<<<<<
; 9931 :  *         state += (_dict,)
; 9932 :  *         use_setstate = True
; 9933 :  */
; 9934 :     goto __pyx_L3;

	jmp	SHORT $LN69@pyx_pf___p@7
$LN93@pyx_pf___p@7:

; 9935 :   }
; 9936 : 
; 9937 :   /* "(tree fragment)":9
; 9938 :  *         use_setstate = True
; 9939 :  *     else:
; 9940 :  *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
; 9941 :  *     if use_setstate:
; 9942 :  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
; 9943 :  */
; 9944 :   /*else*/ {
; 9945 :     __pyx_t_3 = (__pyx_v_self->name != Py_None);

	xor	eax, eax
	cmp	QWORD PTR [r13+16], rdx
$__pyx_L3$20578:
	setne	al

; 9946 :     __pyx_v_use_setstate = __pyx_t_3;
; 9947 :   }
; 9948 :   __pyx_L3:;
; 9949 : 
; 9950 :   /* "(tree fragment)":10
; 9951 :  *     else:
; 9952 :  *         use_setstate = self.name is not None
; 9953 :  *     if use_setstate:             # <<<<<<<<<<<<<<
; 9954 :  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
; 9955 :  *     else:
; 9956 :  */
; 9957 :   __pyx_t_3 = (__pyx_v_use_setstate != 0);

	test	eax, eax

; 9958 :   if (__pyx_t_3) {

	je	$LN56@pyx_pf___p@7
$LN69@pyx_pf___p@7:

; 9959 : 
; 9960 :     /* "(tree fragment)":11
; 9961 :  *         use_setstate = self.name is not None
; 9962 :  *     if use_setstate:
; 9963 :  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
; 9964 :  *     else:
; 9965 :  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
; 9966 :  */
; 9967 :     __Pyx_XDECREF(__pyx_r);
; 9968 :     __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 11, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_pyx_unpickle_Enum
	call	__Pyx_GetModuleGlobalName
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN66@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 9968		; 000026f0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_pf___p@7
$LN66@pyx_pf___p@7:

; 9969 :     __Pyx_GOTREF(__pyx_t_4);
; 9970 :     __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 11, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN65@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 9970		; 000026f2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$20541
$LN65@pyx_pf___p@7:

; 9971 :     __Pyx_GOTREF(__pyx_t_1);
; 9972 :     __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

	mov	rax, QWORD PTR [r13+8]

; 9973 :     __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
; 9974 :     PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
; 9975 :     __Pyx_INCREF(__pyx_int_184977713);
; 9976 :     __Pyx_GIVEREF(__pyx_int_184977713);
; 9977 :     PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
; 9978 :     __Pyx_INCREF(Py_None);
; 9979 :     __Pyx_GIVEREF(Py_None);
; 9980 :     PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
; 9981 :     __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 11, __pyx_L1_error)

	mov	ecx, 3
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [r13+8]
	mov	QWORD PTR [rbx+24], rax
	mov	rax, QWORD PTR __pyx_int_184977713
	inc	QWORD PTR [rax]
	mov	QWORD PTR [rbx+32], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbx+40], rax
	call	QWORD PTR __imp_PyTuple_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN64@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 9981		; 000026fdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$20541
$LN64@pyx_pf___p@7:

; 9982 :     __Pyx_GOTREF(__pyx_t_5);
; 9983 :     __Pyx_GIVEREF(__pyx_t_4);
; 9984 :     PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

	mov	QWORD PTR [rax+24], rsi

; 9985 :     __Pyx_GIVEREF(__pyx_t_1);
; 9986 :     PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);

	mov	QWORD PTR [rax+32], rbx

; 9987 :     __Pyx_INCREF(__pyx_v_state);

	inc	QWORD PTR [rbp]

; 9988 :     __Pyx_GIVEREF(__pyx_v_state);
; 9989 :     PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);

	mov	QWORD PTR [rax+40], rbp

; 9990 :     __pyx_t_4 = 0;
; 9991 :     __pyx_t_1 = 0;
; 9992 :     __pyx_r = __pyx_t_5;
; 9993 :     __pyx_t_5 = 0;
; 9994 :     goto __pyx_L0;

	jmp	$__pyx_L0$20615
$LN56@pyx_pf___p@7:

; 9995 : 
; 9996 :     /* "(tree fragment)":10
; 9997 :  *     else:
; 9998 :  *         use_setstate = self.name is not None
; 9999 :  *     if use_setstate:             # <<<<<<<<<<<<<<
; 10000:  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
; 10001:  *     else:
; 10002:  */
; 10003:   }
; 10004: 
; 10005:   /* "(tree fragment)":13
; 10006:  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
; 10007:  *     else:
; 10008:  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
; 10009:  * def __setstate_cython__(self, __pyx_state):
; 10010:  *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
; 10011:  */
; 10012:   /*else*/ {
; 10013:     __Pyx_XDECREF(__pyx_r);
; 10014:     __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_pyx_unpickle_Enum
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN53@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 13
	mov	DWORD PTR __pyx_clineno, 10014		; 0000271eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_pf___p@7
$LN53@pyx_pf___p@7:

; 10015:     __Pyx_GOTREF(__pyx_t_5);
; 10016:     __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN52@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 13
	mov	DWORD PTR __pyx_clineno, 10016		; 00002720H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$20541
$LN52@pyx_pf___p@7:

; 10017:     __Pyx_GOTREF(__pyx_t_1);
; 10018:     __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

	mov	rax, QWORD PTR [r13+8]

; 10019:     __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
; 10020:     PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
; 10021:     __Pyx_INCREF(__pyx_int_184977713);
; 10022:     __Pyx_GIVEREF(__pyx_int_184977713);
; 10023:     PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
; 10024:     __Pyx_INCREF(__pyx_v_state);
; 10025:     __Pyx_GIVEREF(__pyx_v_state);
; 10026:     PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
; 10027:     __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)

	mov	ecx, 2
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR [r13+8]
	mov	QWORD PTR [rbx+24], rax
	mov	rax, QWORD PTR __pyx_int_184977713
	inc	QWORD PTR [rax]
	mov	QWORD PTR [rbx+32], rax
	inc	QWORD PTR [rbp]
	mov	QWORD PTR [rbx+40], rbp
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	$LN51@pyx_pf___p@7
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 13
	mov	DWORD PTR __pyx_clineno, 10027		; 0000272bH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$20541:

; 10036:     __pyx_t_4 = 0;
; 10037:     goto __pyx_L0;
; 10038:   }
; 10039: 
; 10040:   /* "(tree fragment)":1
; 10041:  * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
; 10042:  *     cdef bint use_setstate
; 10043:  *     state = (self.name,)
; 10044:  */
; 10045: 
; 10046:   /* function exit code */
; 10047:   __pyx_L1_error:;
; 10048:   __Pyx_XDECREF(__pyx_t_1);

	test	rbx, rbx
	je	SHORT $LN43@pyx_pf___p@7
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN43@pyx_pf___p@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN43@pyx_pf___p@7:

; 10049:   __Pyx_XDECREF(__pyx_t_4);

	test	rsi, rsi
	je	SHORT $LN33@pyx_pf___p@7
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN33@pyx_pf___p@7
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN33@pyx_pf___p@7:

; 10050:   __Pyx_XDECREF(__pyx_t_5);

	test	rdi, rdi
	je	SHORT $LN23@pyx_pf___p@7
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN23@pyx_pf___p@7
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN23@pyx_pf___p@7:

; 10051:   __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CH@PONDBPMG@View?4MemoryView?4Enum?4__reduce_cy@
	call	__Pyx_AddTraceback

; 10052:   __pyx_r = NULL;

	xor	edi, edi
	jmp	SHORT $__pyx_L0$20615
$LN51@pyx_pf___p@7:

; 10028:     __Pyx_GOTREF(__pyx_t_4);
; 10029:     __Pyx_GIVEREF(__pyx_t_5);
; 10030:     PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

	mov	QWORD PTR [rax+24], rdi

; 10031:     __Pyx_GIVEREF(__pyx_t_1);
; 10032:     PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);

	mov	QWORD PTR [rax+32], rbx

; 10033:     __pyx_t_5 = 0;
; 10034:     __pyx_t_1 = 0;
; 10035:     __pyx_r = __pyx_t_4;

	mov	rdi, rax
$__pyx_L0$20615:
	mov	r13, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+64]

; 10053:   __pyx_L0:;
; 10054:   __Pyx_XDECREF(__pyx_v_state);

	test	rbp, rbp
	je	SHORT $LN13@pyx_pf___p@7
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN13@pyx_pf___p@7
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN13@pyx_pf___p@7:
	mov	rbp, QWORD PTR [rsp+72]

; 10055:   __Pyx_XDECREF(__pyx_v__dict);

	test	r12, r12
	je	SHORT $LN110@pyx_pf___p@7
	add	QWORD PTR [r12], -1
	jne	SHORT $LN110@pyx_pf___p@7
	mov	rdx, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rdx+48]
$LN110@pyx_pf___p@7:

; 10056:   __Pyx_XGIVEREF(__pyx_r);
; 10057:   __Pyx_RefNannyFinishContext();
; 10058:   return __pyx_r;

	mov	rax, rdi

; 10059: }

	add	rsp, 40					; 00000028H
	pop	r12
	pop	rdi
	ret	0
__pyx_pf___pyx_MemviewEnum___reduce_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@EDPBNPAL@View?4MemoryView?4Enum?4__setstate_@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf___pyx_MemviewEnum_2__setstate_cython__ DD imagerel __pyx_pf___pyx_MemviewEnum_2__setstate_cython__
	DD	imagerel __pyx_pf___pyx_MemviewEnum_2__setstate_cython__+168
	DD	imagerel $unwind$__pyx_pf___pyx_MemviewEnum_2__setstate_cython__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf___pyx_MemviewEnum_2__setstate_cython__ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@EDPBNPAL@View?4MemoryView?4Enum?4__setstate_@
CONST	SEGMENT
??_C@_0CJ@EDPBNPAL@View?4MemoryView?4Enum?4__setstate_@ DB 'View.MemoryVi'
	DB	'ew.Enum.__setstate_cython__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf___pyx_MemviewEnum_2__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v___pyx_state$ = 56
__pyx_pf___pyx_MemviewEnum_2__setstate_cython__ PROC	; COMDAT

; 10081: static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

	sub	rsp, 40					; 00000028H

; 10082:   PyObject *__pyx_r = NULL;
; 10083:   __Pyx_RefNannyDeclarations
; 10084:   PyObject *__pyx_t_1 = NULL;
; 10085:   __Pyx_RefNannySetupContext("__setstate_cython__", 0);
; 10086: 
; 10087:   /* "(tree fragment)":15
; 10088:  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
; 10089:  * def __setstate_cython__(self, __pyx_state):
; 10090:  *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
; 10091:  */
; 10092:   if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 15, __pyx_L1_error)

	mov	r9, QWORD PTR [rdx+8]
	cmp	r9, QWORD PTR __imp_PyTuple_Type
	je	SHORT $LN17@pyx_pf___p@8
	cmp	rdx, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN17@pyx_pf___p@8
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	lea	r8, OFFSET FLAT:??_C@_05NNMEHDAO@tuple?$AA@
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 10092				; 0000276cH
	jmp	SHORT $LN20@pyx_pf___p@8
$LN17@pyx_pf___p@8:

; 10093:   __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)

	call	__pyx_unpickle_Enum__set_state
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN15@pyx_pf___p@8
	mov	edx, 10093				; 0000276dH
$__pyx_L1_error$20756:
$LN20@pyx_pf___p@8:
	mov	r9, QWORD PTR __pyx_f+16

; 10106:   goto __pyx_L0;
; 10107:   __pyx_L1_error:;
; 10108:   __Pyx_XDECREF(__pyx_t_1);
; 10109:   __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CJ@EDPBNPAL@View?4MemoryView?4Enum?4__setstate_@
	mov	r8d, 15
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, 15
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 10110:   __pyx_r = NULL;
; 10111:   __pyx_L0:;
; 10112:   __Pyx_XGIVEREF(__pyx_r);
; 10113:   __Pyx_RefNannyFinishContext();
; 10114:   return __pyx_r;

	xor	eax, eax

; 10115: }

	add	rsp, 40					; 00000028H
	ret	0
$LN15@pyx_pf___p@8:

; 10094:   __Pyx_GOTREF(__pyx_t_1);
; 10095:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN14@pyx_pf___p@8
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$LN14@pyx_pf___p@8:

; 10096: 
; 10097:   /* "(tree fragment)":14
; 10098:  *     else:
; 10099:  *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
; 10100:  * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
; 10101:  *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
; 10102:  */
; 10103: 
; 10104:   /* function exit code */
; 10105:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$__pyx_L0$20770:
	inc	QWORD PTR [rax]

; 10115: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pf___pyx_MemviewEnum_2__setstate_cython__ ENDP
_TEXT	ENDS
EXTRN	__imp_PyThread_free_lock:PROC
_BSS	SEGMENT
__pyx_memoryview_thread_locks DQ 08H DUP (?)
__pyx_memoryview_thread_locks_used DD 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__+138
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__ PROC ; COMDAT

; 10592: static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 32					; 00000020H

; 10593:   int __pyx_v_i;
; 10594:   __Pyx_RefNannyDeclarations
; 10595:   int __pyx_t_1;
; 10596:   int __pyx_t_2;
; 10597:   int __pyx_t_3;
; 10598:   int __pyx_t_4;
; 10599:   PyThread_type_lock __pyx_t_5;
; 10600:   PyThread_type_lock __pyx_t_6;
; 10601:   __Pyx_RefNannySetupContext("__dealloc__", 0);
; 10602: 
; 10603:   /* "View.MemoryView":371
; 10604:  * 
; 10605:  *     def __dealloc__(memoryview self):
; 10606:  *         if self.obj is not None:             # <<<<<<<<<<<<<<
; 10607:  *             __Pyx_ReleaseBuffer(&self.view)
; 10608:  * 
; 10609:  */
; 10610:   __pyx_t_1 = (__pyx_v_self->obj != Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rbx, rcx
	cmp	QWORD PTR [rcx+24], rax

; 10611:   __pyx_t_2 = (__pyx_t_1 != 0);
; 10612:   if (__pyx_t_2) {

	je	SHORT $LN7@pyx_memory@21

; 10613: 
; 10614:     /* "View.MemoryView":372
; 10615:  *     def __dealloc__(memoryview self):
; 10616:  *         if self.obj is not None:
; 10617:  *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
; 10618:  * 
; 10619:  *         cdef int i
; 10620:  */
; 10621:     __Pyx_ReleaseBuffer((&__pyx_v_self->view));

	add	rcx, 72					; 00000048H
	call	__Pyx_ReleaseBuffer
$LN7@pyx_memory@21:

; 10622: 
; 10623:     /* "View.MemoryView":371
; 10624:  * 
; 10625:  *     def __dealloc__(memoryview self):
; 10626:  *         if self.obj is not None:             # <<<<<<<<<<<<<<
; 10627:  *             __Pyx_ReleaseBuffer(&self.view)
; 10628:  * 
; 10629:  */
; 10630:   }
; 10631: 
; 10632:   /* "View.MemoryView":376
; 10633:  *         cdef int i
; 10634:  *         global __pyx_memoryview_thread_locks_used
; 10635:  *         if self.lock != NULL:             # <<<<<<<<<<<<<<
; 10636:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10637:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10638:  */
; 10639:   __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);

	mov	rdx, QWORD PTR [rbx+48]
	test	rdx, rdx

; 10640:   if (__pyx_t_2) {

	je	SHORT $__pyx_L6_break$20961

; 10641: 
; 10642:     /* "View.MemoryView":377
; 10643:  *         global __pyx_memoryview_thread_locks_used
; 10644:  *         if self.lock != NULL:
; 10645:  *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
; 10646:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10647:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10648:  */
; 10649:     __pyx_t_3 = __pyx_memoryview_thread_locks_used;
; 10650:     for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

	movsxd	r9, DWORD PTR __pyx_memoryview_thread_locks_used
	xor	ecx, ecx
	mov	rax, rcx
	test	r9d, r9d
	jle	SHORT $LN3@pyx_memory@21
	lea	r10, OFFSET FLAT:__pyx_memoryview_thread_locks
$LL5@pyx_memory@21:

; 10651:       __pyx_v_i = __pyx_t_4;
; 10652: 
; 10653:       /* "View.MemoryView":378
; 10654:  *         if self.lock != NULL:
; 10655:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10656:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
; 10657:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10658:  *                     if i != __pyx_memoryview_thread_locks_used:
; 10659:  */
; 10660:       __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);

	cmp	QWORD PTR [r10+rax*8], rdx

; 10661:       if (__pyx_t_2) {

	je	SHORT $LN11@pyx_memory@21
	inc	rax
	inc	ecx
	cmp	rax, r9
	jl	SHORT $LL5@pyx_memory@21
$LN3@pyx_memory@21:

; 10701: 
; 10702:           /* "View.MemoryView":380
; 10703:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10704:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10705:  *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
; 10706:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
; 10707:  *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
; 10708:  */
; 10709:         }
; 10710: 
; 10711:         /* "View.MemoryView":383
; 10712:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
; 10713:  *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
; 10714:  *                     break             # <<<<<<<<<<<<<<
; 10715:  *             else:
; 10716:  *                 PyThread_free_lock(self.lock)
; 10717:  */
; 10718:         goto __pyx_L6_break;
; 10719: 
; 10720:         /* "View.MemoryView":378
; 10721:  *         if self.lock != NULL:
; 10722:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10723:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
; 10724:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10725:  *                     if i != __pyx_memoryview_thread_locks_used:
; 10726:  */
; 10727:       }
; 10728:     }
; 10729:     /*else*/ {
; 10730: 
; 10731:       /* "View.MemoryView":385
; 10732:  *                     break
; 10733:  *             else:
; 10734:  *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
; 10735:  * 
; 10736:  *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
; 10737:  */
; 10738:       PyThread_free_lock(__pyx_v_self->lock);

	mov	rcx, rdx
	call	QWORD PTR __imp_PyThread_free_lock
$__pyx_L6_break$20961:

; 10739:     }
; 10740:     __pyx_L6_break:;
; 10741: 
; 10742:     /* "View.MemoryView":376
; 10743:  *         cdef int i
; 10744:  *         global __pyx_memoryview_thread_locks_used
; 10745:  *         if self.lock != NULL:             # <<<<<<<<<<<<<<
; 10746:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10747:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10748:  */
; 10749:   }
; 10750: 
; 10751:   /* "View.MemoryView":370
; 10752:  *         self.typeinfo = NULL
; 10753:  * 
; 10754:  *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
; 10755:  *         if self.obj is not None:
; 10756:  *             __Pyx_ReleaseBuffer(&self.view)
; 10757:  */
; 10758: 
; 10759:   /* function exit code */
; 10760:   __Pyx_RefNannyFinishContext();
; 10761: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN11@pyx_memory@21:

; 10662: 
; 10663:         /* "View.MemoryView":379
; 10664:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10665:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10666:  *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
; 10667:  *                     if i != __pyx_memoryview_thread_locks_used:
; 10668:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
; 10669:  */
; 10670:         __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

	dec	r9d
	mov	DWORD PTR __pyx_memoryview_thread_locks_used, r9d

; 10671: 
; 10672:         /* "View.MemoryView":380
; 10673:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10674:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10675:  *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
; 10676:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
; 10677:  *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
; 10678:  */
; 10679:         __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);

	cmp	ecx, r9d

; 10680:         if (__pyx_t_2) {

	je	SHORT $__pyx_L6_break$20961

; 10681: 
; 10682:           /* "View.MemoryView":382
; 10683:  *                     if i != __pyx_memoryview_thread_locks_used:
; 10684:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
; 10685:  *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
; 10686:  *                     break
; 10687:  *             else:
; 10688:  */
; 10689:           __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
; 10690:           __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

	movsxd	r8, ecx
	movsxd	rcx, r9d

; 10691: 
; 10692:           /* "View.MemoryView":381
; 10693:  *                     __pyx_memoryview_thread_locks_used -= 1
; 10694:  *                     if i != __pyx_memoryview_thread_locks_used:
; 10695:  *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
; 10696:  *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
; 10697:  *                     break
; 10698:  */
; 10699:           (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;

	mov	rax, QWORD PTR [r10+rcx*8]
	mov	rdx, QWORD PTR [r10+r8*8]
	mov	QWORD PTR [r10+r8*8], rax

; 10700:           (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

	mov	QWORD PTR [r10+rcx*8], rdx

; 10739:     }
; 10740:     __pyx_L6_break:;
; 10741: 
; 10742:     /* "View.MemoryView":376
; 10743:  *         cdef int i
; 10744:  *         global __pyx_memoryview_thread_locks_used
; 10745:  *         if self.lock != NULL:             # <<<<<<<<<<<<<<
; 10746:  *             for i in range(__pyx_memoryview_thread_locks_used):
; 10747:  *                 if __pyx_memoryview_thread_locks[i] is self.lock:
; 10748:  */
; 10749:   }
; 10750: 
; 10751:   /* "View.MemoryView":370
; 10752:  *         self.typeinfo = NULL
; 10753:  * 
; 10754:  *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
; 10755:  *         if self.obj is not None:
; 10756:  *             __Pyx_ReleaseBuffer(&self.view)
; 10757:  */
; 10758: 
; 10759:   /* function exit code */
; 10760:   __Pyx_RefNannyFinishContext();
; 10761: }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@HJPEONBB@View?4MemoryView?4memoryview?4get_i@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_get_item_pointer DD imagerel __pyx_memoryview_get_item_pointer
	DD	imagerel __pyx_memoryview_get_item_pointer+8
	DD	imagerel $unwind$__pyx_memoryview_get_item_pointer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memoryview_get_item_pointer DD imagerel __pyx_memoryview_get_item_pointer+8
	DD	imagerel __pyx_memoryview_get_item_pointer+727
	DD	imagerel $chain$5$__pyx_memoryview_get_item_pointer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_get_item_pointer DD imagerel __pyx_memoryview_get_item_pointer+727
	DD	imagerel __pyx_memoryview_get_item_pointer+757
	DD	imagerel $chain$6$__pyx_memoryview_get_item_pointer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_get_item_pointer DD 021H
	DD	imagerel __pyx_memoryview_get_item_pointer
	DD	imagerel __pyx_memoryview_get_item_pointer+8
	DD	imagerel $unwind$__pyx_memoryview_get_item_pointer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memoryview_get_item_pointer DD 0c4121H
	DD	04e441H
	DD	05d42cH
	DD	067418H
	DD	076413H
	DD	08540aH
	DD	0f3405H
	DD	imagerel __pyx_memoryview_get_item_pointer
	DD	imagerel __pyx_memoryview_get_item_pointer+8
	DD	imagerel $unwind$__pyx_memoryview_get_item_pointer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_get_item_pointer DD 030801H
	DD	0f0048208H
	DD	0c002H
xdata	ENDS
;	COMDAT ??_C@_0CM@HJPEONBB@View?4MemoryView?4memoryview?4get_i@
CONST	SEGMENT
??_C@_0CM@HJPEONBB@View?4MemoryView?4memoryview?4get_i@ DB 'View.MemoryVi'
	DB	'ew.memoryview.get_item_pointer', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_get_item_pointer
_TEXT	SEGMENT
__pyx_v_itemp$1$ = 96
__pyx_v_self$ = 96
__pyx_t_1$1$ = 104
__pyx_v_index$ = 104
tv422 = 112
__pyx_memoryview_get_item_pointer PROC			; COMDAT

; 10771: static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {

	push	r12
	push	r15
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR [rsp+120], rbx
	mov	QWORD PTR [rsp+64], rbp

; 10772:   Py_ssize_t __pyx_v_dim;
; 10773:   char *__pyx_v_itemp;
; 10774:   PyObject *__pyx_v_idx = NULL;
; 10775:   char *__pyx_r;
; 10776:   __Pyx_RefNannyDeclarations
; 10777:   Py_ssize_t __pyx_t_1;
; 10778:   PyObject *__pyx_t_2 = NULL;
; 10779:   Py_ssize_t __pyx_t_3;
; 10780:   PyObject *(*__pyx_t_4)(PyObject *);
; 10781:   PyObject *__pyx_t_5 = NULL;
; 10782:   Py_ssize_t __pyx_t_6;
; 10783:   char *__pyx_t_7;
; 10784:   __Pyx_RefNannySetupContext("get_item_pointer", 0);
; 10785: 
; 10786:   /* "View.MemoryView":389
; 10787:  *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
; 10788:  *         cdef Py_ssize_t dim
; 10789:  *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
; 10790:  * 
; 10791:  *         for dim, idx in enumerate(index):
; 10792:  */
; 10793:   __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

	lea	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+48], rdi
	mov	rdi, QWORD PTR [rax]
	xor	r15d, r15d
	mov	QWORD PTR tv422[rsp], rax

; 10794: 
; 10795:   /* "View.MemoryView":391
; 10796:  *         cdef char *itemp = <char *> self.view.buf
; 10797:  * 
; 10798:  *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
; 10799:  *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
; 10800:  * 
; 10801:  */
; 10802:   __pyx_t_1 = 0;
; 10803:   if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {

	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+40], r13
	mov	rbx, rdx
	mov	r12, r15
	mov	QWORD PTR __pyx_v_itemp$1$[rsp], rdi
	mov	QWORD PTR __pyx_t_1$1$[rsp], r15
	mov	QWORD PTR [rsp+32], r14
	cmp	rax, QWORD PTR __imp_PyList_Type
	je	$LN68@pyx_memory@22
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	je	$LN68@pyx_memory@22

; 10806:   } else {
; 10807:     __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 391, __pyx_L1_error)

	mov	rcx, rdx
	or	rsi, -1
	call	QWORD PTR __imp_PyObject_GetIter
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN66@pyx_memory@22
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 391				; 00000187H
	mov	edx, 10807				; 00002a37H

; 10889:   __Pyx_XDECREF(__pyx_t_5);
; 10890:   __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CM@HJPEONBB@View?4MemoryView?4memoryview?4get_i@
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	call	__Pyx_AddTraceback

; 10891:   __pyx_r = NULL;

	jmp	$__pyx_L0$21053
$LN66@pyx_memory@22:

; 10808:     __Pyx_GOTREF(__pyx_t_2);
; 10809:     __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 391, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r14, QWORD PTR [rax+224]
	test	r14, r14
	jne	SHORT $LN79@pyx_memory@22
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 391				; 00000187H
	mov	edx, 10809				; 00002a39H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$20991
$LN68@pyx_memory@22:

; 10804:     __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

	inc	QWORD PTR [rdx]
	mov	rsi, r15

; 10805:     __pyx_t_4 = NULL;

	mov	r14, r15
$LN79@pyx_memory@22:

; 10823:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 10824:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 391, __pyx_L1_error)

	lea	rbp, QWORD PTR [rbx+rsi*8+24]
$LL64@pyx_memory@22:

; 10810:   }
; 10811:   for (;;) {
; 10812:     if (likely(!__pyx_t_4)) {

	test	r14, r14
	jne	SHORT $LN62@pyx_memory@22

; 10813:       if (likely(PyList_CheckExact(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyList_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN61@pyx_memory@22

; 10814:         if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

	cmp	rsi, QWORD PTR [rbx+16]
	jge	$LN35@pyx_memory@22

; 10815:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 10816:         __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 391, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+24]
	inc	rsi
	mov	rdi, QWORD PTR [rax+rsi*8-8]
	inc	QWORD PTR [rdi]
	add	rbp, 8

; 10817:         #else
; 10818:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 391, __pyx_L1_error)
; 10819:         __Pyx_GOTREF(__pyx_t_5);
; 10820:         #endif
; 10821:       } else {

	jmp	SHORT $LN50@pyx_memory@22
$LN61@pyx_memory@22:

; 10822:         if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

	cmp	rsi, QWORD PTR [rbx+16]
	jge	$LN35@pyx_memory@22

; 10823:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 10824:         __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 391, __pyx_L1_error)

	mov	rdi, QWORD PTR [rbp]
	inc	rsi
	inc	QWORD PTR [rdi]
	add	rbp, 8

; 10825:         #else
; 10826:         __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 391, __pyx_L1_error)
; 10827:         __Pyx_GOTREF(__pyx_t_5);
; 10828:         #endif
; 10829:       }
; 10830:     } else {

	jmp	SHORT $LN50@pyx_memory@22
$LN62@pyx_memory@22:

; 10831:       __pyx_t_5 = __pyx_t_4(__pyx_t_2);

	mov	rcx, rbx
	call	r14
	mov	rdi, rax

; 10832:       if (unlikely(!__pyx_t_5)) {

	test	rax, rax
	je	$LN76@pyx_memory@22
$LN50@pyx_memory@22:

; 10837:         }
; 10838:         break;
; 10839:       }
; 10840:       __Pyx_GOTREF(__pyx_t_5);
; 10841:     }
; 10842:     __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);

	mov	rcx, r12
	mov	r12, rdi
	test	rcx, rcx
	je	SHORT $LN40@pyx_memory@22
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN40@pyx_memory@22
	mov	rdx, QWORD PTR [rcx+8]
	call	QWORD PTR [rdx+48]
$LN40@pyx_memory@22:

; 10843:     __pyx_t_5 = 0;
; 10844:     __pyx_v_dim = __pyx_t_1;

	mov	rax, QWORD PTR __pyx_t_1$1$[rsp]

; 10845:     __pyx_t_1 = (__pyx_t_1 + 1);
; 10846: 
; 10847:     /* "View.MemoryView":392
; 10848:  * 
; 10849:  *         for dim, idx in enumerate(index):
; 10850:  *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
; 10851:  * 
; 10852:  *         return itemp
; 10853:  */
; 10854:     __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 392, __pyx_L1_error)

	mov	rcx, rdi
	mov	r13, rax
	inc	rax
	mov	QWORD PTR __pyx_t_1$1$[rsp], rax
	call	__Pyx_PyIndex_AsSsize_t
	mov	rdi, rax
	cmp	rax, -1
	jne	SHORT $LN37@pyx_memory@22
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $LN77@pyx_memory@22
$LN37@pyx_memory@22:

; 10855:     __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 392, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_v_itemp$1$[rsp]
	mov	rcx, QWORD PTR tv422[rsp]
	mov	r9, r13
	mov	r8, rdi
	call	__pyx_pybuffer_index
	mov	rdi, rax
	mov	QWORD PTR __pyx_v_itemp$1$[rsp], rax
	test	rax, rax
	jne	$LL64@pyx_memory@22
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 392				; 00000188H
	mov	edx, 10855				; 00002a67H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$20991
$LN77@pyx_memory@22:

; 10845:     __pyx_t_1 = (__pyx_t_1 + 1);
; 10846: 
; 10847:     /* "View.MemoryView":392
; 10848:  * 
; 10849:  *         for dim, idx in enumerate(index):
; 10850:  *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
; 10851:  * 
; 10852:  *         return itemp
; 10853:  */
; 10854:     __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 392, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 392				; 00000188H
	mov	edx, 10854				; 00002a66H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	SHORT $__pyx_L1_error$20991
$LN76@pyx_memory@22:

; 10833:         PyObject* exc_type = PyErr_Occurred();

	call	QWORD PTR __imp_PyErr_Occurred

; 10834:         if (exc_type) {

	test	rax, rax
	je	$LN81@pyx_memory@22

; 10835:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

	mov	rdx, QWORD PTR __imp_PyExc_StopIteration
	mov	rcx, rax
	mov	rdx, QWORD PTR [rdx]
	call	__Pyx_PyErr_GivenExceptionMatches
	test	eax, eax
	je	SHORT $LN52@pyx_memory@22
	call	QWORD PTR __imp_PyErr_Clear
	mov	rdi, QWORD PTR __pyx_v_itemp$1$[rsp]
	jmp	SHORT $LN35@pyx_memory@22
$LN52@pyx_memory@22:

; 10836:           else __PYX_ERR(2, 391, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 391				; 00000187H
	mov	edx, 10836				; 00002a54H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L1_error$20991:

; 10876:   goto __pyx_L0;
; 10877: 
; 10878:   /* "View.MemoryView":387
; 10879:  *                 PyThread_free_lock(self.lock)
; 10880:  * 
; 10881:  *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
; 10882:  *         cdef Py_ssize_t dim
; 10883:  *         cdef char *itemp = <char *> self.view.buf
; 10884:  */
; 10885: 
; 10886:   /* function exit code */
; 10887:   __pyx_L1_error:;
; 10888:   __Pyx_XDECREF(__pyx_t_2);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_memory@22
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
$LN13@pyx_memory@22:

; 10889:   __Pyx_XDECREF(__pyx_t_5);
; 10890:   __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CM@HJPEONBB@View?4MemoryView?4memoryview?4get_i@
	call	__Pyx_AddTraceback

; 10891:   __pyx_r = NULL;

	jmp	SHORT $__pyx_L0$21053
$LN81@pyx_memory@22:

; 10855:     __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 392, __pyx_L1_error)

	mov	rdi, QWORD PTR __pyx_v_itemp$1$[rsp]
$LN35@pyx_memory@22:

; 10856:     __pyx_v_itemp = __pyx_t_7;
; 10857: 
; 10858:     /* "View.MemoryView":391
; 10859:  *         cdef char *itemp = <char *> self.view.buf
; 10860:  * 
; 10861:  *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
; 10862:  *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
; 10863:  * 
; 10864:  */
; 10865:   }
; 10866:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN34@pyx_memory@22
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN34@pyx_memory@22:

; 10867: 
; 10868:   /* "View.MemoryView":394
; 10869:  *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
; 10870:  * 
; 10871:  *         return itemp             # <<<<<<<<<<<<<<
; 10872:  * 
; 10873:  * 
; 10874:  */
; 10875:   __pyx_r = __pyx_v_itemp;

	mov	r15, rdi
$__pyx_L0$21053:
	mov	r14, QWORD PTR [rsp+32]
	mov	r13, QWORD PTR [rsp+40]
	mov	rdi, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+120]

; 10892:   __pyx_L0:;
; 10893:   __Pyx_XDECREF(__pyx_v_idx);

	test	r12, r12
	je	SHORT $LN80@pyx_memory@22
	add	QWORD PTR [r12], -1
	jne	SHORT $LN80@pyx_memory@22
	mov	rdx, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rdx+48]
$LN80@pyx_memory@22:

; 10894:   __Pyx_RefNannyFinishContext();
; 10895:   return __pyx_r;

	mov	rax, r15

; 10896: }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	r12
	ret	0
__pyx_memoryview_get_item_pointer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@HOCMCIAG@View?4MemoryView?4memoryview?4__set@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__+1133
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__ DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_0CH@HOCMCIAG@View?4MemoryView?4memoryview?4__set@
CONST	SEGMENT
??_C@_0CH@HOCMCIAG@View?4MemoryView?4memoryview?4__set@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__setitem__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__
_TEXT	SEGMENT
__pyx_v_self$ = 80
__pyx_v_index$ = 88
__pyx_v_value$ = 96
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__ PROC ; COMDAT

; 11109: static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 11110:   PyObject *__pyx_v_have_slices = NULL;
; 11111:   PyObject *__pyx_v_obj = NULL;
; 11112:   int __pyx_r;
; 11113:   __Pyx_RefNannyDeclarations
; 11114:   PyObject *__pyx_t_1 = NULL;
; 11115:   PyObject *__pyx_t_2 = NULL;
; 11116:   PyObject *__pyx_t_3 = NULL;
; 11117:   int __pyx_t_4;
; 11118:   __Pyx_RefNannySetupContext("__setitem__", 0);
; 11119:   __Pyx_INCREF(__pyx_v_index);

	inc	QWORD PTR [rdx]
	mov	rsi, rdx

; 11120: 
; 11121:   /* "View.MemoryView":411
; 11122:  * 
; 11123:  *     def __setitem__(memoryview self, object index, object value):
; 11124:  *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
; 11125:  * 
; 11126:  *         if have_slices:
; 11127:  */
; 11128:   __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 411, __pyx_L1_error)

	mov	edx, DWORD PTR [rcx+108]
	xor	r14d, r14d
	mov	r13, rcx
	mov	rcx, rsi
	mov	r15, r8
	mov	rbp, r14
	mov	r12, r14
	mov	rdi, r14
	call	_unellipsify
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN116@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 411		; 0000019bH
	mov	DWORD PTR __pyx_clineno, 11128		; 00002b78H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@23
$LN116@pyx_memory@23:

; 11129:   __Pyx_GOTREF(__pyx_t_1);
; 11130:   if (likely(__pyx_t_1 != Py_None)) {

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	$LN115@pyx_memory@23

; 11131:     PyObject* sequence = __pyx_t_1;
; 11132:     #if !CYTHON_COMPILING_IN_PYPY
; 11133:     Py_ssize_t size = Py_SIZE(sequence);

	mov	rcx, QWORD PTR [rax+16]

; 11134:     #else
; 11135:     Py_ssize_t size = PySequence_Size(sequence);
; 11136:     #endif
; 11137:     if (unlikely(size != 2)) {

	cmp	rcx, 2
	je	SHORT $LN114@pyx_memory@23

; 11138:       if (size > 2) __Pyx_RaiseTooManyValuesError(2);

	jle	SHORT $LN113@pyx_memory@23
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@
	mov	r8d, 2
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	jmp	SHORT $LN111@pyx_memory@23
$LN113@pyx_memory@23:

; 11139:       else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

	test	rcx, rcx
	js	SHORT $LN111@pyx_memory@23
	call	__Pyx_RaiseNeedMoreValuesError
$LN111@pyx_memory@23:

; 11140:       __PYX_ERR(2, 411, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 11140		; 00002b84H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN124@pyx_memory@23
$LN114@pyx_memory@23:

; 11141:     }
; 11142:     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 11143:     __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

	mov	rbp, QWORD PTR [rax+24]

; 11144:     __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

	mov	rdi, QWORD PTR [rax+32]

; 11145:     __Pyx_INCREF(__pyx_t_2);

	inc	QWORD PTR [rbp]

; 11146:     __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [rdi]

; 11147:     #else
; 11148:     __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 411, __pyx_L1_error)
; 11149:     __Pyx_GOTREF(__pyx_t_2);
; 11150:     __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 411, __pyx_L1_error)
; 11151:     __Pyx_GOTREF(__pyx_t_3);
; 11152:     #endif
; 11153:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN109@pyx_memory@23
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN109@pyx_memory@23:

; 11156:   }
; 11157:   __pyx_v_have_slices = __pyx_t_2;
; 11158:   __pyx_t_2 = 0;
; 11159:   __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);

	mov	rcx, rsi
	mov	rsi, rdi
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN100@pyx_memory@23
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN100@pyx_memory@23:

; 11160:   __pyx_t_3 = 0;
; 11161: 
; 11162:   /* "View.MemoryView":413
; 11163:  *         have_slices, index = _unellipsify(index, self.view.ndim)
; 11164:  * 
; 11165:  *         if have_slices:             # <<<<<<<<<<<<<<
; 11166:  *             obj = self.is_slice(value)
; 11167:  *             if obj:
; 11168:  */
; 11169:   __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 413, __pyx_L1_error)

	mov	rcx, rbp
	mov	rdi, r14
	call	__Pyx_PyObject_IsTrue
	test	eax, eax
	jns	SHORT $LN125@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 413		; 0000019dH
	mov	DWORD PTR __pyx_clineno, 11169		; 00002ba1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@23
$LN125@pyx_memory@23:

; 11170:   if (__pyx_t_4) {
; 11171: 
; 11172:     /* "View.MemoryView":414
; 11173:  * 
; 11174:  *         if have_slices:
; 11175:  *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
; 11176:  *             if obj:
; 11177:  *                 self.setitem_slice_assignment(self[index], obj)
; 11178:  */
; 11179:     __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 414, __pyx_L1_error)

	mov	rax, QWORD PTR [r13+16]
	mov	rcx, r13
	je	$LN95@pyx_memory@23
	mov	rdx, r15
	call	QWORD PTR [rax+8]
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN94@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 414		; 0000019eH
	mov	DWORD PTR __pyx_clineno, 11179		; 00002babH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$21347
$LN94@pyx_memory@23:

; 11180:     __Pyx_GOTREF(__pyx_t_1);
; 11181:     __pyx_v_obj = __pyx_t_1;
; 11182:     __pyx_t_1 = 0;
; 11183: 
; 11184:     /* "View.MemoryView":415
; 11185:  *         if have_slices:
; 11186:  *             obj = self.is_slice(value)
; 11187:  *             if obj:             # <<<<<<<<<<<<<<
; 11188:  *                 self.setitem_slice_assignment(self[index], obj)
; 11189:  *             else:
; 11190:  */
; 11191:     __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 415, __pyx_L1_error)

	mov	rcx, rax
	mov	r12, rax
	call	__Pyx_PyObject_IsTrue
	test	eax, eax
	jns	SHORT $LN126@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 415		; 0000019fH
	mov	DWORD PTR __pyx_clineno, 11191		; 00002bb7H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@23
$LN126@pyx_memory@23:

; 11192:     if (__pyx_t_4) {
; 11193: 
; 11194:       /* "View.MemoryView":416
; 11195:  *             obj = self.is_slice(value)
; 11196:  *             if obj:
; 11197:  *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
; 11198:  *             else:
; 11199:  *                 self.setitem_slice_assign_scalar(self[index], value)
; 11200:  */
; 11201:       __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 416, __pyx_L1_error)

	mov	rdx, rsi
	mov	rcx, r13
	je	$LN92@pyx_memory@23
	call	QWORD PTR __imp_PyObject_GetItem
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN91@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 416		; 000001a0H
	mov	DWORD PTR __pyx_clineno, 11201		; 00002bc1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$21347
$LN91@pyx_memory@23:

; 11202:       __Pyx_GOTREF(__pyx_t_1);
; 11203:       __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 416, __pyx_L1_error)

	mov	rax, QWORD PTR [r13+16]
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, r13
	call	QWORD PTR [rax+16]
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN89@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 416		; 000001a0H
	mov	DWORD PTR __pyx_clineno, 11203		; 00002bc3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$21347
$LN89@pyx_memory@23:

; 11204:       __Pyx_GOTREF(__pyx_t_3);
; 11205:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN88@pyx_memory@23
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN88@pyx_memory@23:

; 11206:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	$__pyx_L0$21456
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]

; 11207: 
; 11208:       /* "View.MemoryView":415
; 11209:  *         if have_slices:
; 11210:  *             obj = self.is_slice(value)
; 11211:  *             if obj:             # <<<<<<<<<<<<<<
; 11212:  *                 self.setitem_slice_assignment(self[index], obj)
; 11213:  *             else:
; 11214:  */
; 11215:       goto __pyx_L4;

	jmp	$__pyx_L0$21456
$LN92@pyx_memory@23:

; 11216:     }
; 11217: 
; 11218:     /* "View.MemoryView":418
; 11219:  *                 self.setitem_slice_assignment(self[index], obj)
; 11220:  *             else:
; 11221:  *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
; 11222:  *         else:
; 11223:  *             self.setitem_indexed(index, value)
; 11224:  */
; 11225:     /*else*/ {
; 11226:       __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 418, __pyx_L1_error)

	call	QWORD PTR __imp_PyObject_GetItem
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN79@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 418		; 000001a2H
	mov	DWORD PTR __pyx_clineno, 11226		; 00002bdaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_memory@23
$LN79@pyx_memory@23:

; 11227:       __Pyx_GOTREF(__pyx_t_3);
; 11228:       if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 418, __pyx_L1_error)

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN78@pyx_memory@23
	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, rax
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN78@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 418		; 000001a2H
	mov	DWORD PTR __pyx_clineno, 11228		; 00002bdcH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_memory@23
$LN78@pyx_memory@23:

; 11229:       __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 418, __pyx_L1_error)

	mov	rax, QWORD PTR [r13+16]
	mov	r8, r15
	mov	rdx, rdi
	mov	rcx, r13
	call	QWORD PTR [rax+24]
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN76@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 418		; 000001a2H
	mov	DWORD PTR __pyx_clineno, 11229		; 00002bddH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$21347
$LN76@pyx_memory@23:

; 11230:       __Pyx_GOTREF(__pyx_t_1);
; 11231:       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN75@pyx_memory@23
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN75@pyx_memory@23:

; 11232:       __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	$__pyx_L0$21456
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$__pyx_L4$21416:

; 11233:     }
; 11234:     __pyx_L4:;
; 11235: 
; 11236:     /* "View.MemoryView":413
; 11237:  *         have_slices, index = _unellipsify(index, self.view.ndim)
; 11238:  * 
; 11239:  *         if have_slices:             # <<<<<<<<<<<<<<
; 11240:  *             obj = self.is_slice(value)
; 11241:  *             if obj:
; 11242:  */
; 11243:     goto __pyx_L3;

	jmp	$__pyx_L0$21456
$LN95@pyx_memory@23:

; 11244:   }
; 11245: 
; 11246:   /* "View.MemoryView":420
; 11247:  *                 self.setitem_slice_assign_scalar(self[index], value)
; 11248:  *         else:
; 11249:  *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
; 11250:  * 
; 11251:  *     cdef is_slice(self, obj):
; 11252:  */
; 11253:   /*else*/ {
; 11254:     __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 420, __pyx_L1_error)

	mov	r8, r15
	mov	rdx, rsi
	call	QWORD PTR [rax+32]
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN65@pyx_memory@23
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 420		; 000001a4H
	mov	DWORD PTR __pyx_clineno, 11254		; 00002bf6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$21347
$LN65@pyx_memory@23:

; 11255:     __Pyx_GOTREF(__pyx_t_1);
; 11256:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rax], -1
	jne	$__pyx_L0$21456
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$__pyx_L3$21443:

; 11257:   }
; 11258:   __pyx_L3:;
; 11259: 
; 11260:   /* "View.MemoryView":410
; 11261:  *             return self.convert_item_to_object(itemp)
; 11262:  * 
; 11263:  *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
; 11264:  *         have_slices, index = _unellipsify(index, self.view.ndim)
; 11265:  * 
; 11266:  */
; 11267: 
; 11268:   /* function exit code */
; 11269:   __pyx_r = 0;
; 11270:   goto __pyx_L0;

	jmp	$__pyx_L0$21456
$LN115@pyx_memory@23:

; 11154:   } else {
; 11155:     __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 411, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 11155		; 00002b93H
	mov	QWORD PTR __pyx_filename, r11
$LN124@pyx_memory@23:
	mov	DWORD PTR __pyx_lineno, 411		; 0000019bH
$__pyx_L1_error$21347:

; 11271:   __pyx_L1_error:;
; 11272:   __Pyx_XDECREF(__pyx_t_1);

	test	rbx, rbx
	je	SHORT $LN43@pyx_memory@23
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN43@pyx_memory@23
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@23:

; 11273:   __Pyx_XDECREF(__pyx_t_2);
; 11274:   __Pyx_XDECREF(__pyx_t_3);

	test	rdi, rdi
	je	SHORT $LN33@pyx_memory@23
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN33@pyx_memory@23
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN33@pyx_memory@23:

; 11275:   __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CH@HOCMCIAG@View?4MemoryView?4memoryview?4__set@
	call	__Pyx_AddTraceback

; 11276:   __pyx_r = -1;

	or	r14d, -1
$__pyx_L0$21456:

; 11277:   __pyx_L0:;
; 11278:   __Pyx_XDECREF(__pyx_v_have_slices);

	test	rbp, rbp
	je	SHORT $LN23@pyx_memory@23
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN23@pyx_memory@23
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@23:

; 11279:   __Pyx_XDECREF(__pyx_v_obj);

	test	r12, r12
	je	SHORT $LN13@pyx_memory@23
	add	QWORD PTR [r12], -1
	jne	SHORT $LN13@pyx_memory@23
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@23:

; 11280:   __Pyx_XDECREF(__pyx_v_index);

	test	rsi, rsi
	je	SHORT $LN123@pyx_memory@23
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN123@pyx_memory@23
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rdx+48]
$LN123@pyx_memory@23:

; 11281:   __Pyx_RefNannyFinishContext();
; 11282:   return __pyx_r;
; 11283: }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	eax, r14d
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@ELOKAGPD@View?4MemoryView?4memoryview?4is_sl@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_is_slice DD imagerel __pyx_memoryview_is_slice
	DD	imagerel __pyx_memoryview_is_slice+24
	DD	imagerel $unwind$__pyx_memoryview_is_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memoryview_is_slice DD imagerel __pyx_memoryview_is_slice+24
	DD	imagerel __pyx_memoryview_is_slice+1236
	DD	imagerel $chain$5$__pyx_memoryview_is_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_is_slice DD imagerel __pyx_memoryview_is_slice+1236
	DD	imagerel __pyx_memoryview_is_slice+1257
	DD	imagerel $chain$6$__pyx_memoryview_is_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_is_slice DD 021H
	DD	imagerel __pyx_memoryview_is_slice
	DD	imagerel __pyx_memoryview_is_slice+24
	DD	imagerel $unwind$__pyx_memoryview_is_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memoryview_is_slice DD 0c1b21H
	DD	07e41bH
	DD	08d417H
	DD	09c410H
	DD	0a640cH
	DD	0b5408H
	DD	0c3404H
	DD	imagerel __pyx_memoryview_is_slice
	DD	imagerel __pyx_memoryview_is_slice+24
	DD	imagerel $unwind$__pyx_memoryview_is_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_is_slice DD 030e01H
	DD	0f00ac20eH
	DD	07008H
xdata	ENDS
;	COMDAT ??_C@_0CE@ELOKAGPD@View?4MemoryView?4memoryview?4is_sl@
CONST	SEGMENT
??_C@_0CE@ELOKAGPD@View?4MemoryView?4memoryview?4is_sl@ DB 'View.MemoryVi'
	DB	'ew.memoryview.is_slice', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_is_slice
_TEXT	SEGMENT
__pyx_t_7$ = 32
__pyx_t_8$ = 40
__pyx_v_self$ = 128
$T42199 = 136
__pyx_v_obj$ = 136
__pyx_tstate$1$ = 144
__pyx_t_6$ = 152
__pyx_memoryview_is_slice PROC				; COMDAT

; 11293: static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rcx
	push	rdi
	push	r15
	sub	rsp, 104				; 00000068H

; 11294:   PyObject *__pyx_r = NULL;
; 11295:   __Pyx_RefNannyDeclarations
; 11296:   int __pyx_t_1;
; 11297:   int __pyx_t_2;
; 11298:   PyObject *__pyx_t_3 = NULL;
; 11299:   PyObject *__pyx_t_4 = NULL;
; 11300:   PyObject *__pyx_t_5 = NULL;
; 11301:   PyObject *__pyx_t_6 = NULL;
; 11302:   PyObject *__pyx_t_7 = NULL;
; 11303:   PyObject *__pyx_t_8 = NULL;
; 11304:   int __pyx_t_9;
; 11305:   __Pyx_RefNannySetupContext("is_slice", 0);
; 11306:   __Pyx_INCREF(__pyx_v_obj);
; 11307: 
; 11308:   /* "View.MemoryView":423
; 11309:  * 
; 11310:  *     cdef is_slice(self, obj):
; 11311:  *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
; 11312:  *             try:
; 11313:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11314:  */
; 11315:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 

	mov	r8, QWORD PTR __pyx_memoryview_type
	inc	QWORD PTR [rdx]
	mov	QWORD PTR [rax-24], rbx
	mov	QWORD PTR [rax-32], rbp
	mov	QWORD PTR [rax-40], rsi
	mov	QWORD PTR [rax-48], r12
	xor	r15d, r15d
	mov	QWORD PTR [rax-56], r13
	mov	QWORD PTR [rax-64], r14
	mov	rax, QWORD PTR [rdx+8]
	mov	rdi, rdx
	mov	rsi, r15
	mov	rbx, r15
	cmp	rax, r8
	je	$LN43@pyx_memory@24
	mov	r9, QWORD PTR [rax+344]
	test	r9, r9
	je	SHORT $LL170@pyx_memory@24
	mov	rdx, QWORD PTR [r9+16]
	mov	rcx, r15
	test	rdx, rdx
	jle	SHORT $LN220@pyx_memory@24
	lea	rax, QWORD PTR [r9+24]
$LL163@pyx_memory@24:
	cmp	QWORD PTR [rax], r8
	je	$LN43@pyx_memory@24
	inc	rcx
	add	rax, 8
	cmp	rcx, rdx
	jl	SHORT $LL163@pyx_memory@24
	mov	rcx, QWORD PTR __pyx_v_self$[rsp]
	jmp	SHORT $LN217@pyx_memory@24
	npad	12
$LL170@pyx_memory@24:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, r8
	je	$LN43@pyx_memory@24
	test	rax, rax
	jne	SHORT $LL170@pyx_memory@24
	cmp	r8, QWORD PTR __imp_PyBaseObject_Type
	mov	eax, r15d
	sete	al

; 11316:   __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);

	test	eax, eax

; 11317:   if (__pyx_t_2) {

	jne	$LN43@pyx_memory@24
	jmp	SHORT $LN217@pyx_memory@24
$LN220@pyx_memory@24:

; 11294:   PyObject *__pyx_r = NULL;
; 11295:   __Pyx_RefNannyDeclarations
; 11296:   int __pyx_t_1;
; 11297:   int __pyx_t_2;
; 11298:   PyObject *__pyx_t_3 = NULL;
; 11299:   PyObject *__pyx_t_4 = NULL;
; 11300:   PyObject *__pyx_t_5 = NULL;
; 11301:   PyObject *__pyx_t_6 = NULL;
; 11302:   PyObject *__pyx_t_7 = NULL;
; 11303:   PyObject *__pyx_t_8 = NULL;
; 11304:   int __pyx_t_9;
; 11305:   __Pyx_RefNannySetupContext("is_slice", 0);
; 11306:   __Pyx_INCREF(__pyx_v_obj);
; 11307: 
; 11308:   /* "View.MemoryView":423
; 11309:  * 
; 11310:  *     cdef is_slice(self, obj):
; 11311:  *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
; 11312:  *             try:
; 11313:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11314:  */
; 11315:   __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 

	mov	rcx, QWORD PTR __pyx_v_self$[rsp]
$LN217@pyx_memory@24:

; 11318: 
; 11319:     /* "View.MemoryView":424
; 11320:  *     cdef is_slice(self, obj):
; 11321:  *         if not isinstance(obj, memoryview):
; 11322:  *             try:             # <<<<<<<<<<<<<<
; 11323:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11324:  *                                  self.dtype_is_object)
; 11325:  */
; 11326:     {
; 11327:       __Pyx_PyThreadState_declare
; 11328:       __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR __pyx_tstate$1$[rsp], rax

; 11329:       __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);

	mov	r13, QWORD PTR [rax+96]
	mov	r12, QWORD PTR [rax+104]
	mov	rbp, QWORD PTR [rax+112]
	test	r13, r13
	je	SHORT $LN186@pyx_memory@24
	inc	QWORD PTR [r13]
$LN186@pyx_memory@24:
	test	r12, r12
	je	SHORT $LN181@pyx_memory@24
	inc	QWORD PTR [r12]
$LN181@pyx_memory@24:
	test	rbp, rbp
	je	SHORT $LN176@pyx_memory@24
	inc	QWORD PTR [rbp]
$LN176@pyx_memory@24:

; 11330:       __Pyx_XGOTREF(__pyx_t_3);
; 11331:       __Pyx_XGOTREF(__pyx_t_4);
; 11332:       __Pyx_XGOTREF(__pyx_t_5);
; 11333:       /*try:*/ {
; 11334: 
; 11335:         /* "View.MemoryView":425
; 11336:  *         if not isinstance(obj, memoryview):
; 11337:  *             try:
; 11338:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
; 11339:  *                                  self.dtype_is_object)
; 11340:  *             except TypeError:
; 11341:  */
; 11342:         __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 425, __pyx_L4_error)

	mov	ecx, DWORD PTR [rcx+168]
	or	ecx, 152				; 00000098H
	mov	DWORD PTR $T42199[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN154@pyx_memory@24
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 425		; 000001a9H
	mov	DWORD PTR __pyx_clineno, 11342		; 00002c4eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN100@pyx_memory@24
$LN154@pyx_memory@24:

; 11343:         __Pyx_GOTREF(__pyx_t_6);
; 11344: 
; 11345:         /* "View.MemoryView":426
; 11346:  *             try:
; 11347:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11348:  *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
; 11349:  *             except TypeError:
; 11350:  *                 return None
; 11351:  */
; 11352:         __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 426, __pyx_L4_error)

	mov	rax, QWORD PTR __pyx_v_self$[rsp]
	cmp	DWORD PTR [rax+172], ebx
	je	SHORT $LN158@pyx_memory@24
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rsi, QWORD PTR __imp__Py_TrueStruct
	jmp	SHORT $LN159@pyx_memory@24
$LN158@pyx_memory@24:
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rsi, QWORD PTR __imp__Py_ZeroStruct
$LN159@pyx_memory@24:
	test	rsi, rsi
	jne	SHORT $LN153@pyx_memory@24
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 426		; 000001aaH
	mov	DWORD PTR __pyx_clineno, 11352		; 00002c58H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L4_error$21582
$LN153@pyx_memory@24:

; 11353:         __Pyx_GOTREF(__pyx_t_7);
; 11354: 
; 11355:         /* "View.MemoryView":425
; 11356:  *         if not isinstance(obj, memoryview):
; 11357:  *             try:
; 11358:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
; 11359:  *                                  self.dtype_is_object)
; 11360:  *             except TypeError:
; 11361:  */
; 11362:         __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 425, __pyx_L4_error)

	mov	ecx, 3
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN152@pyx_memory@24
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 425		; 000001a9H
	mov	DWORD PTR __pyx_clineno, 11362		; 00002c62H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L4_error$21582:

; 11390:       goto __pyx_L9_try_end;
; 11391:       __pyx_L4_error:;
; 11392:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [r14], -1
	jne	SHORT $LN100@pyx_memory@24
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN100@pyx_memory@24
$LN152@pyx_memory@24:

; 11363:         __Pyx_GOTREF(__pyx_t_8);
; 11364:         __Pyx_INCREF(__pyx_v_obj);

	inc	QWORD PTR [rdi]

; 11365:         __Pyx_GIVEREF(__pyx_v_obj);
; 11366:         PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
; 11367:         __Pyx_GIVEREF(__pyx_t_6);
; 11368:         PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
; 11369:         __Pyx_GIVEREF(__pyx_t_7);
; 11370:         PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
; 11371:         __pyx_t_6 = 0;
; 11372:         __pyx_t_7 = 0;
; 11373:         __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 425, __pyx_L4_error)

	mov	rcx, QWORD PTR __pyx_memoryview_type
	mov	QWORD PTR [rax+24], rdi
	mov	QWORD PTR [rax+32], r14
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+40], rsi
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	$LN150@pyx_memory@24
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 425		; 000001a9H
	mov	DWORD PTR __pyx_clineno, 11373		; 00002c6dH
	mov	QWORD PTR __pyx_filename, rcx
$LN100@pyx_memory@24:

; 11390:       goto __pyx_L9_try_end;
; 11391:       __pyx_L4_error:;
; 11392:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

	mov	r14, r15
	mov	QWORD PTR __pyx_t_6$[rsp], r15

; 11393:       __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

	test	rbx, rbx
	je	SHORT $LN90@pyx_memory@24
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN90@pyx_memory@24
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN90@pyx_memory@24:
	mov	rbx, r15
	mov	QWORD PTR __pyx_t_8$[rsp], rbx

; 11394:       __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	test	rsi, rsi
	je	SHORT $LN80@pyx_memory@24
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN80@pyx_memory@24
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN80@pyx_memory@24:

; 11395: 
; 11396:       /* "View.MemoryView":427
; 11397:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11398:  *                                  self.dtype_is_object)
; 11399:  *             except TypeError:             # <<<<<<<<<<<<<<
; 11400:  *                 return None
; 11401:  * 
; 11402:  */
; 11403:       __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);

	mov	rcx, QWORD PTR __pyx_tstate$1$[rsp]
	mov	r8, QWORD PTR __pyx_builtin_TypeError
	mov	rsi, r15
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR __pyx_t_7$[rsp], r15
	cmp	rcx, r8
	je	SHORT $LN218@pyx_memory@24
	test	rcx, rcx
	je	$__pyx_L6_except_error$21723
	mov	rax, QWORD PTR [r8+8]
	bt	DWORD PTR [rax+168], 26
	jae	SHORT $LN202@pyx_memory@24
	mov	rdx, r8
	call	__Pyx_PyErr_ExceptionMatchesTuple
	jmp	SHORT $LN210@pyx_memory@24
$LN202@pyx_memory@24:
	mov	rax, QWORD PTR [rcx+8]
	cmp	rax, QWORD PTR __imp_PyClass_Type
	je	SHORT $LN207@pyx_memory@24
	test	DWORD PTR [rax+168], -2147483648	; ffffffff80000000H
	je	SHORT $LN208@pyx_memory@24
	bt	DWORD PTR [rcx+168], 30
	jb	SHORT $LN207@pyx_memory@24
$LN208@pyx_memory@24:
	mov	rdx, r8
	call	QWORD PTR __imp_PyErr_GivenExceptionMatches
	jmp	SHORT $LN210@pyx_memory@24
$LN207@pyx_memory@24:
	xor	edx, edx
	call	__Pyx_inner_PyErr_GivenExceptionMatches2
$LN210@pyx_memory@24:

; 11404:       if (__pyx_t_9) {

	test	eax, eax
	je	SHORT $__pyx_L6_except_error$21723
$LN218@pyx_memory@24:

; 11405:         __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CE@ELOKAGPD@View?4MemoryView?4memoryview?4is_sl@
	call	__Pyx_AddTraceback

; 11406:         if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 427, __pyx_L6_except_error)

	mov	rbx, QWORD PTR __pyx_tstate$1$[rsp]
	lea	r9, QWORD PTR __pyx_t_6$[rsp]
	lea	r8, QWORD PTR __pyx_t_8$[rsp]
	lea	rdx, QWORD PTR __pyx_t_7$[rsp]
	mov	rcx, rbx
	call	__Pyx__GetException
	test	eax, eax
	jns	$LN68@pyx_memory@24
	mov	rax, QWORD PTR __pyx_f+16
	mov	r14, QWORD PTR __pyx_t_6$[rsp]
	mov	rsi, QWORD PTR __pyx_t_7$[rsp]
	mov	rbx, QWORD PTR __pyx_t_8$[rsp]
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_lineno, 427		; 000001abH
	mov	DWORD PTR __pyx_clineno, 11406		; 00002c8eH
$__pyx_L6_except_error$21723:

; 11424:         goto __pyx_L7_except_return;
; 11425:       }
; 11426:       goto __pyx_L6_except_error;
; 11427:       __pyx_L6_except_error:;
; 11428: 
; 11429:       /* "View.MemoryView":424
; 11430:  *     cdef is_slice(self, obj):
; 11431:  *         if not isinstance(obj, memoryview):
; 11432:  *             try:             # <<<<<<<<<<<<<<
; 11433:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11434:  *                                  self.dtype_is_object)
; 11435:  */
; 11436:       __Pyx_XGIVEREF(__pyx_t_3);
; 11437:       __Pyx_XGIVEREF(__pyx_t_4);
; 11438:       __Pyx_XGIVEREF(__pyx_t_5);
; 11439:       __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

	mov	rcx, QWORD PTR __pyx_tstate$1$[rsp]
	mov	r9, rbp
	mov	r8, r12
	mov	rdx, r13
	call	__Pyx__ExceptionReset
$__pyx_L1_error$21772:

; 11469:   goto __pyx_L0;
; 11470: 
; 11471:   /* "View.MemoryView":422
; 11472:  *             self.setitem_indexed(index, value)
; 11473:  * 
; 11474:  *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
; 11475:  *         if not isinstance(obj, memoryview):
; 11476:  *             try:
; 11477:  */
; 11478: 
; 11479:   /* function exit code */
; 11480:   __pyx_L1_error:;
; 11481:   __Pyx_XDECREF(__pyx_t_6);

	test	r14, r14
	je	SHORT $LN33@pyx_memory@24
	add	QWORD PTR [r14], -1
	jne	SHORT $LN33@pyx_memory@24
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN33@pyx_memory@24:

; 11482:   __Pyx_XDECREF(__pyx_t_7);

	test	rsi, rsi
	je	SHORT $LN23@pyx_memory@24
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN23@pyx_memory@24
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@24:

; 11483:   __Pyx_XDECREF(__pyx_t_8);

	test	rbx, rbx
	je	SHORT $LN13@pyx_memory@24
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN13@pyx_memory@24
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@24:

; 11484:   __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CE@ELOKAGPD@View?4MemoryView?4memoryview?4is_sl@
	call	__Pyx_AddTraceback

; 11485:   __pyx_r = 0;

	jmp	$__pyx_L0$21773
$LN68@pyx_memory@24:

; 11407:         __Pyx_GOTREF(__pyx_t_7);
; 11408:         __Pyx_GOTREF(__pyx_t_8);
; 11409:         __Pyx_GOTREF(__pyx_t_6);
; 11410: 
; 11411:         /* "View.MemoryView":428
; 11412:  *                                  self.dtype_is_object)
; 11413:  *             except TypeError:
; 11414:  *                 return None             # <<<<<<<<<<<<<<
; 11415:  * 
; 11416:  *         return obj
; 11417:  */
; 11418:         __Pyx_XDECREF(__pyx_r);
; 11419:         __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 11420:         __pyx_r = Py_None;
; 11421:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	mov	rcx, QWORD PTR __pyx_t_6$[rsp]
	inc	QWORD PTR [rax]
	mov	r15, QWORD PTR __imp__Py_NoneStruct
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN64@pyx_memory@24
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN64@pyx_memory@24:

; 11422:         __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rcx, QWORD PTR __pyx_t_7$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN59@pyx_memory@24
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN59@pyx_memory@24:

; 11423:         __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

	mov	rcx, QWORD PTR __pyx_t_8$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN54@pyx_memory@24
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN54@pyx_memory@24:

; 11440:       goto __pyx_L1_error;
; 11441:       __pyx_L7_except_return:;
; 11442:       __Pyx_XGIVEREF(__pyx_t_3);
; 11443:       __Pyx_XGIVEREF(__pyx_t_4);
; 11444:       __Pyx_XGIVEREF(__pyx_t_5);
; 11445:       __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

	mov	r9, rbp
	mov	r8, r12
	mov	rdx, r13
	mov	rcx, rbx
$__pyx_L7_except_return$21771:
	call	__Pyx__ExceptionReset

; 11446:       goto __pyx_L0;

	jmp	SHORT $__pyx_L0$21773
$LN150@pyx_memory@24:

; 11374:         __Pyx_GOTREF(__pyx_t_7);
; 11375:         __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN149@pyx_memory@24
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN149@pyx_memory@24:

; 11376:         __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);

	mov	rcx, rdi
	mov	rdi, rsi
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN141@pyx_memory@24
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN141@pyx_memory@24:

; 11377:         __pyx_t_7 = 0;
; 11378: 
; 11379:         /* "View.MemoryView":424
; 11380:  *     cdef is_slice(self, obj):
; 11381:  *         if not isinstance(obj, memoryview):
; 11382:  *             try:             # <<<<<<<<<<<<<<
; 11383:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11384:  *                                  self.dtype_is_object)
; 11385:  */
; 11386:       }
; 11387:       __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

	test	r13, r13
	je	SHORT $LN130@pyx_memory@24
	add	QWORD PTR [r13], -1
	jne	SHORT $LN130@pyx_memory@24
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN130@pyx_memory@24:

; 11388:       __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

	test	r12, r12
	je	SHORT $LN120@pyx_memory@24
	add	QWORD PTR [r12], -1
	jne	SHORT $LN120@pyx_memory@24
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN120@pyx_memory@24:

; 11389:       __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

	test	rbp, rbp
	je	SHORT $LN43@pyx_memory@24
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN43@pyx_memory@24
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@24:

; 11447:       __pyx_L9_try_end:;
; 11448:     }
; 11449: 
; 11450:     /* "View.MemoryView":423
; 11451:  * 
; 11452:  *     cdef is_slice(self, obj):
; 11453:  *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
; 11454:  *             try:
; 11455:  *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
; 11456:  */
; 11457:   }
; 11458: 
; 11459:   /* "View.MemoryView":430
; 11460:  *                 return None
; 11461:  * 
; 11462:  *         return obj             # <<<<<<<<<<<<<<
; 11463:  * 
; 11464:  *     cdef setitem_slice_assignment(self, dst, src):
; 11465:  */
; 11466:   __Pyx_XDECREF(__pyx_r);
; 11467:   __Pyx_INCREF(__pyx_v_obj);

	inc	QWORD PTR [rdi]

; 11468:   __pyx_r = __pyx_v_obj;

	mov	r15, rdi
$__pyx_L0$21773:

; 11486:   __pyx_L0:;
; 11487:   __Pyx_XDECREF(__pyx_v_obj);

	add	QWORD PTR [rdi], -1
	mov	r14, QWORD PTR [rsp+56]
	mov	r13, QWORD PTR [rsp+64]
	mov	r12, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+96]
	jne	SHORT $LN219@pyx_memory@24
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN219@pyx_memory@24:

; 11488:   __Pyx_XGIVEREF(__pyx_r);
; 11489:   __Pyx_RefNannyFinishContext();
; 11490:   return __pyx_r;

	mov	rax, r15

; 11491: }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	rdi
	ret	0
__pyx_memoryview_is_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@ILKGIKIH@View?4MemoryView?4memoryview?4conve@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_convert_item_to_object DD imagerel __pyx_memoryview_convert_item_to_object
	DD	imagerel __pyx_memoryview_convert_item_to_object+16
	DD	imagerel $unwind$__pyx_memoryview_convert_item_to_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_convert_item_to_object DD imagerel __pyx_memoryview_convert_item_to_object+16
	DD	imagerel __pyx_memoryview_convert_item_to_object+1951
	DD	imagerel $chain$6$__pyx_memoryview_convert_item_to_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memoryview_convert_item_to_object DD imagerel __pyx_memoryview_convert_item_to_object+1951
	DD	imagerel __pyx_memoryview_convert_item_to_object+1982
	DD	imagerel $chain$7$__pyx_memoryview_convert_item_to_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__pyx_memoryview_convert_item_to_object DD imagerel __pyx_memoryview_convert_item_to_object+1982
	DD	imagerel __pyx_memoryview_convert_item_to_object+2034
	DD	imagerel $chain$8$__pyx_memoryview_convert_item_to_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__pyx_memoryview_convert_item_to_object DD 021H
	DD	imagerel __pyx_memoryview_convert_item_to_object
	DD	imagerel __pyx_memoryview_convert_item_to_object+16
	DD	imagerel $unwind$__pyx_memoryview_convert_item_to_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memoryview_convert_item_to_object DD 020021H
	DD	0ef400H
	DD	imagerel __pyx_memoryview_convert_item_to_object
	DD	imagerel __pyx_memoryview_convert_item_to_object+16
	DD	imagerel $unwind$__pyx_memoryview_convert_item_to_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_convert_item_to_object DD 0e2c21H
	DD	0ef42cH
	DD	0fe41bH
	DD	010d417H
	DD	0117410H
	DD	012640cH
	DD	0135408H
	DD	0173404H
	DD	imagerel __pyx_memoryview_convert_item_to_object
	DD	imagerel __pyx_memoryview_convert_item_to_object+16
	DD	imagerel $unwind$__pyx_memoryview_convert_item_to_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_convert_item_to_object DD 031001H
	DD	0140110H
	DD	0c009H
xdata	ENDS
;	COMDAT ??_C@_0DC@ILKGIKIH@View?4MemoryView?4memoryview?4conve@
CONST	SEGMENT
??_C@_0DC@ILKGIKIH@View?4MemoryView?4memoryview?4conve@ DB 'View.MemoryVi'
	DB	'ew.memoryview.convert_item_to_object', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_convert_item_to_object
_TEXT	SEGMENT
__pyx_t_5$ = 32
__pyx_t_9$ = 40
__pyx_t_3$1$ = 48
__pyx_v_bytesitem$1$ = 56
__pyx_t_4$1$ = 64
__pyx_v_result$1$ = 72
__pyx_t_2$1$ = 80
__pyx_temp$22147 = 88
__pyx_v_self$ = 176
__pyx_v_itemp$ = 184
__pyx_tstate$1$ = 192
__pyx_t_1$4$ = 200
__pyx_t_1$ = 200
__pyx_memoryview_convert_item_to_object PROC		; COMDAT

; 11927: static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rcx
	push	r12
	sub	rsp, 160				; 000000a0H
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax-16], rbp
	mov	QWORD PTR [rax-24], rsi
	mov	QWORD PTR [rax-32], rdi

; 11928:   PyObject *__pyx_v_struct = NULL;

	xor	r12d, r12d
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-48], r14
	mov	rbx, rcx

; 11929:   PyObject *__pyx_v_bytesitem = 0;
; 11930:   PyObject *__pyx_v_result = NULL;
; 11931:   PyObject *__pyx_r = NULL;
; 11932:   __Pyx_RefNannyDeclarations
; 11933:   PyObject *__pyx_t_1 = NULL;
; 11934:   PyObject *__pyx_t_2 = NULL;
; 11935:   PyObject *__pyx_t_3 = NULL;
; 11936:   PyObject *__pyx_t_4 = NULL;
; 11937:   PyObject *__pyx_t_5 = NULL;
; 11938:   PyObject *__pyx_t_6 = NULL;
; 11939:   PyObject *__pyx_t_7 = NULL;
; 11940:   int __pyx_t_8;
; 11941:   PyObject *__pyx_t_9 = NULL;
; 11942:   size_t __pyx_t_10;
; 11943:   int __pyx_t_11;
; 11944:   __Pyx_RefNannySetupContext("convert_item_to_object", 0);
; 11945: 
; 11946:   /* "View.MemoryView":479
; 11947:  *         """Only used if instantiated manually by the user, or if Cython doesn't
; 11948:  *         know how to convert the type"""
; 11949:  *         import struct             # <<<<<<<<<<<<<<
; 11950:  *         cdef bytes bytesitem
; 11951:  * 
; 11952:  */
; 11953:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 479, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_struct
	mov	rdi, rdx
	mov	QWORD PTR [rax-56], r15
	xor	r8d, r8d
	xor	edx, edx
	mov	QWORD PTR __pyx_v_bytesitem$1$[rsp], r12
	mov	QWORD PTR __pyx_v_result$1$[rsp], r12
	mov	r15, r12
	mov	r14, r12
	mov	rsi, r12
	call	__Pyx_Import
	test	rax, rax
	jne	SHORT $LN211@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 479		; 000001dfH
	mov	DWORD PTR __pyx_clineno, 11953		; 00002eb1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@25
$LN211@pyx_memory@25:

; 11954:   __Pyx_GOTREF(__pyx_t_1);
; 11955:   __pyx_v_struct = __pyx_t_1;
; 11956:   __pyx_t_1 = 0;
; 11957: 
; 11958:   /* "View.MemoryView":482
; 11959:  *         cdef bytes bytesitem
; 11960:  * 
; 11961:  *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
; 11962:  *         try:
; 11963:  *             result = struct.unpack(self.view.format, bytesitem)
; 11964:  */
; 11965:   __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L1_error)

	mov	rdx, QWORD PTR [rbx+96]
	mov	rcx, rdi
	mov	r15, rax
	call	QWORD PTR __imp_PyString_FromStringAndSize
	mov	QWORD PTR __pyx_t_1$4$[rsp], rax
	test	rax, rax
	jne	SHORT $LN210@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 482		; 000001e2H
	mov	DWORD PTR __pyx_clineno, 11965		; 00002ebdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN33@pyx_memory@25
$LN210@pyx_memory@25:

; 11966:   __Pyx_GOTREF(__pyx_t_1);
; 11967:   __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);

	mov	QWORD PTR __pyx_v_bytesitem$1$[rsp], rax

; 11968:   __pyx_t_1 = 0;
; 11969: 
; 11970:   /* "View.MemoryView":483
; 11971:  * 
; 11972:  *         bytesitem = itemp[:self.view.itemsize]
; 11973:  *         try:             # <<<<<<<<<<<<<<
; 11974:  *             result = struct.unpack(self.view.format, bytesitem)
; 11975:  *         except struct.error:
; 11976:  */
; 11977:   {
; 11978:     __Pyx_PyThreadState_declare
; 11979:     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	r13, QWORD PTR [rax]
	mov	QWORD PTR __pyx_tstate$1$[rsp], r13

; 11980:     __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);

	mov	rdx, QWORD PTR [r13+96]
	mov	rax, QWORD PTR [r13+104]
	mov	rcx, QWORD PTR [r13+112]
	mov	QWORD PTR __pyx_t_2$1$[rsp], rdx
	mov	QWORD PTR __pyx_t_3$1$[rsp], rax
	mov	QWORD PTR __pyx_t_4$1$[rsp], rcx
	test	rdx, rdx
	je	SHORT $LN227@pyx_memory@25
	inc	QWORD PTR [rdx]
$LN227@pyx_memory@25:
	test	rax, rax
	je	SHORT $LN222@pyx_memory@25
	inc	QWORD PTR [rax]
$LN222@pyx_memory@25:
	test	rcx, rcx
	je	SHORT $LN217@pyx_memory@25
	inc	QWORD PTR [rcx]
$LN217@pyx_memory@25:

; 11981:     __Pyx_XGOTREF(__pyx_t_2);
; 11982:     __Pyx_XGOTREF(__pyx_t_3);
; 11983:     __Pyx_XGOTREF(__pyx_t_4);
; 11984:     /*try:*/ {
; 11985: 
; 11986:       /* "View.MemoryView":484
; 11987:  *         bytesitem = itemp[:self.view.itemsize]
; 11988:  *         try:
; 11989:  *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
; 11990:  *         except struct.error:
; 11991:  *             raise ValueError("Unable to convert item to object")
; 11992:  */
; 11993:       __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 484, __pyx_L3_error)

	mov	rax, QWORD PTR [r15+8]
	mov	rdi, QWORD PTR [rax+144]
	test	rdi, rdi
	je	SHORT $LN232@pyx_memory@25
	mov	rdx, QWORD PTR __pyx_n_s_unpack
	mov	rcx, r15
	call	rdi
	mov	rdi, rax
	jmp	SHORT $LN233@pyx_memory@25
$LN232@pyx_memory@25:
	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN231@pyx_memory@25
	mov	rdx, QWORD PTR __pyx_n_s_unpack
	mov	rcx, r15
	add	rdx, 32					; 00000020H
	call	rax
	mov	rdi, rax
	jmp	SHORT $LN233@pyx_memory@25
$LN231@pyx_memory@25:
	mov	rdx, QWORD PTR __pyx_n_s_unpack
	mov	rcx, r15
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN233@pyx_memory@25:
	mov	rbp, rdi
	test	rdi, rdi
	jne	SHORT $LN209@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 484		; 000001e4H
	mov	DWORD PTR __pyx_clineno, 11993		; 00002ed9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN137@pyx_memory@25
$LN209@pyx_memory@25:

; 11994:       __Pyx_GOTREF(__pyx_t_5);
; 11995:       __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 484, __pyx_L3_error)

	mov	rcx, QWORD PTR [rbx+112]
	call	QWORD PTR __imp_PyString_FromString
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN208@pyx_memory@25
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 484		; 000001e4H
	mov	DWORD PTR __pyx_clineno, 11995		; 00002edbH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN137@pyx_memory@25
$LN208@pyx_memory@25:

; 11996:       __Pyx_GOTREF(__pyx_t_6);
; 11997:       __pyx_t_7 = NULL;
; 11998:       __pyx_t_8 = 0;
; 11999:       if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	rbx, r12
	mov	r13d, r12d
	cmp	QWORD PTR [rdi+8], rax
	jne	SHORT $LN206@pyx_memory@25

; 12000:         __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

	mov	rbx, QWORD PTR [rdi+24]

; 12001:         if (likely(__pyx_t_7)) {

	test	rbx, rbx
	je	SHORT $LN206@pyx_memory@25

; 12002:           PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

	mov	rbp, QWORD PTR [rdi+16]

; 12003:           __Pyx_INCREF(__pyx_t_7);

	inc	QWORD PTR [rbx]

; 12004:           __Pyx_INCREF(function);

	inc	QWORD PTR [rbp]

; 12005:           __Pyx_DECREF_SET(__pyx_t_5, function);

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN201@pyx_memory@25
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN201@pyx_memory@25:

; 12006:           __pyx_t_8 = 1;

	mov	r13d, 1
$LN206@pyx_memory@25:

; 12007:         }
; 12008:       }
; 12009:       #if CYTHON_FAST_PYCALL
; 12010:       if (PyFunction_Check(__pyx_t_5)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [rbp+8], rax
	jne	$LN197@pyx_memory@25

; 12011:         PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};

	mov	rcx, QWORD PTR __pyx_t_1$4$[rsp]

; 12012:         __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 484, __pyx_L3_error)

	movsxd	rax, r13d
	lea	rdx, QWORD PTR __pyx_temp$22147[rsp+8]
	shl	rax, 3
	mov	QWORD PTR __pyx_temp$22147[rsp+16], rcx
	lea	r8d, DWORD PTR [r13+2]
	mov	rcx, rbp
	xor	r9d, r9d
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$22147[rsp], rbx
	mov	QWORD PTR __pyx_temp$22147[rsp+8], r14
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN195@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 484		; 000001e4H
	mov	DWORD PTR __pyx_clineno, 12012		; 00002eecH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L3_error$22120
$LN195@pyx_memory@25:

; 12013:         __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	test	rbx, rbx
	je	SHORT $LN188@pyx_memory@25
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN188@pyx_memory@25
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN188@pyx_memory@25:

; 12014:         __Pyx_GOTREF(__pyx_t_1);
; 12015:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [r14], -1
	mov	rbx, r12
	jne	$LN171@pyx_memory@25
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]

; 12016:       } else

	jmp	$LN171@pyx_memory@25
$LN197@pyx_memory@25:

; 12017:       #endif
; 12018:       #if CYTHON_FAST_PYCCALL
; 12019:       if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
; 12020:         PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
; 12021:         __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 484, __pyx_L3_error)
; 12022:         __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
; 12023:         __Pyx_GOTREF(__pyx_t_1);
; 12024:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
; 12025:       } else
; 12026:       #endif
; 12027:       {
; 12028:         __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 484, __pyx_L3_error)

	lea	eax, DWORD PTR [r13+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN179@pyx_memory@25
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 484		; 000001e4H
	mov	DWORD PTR __pyx_clineno, 12028		; 00002efcH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	SHORT $__pyx_L3_error$22120
$LN179@pyx_memory@25:

; 12029:         __Pyx_GOTREF(__pyx_t_9);
; 12030:         if (__pyx_t_7) {

	test	rbx, rbx
	je	SHORT $LN178@pyx_memory@25

; 12031:           __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;

	mov	QWORD PTR [rax+24], rbx
	mov	rbx, r12
$LN178@pyx_memory@25:

; 12032:         }
; 12033:         __Pyx_GIVEREF(__pyx_t_6);
; 12034:         PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
; 12035:         __Pyx_INCREF(__pyx_v_bytesitem);

	mov	rcx, QWORD PTR __pyx_t_1$4$[rsp]
	movsxd	rax, r13d

; 12036:         __Pyx_GIVEREF(__pyx_v_bytesitem);
; 12037:         PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
; 12038:         __pyx_t_6 = 0;
; 12039:         __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 484, __pyx_L3_error)

	xor	r8d, r8d
	mov	QWORD PTR [rsi+rax*8+24], r14
	inc	QWORD PTR [rcx]
	mov	QWORD PTR [rsi+rax*8+32], rcx
	mov	rcx, rbp
	mov	rdx, rsi
	mov	r14, r12
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	$LN176@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 484		; 000001e4H
	mov	DWORD PTR __pyx_clineno, 12039		; 00002f07H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L3_error$22120:

; 12101:       goto __pyx_L6_except_return;
; 12102:     }
; 12103:     __pyx_L3_error:;
; 12104:     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	test	rbx, rbx
	je	SHORT $LN270@pyx_memory@25
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN138@pyx_memory@25
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN138@pyx_memory@25:
	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]

; 11968:   __pyx_t_1 = 0;
; 11969: 
; 11970:   /* "View.MemoryView":483
; 11971:  * 
; 11972:  *         bytesitem = itemp[:self.view.itemsize]
; 11973:  *         try:             # <<<<<<<<<<<<<<
; 11974:  *             result = struct.unpack(self.view.format, bytesitem)
; 11975:  *         except struct.error:
; 11976:  */
; 11977:   {
; 11978:     __Pyx_PyThreadState_declare
; 11979:     __Pyx_PyThreadState_assign

	jmp	SHORT $LN137@pyx_memory@25
$LN270@pyx_memory@25:
	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]
$LN137@pyx_memory@25:

; 12101:       goto __pyx_L6_except_return;
; 12102:     }
; 12103:     __pyx_L3_error:;
; 12104:     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rbx, r12

; 12105:     __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

	test	r14, r14
	je	SHORT $LN127@pyx_memory@25
	add	QWORD PTR [r14], -1
	jne	SHORT $LN127@pyx_memory@25
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN127@pyx_memory@25:

; 12106:     __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

	test	rsi, rsi
	je	SHORT $LN117@pyx_memory@25
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN117@pyx_memory@25
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN117@pyx_memory@25:
	mov	rsi, r12
	mov	QWORD PTR __pyx_t_9$[rsp], r12

; 12107:     __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

	test	rbp, rbp
	je	SHORT $LN107@pyx_memory@25
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN107@pyx_memory@25
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN107@pyx_memory@25:

; 12108:     __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
; 12109: 
; 12110:     /* "View.MemoryView":485
; 12111:  *         try:
; 12112:  *             result = struct.unpack(self.view.format, bytesitem)
; 12113:  *         except struct.error:             # <<<<<<<<<<<<<<
; 12114:  *             raise ValueError("Unable to convert item to object")
; 12115:  *         else:
; 12116:  */
; 12117:     __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 485, __pyx_L5_except_error)

	mov	rax, QWORD PTR [r15+8]
	mov	rbp, r12
	mov	QWORD PTR __pyx_t_5$[rsp], r12
	mov	rdi, QWORD PTR [rax+144]
	test	rdi, rdi
	je	SHORT $LN264@pyx_memory@25
	mov	rdx, QWORD PTR __pyx_n_s_error
	mov	rcx, r15
	call	rdi
	mov	rdi, rax
	jmp	SHORT $LN265@pyx_memory@25
$LN264@pyx_memory@25:
	mov	rax, QWORD PTR [rax+64]
	test	rax, rax
	je	SHORT $LN263@pyx_memory@25
	mov	rdx, QWORD PTR __pyx_n_s_error
	mov	rcx, r15
	add	rdx, 32					; 00000020H
	call	rax
	mov	rdi, rax
	jmp	SHORT $LN265@pyx_memory@25
$LN263@pyx_memory@25:
	mov	rdx, QWORD PTR __pyx_n_s_error
	mov	rcx, r15
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN265@pyx_memory@25:
	test	rdi, rdi
	jne	SHORT $LN94@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 485		; 000001e5H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 12117		; 00002f55H
	jmp	$__pyx_L5_except_error$22251
$LN94@pyx_memory@25:

; 12118:     __Pyx_GOTREF(__pyx_t_1);
; 12119:     __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_t_1);

	mov	rdx, rdi
	mov	rcx, r13
	call	__Pyx_PyErr_ExceptionMatchesInState

; 12120:     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	mov	r13d, eax
	jne	SHORT $LN92@pyx_memory@25
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN92@pyx_memory@25:
	mov	rdi, r12
	mov	QWORD PTR __pyx_t_1$[rsp], r12

; 12121:     if (__pyx_t_8) {

	test	r13d, r13d
	je	$LN269@pyx_memory@25

; 12122:       __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0DC@ILKGIKIH@View?4MemoryView?4memoryview?4conve@
	call	__Pyx_AddTraceback

; 12123:       if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) __PYX_ERR(2, 485, __pyx_L5_except_error)

	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]
	lea	r9, QWORD PTR __pyx_t_9$[rsp]
	lea	r8, QWORD PTR __pyx_t_5$[rsp]
	lea	rdx, QWORD PTR __pyx_t_1$[rsp]
	mov	rcx, r13
	call	__Pyx__GetException
	test	eax, eax
	jns	SHORT $LN87@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	rdi, QWORD PTR __pyx_t_1$[rsp]
	mov	rbp, QWORD PTR __pyx_t_5$[rsp]
	mov	rsi, QWORD PTR __pyx_t_9$[rsp]
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_lineno, 485		; 000001e5H
	mov	DWORD PTR __pyx_clineno, 12123		; 00002f5bH
	jmp	$__pyx_L5_except_error$22251
$LN87@pyx_memory@25:

; 12124:       __Pyx_GOTREF(__pyx_t_1);
; 12125:       __Pyx_GOTREF(__pyx_t_5);
; 12126:       __Pyx_GOTREF(__pyx_t_9);
; 12127: 
; 12128:       /* "View.MemoryView":486
; 12129:  *             result = struct.unpack(self.view.format, bytesitem)
; 12130:  *         except struct.error:
; 12131:  *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
; 12132:  *         else:
; 12133:  *             if len(self.view.format) == 1:
; 12134:  */
; 12135:       __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 486, __pyx_L5_except_error)

	mov	rdx, QWORD PTR __pyx_tuple__20
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN86@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	rdi, QWORD PTR __pyx_t_1$[rsp]
	mov	rbp, QWORD PTR __pyx_t_5$[rsp]
	mov	rsi, QWORD PTR __pyx_t_9$[rsp]
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_lineno, 486		; 000001e6H
	mov	DWORD PTR __pyx_clineno, 12135		; 00002f67H
	jmp	$__pyx_L5_except_error$22251
$LN86@pyx_memory@25:

; 12136:       __Pyx_GOTREF(__pyx_t_6);
; 12137:       __Pyx_Raise(__pyx_t_6, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 12138:       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN84@pyx_memory@25
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN84@pyx_memory@25:

; 12139:       __PYX_ERR(2, 486, __pyx_L5_except_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	rdi, QWORD PTR __pyx_t_1$[rsp]
	mov	rbp, QWORD PTR __pyx_t_5$[rsp]
	mov	rsi, QWORD PTR __pyx_t_9$[rsp]
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_lineno, 486		; 000001e6H
	mov	DWORD PTR __pyx_clineno, 12139		; 00002f6bH
	jmp	$__pyx_L5_except_error$22251
$LN176@pyx_memory@25:

; 12040:         __Pyx_GOTREF(__pyx_t_1);
; 12041:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN175@pyx_memory@25
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN175@pyx_memory@25:
	mov	rsi, r12
$LN171@pyx_memory@25:

; 12042:       }
; 12043:       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN170@pyx_memory@25
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN170@pyx_memory@25:

; 12044:       __pyx_v_result = __pyx_t_1;
; 12045:       __pyx_t_1 = 0;
; 12046: 
; 12047:       /* "View.MemoryView":483
; 12048:  * 
; 12049:  *         bytesitem = itemp[:self.view.itemsize]
; 12050:  *         try:             # <<<<<<<<<<<<<<
; 12051:  *             result = struct.unpack(self.view.format, bytesitem)
; 12052:  *         except struct.error:
; 12053:  */
; 12054:     }
; 12055: 
; 12056:     /* "View.MemoryView":488
; 12057:  *             raise ValueError("Unable to convert item to object")
; 12058:  *         else:
; 12059:  *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
; 12060:  *                 return result[0]
; 12061:  *             return result
; 12062:  */
; 12063:     /*else:*/ {
; 12064:       __pyx_t_10 = strlen(__pyx_v_self->view.format); 

	mov	rdi, QWORD PTR __pyx_v_self$[rsp]
	or	rcx, -1
	xor	eax, eax
	mov	rdi, QWORD PTR [rdi+112]
	mov	rbp, r12
	mov	QWORD PTR __pyx_v_result$1$[rsp], r13
	repne scasb
	not	rcx
	dec	rcx

; 12065:       __pyx_t_11 = ((__pyx_t_10 == 1) != 0);

	cmp	rcx, 1

; 12066:       if (__pyx_t_11) {

	jne	$LN147@pyx_memory@25

; 12067: 
; 12068:         /* "View.MemoryView":489
; 12069:  *         else:
; 12070:  *             if len(self.view.format) == 1:
; 12071:  *                 return result[0]             # <<<<<<<<<<<<<<
; 12072:  *             return result
; 12073:  * 
; 12074:  */
; 12075:         __Pyx_XDECREF(__pyx_r);
; 12076:         __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 489, __pyx_L5_except_error)

	mov	rax, QWORD PTR [r13+8]
	cmp	rax, QWORD PTR __imp_PyList_Type
	jne	SHORT $LN248@pyx_memory@25
	mov	rax, QWORD PTR [r13+24]
	mov	rdi, QWORD PTR [rax]
	inc	QWORD PTR [rdi]
	jmp	SHORT $LN258@pyx_memory@25
$LN248@pyx_memory@25:
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	jne	SHORT $LN243@pyx_memory@25
	mov	rdi, QWORD PTR [r13+24]
	inc	QWORD PTR [rdi]
	jmp	SHORT $LN258@pyx_memory@25
$LN243@pyx_memory@25:
	mov	rcx, QWORD PTR [rax+104]
	test	rcx, rcx
	je	SHORT $LN239@pyx_memory@25
	mov	rax, QWORD PTR [rcx+24]
	test	rax, rax
	je	SHORT $LN239@pyx_memory@25
	xor	edx, edx
	mov	rcx, r13
	call	rax
	mov	rdi, rax
	jmp	SHORT $LN258@pyx_memory@25
$LN239@pyx_memory@25:
	xor	ecx, ecx
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN260@pyx_memory@25
	mov	rdi, r12
	jmp	SHORT $LN258@pyx_memory@25
$LN260@pyx_memory@25:
	mov	rdx, rax
	mov	rcx, r13
	call	QWORD PTR __imp_PyObject_GetItem
	add	QWORD PTR [r14], -1
	mov	rdi, rax
	jne	SHORT $LN258@pyx_memory@25
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN258@pyx_memory@25:
	test	rdi, rdi
	jne	$LN155@pyx_memory@25
	mov	rax, QWORD PTR __pyx_f+16
	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]
	mov	DWORD PTR __pyx_lineno, 489		; 000001e9H
	mov	QWORD PTR __pyx_filename, rax
	mov	DWORD PTR __pyx_clineno, 12076		; 00002f2cH

; 12155:     goto __pyx_L1_error;
; 12156:     __pyx_L6_except_return:;
; 12157:     __Pyx_XGIVEREF(__pyx_t_2);
; 12158:     __Pyx_XGIVEREF(__pyx_t_3);
; 12159:     __Pyx_XGIVEREF(__pyx_t_4);
; 12160:     __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

	jmp	SHORT $__pyx_L5_except_error$22251
$LN269@pyx_memory@25:
	mov	r13, QWORD PTR __pyx_tstate$1$[rsp]
$__pyx_L5_except_error$22251:

; 12140:     }
; 12141:     goto __pyx_L5_except_error;
; 12142:     __pyx_L5_except_error:;
; 12143: 
; 12144:     /* "View.MemoryView":483
; 12145:  * 
; 12146:  *         bytesitem = itemp[:self.view.itemsize]
; 12147:  *         try:             # <<<<<<<<<<<<<<
; 12148:  *             result = struct.unpack(self.view.format, bytesitem)
; 12149:  *         except struct.error:
; 12150:  */
; 12151:     __Pyx_XGIVEREF(__pyx_t_2);
; 12152:     __Pyx_XGIVEREF(__pyx_t_3);
; 12153:     __Pyx_XGIVEREF(__pyx_t_4);
; 12154:     __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

	mov	r9, QWORD PTR __pyx_t_4$1$[rsp]
	mov	r8, QWORD PTR __pyx_t_3$1$[rsp]
	mov	rdx, QWORD PTR __pyx_t_2$1$[rsp]
	mov	rcx, r13
	call	__Pyx__ExceptionReset
$__pyx_L1_error$22115:

; 12161:     goto __pyx_L0;
; 12162:   }
; 12163: 
; 12164:   /* "View.MemoryView":476
; 12165:  *         self.assign_item_from_object(itemp, value)
; 12166:  * 
; 12167:  *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
; 12168:  *         """Only used if instantiated manually by the user, or if Cython doesn't
; 12169:  *         know how to convert the type"""
; 12170:  */
; 12171: 
; 12172:   /* function exit code */
; 12173:   __pyx_L1_error:;
; 12174:   __Pyx_XDECREF(__pyx_t_1);

	test	rdi, rdi
	je	SHORT $LN73@pyx_memory@25
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN73@pyx_memory@25
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN73@pyx_memory@25:

; 12175:   __Pyx_XDECREF(__pyx_t_5);

	test	rbp, rbp
	je	SHORT $LN53@pyx_memory@25
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN53@pyx_memory@25
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN53@pyx_memory@25:

; 12176:   __Pyx_XDECREF(__pyx_t_6);
; 12177:   __Pyx_XDECREF(__pyx_t_7);

	test	rbx, rbx
	je	SHORT $LN43@pyx_memory@25
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN43@pyx_memory@25
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN43@pyx_memory@25:

; 12178:   __Pyx_XDECREF(__pyx_t_9);

	test	rsi, rsi
	je	SHORT $LN33@pyx_memory@25
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN33@pyx_memory@25
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN33@pyx_memory@25:

; 12179:   __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0DC@ILKGIKIH@View?4MemoryView?4memoryview?4conve@
	call	__Pyx_AddTraceback

; 12180:   __pyx_r = 0;

	jmp	SHORT $__pyx_L0$22376
$LN155@pyx_memory@25:

; 12077:         __Pyx_GOTREF(__pyx_t_1);
; 12078:         __pyx_r = __pyx_t_1;

	mov	r12, rdi

; 12079:         __pyx_t_1 = 0;
; 12080:         goto __pyx_L6_except_return;

	jmp	SHORT $__pyx_L6_except_return$22252
$LN147@pyx_memory@25:

; 12081: 
; 12082:         /* "View.MemoryView":488
; 12083:  *             raise ValueError("Unable to convert item to object")
; 12084:  *         else:
; 12085:  *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
; 12086:  *                 return result[0]
; 12087:  *             return result
; 12088:  */
; 12089:       }
; 12090: 
; 12091:       /* "View.MemoryView":490
; 12092:  *             if len(self.view.format) == 1:
; 12093:  *                 return result[0]
; 12094:  *             return result             # <<<<<<<<<<<<<<
; 12095:  * 
; 12096:  *     cdef assign_item_from_object(self, char *itemp, object value):
; 12097:  */
; 12098:       __Pyx_XDECREF(__pyx_r);
; 12099:       __Pyx_INCREF(__pyx_v_result);

	inc	QWORD PTR [r13]

; 12100:       __pyx_r = __pyx_v_result;

	mov	r12, r13
$__pyx_L6_except_return$22252:

; 12155:     goto __pyx_L1_error;
; 12156:     __pyx_L6_except_return:;
; 12157:     __Pyx_XGIVEREF(__pyx_t_2);
; 12158:     __Pyx_XGIVEREF(__pyx_t_3);
; 12159:     __Pyx_XGIVEREF(__pyx_t_4);
; 12160:     __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

	mov	r9, QWORD PTR __pyx_t_4$1$[rsp]
	mov	r8, QWORD PTR __pyx_t_3$1$[rsp]
	mov	rdx, QWORD PTR __pyx_t_2$1$[rsp]
	mov	rcx, QWORD PTR __pyx_tstate$1$[rsp]
	call	__Pyx__ExceptionReset
$__pyx_L0$22376:
	mov	r14, QWORD PTR [rsp+120]
	mov	r13, QWORD PTR [rsp+128]
	mov	rdi, QWORD PTR [rsp+136]
	mov	rsi, QWORD PTR [rsp+144]
	mov	rbp, QWORD PTR [rsp+152]
	mov	rbx, QWORD PTR [rsp+184]

; 12181:   __pyx_L0:;
; 12182:   __Pyx_XDECREF(__pyx_v_struct);

	test	r15, r15
	je	SHORT $LN23@pyx_memory@25
	add	QWORD PTR [r15], -1
	jne	SHORT $LN23@pyx_memory@25
	mov	rax, QWORD PTR [r15+8]
	mov	rcx, r15
	call	QWORD PTR [rax+48]
$LN23@pyx_memory@25:

; 12183:   __Pyx_XDECREF(__pyx_v_bytesitem);

	mov	rcx, QWORD PTR __pyx_v_bytesitem$1$[rsp]
	mov	r15, QWORD PTR [rsp+112]
	test	rcx, rcx
	je	SHORT $LN13@pyx_memory@25
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN13@pyx_memory@25
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@25:

; 12184:   __Pyx_XDECREF(__pyx_v_result);

	mov	rax, QWORD PTR __pyx_v_result$1$[rsp]
	test	rax, rax
	je	SHORT $LN267@pyx_memory@25
	add	QWORD PTR [rax], -1
	jne	SHORT $LN267@pyx_memory@25
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN267@pyx_memory@25:

; 12185:   __Pyx_XGIVEREF(__pyx_r);
; 12186:   __Pyx_RefNannyFinishContext();
; 12187:   return __pyx_r;

	mov	rax, r12

; 12188: }

	add	rsp, 160				; 000000a0H
	pop	r12
	ret	0
__pyx_memoryview_convert_item_to_object ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__ PROC ; COMDAT

; 12857:   PyObject *__pyx_r = 0;
; 12858:   __Pyx_RefNannyDeclarations
; 12859:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 12860:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 12861: 
; 12862:   /* function exit code */
; 12863:   __Pyx_RefNannyFinishContext();
; 12864:   return __pyx_r;
; 12865: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__ PROC ; COMDAT

; 12935:   PyObject *__pyx_r = 0;
; 12936:   __Pyx_RefNannyDeclarations
; 12937:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 12938:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 12939: 
; 12940:   /* function exit code */
; 12941:   __Pyx_RefNannyFinishContext();
; 12942:   return __pyx_r;
; 12943: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__ PROC ; COMDAT

; 13046:   PyObject *__pyx_r = 0;
; 13047:   __Pyx_RefNannyDeclarations
; 13048:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 13049:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13050: 
; 13051:   /* function exit code */
; 13052:   __Pyx_RefNannyFinishContext();
; 13053:   return __pyx_r;
; 13054: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__ DD imagerel __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__
	DD	imagerel __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__+86
	DD	imagerel $unwind$__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__
_TEXT	SEGMENT
$T42458 = 48
__pyx_v_self$ = 48
__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__ PROC ; COMDAT

; 13160: static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 13161:   PyObject *__pyx_r = 0;
; 13162:   __Pyx_RefNannyDeclarations
; 13163:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 13164:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

	mov	ecx, DWORD PTR [rcx+108]
	mov	DWORD PTR $T42458[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	test	rax, rax
	jne	SHORT $__pyx_L0$42493
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@
	mov	edx, 13185				; 00003381H
	mov	r8d, 571				; 0000023bH
	mov	DWORD PTR __pyx_lineno, 571		; 0000023bH
	mov	DWORD PTR __pyx_clineno, 13185		; 00003381H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$42492:
	call	__Pyx_AddTraceback

; 13165: 
; 13166:   /* function exit code */
; 13167:   __Pyx_RefNannyFinishContext();
; 13168:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$42493:

; 13169: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__ DD imagerel __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__
	DD	imagerel __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__+83
	DD	imagerel $unwind$__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__ DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__ PROC ; COMDAT

; 13220: static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {

	sub	rsp, 40					; 00000028H

; 13221:   PyObject *__pyx_r = 0;
; 13222:   __Pyx_RefNannyDeclarations
; 13223:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 13224:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

	mov	rcx, QWORD PTR [rcx+96]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	test	rax, rax
	jne	SHORT $__pyx_L0$42535
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@
	mov	edx, 13245				; 000033bdH
	mov	r8d, 575				; 0000023fH
	mov	DWORD PTR __pyx_lineno, 575		; 0000023fH
	mov	DWORD PTR __pyx_clineno, 13245		; 000033bdH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$42534:
	call	__Pyx_AddTraceback

; 13225: 
; 13226:   /* function exit code */
; 13227:   __Pyx_RefNannyFinishContext();
; 13228:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$42535:

; 13229: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__ PROC ; COMDAT

; 13281:   PyObject *__pyx_r = 0;
; 13282:   __Pyx_RefNannyDeclarations
; 13283:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 13284:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13285: 
; 13286:   /* function exit code */
; 13287:   __Pyx_RefNannyFinishContext();
; 13288:   return __pyx_r;
; 13289: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__ PROC ; COMDAT

; 13351:   PyObject *__pyx_r = 0;
; 13352:   __Pyx_RefNannyDeclarations
; 13353:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 13354:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13355: 
; 13356:   /* function exit code */
; 13357:   __Pyx_RefNannyFinishContext();
; 13358:   return __pyx_r;
; 13359: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___repr__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryview___repr__ PROC				; COMDAT

; 13569:   PyObject *__pyx_r = 0;
; 13570:   __Pyx_RefNannyDeclarations
; 13571:   __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
; 13572:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13573: 
; 13574:   /* function exit code */
; 13575:   __Pyx_RefNannyFinishContext();
; 13576:   return __pyx_r;
; 13577: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__
__pyx_memoryview___repr__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___str__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryview___str__ PROC				; COMDAT

; 13674:   PyObject *__pyx_r = 0;
; 13675:   __Pyx_RefNannyDeclarations
; 13676:   __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
; 13677:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13678: 
; 13679:   /* function exit code */
; 13680:   __Pyx_RefNannyFinishContext();
; 13681:   return __pyx_r;
; 13682: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__
__pyx_memoryview___str__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_memoryview_1__reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_pw___pyx_memoryview_1__reduce_cython__ PROC	; COMDAT

; 14073:   PyObject *__pyx_r = 0;
; 14074:   __Pyx_RefNannyDeclarations
; 14075:   __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
; 14076:   __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 14077: 
; 14078:   /* function exit code */
; 14079:   __Pyx_RefNannyFinishContext();
; 14080:   return __pyx_r;
; 14081: }

	jmp	__pyx_pf___pyx_memoryview___reduce_cython__
__pyx_pw___pyx_memoryview_1__reduce_cython__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_memoryview_3__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v___pyx_state$ = 16
__pyx_pw___pyx_memoryview_3__setstate_cython__ PROC	; COMDAT

; 14127:   PyObject *__pyx_r = 0;
; 14128:   __Pyx_RefNannyDeclarations
; 14129:   __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
; 14130:   __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
; 14131: 
; 14132:   /* function exit code */
; 14133:   __Pyx_RefNannyFinishContext();
; 14134:   return __pyx_r;
; 14135: }

	jmp	__pyx_pf___pyx_memoryview_2__setstate_cython__
__pyx_pw___pyx_memoryview_3__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@HGMCNFNC@View?4MemoryView?4slice_memviewsli@ ; `string'
PUBLIC	??_C@_0EF@BLHDGKFL@All?5dimensions?5preceding?5dimensi@ ; `string'
PUBLIC	??_C@_0BP@EFEBGACI@Step?5may?5not?5be?5zero?5?$CIaxis?5?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@JFECOFFC@Index?5out?5of?5bounds?5?$CIaxis?5?$CFd?$CJ?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_slice_memviewslice DD imagerel __pyx_memoryview_slice_memviewslice
	DD	imagerel __pyx_memoryview_slice_memviewslice+724
	DD	imagerel $unwind$__pyx_memoryview_slice_memviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_slice_memviewslice DD 0c2101H
	DD	0c6421H
	DD	0b5421H
	DD	0a3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
xdata	ENDS
;	COMDAT ??_C@_0CD@HGMCNFNC@View?4MemoryView?4slice_memviewsli@
CONST	SEGMENT
??_C@_0CD@HGMCNFNC@View?4MemoryView?4slice_memviewsli@ DB 'View.MemoryVie'
	DB	'w.slice_memviewslice', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@BLHDGKFL@All?5dimensions?5preceding?5dimensi@
CONST	SEGMENT
??_C@_0EF@BLHDGKFL@All?5dimensions?5preceding?5dimensi@ DB 'All dimension'
	DB	's preceding dimension %d must be indexed and not sliced', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EFEBGACI@Step?5may?5not?5be?5zero?5?$CIaxis?5?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@EFEBGACI@Step?5may?5not?5be?5zero?5?$CIaxis?5?$CFd?$CJ?$AA@ DB 'S'
	DB	'tep may not be zero (axis %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JFECOFFC@Index?5out?5of?5bounds?5?$CIaxis?5?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@JFECOFFC@Index?5out?5of?5bounds?5?$CIaxis?5?$CFd?$CJ?$AA@ DB 'I'
	DB	'ndex out of bounds (axis %d)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_slice_memviewslice
_TEXT	SEGMENT
__pyx_v_dst$ = 80
__pyx_v_shape$ = 88
__pyx_v_stride$ = 96
__pyx_v_suboffset$ = 104
__pyx_v_dim$ = 112
__pyx_v_new_ndim$ = 120
__pyx_v_suboffset_dim$ = 128
__pyx_v_start$ = 136
__pyx_v_stop$ = 144
__pyx_v_step$ = 152
__pyx_v_have_start$ = 160
__pyx_v_have_stop$ = 168
__pyx_v_have_step$ = 176
__pyx_v_is_slice$ = 184
__pyx_memoryview_slice_memviewslice PROC		; COMDAT

; 15427: static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 15428:   Py_ssize_t __pyx_v_new_shape;
; 15429:   int __pyx_v_negative_step;
; 15430:   int __pyx_r;
; 15431:   int __pyx_t_1;
; 15432:   int __pyx_t_2;
; 15433:   int __pyx_t_3;
; 15434: 
; 15435:   /* "View.MemoryView":815
; 15436:  *     cdef bint negative_step
; 15437:  * 
; 15438:  *     if not is_slice:             # <<<<<<<<<<<<<<
; 15439:  * 
; 15440:  *         if start < 0:
; 15441:  */
; 15442:   __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);

	movsxd	r15, DWORD PTR __pyx_v_new_ndim$[rsp]
	mov	r13, r8
	mov	r8d, DWORD PTR __pyx_v_is_slice$[rsp]
	mov	r10, r9
	or	r9, -1
	mov	rdi, rdx
	mov	edx, DWORD PTR __pyx_v_dim$[rsp]
	mov	rbp, rcx
	test	r8d, r8d

; 15443:   if (__pyx_t_1) {

	jne	SHORT $LN30@pyx_memory@26

; 15444: 
; 15445:     /* "View.MemoryView":817
; 15446:  *     if not is_slice:
; 15447:  * 
; 15448:  *         if start < 0:             # <<<<<<<<<<<<<<
; 15449:  *             start += shape
; 15450:  *         if not 0 <= start < shape:
; 15451:  */
; 15452:     __pyx_t_1 = ((__pyx_v_start < 0) != 0);

	mov	rbx, QWORD PTR __pyx_v_start$[rsp]
	test	rbx, rbx

; 15453:     if (__pyx_t_1) {

	jns	SHORT $LN29@pyx_memory@26

; 15454: 
; 15455:       /* "View.MemoryView":818
; 15456:  * 
; 15457:  *         if start < 0:
; 15458:  *             start += shape             # <<<<<<<<<<<<<<
; 15459:  *         if not 0 <= start < shape:
; 15460:  *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
; 15461:  */
; 15462:       __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

	add	rbx, rdi
$LN29@pyx_memory@26:

; 15463: 
; 15464:       /* "View.MemoryView":817
; 15465:  *     if not is_slice:
; 15466:  * 
; 15467:  *         if start < 0:             # <<<<<<<<<<<<<<
; 15468:  *             start += shape
; 15469:  *         if not 0 <= start < shape:
; 15470:  */
; 15471:     }
; 15472: 
; 15473:     /* "View.MemoryView":819
; 15474:  *         if start < 0:
; 15475:  *             start += shape
; 15476:  *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
; 15477:  *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
; 15478:  *     else:
; 15479:  */
; 15480:     __pyx_t_1 = (0 <= __pyx_v_start);

	xor	esi, esi
	test	rbx, rbx
	mov	eax, esi
	setns	al

; 15481:     if (__pyx_t_1) {

	test	eax, eax
	je	SHORT $LN33@pyx_memory@26

; 15482:       __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);

	cmp	rbx, rdi
	mov	eax, esi
	setl	al

; 15483:     }
; 15484:     __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);

	test	eax, eax

; 15485:     if (__pyx_t_2) {

	jne	$__pyx_L3$25362
$LN33@pyx_memory@26:

; 15486: 
; 15487:       /* "View.MemoryView":820
; 15488:  *             start += shape
; 15489:  *         if not 0 <= start < shape:
; 15490:  *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
; 15491:  *     else:
; 15492:  * 
; 15493:  */
; 15494:       __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 820, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0BO@JFECOFFC@Index?5out?5of?5bounds?5?$CIaxis?5?$CFd?$CJ?$AA@
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	jne	$LN34@pyx_memory@26
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 15494		; 00003c86H
	jmp	$LN36@pyx_memory@26
$LN30@pyx_memory@26:

; 15495: 
; 15496:       /* "View.MemoryView":819
; 15497:  *         if start < 0:
; 15498:  *             start += shape
; 15499:  *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
; 15500:  *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
; 15501:  *     else:
; 15502:  */
; 15503:     }
; 15504: 
; 15505:     /* "View.MemoryView":815
; 15506:  *     cdef bint negative_step
; 15507:  * 
; 15508:  *     if not is_slice:             # <<<<<<<<<<<<<<
; 15509:  * 
; 15510:  *         if start < 0:
; 15511:  */
; 15512:     goto __pyx_L3;
; 15513:   }
; 15514: 
; 15515:   /* "View.MemoryView":823
; 15516:  *     else:
; 15517:  * 
; 15518:  *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
; 15519:  * 
; 15520:  *         if have_step and step == 0:
; 15521:  */
; 15522:   /*else*/ {
; 15523:     __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);

	mov	ecx, DWORD PTR __pyx_v_have_step$[rsp]

; 15524:     if (__pyx_t_1) {

	mov	r14, QWORD PTR __pyx_v_step$[rsp]
	xor	esi, esi
	test	ecx, ecx
	mov	eax, esi

; 15525:     } else {
; 15526:       __pyx_t_2 = __pyx_t_1;
; 15527:       goto __pyx_L6_bool_binop_done;
; 15528:     }
; 15529:     __pyx_t_1 = ((__pyx_v_step < 0) != 0);

	mov	r12d, esi
	setne	al
	test	eax, eax
	je	SHORT $LN20@pyx_memory@26
	test	r14, r14
$__pyx_L6_bool_binop_done$25365:
	sets	r12b

; 15530:     __pyx_t_2 = __pyx_t_1;
; 15531:     __pyx_L6_bool_binop_done:;
; 15532:     __pyx_v_negative_step = __pyx_t_2;
; 15533: 
; 15534:     /* "View.MemoryView":825
; 15535:  *         negative_step = have_step != 0 and step < 0
; 15536:  * 
; 15537:  *         if have_step and step == 0:             # <<<<<<<<<<<<<<
; 15538:  *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
; 15539:  * 
; 15540:  */
; 15541:     __pyx_t_1 = (__pyx_v_have_step != 0);
; 15542:     if (__pyx_t_1) {

	test	eax, eax
	je	SHORT $LN20@pyx_memory@26

; 15543:     } else {
; 15544:       __pyx_t_2 = __pyx_t_1;
; 15545:       goto __pyx_L9_bool_binop_done;
; 15546:     }
; 15547:     __pyx_t_1 = ((__pyx_v_step == 0) != 0);

	test	r14, r14
	mov	eax, esi
$__pyx_L9_bool_binop_done$25368:
	sete	al

; 15548:     __pyx_t_2 = __pyx_t_1;
; 15549:     __pyx_L9_bool_binop_done:;
; 15550:     if (__pyx_t_2) {

	test	eax, eax
	je	SHORT $LN20@pyx_memory@26

; 15551: 
; 15552:       /* "View.MemoryView":826
; 15553:  * 
; 15554:  *         if have_step and step == 0:
; 15555:  *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
; 15556:  * 
; 15557:  * 
; 15558:  */
; 15559:       __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 826, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0BP@EFEBGACI@Step?5may?5not?5be?5zero?5?$CIaxis?5?$CFd?$CJ?$AA@
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	jne	SHORT $LN35@pyx_memory@26
	mov	DWORD PTR __pyx_lineno, 826		; 0000033aH
	mov	DWORD PTR __pyx_clineno, 15559		; 00003cc7H
	jmp	$LN36@pyx_memory@26
$LN35@pyx_memory@26:

; 15427: static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {

	mov	r10, QWORD PTR __pyx_v_suboffset$[rsp]
	mov	ecx, DWORD PTR __pyx_v_have_step$[rsp]
	or	r9, -1
$LN20@pyx_memory@26:

; 15560: 
; 15561:       /* "View.MemoryView":825
; 15562:  *         negative_step = have_step != 0 and step < 0
; 15563:  * 
; 15564:  *         if have_step and step == 0:             # <<<<<<<<<<<<<<
; 15565:  *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
; 15566:  * 
; 15567:  */
; 15568:     }
; 15569: 
; 15570:     /* "View.MemoryView":829
; 15571:  * 
; 15572:  * 
; 15573:  *         if have_start:             # <<<<<<<<<<<<<<
; 15574:  *             if start < 0:
; 15575:  *                 start += shape
; 15576:  */
; 15577:     __pyx_t_2 = (__pyx_v_have_start != 0);

	cmp	DWORD PTR __pyx_v_have_start$[rsp], esi

; 15578:     if (__pyx_t_2) {

	je	SHORT $LN19@pyx_memory@26

; 15579: 
; 15580:       /* "View.MemoryView":830
; 15581:  * 
; 15582:  *         if have_start:
; 15583:  *             if start < 0:             # <<<<<<<<<<<<<<
; 15584:  *                 start += shape
; 15585:  *                 if start < 0:
; 15586:  */
; 15587:       __pyx_t_2 = ((__pyx_v_start < 0) != 0);

	mov	rbx, QWORD PTR __pyx_v_start$[rsp]
	test	rbx, rbx

; 15588:       if (__pyx_t_2) {

	jns	SHORT $LN18@pyx_memory@26

; 15589: 
; 15590:         /* "View.MemoryView":831
; 15591:  *         if have_start:
; 15592:  *             if start < 0:
; 15593:  *                 start += shape             # <<<<<<<<<<<<<<
; 15594:  *                 if start < 0:
; 15595:  *                     start = 0
; 15596:  */
; 15597:         __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

	add	rbx, rdi

; 15598: 
; 15599:         /* "View.MemoryView":832
; 15600:  *             if start < 0:
; 15601:  *                 start += shape
; 15602:  *                 if start < 0:             # <<<<<<<<<<<<<<
; 15603:  *                     start = 0
; 15604:  *             elif start >= shape:
; 15605:  */
; 15606:         __pyx_t_2 = ((__pyx_v_start < 0) != 0);
; 15607:         if (__pyx_t_2) {

	jns	SHORT $__pyx_L15$25383

; 15608: 
; 15609:           /* "View.MemoryView":833
; 15610:  *                 start += shape
; 15611:  *                 if start < 0:
; 15612:  *                     start = 0             # <<<<<<<<<<<<<<
; 15613:  *             elif start >= shape:
; 15614:  *                 if negative_step:
; 15615:  */
; 15616:           __pyx_v_start = 0;
; 15617: 
; 15618:           /* "View.MemoryView":832
; 15619:  *             if start < 0:
; 15620:  *                 start += shape
; 15621:  *                 if start < 0:             # <<<<<<<<<<<<<<
; 15622:  *                     start = 0
; 15623:  *             elif start >= shape:
; 15624:  */
; 15625:         }
; 15626: 
; 15627:         /* "View.MemoryView":830
; 15628:  * 
; 15629:  *         if have_start:
; 15630:  *             if start < 0:             # <<<<<<<<<<<<<<
; 15631:  *                 start += shape
; 15632:  *                 if start < 0:
; 15633:  */
; 15634:         goto __pyx_L12;

	jmp	SHORT $LN14@pyx_memory@26
$LN18@pyx_memory@26:

; 15635:       }
; 15636: 
; 15637:       /* "View.MemoryView":834
; 15638:  *                 if start < 0:
; 15639:  *                     start = 0
; 15640:  *             elif start >= shape:             # <<<<<<<<<<<<<<
; 15641:  *                 if negative_step:
; 15642:  *                     start = shape - 1
; 15643:  */
; 15644:       __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);

	cmp	rbx, rdi

; 15645:       if (__pyx_t_2) {

	jl	SHORT $__pyx_L15$25383

; 15646: 
; 15647:         /* "View.MemoryView":835
; 15648:  *                     start = 0
; 15649:  *             elif start >= shape:
; 15650:  *                 if negative_step:             # <<<<<<<<<<<<<<
; 15651:  *                     start = shape - 1
; 15652:  *                 else:
; 15653:  */
; 15654:         __pyx_t_2 = (__pyx_v_negative_step != 0);

	test	r12d, r12d

; 15655:         if (__pyx_t_2) {

	je	SHORT $LN15@pyx_memory@26

; 15656: 
; 15657:           /* "View.MemoryView":836
; 15658:  *             elif start >= shape:
; 15659:  *                 if negative_step:
; 15660:  *                     start = shape - 1             # <<<<<<<<<<<<<<
; 15661:  *                 else:
; 15662:  *                     start = shape
; 15663:  */
; 15664:           __pyx_v_start = (__pyx_v_shape - 1);

	lea	rbx, QWORD PTR [rdi-1]

; 15665: 
; 15666:           /* "View.MemoryView":835
; 15667:  *                     start = 0
; 15668:  *             elif start >= shape:
; 15669:  *                 if negative_step:             # <<<<<<<<<<<<<<
; 15670:  *                     start = shape - 1
; 15671:  *                 else:
; 15672:  */
; 15673:           goto __pyx_L14;

	jmp	SHORT $__pyx_L15$25383
$LN15@pyx_memory@26:

; 15674:         }
; 15675: 
; 15676:         /* "View.MemoryView":838
; 15677:  *                     start = shape - 1
; 15678:  *                 else:
; 15679:  *                     start = shape             # <<<<<<<<<<<<<<
; 15680:  *         else:
; 15681:  *             if negative_step:
; 15682:  */
; 15683:         /*else*/ {
; 15684:           __pyx_v_start = __pyx_v_shape;

	mov	rbx, rdi
$__pyx_L14$25380:
$__pyx_L12$25377:

; 15685:         }
; 15686:         __pyx_L14:;
; 15687: 
; 15688:         /* "View.MemoryView":834
; 15689:  *                 if start < 0:
; 15690:  *                     start = 0
; 15691:  *             elif start >= shape:             # <<<<<<<<<<<<<<
; 15692:  *                 if negative_step:
; 15693:  *                     start = shape - 1
; 15694:  */
; 15695:       }
; 15696:       __pyx_L12:;
; 15697: 
; 15698:       /* "View.MemoryView":829
; 15699:  * 
; 15700:  * 
; 15701:  *         if have_start:             # <<<<<<<<<<<<<<
; 15702:  *             if start < 0:
; 15703:  *                 start += shape
; 15704:  */
; 15705:       goto __pyx_L11;

	jmp	SHORT $__pyx_L15$25383
$LN19@pyx_memory@26:

; 15706:     }
; 15707: 
; 15708:     /* "View.MemoryView":840
; 15709:  *                     start = shape
; 15710:  *         else:
; 15711:  *             if negative_step:             # <<<<<<<<<<<<<<
; 15712:  *                 start = shape - 1
; 15713:  *             else:
; 15714:  */
; 15715:     /*else*/ {
; 15716:       __pyx_t_2 = (__pyx_v_negative_step != 0);
; 15717:       if (__pyx_t_2) {
; 15718: 
; 15719:         /* "View.MemoryView":841
; 15720:  *         else:
; 15721:  *             if negative_step:
; 15722:  *                 start = shape - 1             # <<<<<<<<<<<<<<
; 15723:  *             else:
; 15724:  *                 start = 0
; 15725:  */
; 15726:         __pyx_v_start = (__pyx_v_shape - 1);

	lea	rbx, QWORD PTR [rdi-1]
	test	r12d, r12d
	jne	SHORT $__pyx_L15$25383
$LN14@pyx_memory@26:

; 15727: 
; 15728:         /* "View.MemoryView":840
; 15729:  *                     start = shape
; 15730:  *         else:
; 15731:  *             if negative_step:             # <<<<<<<<<<<<<<
; 15732:  *                 start = shape - 1
; 15733:  *             else:
; 15734:  */
; 15735:         goto __pyx_L15;
; 15736:       }
; 15737: 
; 15738:       /* "View.MemoryView":843
; 15739:  *                 start = shape - 1
; 15740:  *             else:
; 15741:  *                 start = 0             # <<<<<<<<<<<<<<
; 15742:  * 
; 15743:  *         if have_stop:
; 15744:  */
; 15745:       /*else*/ {
; 15746:         __pyx_v_start = 0;

	mov	rbx, rsi
$__pyx_L15$25383:
$__pyx_L11$25381:

; 15747:       }
; 15748:       __pyx_L15:;
; 15749:     }
; 15750:     __pyx_L11:;
; 15751: 
; 15752:     /* "View.MemoryView":845
; 15753:  *                 start = 0
; 15754:  * 
; 15755:  *         if have_stop:             # <<<<<<<<<<<<<<
; 15756:  *             if stop < 0:
; 15757:  *                 stop += shape
; 15758:  */
; 15759:     __pyx_t_2 = (__pyx_v_have_stop != 0);

	cmp	DWORD PTR __pyx_v_have_stop$[rsp], esi

; 15760:     if (__pyx_t_2) {

	je	SHORT $LN13@pyx_memory@26

; 15761: 
; 15762:       /* "View.MemoryView":846
; 15763:  * 
; 15764:  *         if have_stop:
; 15765:  *             if stop < 0:             # <<<<<<<<<<<<<<
; 15766:  *                 stop += shape
; 15767:  *                 if stop < 0:
; 15768:  */
; 15769:       __pyx_t_2 = ((__pyx_v_stop < 0) != 0);

	mov	r8, QWORD PTR __pyx_v_stop$[rsp]
	test	r8, r8

; 15770:       if (__pyx_t_2) {

	jns	SHORT $LN12@pyx_memory@26

; 15771: 
; 15772:         /* "View.MemoryView":847
; 15773:  *         if have_stop:
; 15774:  *             if stop < 0:
; 15775:  *                 stop += shape             # <<<<<<<<<<<<<<
; 15776:  *                 if stop < 0:
; 15777:  *                     stop = 0
; 15778:  */
; 15779:         __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

	add	r8, rdi

; 15780: 
; 15781:         /* "View.MemoryView":848
; 15782:  *             if stop < 0:
; 15783:  *                 stop += shape
; 15784:  *                 if stop < 0:             # <<<<<<<<<<<<<<
; 15785:  *                     stop = 0
; 15786:  *             elif stop > shape:
; 15787:  */
; 15788:         __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
; 15789:         if (__pyx_t_2) {

	jns	SHORT $__pyx_L16$25389

; 15790: 
; 15791:           /* "View.MemoryView":849
; 15792:  *                 stop += shape
; 15793:  *                 if stop < 0:
; 15794:  *                     stop = 0             # <<<<<<<<<<<<<<
; 15795:  *             elif stop > shape:
; 15796:  *                 stop = shape
; 15797:  */
; 15798:           __pyx_v_stop = 0;

	mov	r8, rsi

; 15799: 
; 15800:           /* "View.MemoryView":848
; 15801:  *             if stop < 0:
; 15802:  *                 stop += shape
; 15803:  *                 if stop < 0:             # <<<<<<<<<<<<<<
; 15804:  *                     stop = 0
; 15805:  *             elif stop > shape:
; 15806:  */
; 15807:         }
; 15808: 
; 15809:         /* "View.MemoryView":846
; 15810:  * 
; 15811:  *         if have_stop:
; 15812:  *             if stop < 0:             # <<<<<<<<<<<<<<
; 15813:  *                 stop += shape
; 15814:  *                 if stop < 0:
; 15815:  */
; 15816:         goto __pyx_L17;

	jmp	SHORT $__pyx_L16$25389
$LN12@pyx_memory@26:

; 15817:       }
; 15818: 
; 15819:       /* "View.MemoryView":850
; 15820:  *                 if stop < 0:
; 15821:  *                     stop = 0
; 15822:  *             elif stop > shape:             # <<<<<<<<<<<<<<
; 15823:  *                 stop = shape
; 15824:  *         else:
; 15825:  */
; 15826:       __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);

	cmp	r8, rdi

; 15827:       if (__pyx_t_2) {

	jle	SHORT $__pyx_L16$25389

; 15828: 
; 15829:         /* "View.MemoryView":851
; 15830:  *                     stop = 0
; 15831:  *             elif stop > shape:
; 15832:  *                 stop = shape             # <<<<<<<<<<<<<<
; 15833:  *         else:
; 15834:  *             if negative_step:
; 15835:  */
; 15836:         __pyx_v_stop = __pyx_v_shape;

	mov	r8, rdi
$__pyx_L17$25387:

; 15837: 
; 15838:         /* "View.MemoryView":850
; 15839:  *                 if stop < 0:
; 15840:  *                     stop = 0
; 15841:  *             elif stop > shape:             # <<<<<<<<<<<<<<
; 15842:  *                 stop = shape
; 15843:  *         else:
; 15844:  */
; 15845:       }
; 15846:       __pyx_L17:;
; 15847: 
; 15848:       /* "View.MemoryView":845
; 15849:  *                 start = 0
; 15850:  * 
; 15851:  *         if have_stop:             # <<<<<<<<<<<<<<
; 15852:  *             if stop < 0:
; 15853:  *                 stop += shape
; 15854:  */
; 15855:       goto __pyx_L16;

	jmp	SHORT $__pyx_L16$25389
$LN13@pyx_memory@26:

; 15856:     }
; 15857: 
; 15858:     /* "View.MemoryView":853
; 15859:  *                 stop = shape
; 15860:  *         else:
; 15861:  *             if negative_step:             # <<<<<<<<<<<<<<
; 15862:  *                 stop = -1
; 15863:  *             else:
; 15864:  */
; 15865:     /*else*/ {
; 15866:       __pyx_t_2 = (__pyx_v_negative_step != 0);
; 15867:       if (__pyx_t_2) {

	mov	r8, rdi
	test	r12d, r12d
	cmovne	r8, r9
$__pyx_L16$25389:

; 15868: 
; 15869:         /* "View.MemoryView":854
; 15870:  *         else:
; 15871:  *             if negative_step:
; 15872:  *                 stop = -1             # <<<<<<<<<<<<<<
; 15873:  *             else:
; 15874:  *                 stop = shape
; 15875:  */
; 15876:         __pyx_v_stop = -1L;
; 15877: 
; 15878:         /* "View.MemoryView":853
; 15879:  *                 stop = shape
; 15880:  *         else:
; 15881:  *             if negative_step:             # <<<<<<<<<<<<<<
; 15882:  *                 stop = -1
; 15883:  *             else:
; 15884:  */
; 15885:         goto __pyx_L19;
; 15886:       }
; 15887: 
; 15888:       /* "View.MemoryView":856
; 15889:  *                 stop = -1
; 15890:  *             else:
; 15891:  *                 stop = shape             # <<<<<<<<<<<<<<
; 15892:  * 
; 15893:  *         if not have_step:
; 15894:  */
; 15895:       /*else*/ {
; 15896:         __pyx_v_stop = __pyx_v_shape;
; 15897:       }
; 15898:       __pyx_L19:;
; 15899:     }
; 15900:     __pyx_L16:;
; 15901: 
; 15902:     /* "View.MemoryView":858
; 15903:  *                 stop = shape
; 15904:  * 
; 15905:  *         if not have_step:             # <<<<<<<<<<<<<<
; 15906:  *             step = 1
; 15907:  * 
; 15908:  */
; 15909:     __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);

	test	ecx, ecx

; 15910:     if (__pyx_t_2) {

	mov	eax, 1
$__pyx_L19$25391:
	cmove	r14, rax

; 15911: 
; 15912:       /* "View.MemoryView":859
; 15913:  * 
; 15914:  *         if not have_step:
; 15915:  *             step = 1             # <<<<<<<<<<<<<<
; 15916:  * 
; 15917:  * 
; 15918:  */
; 15919:       __pyx_v_step = 1;
; 15920: 
; 15921:       /* "View.MemoryView":858
; 15922:  *                 stop = shape
; 15923:  * 
; 15924:  *         if not have_step:             # <<<<<<<<<<<<<<
; 15925:  *             step = 1
; 15926:  * 
; 15927:  */
; 15928:     }
; 15929: 
; 15930:     /* "View.MemoryView":863
; 15931:  * 
; 15932:  *         with cython.cdivision(True):
; 15933:  *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
; 15934:  * 
; 15935:  *             if (stop - start) - step * new_shape:
; 15936:  */
; 15937:     __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

	mov	rax, r8
	sub	rax, rbx
	cdq
	idiv	r14

; 15938: 
; 15939:     /* "View.MemoryView":865
; 15940:  *             new_shape = (stop - start) // step
; 15941:  * 
; 15942:  *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
; 15943:  *                 new_shape += 1
; 15944:  * 
; 15945:  */
; 15946:     __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);

	mov	rcx, rax
	mov	r9, rax
	imul	rcx, r14

; 15947:     if (__pyx_t_2) {

	sub	r8, rcx
	cmp	r8, rbx
	je	SHORT $LN7@pyx_memory@26

; 15948: 
; 15949:       /* "View.MemoryView":866
; 15950:  * 
; 15951:  *             if (stop - start) - step * new_shape:
; 15952:  *                 new_shape += 1             # <<<<<<<<<<<<<<
; 15953:  * 
; 15954:  *         if new_shape < 0:
; 15955:  */
; 15956:       __pyx_v_new_shape = (__pyx_v_new_shape + 1);

	inc	r9
$LN7@pyx_memory@26:

; 15957: 
; 15958:       /* "View.MemoryView":865
; 15959:  *             new_shape = (stop - start) // step
; 15960:  * 
; 15961:  *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
; 15962:  *                 new_shape += 1
; 15963:  * 
; 15964:  */
; 15965:     }
; 15966: 
; 15967:     /* "View.MemoryView":868
; 15968:  *                 new_shape += 1
; 15969:  * 
; 15970:  *         if new_shape < 0:             # <<<<<<<<<<<<<<
; 15971:  *             new_shape = 0
; 15972:  * 
; 15973:  */
; 15974:     __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);

	test	r9, r9

; 15975:     if (__pyx_t_2) {
; 15976: 
; 15977:       /* "View.MemoryView":869
; 15978:  * 
; 15979:  *         if new_shape < 0:
; 15980:  *             new_shape = 0             # <<<<<<<<<<<<<<
; 15981:  * 
; 15982:  * 
; 15983:  */
; 15984:       __pyx_v_new_shape = 0;
; 15985: 
; 15986:       /* "View.MemoryView":868
; 15987:  *                 new_shape += 1
; 15988:  * 
; 15989:  *         if new_shape < 0:             # <<<<<<<<<<<<<<
; 15990:  *             new_shape = 0
; 15991:  * 
; 15992:  */
; 15993:     }
; 15994: 
; 15995:     /* "View.MemoryView":872
; 15996:  * 
; 15997:  * 
; 15998:  *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
; 15999:  *         dst.shape[new_ndim] = new_shape
; 16000:  *         dst.suboffsets[new_ndim] = suboffset
; 16001:  */
; 16002:     (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

	mov	rax, r13

; 16003: 
; 16004:     /* "View.MemoryView":873
; 16005:  * 
; 16006:  *         dst.strides[new_ndim] = stride * step
; 16007:  *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
; 16008:  *         dst.suboffsets[new_ndim] = suboffset
; 16009:  * 
; 16010:  */
; 16011:     (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;
; 16012: 
; 16013:     /* "View.MemoryView":874
; 16014:  *         dst.strides[new_ndim] = stride * step
; 16015:  *         dst.shape[new_ndim] = new_shape
; 16016:  *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
; 16017:  * 
; 16018:  * 
; 16019:  */
; 16020:     (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;

	mov	QWORD PTR [rbp+r15*8+144], r10
	cmovs	r9, rsi
	mov	QWORD PTR [rbp+r15*8+16], r9
	imul	rax, r14
	mov	QWORD PTR [rbp+r15*8+80], rax
	jmp	SHORT $LN37@pyx_memory@26
$LN34@pyx_memory@26:

; 15427: static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {

	mov	r10, QWORD PTR __pyx_v_suboffset$[rsp]
$LN37@pyx_memory@26:
	mov	r8d, DWORD PTR __pyx_v_is_slice$[rsp]
	mov	edx, DWORD PTR __pyx_v_dim$[rsp]
$__pyx_L3$25362:

; 16021:   }
; 16022:   __pyx_L3:;
; 16023: 
; 16024:   /* "View.MemoryView":877
; 16025:  * 
; 16026:  * 
; 16027:  *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
; 16028:  *         dst.data += start * stride
; 16029:  *     else:
; 16030:  */
; 16031:   __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);

	mov	rcx, QWORD PTR __pyx_v_suboffset_dim$[rsp]

; 16032:   if (__pyx_t_2) {
; 16033: 
; 16034:     /* "View.MemoryView":878
; 16035:  * 
; 16036:  *     if suboffset_dim[0] < 0:
; 16037:  *         dst.data += start * stride             # <<<<<<<<<<<<<<
; 16038:  *     else:
; 16039:  *         dst.suboffsets[suboffset_dim[0]] += start * stride
; 16040:  */
; 16041:     __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

	imul	r13, rbx
	movsxd	rax, DWORD PTR [rcx]
	test	eax, eax
	jns	SHORT $LN5@pyx_memory@26
	add	QWORD PTR [rbp+8], r13

; 16042: 
; 16043:     /* "View.MemoryView":877
; 16044:  * 
; 16045:  * 
; 16046:  *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
; 16047:  *         dst.data += start * stride
; 16048:  *     else:
; 16049:  */
; 16050:     goto __pyx_L23;

	jmp	SHORT $__pyx_L23$25396
$LN5@pyx_memory@26:

; 16051:   }
; 16052: 
; 16053:   /* "View.MemoryView":880
; 16054:  *         dst.data += start * stride
; 16055:  *     else:
; 16056:  *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
; 16057:  * 
; 16058:  *     if suboffset >= 0:
; 16059:  */
; 16060:   /*else*/ {
; 16061:     __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
; 16062:     (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));

	add	QWORD PTR [rbp+rax*8+144], r13
$__pyx_L23$25396:

; 16063:   }
; 16064:   __pyx_L23:;
; 16065: 
; 16066:   /* "View.MemoryView":882
; 16067:  *         dst.suboffsets[suboffset_dim[0]] += start * stride
; 16068:  * 
; 16069:  *     if suboffset >= 0:             # <<<<<<<<<<<<<<
; 16070:  *         if not is_slice:
; 16071:  *             if new_ndim == 0:
; 16072:  */
; 16073:   __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);

	test	r10, r10

; 16074:   if (__pyx_t_2) {

	js	$__pyx_L25$25406

; 16075: 
; 16076:     /* "View.MemoryView":883
; 16077:  * 
; 16078:  *     if suboffset >= 0:
; 16079:  *         if not is_slice:             # <<<<<<<<<<<<<<
; 16080:  *             if new_ndim == 0:
; 16081:  *                 dst.data = (<char **> dst.data)[0] + suboffset
; 16082:  */
; 16083:     __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);

	test	r8d, r8d

; 16084:     if (__pyx_t_2) {

	jne	$LN3@pyx_memory@26

; 16085: 
; 16086:       /* "View.MemoryView":884
; 16087:  *     if suboffset >= 0:
; 16088:  *         if not is_slice:
; 16089:  *             if new_ndim == 0:             # <<<<<<<<<<<<<<
; 16090:  *                 dst.data = (<char **> dst.data)[0] + suboffset
; 16091:  *             else:
; 16092:  */
; 16093:       __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);

	test	r15d, r15d

; 16094:       if (__pyx_t_2) {

	jne	SHORT $LN2@pyx_memory@26

; 16095: 
; 16096:         /* "View.MemoryView":885
; 16097:  *         if not is_slice:
; 16098:  *             if new_ndim == 0:
; 16099:  *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
; 16100:  *             else:
; 16101:  *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
; 16102:  */
; 16103:         __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, QWORD PTR [rax]
	lea	rax, QWORD PTR [r10+rcx]
	mov	QWORD PTR [rbp+8], rax

; 16104: 
; 16105:         /* "View.MemoryView":884
; 16106:  *     if suboffset >= 0:
; 16107:  *         if not is_slice:
; 16108:  *             if new_ndim == 0:             # <<<<<<<<<<<<<<
; 16109:  *                 dst.data = (<char **> dst.data)[0] + suboffset
; 16110:  *             else:
; 16111:  */
; 16112:         goto __pyx_L26;

	jmp	SHORT $__pyx_L25$25406
$LN2@pyx_memory@26:

; 16113:       }
; 16114: 
; 16115:       /* "View.MemoryView":887
; 16116:  *                 dst.data = (<char **> dst.data)[0] + suboffset
; 16117:  *             else:
; 16118:  *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
; 16119:  *                                      "must be indexed and not sliced", dim)
; 16120:  *         else:
; 16121:  */
; 16122:       /*else*/ {
; 16123: 
; 16124:         /* "View.MemoryView":888
; 16125:  *             else:
; 16126:  *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
; 16127:  *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
; 16128:  *         else:
; 16129:  *             suboffset_dim[0] = new_ndim
; 16130:  */
; 16131:         __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 887, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	mov	r8d, edx
	lea	rdx, OFFSET FLAT:??_C@_0EF@BLHDGKFL@All?5dimensions?5preceding?5dimensi@
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	jne	SHORT $__pyx_L25$25406
	mov	DWORD PTR __pyx_lineno, 887		; 00000377H
	mov	DWORD PTR __pyx_clineno, 16131		; 00003f03H
$LN36@pyx_memory@26:
	mov	rax, QWORD PTR __pyx_f+16
$__pyx_L1_error$25361:
	mov	QWORD PTR __pyx_filename, rax

; 16154:     }
; 16155:     __pyx_L25:;
; 16156: 
; 16157:     /* "View.MemoryView":882
; 16158:  *         dst.suboffsets[suboffset_dim[0]] += start * stride
; 16159:  * 
; 16160:  *     if suboffset >= 0:             # <<<<<<<<<<<<<<
; 16161:  *         if not is_slice:
; 16162:  *             if new_ndim == 0:
; 16163:  */
; 16164:   }
; 16165: 
; 16166:   /* "View.MemoryView":892
; 16167:  *             suboffset_dim[0] = new_ndim
; 16168:  * 
; 16169:  *     return 0             # <<<<<<<<<<<<<<
; 16170:  * 
; 16171:  * 
; 16172:  */
; 16173:   __pyx_r = 0;
; 16174:   goto __pyx_L0;
; 16175: 
; 16176:   /* "View.MemoryView":795
; 16177:  * 
; 16178:  * @cname('__pyx_memoryview_slice_memviewslice')
; 16179:  * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
; 16180:  *         __Pyx_memviewslice *dst,
; 16181:  *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
; 16182:  */
; 16183: 
; 16184:   /* function exit code */
; 16185:   __pyx_L1_error:;
; 16186:   {
; 16187:     #ifdef WITH_THREAD
; 16188:     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 16189:     #endif
; 16190:     __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CD@HGMCNFNC@View?4MemoryView?4slice_memviewsli@
	mov	ebx, eax
	call	__Pyx_AddTraceback

; 16191:     #ifdef WITH_THREAD
; 16192:     __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, ebx
	call	QWORD PTR __imp_PyGILState_Release

; 16193:     #endif
; 16194:   }
; 16195:   __pyx_r = -1;
; 16196:   __pyx_L0:;
; 16197:   return __pyx_r;

	or	eax, -1
	jmp	SHORT $__pyx_L0$25407
$LN3@pyx_memory@26:

; 16132:       }
; 16133:       __pyx_L26:;
; 16134: 
; 16135:       /* "View.MemoryView":883
; 16136:  * 
; 16137:  *     if suboffset >= 0:
; 16138:  *         if not is_slice:             # <<<<<<<<<<<<<<
; 16139:  *             if new_ndim == 0:
; 16140:  *                 dst.data = (<char **> dst.data)[0] + suboffset
; 16141:  */
; 16142:       goto __pyx_L25;
; 16143:     }
; 16144: 
; 16145:     /* "View.MemoryView":890
; 16146:  *                                      "must be indexed and not sliced", dim)
; 16147:  *         else:
; 16148:  *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
; 16149:  * 
; 16150:  *     return 0
; 16151:  */
; 16152:     /*else*/ {
; 16153:       (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;

	mov	DWORD PTR [rcx], r15d
$__pyx_L25$25406:

; 16193:     #endif
; 16194:   }
; 16195:   __pyx_r = -1;
; 16196:   __pyx_L0:;
; 16197:   return __pyx_r;

	mov	eax, esi
$__pyx_L0$25407:

; 16198: }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_memoryview_slice_memviewslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@NPADMNI@View?4MemoryView?4transpose_memsli@ ; `string'
PUBLIC	??_C@_0DF@PFOHAEHC@Cannot?5transpose?5memoryview?5with@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memslice_transpose DD imagerel __pyx_memslice_transpose
	DD	imagerel __pyx_memslice_transpose+319
	DD	imagerel $unwind$__pyx_memslice_transpose
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memslice_transpose DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0e01a321eH
	DD	0c016d018H
xdata	ENDS
;	COMDAT ??_C@_0CD@NPADMNI@View?4MemoryView?4transpose_memsli@
CONST	SEGMENT
??_C@_0CD@NPADMNI@View?4MemoryView?4transpose_memsli@ DB 'View.MemoryView'
	DB	'.transpose_memslice', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PFOHAEHC@Cannot?5transpose?5memoryview?5with@
CONST	SEGMENT
??_C@_0DF@PFOHAEHC@Cannot?5transpose?5memoryview?5with@ DB 'Cannot transp'
	DB	'ose memoryview with indirect dimensions', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memslice_transpose
_TEXT	SEGMENT
__pyx_v_memslice$ = 64
__pyx_memslice_transpose PROC				; COMDAT

; 16524: static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 32					; 00000020H

; 16525:   int __pyx_v_ndim;
; 16526:   Py_ssize_t *__pyx_v_shape;
; 16527:   Py_ssize_t *__pyx_v_strides;
; 16528:   int __pyx_v_i;
; 16529:   int __pyx_v_j;
; 16530:   int __pyx_r;
; 16531:   int __pyx_t_1;
; 16532:   Py_ssize_t *__pyx_t_2;
; 16533:   long __pyx_t_3;
; 16534:   Py_ssize_t __pyx_t_4;
; 16535:   Py_ssize_t __pyx_t_5;
; 16536:   int __pyx_t_6;
; 16537:   int __pyx_t_7;
; 16538:   int __pyx_t_8;
; 16539: 
; 16540:   /* "View.MemoryView":932
; 16541:  * @cname('__pyx_memslice_transpose')
; 16542:  * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
; 16543:  *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
; 16544:  * 
; 16545:  *     cdef Py_ssize_t *shape = memslice.shape
; 16546:  */
; 16547:   __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
; 16548:   __pyx_v_ndim = __pyx_t_1;

	mov	rax, QWORD PTR [rcx]

; 16549: 
; 16550:   /* "View.MemoryView":934
; 16551:  *     cdef int ndim = memslice.memview.view.ndim
; 16552:  * 
; 16553:  *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
; 16554:  *     cdef Py_ssize_t *strides = memslice.strides
; 16555:  * 
; 16556:  */
; 16557:   __pyx_t_2 = __pyx_v_memslice->shape;
; 16558:   __pyx_v_shape = __pyx_t_2;
; 16559: 
; 16560:   /* "View.MemoryView":935
; 16561:  * 
; 16562:  *     cdef Py_ssize_t *shape = memslice.shape
; 16563:  *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
; 16564:  * 
; 16565:  * 
; 16566:  */
; 16567:   __pyx_t_2 = __pyx_v_memslice->strides;
; 16568:   __pyx_v_strides = __pyx_t_2;
; 16569: 
; 16570:   /* "View.MemoryView":939
; 16571:  * 
; 16572:  *     cdef int i, j
; 16573:  *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
; 16574:  *         j = ndim - 1 - i
; 16575:  *         strides[i], strides[j] = strides[j], strides[i]
; 16576:  */
; 16577:   __pyx_t_3 = (__pyx_v_ndim / 2);
; 16578:   for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {

	xor	ebx, ebx
	lea	rsi, QWORD PTR [rcx+16]
	movsxd	r8, DWORD PTR [rax+108]
	lea	r14, QWORD PTR [rcx+80]
	mov	eax, r8d
	cdq
	sub	eax, edx
	sar	eax, 1
	movsxd	r13, eax
	test	eax, eax
	jle	$LN13@pyx_memsli
	lea	r12, QWORD PTR [rcx+144]
	lea	rbp, QWORD PTR [rsi+r8*8-8]
	lea	rdi, QWORD PTR [rcx+r8*8+136]
	sub	r14, rsi
	npad	7
$LL7@pyx_memsli:

; 16579:     __pyx_v_i = __pyx_t_1;
; 16580: 
; 16581:     /* "View.MemoryView":940
; 16582:  *     cdef int i, j
; 16583:  *     for i in range(ndim / 2):
; 16584:  *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
; 16585:  *         strides[i], strides[j] = strides[j], strides[i]
; 16586:  *         shape[i], shape[j] = shape[j], shape[i]
; 16587:  */
; 16588:     __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);
; 16589: 
; 16590:     /* "View.MemoryView":941
; 16591:  *     for i in range(ndim / 2):
; 16592:  *         j = ndim - 1 - i
; 16593:  *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
; 16594:  *         shape[i], shape[j] = shape[j], shape[i]
; 16595:  * 
; 16596:  */
; 16597:     __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
; 16598:     __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
; 16599:     (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;

	mov	rax, QWORD PTR [r14+rbp]
	mov	rcx, QWORD PTR [r14+rsi]
	mov	QWORD PTR [r14+rsi], rax

; 16600:     (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

	mov	QWORD PTR [r14+rbp], rcx

; 16601: 
; 16602:     /* "View.MemoryView":942
; 16603:  *         j = ndim - 1 - i
; 16604:  *         strides[i], strides[j] = strides[j], strides[i]
; 16605:  *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
; 16606:  * 
; 16607:  *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
; 16608:  */
; 16609:     __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
; 16610:     __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
; 16611:     (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;

	mov	rax, QWORD PTR [rbp]
	mov	rcx, QWORD PTR [rsi]
	mov	QWORD PTR [rsi], rax

; 16612:     (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;
; 16613: 
; 16614:     /* "View.MemoryView":944
; 16615:  *         shape[i], shape[j] = shape[j], shape[i]
; 16616:  * 
; 16617:  *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
; 16618:  *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
; 16619:  * 
; 16620:  */
; 16621:     __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);

	xor	eax, eax
	mov	QWORD PTR [rbp], rcx
	cmp	QWORD PTR [r12], rax
	setge	al

; 16622:     if (!__pyx_t_7) {

	test	eax, eax
	jne	SHORT $LN15@pyx_memsli

; 16623:     } else {
; 16624:       __pyx_t_6 = __pyx_t_7;
; 16625:       goto __pyx_L6_bool_binop_done;
; 16626:     }
; 16627:     __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);

	cmp	QWORD PTR [rdi], rax
$__pyx_L6_bool_binop_done$25579:
	setge	al

; 16628:     __pyx_t_6 = __pyx_t_7;
; 16629:     __pyx_L6_bool_binop_done:;
; 16630:     if (__pyx_t_6) {

	test	eax, eax
	je	SHORT $LN6@pyx_memsli
$LN15@pyx_memsli:

; 16631: 
; 16632:       /* "View.MemoryView":945
; 16633:  * 
; 16634:  *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
; 16635:  *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
; 16636:  * 
; 16637:  *     return 1
; 16638:  */
; 16639:       __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0DF@PFOHAEHC@Cannot?5transpose?5memoryview?5with@
	call	__pyx_memoryview_err
	cmp	eax, -1
	je	SHORT $LN11@pyx_memsli
$LN6@pyx_memsli:

; 16549: 
; 16550:   /* "View.MemoryView":934
; 16551:  *     cdef int ndim = memslice.memview.view.ndim
; 16552:  * 
; 16553:  *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
; 16554:  *     cdef Py_ssize_t *strides = memslice.strides
; 16555:  * 
; 16556:  */
; 16557:   __pyx_t_2 = __pyx_v_memslice->shape;
; 16558:   __pyx_v_shape = __pyx_t_2;
; 16559: 
; 16560:   /* "View.MemoryView":935
; 16561:  * 
; 16562:  *     cdef Py_ssize_t *shape = memslice.shape
; 16563:  *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
; 16564:  * 
; 16565:  * 
; 16566:  */
; 16567:   __pyx_t_2 = __pyx_v_memslice->strides;
; 16568:   __pyx_v_strides = __pyx_t_2;
; 16569: 
; 16570:   /* "View.MemoryView":939
; 16571:  * 
; 16572:  *     cdef int i, j
; 16573:  *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
; 16574:  *         j = ndim - 1 - i
; 16575:  *         strides[i], strides[j] = strides[j], strides[i]
; 16576:  */
; 16577:   __pyx_t_3 = (__pyx_v_ndim / 2);
; 16578:   for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {

	inc	rbx
	sub	rbp, 8
	sub	rdi, 8
	add	rsi, 8
	add	r12, 8
	cmp	rbx, r13
	jl	SHORT $LL7@pyx_memsli
$LN13@pyx_memsli:

; 16678:     #endif
; 16679:   }
; 16680:   __pyx_r = 0;
; 16681:   __pyx_L0:;
; 16682:   return __pyx_r;

	mov	eax, 1
$__pyx_L0$25586:

; 16683: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r13
	pop	r12
	ret	0
$LN11@pyx_memsli:

; 16631: 
; 16632:       /* "View.MemoryView":945
; 16633:  * 
; 16634:  *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
; 16635:  *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
; 16636:  * 
; 16637:  *     return 1
; 16638:  */
; 16639:       __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 945		; 000003b1H
	mov	DWORD PTR __pyx_clineno, 16639		; 000040ffH
	mov	QWORD PTR __pyx_filename, rcx
$__pyx_L1_error$25585:

; 16640: 
; 16641:       /* "View.MemoryView":944
; 16642:  *         shape[i], shape[j] = shape[j], shape[i]
; 16643:  * 
; 16644:  *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
; 16645:  *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
; 16646:  * 
; 16647:  */
; 16648:     }
; 16649:   }
; 16650: 
; 16651:   /* "View.MemoryView":947
; 16652:  *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
; 16653:  * 
; 16654:  *     return 1             # <<<<<<<<<<<<<<
; 16655:  * 
; 16656:  * 
; 16657:  */
; 16658:   __pyx_r = 1;
; 16659:   goto __pyx_L0;
; 16660: 
; 16661:   /* "View.MemoryView":931
; 16662:  * 
; 16663:  * @cname('__pyx_memslice_transpose')
; 16664:  * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
; 16665:  *     cdef int ndim = memslice.memview.view.ndim
; 16666:  * 
; 16667:  */
; 16668: 
; 16669:   /* function exit code */
; 16670:   __pyx_L1_error:;
; 16671:   {
; 16672:     #ifdef WITH_THREAD
; 16673:     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 16674:     #endif
; 16675:     __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CD@NPADMNI@View?4MemoryView?4transpose_memsli@
	mov	ebx, eax
	call	__Pyx_AddTraceback

; 16676:     #ifdef WITH_THREAD
; 16677:     __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, ebx
	call	QWORD PTR __imp_PyGILState_Release

; 16678:     #endif
; 16679:   }
; 16680:   __pyx_r = 0;
; 16681:   __pyx_L0:;
; 16682:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$25586
__pyx_memslice_transpose ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryviewslice___dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryviewslice___dealloc__ PROC			; COMDAT

; 16696:   __Pyx_RefNannyDeclarations
; 16697:   __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
; 16698:   __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

	add	rcx, 184				; 000000b8H
	mov	edx, 1
	mov	r8d, 16715				; 0000414bH

; 16699: 
; 16700:   /* function exit code */
; 16701:   __Pyx_RefNannyFinishContext();
; 16702: }

	jmp	__Pyx_XDEC_MEMVIEW
__pyx_memoryviewslice___dealloc__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@PKAFLDDJ@View?4MemoryView?4_memoryviewslice@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryviewslice_convert_item_to_object DD imagerel __pyx_memoryviewslice_convert_item_to_object
	DD	imagerel __pyx_memoryviewslice_convert_item_to_object+106
	DD	imagerel $unwind$__pyx_memoryviewslice_convert_item_to_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryviewslice_convert_item_to_object DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DI@PKAFLDDJ@View?4MemoryView?4_memoryviewslice@
CONST	SEGMENT
??_C@_0DI@PKAFLDDJ@View?4MemoryView?4_memoryviewslice@ DB 'View.MemoryVie'
	DB	'w._memoryviewslice.convert_item_to_object', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryviewslice_convert_item_to_object
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_itemp$ = 56
__pyx_memoryviewslice_convert_item_to_object PROC	; COMDAT

; 16737: static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {

	sub	rsp, 40					; 00000028H

; 16738:   PyObject *__pyx_r = NULL;
; 16739:   __Pyx_RefNannyDeclarations
; 16740:   int __pyx_t_1;
; 16741:   PyObject *__pyx_t_2 = NULL;
; 16742:   __Pyx_RefNannySetupContext("convert_item_to_object", 0);
; 16743: 
; 16744:   /* "View.MemoryView":968
; 16745:  * 
; 16746:  *     cdef convert_item_to_object(self, char *itemp):
; 16747:  *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
; 16748:  *             return self.to_object_func(itemp)
; 16749:  *         else:
; 16750:  */
; 16751:   __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);

	mov	rax, QWORD PTR [rcx+400]
	test	rax, rax

; 16752:   if (__pyx_t_1) {

	je	SHORT $LN14@pyx_memory@27

; 16753: 
; 16754:     /* "View.MemoryView":969
; 16755:  *     cdef convert_item_to_object(self, char *itemp):
; 16756:  *         if self.to_object_func != NULL:
; 16757:  *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
; 16758:  *         else:
; 16759:  *             return memoryview.convert_item_to_object(self, itemp)
; 16760:  */
; 16761:     __Pyx_XDECREF(__pyx_r);
; 16762:     __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 969, __pyx_L1_error)

	mov	rcx, rdx
	call	rax
	test	rax, rax
	jne	SHORT $__pyx_L0$25629
	mov	r8d, 969				; 000003c9H
	mov	edx, 16762				; 0000417aH
	jmp	SHORT $LN36@pyx_memory@27
$LN14@pyx_memory@27:

; 16763:     __Pyx_GOTREF(__pyx_t_2);
; 16764:     __pyx_r = __pyx_t_2;
; 16765:     __pyx_t_2 = 0;
; 16766:     goto __pyx_L0;
; 16767: 
; 16768:     /* "View.MemoryView":968
; 16769:  * 
; 16770:  *     cdef convert_item_to_object(self, char *itemp):
; 16771:  *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
; 16772:  *             return self.to_object_func(itemp)
; 16773:  *         else:
; 16774:  */
; 16775:   }
; 16776: 
; 16777:   /* "View.MemoryView":971
; 16778:  *             return self.to_object_func(itemp)
; 16779:  *         else:
; 16780:  *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
; 16781:  * 
; 16782:  *     cdef assign_item_from_object(self, char *itemp, object value):
; 16783:  */
; 16784:   /*else*/ {
; 16785:     __Pyx_XDECREF(__pyx_r);
; 16786:     __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 971, __pyx_L1_error)

	call	__pyx_memoryview_convert_item_to_object
	test	rax, rax
	jne	SHORT $__pyx_L0$25629
	mov	r8d, 971				; 000003cbH
	mov	edx, 16786				; 00004192H
$LN36@pyx_memory@27:
	mov	r9, QWORD PTR __pyx_f+16

; 16787:     __Pyx_GOTREF(__pyx_t_2);
; 16788:     __pyx_r = __pyx_t_2;
; 16789:     __pyx_t_2 = 0;
; 16790:     goto __pyx_L0;
; 16791:   }
; 16792: 
; 16793:   /* "View.MemoryView":967
; 16794:  *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
; 16795:  * 
; 16796:  *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
; 16797:  *         if self.to_object_func != NULL:
; 16798:  *             return self.to_object_func(itemp)
; 16799:  */
; 16800: 
; 16801:   /* function exit code */
; 16802:   __pyx_L1_error:;
; 16803:   __Pyx_XDECREF(__pyx_t_2);
; 16804:   __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DI@PKAFLDDJ@View?4MemoryView?4_memoryviewslice@
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	call	__Pyx_AddTraceback

; 16805:   __pyx_r = 0;
; 16806:   __pyx_L0:;
; 16807:   __Pyx_XGIVEREF(__pyx_r);
; 16808:   __Pyx_RefNannyFinishContext();
; 16809:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$25629:

; 16810: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_memoryviewslice_convert_item_to_object ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_memoryviewslice_1__reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_pw___pyx_memoryviewslice_1__reduce_cython__ PROC	; COMDAT

; 16954:   PyObject *__pyx_r = 0;
; 16955:   __Pyx_RefNannyDeclarations
; 16956:   __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
; 16957:   __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));
; 16958: 
; 16959:   /* function exit code */
; 16960:   __Pyx_RefNannyFinishContext();
; 16961:   return __pyx_r;
; 16962: }

	jmp	__pyx_pf___pyx_memoryviewslice___reduce_cython__
__pyx_pw___pyx_memoryviewslice_1__reduce_cython__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_memoryviewslice_3__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v___pyx_state$ = 16
__pyx_pw___pyx_memoryviewslice_3__setstate_cython__ PROC ; COMDAT

; 17008:   PyObject *__pyx_r = 0;
; 17009:   __Pyx_RefNannyDeclarations
; 17010:   __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
; 17011:   __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
; 17012: 
; 17013:   /* function exit code */
; 17014:   __Pyx_RefNannyFinishContext();
; 17015:   return __pyx_r;
; 17016: }

	jmp	__pyx_pf___pyx_memoryviewslice_2__setstate_cython__
__pyx_pw___pyx_memoryviewslice_3__setstate_cython__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MJBPJPDL@View?4MemoryView?4get_slice_from_m@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_get_slice_from_memoryview DD imagerel __pyx_memoryview_get_slice_from_memoryview
	DD	imagerel __pyx_memoryview_get_slice_from_memoryview+310
	DD	imagerel $unwind$__pyx_memoryview_get_slice_from_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_get_slice_from_memoryview DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT ??_C@_0CH@MJBPJPDL@View?4MemoryView?4get_slice_from_m@
CONST	SEGMENT
??_C@_0CH@MJBPJPDL@View?4MemoryView?4get_slice_from_m@ DB 'View.MemoryVie'
	DB	'w.get_slice_from_memview', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_get_slice_from_memoryview
_TEXT	SEGMENT
__pyx_v_memview$ = 64
__pyx_v_mslice$ = 72
__pyx_memoryview_get_slice_from_memoryview PROC		; COMDAT

; 17412: static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H

; 17413:   struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
; 17414:   __Pyx_memviewslice *__pyx_r;
; 17415:   __Pyx_RefNannyDeclarations
; 17416:   int __pyx_t_1;
; 17417:   int __pyx_t_2;
; 17418:   PyObject *__pyx_t_3 = NULL;
; 17419:   __Pyx_RefNannySetupContext("get_slice_from_memview", 0);
; 17420: 
; 17421:   /* "View.MemoryView":1040
; 17422:  *                                                    __Pyx_memviewslice *mslice):
; 17423:  *     cdef _memoryviewslice obj
; 17424:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17425:  *         obj = memview
; 17426:  *         return &obj.from_slice
; 17427:  */
; 17428:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

	mov	rax, QWORD PTR [rcx+8]
	mov	rdi, rdx
	mov	rdx, QWORD PTR __pyx_memoryviewslice_type
	mov	rbx, rcx
	cmp	rax, rdx
	je	$LN43@pyx_memory@28
	mov	r8, QWORD PTR [rax+344]
	test	r8, r8
	je	SHORT $LL35@pyx_memory@28
	mov	r9, QWORD PTR [r8+16]
	xor	ecx, ecx
	test	r9, r9
	jle	SHORT $LN22@pyx_memory@28
	lea	rax, QWORD PTR [r8+24]
	npad	1
$LL28@pyx_memory@28:
	cmp	QWORD PTR [rax], rdx
	je	SHORT $LN43@pyx_memory@28
	inc	rcx
	add	rax, 8
	cmp	rcx, r9
	jl	SHORT $LL28@pyx_memory@28

; 17442:     __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
; 17443:     __pyx_t_3 = 0;
; 17444: 
; 17445:     /* "View.MemoryView":1042
; 17446:  *     if isinstance(memview, _memoryviewslice):
; 17447:  *         obj = memview
; 17448:  *         return &obj.from_slice             # <<<<<<<<<<<<<<
; 17449:  *     else:
; 17450:  *         slice_copy(memview, mslice)
; 17451:  */
; 17452:     __pyx_r = (&__pyx_v_obj->from_slice);
; 17453:     goto __pyx_L0;
; 17454: 
; 17455:     /* "View.MemoryView":1040
; 17456:  *                                                    __Pyx_memviewslice *mslice):
; 17457:  *     cdef _memoryviewslice obj
; 17458:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17459:  *         obj = memview
; 17460:  *         return &obj.from_slice
; 17461:  */
; 17462:   }
; 17463: 
; 17464:   /* "View.MemoryView":1044
; 17465:  *         return &obj.from_slice
; 17466:  *     else:
; 17467:  *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
; 17468:  *         return mslice
; 17469:  * 
; 17470:  */
; 17471:   /*else*/ {
; 17472:     __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

	mov	rdx, rdi
	mov	rcx, rbx
	call	__pyx_memoryview_slice_copy

; 17500:   __Pyx_RefNannyFinishContext();
; 17501:   return __pyx_r;

	mov	rax, rdi

; 17502: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	npad	6

; 17413:   struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
; 17414:   __Pyx_memviewslice *__pyx_r;
; 17415:   __Pyx_RefNannyDeclarations
; 17416:   int __pyx_t_1;
; 17417:   int __pyx_t_2;
; 17418:   PyObject *__pyx_t_3 = NULL;
; 17419:   __Pyx_RefNannySetupContext("get_slice_from_memview", 0);
; 17420: 
; 17421:   /* "View.MemoryView":1040
; 17422:  *                                                    __Pyx_memviewslice *mslice):
; 17423:  *     cdef _memoryviewslice obj
; 17424:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17425:  *         obj = memview
; 17426:  *         return &obj.from_slice
; 17427:  */
; 17428:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

$LL35@pyx_memory@28:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rdx
	je	SHORT $LN43@pyx_memory@28
	test	rax, rax
	jne	SHORT $LL35@pyx_memory@28
	xor	ecx, ecx
	cmp	rdx, QWORD PTR __imp_PyBaseObject_Type
	sete	cl

; 17429:   __pyx_t_2 = (__pyx_t_1 != 0);

	test	ecx, ecx

; 17430:   if (__pyx_t_2) {

	jne	SHORT $LN43@pyx_memory@28
$LN22@pyx_memory@28:

; 17442:     __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
; 17443:     __pyx_t_3 = 0;
; 17444: 
; 17445:     /* "View.MemoryView":1042
; 17446:  *     if isinstance(memview, _memoryviewslice):
; 17447:  *         obj = memview
; 17448:  *         return &obj.from_slice             # <<<<<<<<<<<<<<
; 17449:  *     else:
; 17450:  *         slice_copy(memview, mslice)
; 17451:  */
; 17452:     __pyx_r = (&__pyx_v_obj->from_slice);
; 17453:     goto __pyx_L0;
; 17454: 
; 17455:     /* "View.MemoryView":1040
; 17456:  *                                                    __Pyx_memviewslice *mslice):
; 17457:  *     cdef _memoryviewslice obj
; 17458:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 17459:  *         obj = memview
; 17460:  *         return &obj.from_slice
; 17461:  */
; 17462:   }
; 17463: 
; 17464:   /* "View.MemoryView":1044
; 17465:  *         return &obj.from_slice
; 17466:  *     else:
; 17467:  *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
; 17468:  *         return mslice
; 17469:  * 
; 17470:  */
; 17471:   /*else*/ {
; 17472:     __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

	mov	rdx, rdi
	mov	rcx, rbx
	call	__pyx_memoryview_slice_copy

; 17500:   __Pyx_RefNannyFinishContext();
; 17501:   return __pyx_r;

	mov	rax, rdi

; 17502: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN43@pyx_memory@28:

; 17431: 
; 17432:     /* "View.MemoryView":1041
; 17433:  *     cdef _memoryviewslice obj
; 17434:  *     if isinstance(memview, _memoryviewslice):
; 17435:  *         obj = memview             # <<<<<<<<<<<<<<
; 17436:  *         return &obj.from_slice
; 17437:  *     else:
; 17438:  */
; 17439:     if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1041, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN21@pyx_memory@28
	mov	rcx, rbx
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN21@pyx_memory@28
	mov	r9, QWORD PTR __pyx_f+16

; 17473: 
; 17474:     /* "View.MemoryView":1045
; 17475:  *     else:
; 17476:  *         slice_copy(memview, mslice)
; 17477:  *         return mslice             # <<<<<<<<<<<<<<
; 17478:  * 
; 17479:  * @cname('__pyx_memoryview_slice_copy')
; 17480:  */
; 17481:     __pyx_r = __pyx_v_mslice;
; 17482:     goto __pyx_L0;
; 17483:   }
; 17484: 
; 17485:   /* "View.MemoryView":1037
; 17486:  * 
; 17487:  * @cname('__pyx_memoryview_get_slice_from_memoryview')
; 17488:  * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
; 17489:  *                                                    __Pyx_memviewslice *mslice):
; 17490:  *     cdef _memoryviewslice obj
; 17491:  */
; 17492: 
; 17493:   /* function exit code */
; 17494:   __pyx_L1_error:;
; 17495:   __Pyx_XDECREF(__pyx_t_3);
; 17496:   __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

	mov	DWORD PTR [rsp+40], eax
	lea	rcx, OFFSET FLAT:??_C@_0CH@MJBPJPDL@View?4MemoryView?4get_slice_from_m@
	mov	edx, 17439				; 0000441fH
	mov	r8d, 1041				; 00000411H
	mov	DWORD PTR __pyx_lineno, 1041		; 00000411H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, 17439		; 0000441fH
$__pyx_L1_error$26107:
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx_WriteUnraisable

; 17500:   __Pyx_RefNannyFinishContext();
; 17501:   return __pyx_r;

	xor	eax, eax

; 17502: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN21@pyx_memory@28:

; 17440:     __pyx_t_3 = ((PyObject *)__pyx_v_memview);
; 17441:     __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [rbx]

; 17497:   __pyx_r = 0;
; 17498:   __pyx_L0:;
; 17499:   __Pyx_XDECREF((PyObject *)__pyx_v_obj);

	add	QWORD PTR [rbx], -1
$__pyx_L0$26111:
	jne	SHORT $LN4@pyx_memory@28
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rdx+48]
$LN4@pyx_memory@28:

; 17500:   __Pyx_RefNannyFinishContext();
; 17501:   return __pyx_r;

	lea	rax, QWORD PTR [rbx+184]

; 17502: }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
__pyx_memoryview_get_slice_from_memoryview ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@KPLBKLCN@View?4MemoryView?4memoryview_copy?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_copy_object DD imagerel __pyx_memoryview_copy_object
	DD	imagerel __pyx_memoryview_copy_object+28
	DD	imagerel $unwind$__pyx_memoryview_copy_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_memoryview_copy_object DD imagerel __pyx_memoryview_copy_object+28
	DD	imagerel __pyx_memoryview_copy_object+66
	DD	imagerel $chain$0$__pyx_memoryview_copy_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_memoryview_copy_object DD imagerel __pyx_memoryview_copy_object+66
	DD	imagerel __pyx_memoryview_copy_object+168
	DD	imagerel $chain$1$__pyx_memoryview_copy_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_copy_object DD imagerel __pyx_memoryview_copy_object+168
	DD	imagerel __pyx_memoryview_copy_object+194
	DD	imagerel $chain$2$__pyx_memoryview_copy_object
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$__pyx_memoryview_copy_object DD imagerel __pyx_memoryview_copy_object+194
	DD	imagerel __pyx_memoryview_copy_object+261
	DD	imagerel $chain$3$__pyx_memoryview_copy_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$__pyx_memoryview_copy_object DD 021H
	DD	imagerel __pyx_memoryview_copy_object
	DD	imagerel __pyx_memoryview_copy_object+28
	DD	imagerel $unwind$__pyx_memoryview_copy_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_copy_object DD 021H
	DD	imagerel __pyx_memoryview_copy_object+28
	DD	imagerel __pyx_memoryview_copy_object+66
	DD	imagerel $chain$0$__pyx_memoryview_copy_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_memoryview_copy_object DD 020821H
	DD	0203408H
	DD	imagerel __pyx_memoryview_copy_object+28
	DD	imagerel __pyx_memoryview_copy_object+66
	DD	imagerel $chain$0$__pyx_memoryview_copy_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_memoryview_copy_object DD 020821H
	DD	01e7408H
	DD	imagerel __pyx_memoryview_copy_object
	DD	imagerel __pyx_memoryview_copy_object+28
	DD	imagerel $unwind$__pyx_memoryview_copy_object
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_copy_object DD 020701H
	DD	01f0107H
xdata	ENDS
;	COMDAT ??_C@_0CA@KPLBKLCN@View?4MemoryView?4memoryview_copy?$AA@
CONST	SEGMENT
??_C@_0CA@KPLBKLCN@View?4MemoryView?4memoryview_copy?$AA@ DB 'View.Memory'
	DB	'View.memoryview_copy', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_copy_object
_TEXT	SEGMENT
__pyx_v_memviewslice$ = 32
__pyx_v_memview$ = 256
__pyx_memoryview_copy_object PROC			; COMDAT

; 17636: static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {

	sub	rsp, 248				; 000000f8H

; 17637:   __Pyx_memviewslice __pyx_v_memviewslice;
; 17638:   PyObject *__pyx_r = NULL;
; 17639:   __Pyx_RefNannyDeclarations
; 17640:   PyObject *__pyx_t_1 = NULL;
; 17641:   __Pyx_RefNannySetupContext("memoryview_copy", 0);
; 17642: 
; 17643:   /* "View.MemoryView":1068
; 17644:  *     "Create a new memoryview object"
; 17645:  *     cdef __Pyx_memviewslice memviewslice
; 17646:  *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
; 17647:  *     return memoryview_copy_from_slice(memview, &memviewslice)
; 17648:  * 
; 17649:  */
; 17650:   __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

	movsxd	r9, DWORD PTR [rcx+108]
	mov	rax, QWORD PTR [rcx+72]
	mov	r10, QWORD PTR [rcx+120]
	mov	r11, QWORD PTR [rcx+128]
	xor	edx, edx
	mov	QWORD PTR [rsp+240], rdi
	mov	rdi, QWORD PTR [rcx+136]
	mov	r8, rcx
	mov	QWORD PTR __pyx_v_memviewslice$[rsp], rcx
	mov	QWORD PTR __pyx_v_memviewslice$[rsp+8], rax
	test	r9, r9
	jle	SHORT $LN14@pyx_memory@29
	lea	rax, QWORD PTR __pyx_v_memviewslice$[rsp+16]
	mov	QWORD PTR [rsp+256], rbx
	mov	rbx, rdi
	sub	r10, rax
	lea	rax, QWORD PTR __pyx_v_memviewslice$[rsp+16]
	sub	r11, rax
	lea	rax, QWORD PTR __pyx_v_memviewslice$[rsp+16]
	sub	rbx, rax
$LL28@pyx_memory@29:
	lea	rax, QWORD PTR [r10+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_memviewslice$[rsp+rax+16]
	lea	rax, QWORD PTR [r11+rdx*8]
	mov	QWORD PTR __pyx_v_memviewslice$[rsp+rdx*8+16], rcx
	mov	rcx, QWORD PTR __pyx_v_memviewslice$[rsp+rax+16]
	mov	QWORD PTR __pyx_v_memviewslice$[rsp+rdx*8+80], rcx
	test	rdi, rdi
	je	SHORT $LN25@pyx_memory@29
	lea	rax, QWORD PTR [rbx+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_memviewslice$[rsp+rax+16]
	jmp	SHORT $LN24@pyx_memory@29
$LN25@pyx_memory@29:
	or	rcx, -1
$LN24@pyx_memory@29:
	mov	QWORD PTR __pyx_v_memviewslice$[rsp+rdx*8+144], rcx
	inc	rdx
	cmp	rdx, r9
	jl	SHORT $LL28@pyx_memory@29
	mov	rbx, QWORD PTR [rsp+256]
$LN14@pyx_memory@29:

; 17651: 
; 17652:   /* "View.MemoryView":1069
; 17653:  *     cdef __Pyx_memviewslice memviewslice
; 17654:  *     slice_copy(memview, &memviewslice)
; 17655:  *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
; 17656:  * 
; 17657:  * @cname('__pyx_memoryview_copy_object_from_slice')
; 17658:  */
; 17659:   __Pyx_XDECREF(__pyx_r);
; 17660:   __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1069, __pyx_L1_error)

	lea	rdx, QWORD PTR __pyx_v_memviewslice$[rsp]
	mov	rcx, r8
	call	__pyx_memoryview_copy_object_from_slice
	mov	rdi, QWORD PTR [rsp+240]
	test	rax, rax
	jne	SHORT $__pyx_L0$26195
	mov	r9, QWORD PTR __pyx_f+16

; 17661:   __Pyx_GOTREF(__pyx_t_1);
; 17662:   __pyx_r = __pyx_t_1;
; 17663:   __pyx_t_1 = 0;
; 17664:   goto __pyx_L0;
; 17665: 
; 17666:   /* "View.MemoryView":1065
; 17667:  * 
; 17668:  * @cname('__pyx_memoryview_copy_object')
; 17669:  * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
; 17670:  *     "Create a new memoryview object"
; 17671:  *     cdef __Pyx_memviewslice memviewslice
; 17672:  */
; 17673: 
; 17674:   /* function exit code */
; 17675:   __pyx_L1_error:;
; 17676:   __Pyx_XDECREF(__pyx_t_1);
; 17677:   __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CA@KPLBKLCN@View?4MemoryView?4memoryview_copy?$AA@
	mov	edx, 17660				; 000044fcH
	mov	r8d, 1069				; 0000042dH
	mov	DWORD PTR __pyx_lineno, 1069		; 0000042dH
	mov	DWORD PTR __pyx_clineno, 17660		; 000044fcH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$26194:
	call	__Pyx_AddTraceback

; 17678:   __pyx_r = 0;
; 17679:   __pyx_L0:;
; 17680:   __Pyx_XGIVEREF(__pyx_r);
; 17681:   __Pyx_RefNannyFinishContext();
; 17682:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$26195:

; 17683: }

	add	rsp, 248				; 000000f8H
	ret	0
__pyx_memoryview_copy_object ENDP
_TEXT	ENDS
PUBLIC	$T42808
PUBLIC	??_C@_0CC@IAPGMKHG@View?4MemoryView?4copy_data_to_tem@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_copy_data_to_temp DD imagerel __pyx_memoryview_copy_data_to_temp
	DD	imagerel __pyx_memoryview_copy_data_to_temp+330
	DD	imagerel $unwind$__pyx_memoryview_copy_data_to_temp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_memoryview_copy_data_to_temp DD imagerel __pyx_memoryview_copy_data_to_temp+330
	DD	imagerel __pyx_memoryview_copy_data_to_temp+674
	DD	imagerel $chain$0$__pyx_memoryview_copy_data_to_temp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_memoryview_copy_data_to_temp DD imagerel __pyx_memoryview_copy_data_to_temp+674
	DD	imagerel __pyx_memoryview_copy_data_to_temp+693
	DD	imagerel $chain$1$__pyx_memoryview_copy_data_to_temp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_copy_data_to_temp DD imagerel __pyx_memoryview_copy_data_to_temp+693
	DD	imagerel __pyx_memoryview_copy_data_to_temp+755
	DD	imagerel $chain$2$__pyx_memoryview_copy_data_to_temp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_copy_data_to_temp DD 020021H
	DD	02b5400H
	DD	imagerel __pyx_memoryview_copy_data_to_temp
	DD	imagerel __pyx_memoryview_copy_data_to_temp+330
	DD	imagerel $unwind$__pyx_memoryview_copy_data_to_temp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_memoryview_copy_data_to_temp DD 021H
	DD	imagerel __pyx_memoryview_copy_data_to_temp
	DD	imagerel __pyx_memoryview_copy_data_to_temp+330
	DD	imagerel $unwind$__pyx_memoryview_copy_data_to_temp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_memoryview_copy_data_to_temp DD 020821H
	DD	02b5408H
	DD	imagerel __pyx_memoryview_copy_data_to_temp
	DD	imagerel __pyx_memoryview_copy_data_to_temp+330
	DD	imagerel $unwind$__pyx_memoryview_copy_data_to_temp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_copy_data_to_temp DD 091701H
	DD	0220117H
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	03006H
xdata	ENDS
;	COMDAT ??_C@_0CC@IAPGMKHG@View?4MemoryView?4copy_data_to_tem@
CONST	SEGMENT
??_C@_0CC@IAPGMKHG@View?4MemoryView?4copy_data_to_tem@ DB 'View.MemoryVie'
	DB	'w.copy_data_to_temp', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_copy_data_to_temp
_TEXT	SEGMENT
$T42808 = 64
__pyx_v_itemsize$1$ = 336
__pyx_v_src$ = 336
__pyx_v_tmpslice$ = 344
__pyx_v_order$ = 352
__pyx_v_ndim$ = 360
__pyx_memoryview_copy_data_to_temp PROC			; COMDAT

; 18524: static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {

	mov	BYTE PTR [rsp+24], r8b
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 272				; 00000110H

; 18525:   int __pyx_v_i;
; 18526:   void *__pyx_v_result;
; 18527:   size_t __pyx_v_itemsize;
; 18528:   size_t __pyx_v_size;
; 18529:   void *__pyx_r;
; 18530:   Py_ssize_t __pyx_t_1;
; 18531:   int __pyx_t_2;
; 18532:   int __pyx_t_3;
; 18533:   struct __pyx_memoryview_obj *__pyx_t_4;
; 18534:   int __pyx_t_5;
; 18535: 
; 18536:   /* "View.MemoryView":1205
; 18537:  *     cdef void *result
; 18538:  * 
; 18539:  *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
; 18540:  *     cdef size_t size = slice_get_size(src, ndim)
; 18541:  * 
; 18542:  */
; 18543:   __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

	mov	rax, QWORD PTR [rcx]
	movsxd	r13, r9d
	movzx	ebx, r8b
	mov	rax, QWORD PTR [rax+96]
	mov	r15, rdx
	mov	r12, rcx

; 18544:   __pyx_v_itemsize = __pyx_t_1;
; 18545: 
; 18546:   /* "View.MemoryView":1206
; 18547:  * 
; 18548:  *     cdef size_t itemsize = src.memview.view.itemsize
; 18549:  *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
; 18550:  * 
; 18551:  *     result = malloc(size)
; 18552:  */
; 18553:   __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

	mov	rdi, r13
	mov	QWORD PTR __pyx_v_itemsize$1$[rsp], rax
	mov	rsi, rax
	test	r9d, r9d
	jle	SHORT $LN13@pyx_memory@30
	lea	rax, QWORD PTR [rcx+16]
	mov	r9, r13
	npad	11
$LL15@pyx_memory@30:
	imul	rsi, QWORD PTR [rax]
	add	rax, 8
	sub	r9, 1
	jne	SHORT $LL15@pyx_memory@30
$LN13@pyx_memory@30:

; 18554: 
; 18555:   /* "View.MemoryView":1208
; 18556:  *     cdef size_t size = slice_get_size(src, ndim)
; 18557:  * 
; 18558:  *     result = malloc(size)             # <<<<<<<<<<<<<<
; 18559:  *     if not result:
; 18560:  *         _err(MemoryError, NULL)
; 18561:  */
; 18562:   __pyx_v_result = malloc(__pyx_v_size);

	mov	rcx, rsi
$__pyx_L0$42820:
	call	QWORD PTR __imp_malloc
	mov	r14, rax

; 18563: 
; 18564:   /* "View.MemoryView":1209
; 18565:  * 
; 18566:  *     result = malloc(size)
; 18567:  *     if not result:             # <<<<<<<<<<<<<<
; 18568:  *         _err(MemoryError, NULL)
; 18569:  * 
; 18570:  */
; 18571:   __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);

	test	rax, rax

; 18572:   if (__pyx_t_2) {

	jne	$LN9@pyx_memory@30

; 18573: 
; 18574:     /* "View.MemoryView":1210
; 18575:  *     result = malloc(size)
; 18576:  *     if not result:
; 18577:  *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
; 18578:  * 
; 18579:  * 
; 18580:  */
; 18581:     __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 1210, __pyx_L1_error)

	mov	rbx, QWORD PTR __pyx_builtin_MemoryError
	call	QWORD PTR __imp_PyGILState_Ensure
	inc	QWORD PTR [rbx]
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rbx
	mov	edi, eax
	call	__Pyx_Raise
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0BF@POEOPOC@View?4MemoryView?4_err?$AA@
	mov	edx, 19079				; 00004a87H
	mov	r8d, 1251				; 000004e3H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, 1251		; 000004e3H
	mov	DWORD PTR __pyx_clineno, 19079		; 00004a87H
	call	__Pyx_AddTraceback
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN21@pyx_memory@30
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN21@pyx_memory@30:
	mov	ecx, edi
	call	QWORD PTR __imp_PyGILState_Release
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 1210		; 000004baH
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 18581		; 00004895H
$__pyx_L1_error$26427:

; 18728:   }
; 18729:   __pyx_L9:;
; 18730: 
; 18731:   /* "View.MemoryView":1232
; 18732:  *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
; 18733:  * 
; 18734:  *     return result             # <<<<<<<<<<<<<<
; 18735:  * 
; 18736:  * 
; 18737:  */
; 18738:   __pyx_r = __pyx_v_result;
; 18739:   goto __pyx_L0;
; 18740: 
; 18741:   /* "View.MemoryView":1194
; 18742:  * 
; 18743:  * @cname('__pyx_memoryview_copy_data_to_temp')
; 18744:  * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
; 18745:  *                              __Pyx_memviewslice *tmpslice,
; 18746:  *                              char order,
; 18747:  */
; 18748: 
; 18749:   /* function exit code */
; 18750:   __pyx_L1_error:;
; 18751:   {
; 18752:     #ifdef WITH_THREAD
; 18753:     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 18754:     #endif
; 18755:     __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CC@IAPGMKHG@View?4MemoryView?4copy_data_to_tem@
	mov	ebx, eax
	call	__Pyx_AddTraceback

; 18756:     #ifdef WITH_THREAD
; 18757:     __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, ebx
	call	QWORD PTR __imp_PyGILState_Release

; 18758:     #endif
; 18759:   }
; 18760:   __pyx_r = NULL;

	xor	ebx, ebx

; 18761:   __pyx_L0:;
; 18762:   return __pyx_r;

	mov	rax, rbx
	jmp	$__pyx_L0$26438
$LN9@pyx_memory@30:

; 18582: 
; 18583:     /* "View.MemoryView":1209
; 18584:  * 
; 18585:  *     result = malloc(size)
; 18586:  *     if not result:             # <<<<<<<<<<<<<<
; 18587:  *         _err(MemoryError, NULL)
; 18588:  * 
; 18589:  */
; 18590:   }
; 18591: 
; 18592:   /* "View.MemoryView":1213
; 18593:  * 
; 18594:  * 
; 18595:  *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
; 18596:  *     tmpslice.memview = src.memview
; 18597:  *     for i in range(ndim):
; 18598:  */
; 18599:   __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

	mov	QWORD PTR [r15+8], rax

; 18600: 
; 18601:   /* "View.MemoryView":1214
; 18602:  * 
; 18603:  *     tmpslice.data = <char *> result
; 18604:  *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
; 18605:  *     for i in range(ndim):
; 18606:  *         tmpslice.shape[i] = src.shape[i]
; 18607:  */
; 18608:   __pyx_t_4 = __pyx_v_src->memview;
; 18609:   __pyx_v_tmpslice->memview = __pyx_t_4;

	mov	rax, QWORD PTR [r12]
	mov	QWORD PTR [rsp+344], rbp

; 18610: 
; 18611:   /* "View.MemoryView":1215
; 18612:  *     tmpslice.data = <char *> result
; 18613:  *     tmpslice.memview = src.memview
; 18614:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 18615:  *         tmpslice.shape[i] = src.shape[i]
; 18616:  *         tmpslice.suboffsets[i] = -1
; 18617:  */
; 18618:   __pyx_t_3 = __pyx_v_ndim;
; 18619:   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {

	or	rbp, -1
	mov	QWORD PTR [r15], rax
	test	r13d, r13d
	jle	SHORT $LN6@pyx_memory@30

; 18620:     __pyx_v_i = __pyx_t_5;
; 18621: 
; 18622:     /* "View.MemoryView":1216
; 18623:  *     tmpslice.memview = src.memview
; 18624:  *     for i in range(ndim):
; 18625:  *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
; 18626:  *         tmpslice.suboffsets[i] = -1
; 18627:  * 
; 18628:  */
; 18629:     (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);
; 18630: 
; 18631:     /* "View.MemoryView":1217
; 18632:  *     for i in range(ndim):
; 18633:  *         tmpslice.shape[i] = src.shape[i]
; 18634:  *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
; 18635:  * 
; 18636:  *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
; 18637:  */
; 18638:     (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;

	mov	r8, r12
	lea	rcx, QWORD PTR [r15+16]
	mov	rdx, r13
	sub	r8, r15
	npad	5
$LL8@pyx_memory@30:
	mov	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rcx+128], rbp
	add	rcx, 8
	sub	rdx, 1
	mov	QWORD PTR [rcx-8], rax
	jne	SHORT $LL8@pyx_memory@30
$LN6@pyx_memory@30:

; 18639:   }
; 18640: 
; 18641:   /* "View.MemoryView":1219
; 18642:  *         tmpslice.suboffsets[i] = -1
; 18643:  * 
; 18644:  *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
; 18645:  *                               ndim, order)
; 18646:  * 
; 18647:  */
; 18648:   __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

	mov	rcx, QWORD PTR __pyx_v_itemsize$1$[rsp]
	lea	r8, QWORD PTR [r15+80]
	lea	r10, QWORD PTR [r15+16]
	cmp	bl, 70					; 00000046H
	jne	SHORT $LN151@pyx_memory@30
	test	r13d, r13d
	jle	SHORT $__pyx_L3$42993
	mov	rax, r10
	sub	r8, r10
	mov	rdx, r13
	npad	4
$LL150@pyx_memory@30:
	mov	QWORD PTR [r8+rax], rcx
	imul	rcx, QWORD PTR [rax]
	add	rax, 8
	sub	rdx, 1
	jne	SHORT $LL150@pyx_memory@30
	lea	r8, QWORD PTR [r15+80]
	jmp	SHORT $__pyx_L3$42993
$LN151@pyx_memory@30:
	lea	eax, DWORD PTR [r13-1]
	cmp	eax, -1
	movsxd	rdx, eax
	jle	SHORT $__pyx_L3$42993
	mov	r9, r8
	lea	rdx, QWORD PTR [r10+rdx*8]
	lea	r8d, DWORD PTR [rax+1]
	sub	r9, r10
	npad	14
$LL147@pyx_memory@30:
	mov	QWORD PTR [rdx+r9], rcx
	imul	rcx, QWORD PTR [rdx]
	sub	rdx, 8
	sub	r8, 1
	jne	SHORT $LL147@pyx_memory@30
	lea	r8, QWORD PTR [r15+80]
$__pyx_L3$42993:

; 18649: 
; 18650:   /* "View.MemoryView":1223
; 18651:  * 
; 18652:  * 
; 18653:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 18654:  *         if tmpslice.shape[i] == 1:
; 18655:  *             tmpslice.strides[i] = 0
; 18656:  */
; 18657:   __pyx_t_3 = __pyx_v_ndim;
; 18658:   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {

	xor	ebx, ebx
$__pyx_L0$42997:
	test	r13d, r13d
	jle	SHORT $LN3@pyx_memory@30
	mov	rax, r8
$LL5@pyx_memory@30:

; 18659:     __pyx_v_i = __pyx_t_5;
; 18660: 
; 18661:     /* "View.MemoryView":1224
; 18662:  * 
; 18663:  *     for i in range(ndim):
; 18664:  *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
; 18665:  *             tmpslice.strides[i] = 0
; 18666:  * 
; 18667:  */
; 18668:     __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);

	cmp	QWORD PTR [rax-64], 1

; 18669:     if (__pyx_t_2) {

	jne	SHORT $LN2@pyx_memory@30

; 18670: 
; 18671:       /* "View.MemoryView":1225
; 18672:  *     for i in range(ndim):
; 18673:  *         if tmpslice.shape[i] == 1:
; 18674:  *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
; 18675:  * 
; 18676:  *     if slice_is_contig(src[0], order, ndim):
; 18677:  */
; 18678:       (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

	mov	QWORD PTR [rax], rbx
$LN2@pyx_memory@30:

; 18649: 
; 18650:   /* "View.MemoryView":1223
; 18651:  * 
; 18652:  * 
; 18653:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 18654:  *         if tmpslice.shape[i] == 1:
; 18655:  *             tmpslice.strides[i] = 0
; 18656:  */
; 18657:   __pyx_t_3 = __pyx_v_ndim;
; 18658:   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {

	add	rax, 8
	sub	rdi, 1
	jne	SHORT $LL5@pyx_memory@30
$LN3@pyx_memory@30:

; 18679: 
; 18680:       /* "View.MemoryView":1224
; 18681:  * 
; 18682:  *     for i in range(ndim):
; 18683:  *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
; 18684:  *             tmpslice.strides[i] = 0
; 18685:  * 
; 18686:  */
; 18687:     }
; 18688:   }
; 18689: 
; 18690:   /* "View.MemoryView":1227
; 18691:  *             tmpslice.strides[i] = 0
; 18692:  * 
; 18693:  *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
; 18694:  *         memcpy(result, src.data, size)
; 18695:  *     else:
; 18696:  */
; 18697:   __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);

	lea	rcx, QWORD PTR $T42808[rsp]
	mov	rdx, r12
	mov	r8d, 208				; 000000d0H
	call	memcpy
	cmp	BYTE PTR __pyx_v_order$[rsp], 70	; 00000046H
	mov	r11, QWORD PTR $T42808[rsp]
	mov	rdx, QWORD PTR [r11+96]
	jne	SHORT $LN160@pyx_memory@30
	mov	ebp, 1
	mov	ecx, ebx
	jmp	SHORT $LN159@pyx_memory@30
$LN160@pyx_memory@30:
	lea	ecx, DWORD PTR [r13-1]
$LN159@pyx_memory@30:
	test	r13d, r13d
	jle	SHORT $LN156@pyx_memory@30
	npad	4
$LL158@pyx_memory@30:
	movsxd	rax, ecx
	cmp	QWORD PTR $T42808[rsp+rax*8+144], 0
	jge	SHORT $LN1@pyx_memory@30
	cmp	QWORD PTR $T42808[rsp+rax*8+80], rdx
	jne	SHORT $LN1@pyx_memory@30
	imul	rdx, QWORD PTR $T42808[rsp+rax*8+16]
	inc	ebx
	add	ecx, ebp
	cmp	ebx, r13d
	jl	SHORT $LL158@pyx_memory@30
$LN156@pyx_memory@30:

; 18698:   if (__pyx_t_2) {
; 18699: 
; 18700:     /* "View.MemoryView":1228
; 18701:  * 
; 18702:  *     if slice_is_contig(src[0], order, ndim):
; 18703:  *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
; 18704:  *     else:
; 18705:  *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
; 18706:  */
; 18707:     memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);

	mov	rdx, QWORD PTR [r12+8]
	mov	r8, rsi
	mov	rcx, r14
	call	memcpy
$__pyx_L9$26437:
	mov	rbp, QWORD PTR [rsp+344]

; 18761:   __pyx_L0:;
; 18762:   return __pyx_r;

	mov	rax, r14
$__pyx_L0$26438:

; 18763: }

	add	rsp, 272				; 00000110H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN1@pyx_memory@30:

; 18708: 
; 18709:     /* "View.MemoryView":1227
; 18710:  *             tmpslice.strides[i] = 0
; 18711:  * 
; 18712:  *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
; 18713:  *         memcpy(result, src.data, size)
; 18714:  *     else:
; 18715:  */
; 18716:     goto __pyx_L9;
; 18717:   }
; 18718: 
; 18719:   /* "View.MemoryView":1230
; 18720:  *         memcpy(result, src.data, size)
; 18721:  *     else:
; 18722:  *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
; 18723:  * 
; 18724:  *     return result
; 18725:  */
; 18726:   /*else*/ {
; 18727:     copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);

	mov	rcx, QWORD PTR __pyx_v_itemsize$1$[rsp]
	mov	r8, QWORD PTR [r15+8]
	lea	rax, QWORD PTR [r12+16]
	mov	QWORD PTR [rsp+56], rcx
	lea	rcx, QWORD PTR [r15+16]
	mov	DWORD PTR [rsp+48], r13d
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR [r12+8]
	lea	rdx, QWORD PTR [r12+80]
	lea	r9, QWORD PTR [r15+80]
	mov	QWORD PTR [rsp+32], rax
	call	_copy_strided_to_strided
	jmp	SHORT $__pyx_L9$26437
__pyx_memoryview_copy_data_to_temp ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_refcount_copying DD imagerel __pyx_memoryview_refcount_copying
	DD	imagerel __pyx_memoryview_refcount_copying+20
	DD	imagerel $unwind$__pyx_memoryview_refcount_copying
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_memoryview_refcount_copying DD imagerel __pyx_memoryview_refcount_copying+20
	DD	imagerel __pyx_memoryview_refcount_copying+108
	DD	imagerel $chain$1$__pyx_memoryview_refcount_copying
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_refcount_copying DD imagerel __pyx_memoryview_refcount_copying+108
	DD	imagerel __pyx_memoryview_refcount_copying+110
	DD	imagerel $chain$2$__pyx_memoryview_refcount_copying
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_refcount_copying DD 021H
	DD	imagerel __pyx_memoryview_refcount_copying
	DD	imagerel __pyx_memoryview_refcount_copying+20
	DD	imagerel $unwind$__pyx_memoryview_refcount_copying
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_memoryview_refcount_copying DD 041121H
	DD	097411H
	DD	083405H
	DD	imagerel __pyx_memoryview_refcount_copying
	DD	imagerel __pyx_memoryview_refcount_copying+20
	DD	imagerel $unwind$__pyx_memoryview_refcount_copying
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_refcount_copying DD 061401H
	DD	0b6414H
	DD	0a5414H
	DD	0c0105214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview_refcount_copying
_TEXT	SEGMENT
__pyx_v_dst$ = 64
__pyx_v_dtype_is_object$ = 72
__pyx_v_ndim$ = 80
__pyx_v_inc$ = 88
__pyx_memoryview_refcount_copying PROC			; COMDAT

; 19801:   int __pyx_t_1;
; 19802: 
; 19803:   /* "View.MemoryView":1352
; 19804:  * 
; 19805:  * 
; 19806:  *     if dtype_is_object:             # <<<<<<<<<<<<<<
; 19807:  *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
; 19808:  *                                            dst.strides, ndim, inc)
; 19809:  */
; 19810:   __pyx_t_1 = (__pyx_v_dtype_is_object != 0);

	test	edx, edx

; 19811:   if (__pyx_t_1) {

	je	SHORT $LN6@pyx_memory@31
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR [rsp+64], rbx

; 19812: 
; 19813:     /* "View.MemoryView":1353
; 19814:  * 
; 19815:  *     if dtype_is_object:
; 19816:  *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
; 19817:  *                                            dst.strides, ndim, inc)
; 19818:  * 
; 19819:  */
; 19820:     __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

	mov	rbx, QWORD PTR [rcx+8]
	mov	ebp, r9d
	mov	QWORD PTR [rsp+72], rdi
	mov	r12d, r8d
	mov	rsi, rcx
	call	QWORD PTR __imp_PyGILState_Ensure
	lea	r8, QWORD PTR [rsi+80]
	lea	rdx, QWORD PTR [rsi+16]
	mov	r9d, r12d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], ebp
	mov	edi, eax
	call	__pyx_memoryview_refcount_objects_in_slice
	mov	ecx, edi
	call	QWORD PTR __imp_PyGILState_Release
	mov	rdi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]

; 19821: 
; 19822:     /* "View.MemoryView":1352
; 19823:  * 
; 19824:  * 
; 19825:  *     if dtype_is_object:             # <<<<<<<<<<<<<<
; 19826:  *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
; 19827:  *                                            dst.strides, ndim, inc)
; 19828:  */
; 19829:   }
; 19830: 
; 19831:   /* "View.MemoryView":1348
; 19832:  * 
; 19833:  * @cname('__pyx_memoryview_refcount_copying')
; 19834:  * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
; 19835:  *                            int ndim, bint inc) nogil:
; 19836:  * 
; 19837:  */
; 19838: 
; 19839:   /* function exit code */
; 19840: }

	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
$LN6@pyx_memory@31:
	fatret	0
__pyx_memoryview_refcount_copying ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_slice_assign_scalar DD imagerel __pyx_memoryview_slice_assign_scalar
	DD	imagerel __pyx_memoryview_slice_assign_scalar+24
	DD	imagerel $unwind$__pyx_memoryview_slice_assign_scalar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_memoryview_slice_assign_scalar DD imagerel __pyx_memoryview_slice_assign_scalar+24
	DD	imagerel __pyx_memoryview_slice_assign_scalar+199
	DD	imagerel $chain$1$__pyx_memoryview_slice_assign_scalar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_memoryview_slice_assign_scalar DD imagerel __pyx_memoryview_slice_assign_scalar+199
	DD	imagerel __pyx_memoryview_slice_assign_scalar+302
	DD	imagerel $chain$2$__pyx_memoryview_slice_assign_scalar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_memoryview_slice_assign_scalar DD 021H
	DD	imagerel __pyx_memoryview_slice_assign_scalar
	DD	imagerel __pyx_memoryview_slice_assign_scalar+24
	DD	imagerel $unwind$__pyx_memoryview_slice_assign_scalar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_memoryview_slice_assign_scalar DD 040a21H
	DD	0df40aH
	DD	0ce405H
	DD	imagerel __pyx_memoryview_slice_assign_scalar
	DD	imagerel __pyx_memoryview_slice_assign_scalar+24
	DD	imagerel $unwind$__pyx_memoryview_slice_assign_scalar
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_slice_assign_scalar DD 081001H
	DD	0e3410H
	DD	0d00c5210H
	DD	07008c00aH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview_slice_assign_scalar
_TEXT	SEGMENT
__pyx_v_dst$ = 96
__pyx_v_ndim$ = 104
__pyx_v_itemsize$ = 112
__pyx_v_item$ = 120
__pyx_v_dtype_is_object$ = 128
__pyx_memoryview_slice_assign_scalar PROC		; COMDAT

; 20019: static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 48					; 00000030H

; 20020: 
; 20021:   /* "View.MemoryView":1386
; 20022:  *                               size_t itemsize, void *item,
; 20023:  *                               bint dtype_is_object) nogil:
; 20024:  *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
; 20025:  *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
; 20026:  *                          itemsize, item)
; 20027:  */
; 20028:   __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

	mov	r13d, DWORD PTR __pyx_v_dtype_is_object$[rsp]
	mov	QWORD PTR [rsp+96], r14
	mov	QWORD PTR [rsp+104], r15
	mov	r14, r9
	mov	r15, r8
	mov	esi, edx
	mov	rdi, rcx
	test	r13d, r13d
	je	SHORT $LN6@pyx_memory@32
	mov	rbx, QWORD PTR [rcx+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rbp, QWORD PTR [rdi+16]
	mov	r12d, eax
	test	rbp, rbp
	jle	SHORT $LN15@pyx_memory@32
$LL17@pyx_memory@32:
	cmp	esi, 1
	jne	SHORT $LN14@pyx_memory@32
	mov	rcx, QWORD PTR [rbx]
	dec	QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $__pyx_L5$43177
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$__pyx_L6$43171:
	jmp	SHORT $__pyx_L5$43177
$LN14@pyx_memory@32:
	lea	r9d, DWORD PTR [rsi-1]
	lea	r8, QWORD PTR [rdi+88]
	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 0
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$43177:
	add	rbx, QWORD PTR [rdi+80]
	sub	rbp, 1
	jne	SHORT $LL17@pyx_memory@32
$LN15@pyx_memory@32:
	mov	ecx, r12d
	call	QWORD PTR __imp_PyGILState_Release
$LN6@pyx_memory@32:

; 20029: 
; 20030:   /* "View.MemoryView":1387
; 20031:  *                               bint dtype_is_object) nogil:
; 20032:  *     refcount_copying(dst, dtype_is_object, ndim, False)
; 20033:  *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
; 20034:  *                          itemsize, item)
; 20035:  *     refcount_copying(dst, dtype_is_object, ndim, True)
; 20036:  */
; 20037:   __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

	mov	rcx, QWORD PTR [rdi+8]
	lea	rbp, QWORD PTR [rdi+80]
	lea	r12, QWORD PTR [rdi+16]
	mov	r8, rbp
	mov	rdx, r12
	mov	r9d, esi
	mov	QWORD PTR [rsp+40], r14
	mov	QWORD PTR [rsp+32], r15
	call	__pyx_memoryview__slice_assign_scalar
	mov	r15, QWORD PTR [rsp+104]
	mov	r14, QWORD PTR [rsp+96]

; 20038: 
; 20039:   /* "View.MemoryView":1389
; 20040:  *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
; 20041:  *                          itemsize, item)
; 20042:  *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
; 20043:  * 
; 20044:  * 
; 20045:  */
; 20046:   __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

	test	r13d, r13d
	je	SHORT $LN23@pyx_memory@32
	mov	rbx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rdi, QWORD PTR [r12]
	mov	r13d, eax
	test	rdi, rdi
	jle	SHORT $LN32@pyx_memory@32
	npad	3
$LL34@pyx_memory@32:
	cmp	esi, 1
	jne	SHORT $LN31@pyx_memory@32
	mov	rcx, QWORD PTR [rbx]
$__pyx_L6$43242:
	inc	QWORD PTR [rcx]
	jmp	SHORT $__pyx_L5$43248
$LN31@pyx_memory@32:
	lea	r9d, DWORD PTR [rsi-1]
	lea	r8, QWORD PTR [rbp+8]
	lea	rdx, QWORD PTR [r12+8]
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 1
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$43248:
	add	rbx, QWORD PTR [rbp]
	sub	rdi, 1
	jne	SHORT $LL34@pyx_memory@32
$LN32@pyx_memory@32:
	mov	ecx, r13d
	call	QWORD PTR __imp_PyGILState_Release
$LN23@pyx_memory@32:

; 20047: 
; 20048:   /* "View.MemoryView":1383
; 20049:  * 
; 20050:  * @cname('__pyx_memoryview_slice_assign_scalar')
; 20051:  * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
; 20052:  *                               size_t itemsize, void *item,
; 20053:  *                               bint dtype_is_object) nogil:
; 20054:  */
; 20055: 
; 20056:   /* function exit code */
; 20057: }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
__pyx_memoryview_slice_assign_scalar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@HECFPOBJ@View?4MemoryView?4__pyx_unpickle_E@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+26
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+26
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+1980
	DD	imagerel $chain$5$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+1980
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+2008
	DD	imagerel $chain$6$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD 021H
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+26
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD 0c1821H
	DD	0ad418H
	DD	0bc414H
	DD	0c7410H
	DD	0d640cH
	DD	0e5408H
	DD	0123404H
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
	DD	imagerel __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum+26
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum DD 031701H
	DD	0f013e217H
	DD	0e011H
xdata	ENDS
;	COMDAT ??_C@_0CE@HECFPOBJ@View?4MemoryView?4__pyx_unpickle_E@
CONST	SEGMENT
??_C@_0CE@HECFPOBJ@View?4MemoryView?4__pyx_unpickle_E@ DB 'View.MemoryVie'
	DB	'w.__pyx_unpickle_Enum', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
_TEXT	SEGMENT
tv1148 = 32
tv1147 = 32
__pyx_temp$27409 = 40
__pyx_temp$27505 = 56
__pyx_self$ = 144
__pyx_v___pyx_type$ = 152
$T43307 = 160
__pyx_v___pyx_checksum$ = 160
__pyx_v___pyx_state$ = 168
__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum PROC	; COMDAT

; 20266: static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {

	mov	rax, rsp
	mov	QWORD PTR [rax+32], r9
	mov	DWORD PTR [rax+24], r8d
	mov	QWORD PTR [rax+16], rdx
	push	r14
	push	r15
	sub	rsp, 120				; 00000078H

; 20267:   PyObject *__pyx_v___pyx_PickleError = NULL;

	xor	r15d, r15d
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax-24], rbp
	mov	QWORD PTR [rax-32], rsi
	mov	QWORD PTR [rax-40], rdi
	mov	QWORD PTR [rax-48], r12
	mov	QWORD PTR [rax-56], r13
	mov	rdi, rdx

; 20268:   PyObject *__pyx_v___pyx_result = NULL;

	mov	r14, r15

; 20269:   PyObject *__pyx_r = NULL;
; 20270:   __Pyx_RefNannyDeclarations
; 20271:   int __pyx_t_1;
; 20272:   PyObject *__pyx_t_2 = NULL;
; 20273:   PyObject *__pyx_t_3 = NULL;
; 20274:   PyObject *__pyx_t_4 = NULL;

	mov	rsi, r15

; 20275:   PyObject *__pyx_t_5 = NULL;

	mov	r12, r15

; 20276:   PyObject *__pyx_t_6 = NULL;

	mov	rbp, r15
	mov	r13, r15

; 20277:   int __pyx_t_7;
; 20278:   __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);
; 20279: 
; 20280:   /* "(tree fragment)":2
; 20281:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
; 20282:  *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
; 20283:  *         from pickle import PickleError as __pyx_PickleError
; 20284:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20285:  */
; 20286:   __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);

	cmp	r8d, 184977713				; 0b068931H

; 20287:   if (__pyx_t_1) {

	je	$LN206@pyx_pf_15V@6

; 20288: 
; 20289:     /* "(tree fragment)":3
; 20290:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
; 20291:  *     if __pyx_checksum != 0xb068931:
; 20292:  *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
; 20293:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20294:  *     __pyx_result = Enum.__new__(__pyx_type)
; 20295:  */
; 20296:     __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)

	lea	ecx, QWORD PTR [r15+1]
	call	QWORD PTR __imp_PyList_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN205@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 3
	mov	DWORD PTR __pyx_clineno, 20296		; 00004f48H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_pf_15V@6
$LN205@pyx_pf_15V@6:

; 20297:     __Pyx_GOTREF(__pyx_t_2);
; 20298:     __Pyx_INCREF(__pyx_n_s_PickleError);

	mov	rax, QWORD PTR __pyx_n_s_PickleError

; 20299:     __Pyx_GIVEREF(__pyx_n_s_PickleError);
; 20300:     PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
; 20301:     __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 3, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rbx
	inc	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbx+24]
	mov	rax, QWORD PTR __pyx_n_s_PickleError
	mov	QWORD PTR [rcx], rax
	mov	rcx, QWORD PTR __pyx_n_s_pickle
	call	__Pyx_Import
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN203@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 3
	mov	DWORD PTR __pyx_clineno, 20301		; 00004f4dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN203@pyx_pf_15V@6:

; 20302:     __Pyx_GOTREF(__pyx_t_3);
; 20303:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN202@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN202@pyx_pf_15V@6:

; 20304:     __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_PickleError
	mov	rcx, rdi
	call	__Pyx_ImportFrom
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN198@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 3
	mov	DWORD PTR __pyx_clineno, 20304		; 00004f50H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN63@pyx_pf_15V@6
$LN198@pyx_pf_15V@6:

; 20305:     __Pyx_GOTREF(__pyx_t_2);
; 20306:     __Pyx_INCREF(__pyx_t_2);
; 20307:     __pyx_v___pyx_PickleError = __pyx_t_2;

	mov	r13, rax

; 20308:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax
	test	rax, rax
	jne	SHORT $LN196@pyx_pf_15V@6
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN196@pyx_pf_15V@6:

; 20309:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN191@pyx_pf_15V@6
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN191@pyx_pf_15V@6:

; 20310: 
; 20311:     /* "(tree fragment)":4
; 20312:  *     if __pyx_checksum != 0xb068931:
; 20313:  *         from pickle import PickleError as __pyx_PickleError
; 20314:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
; 20315:  *     __pyx_result = Enum.__new__(__pyx_type)
; 20316:  *     if __pyx_state is not None:
; 20317:  */
; 20318:     __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	ecx, DWORD PTR __pyx_v___pyx_checksum$[rsp]
	mov	DWORD PTR $T43307[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN187@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20318		; 00004f5eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_pf_15V@6
$LN187@pyx_pf_15V@6:

; 20319:     __Pyx_GOTREF(__pyx_t_2);
; 20320:     __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_s_Incompatible_checksums_s_vs_0xb0
	mov	rdx, rax
	call	QWORD PTR __imp_PyString_Format
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN185@pyx_pf_15V@6
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20320		; 00004f60H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$27322
$LN185@pyx_pf_15V@6:

; 20321:     __Pyx_GOTREF(__pyx_t_4);
; 20322:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN184@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN184@pyx_pf_15V@6:

; 20323:     __Pyx_INCREF(__pyx_v___pyx_PickleError);

	inc	QWORD PTR [r13]

; 20324:     __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
; 20325:     if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	lea	rcx, QWORD PTR [r13+8]
	mov	rbx, r13
	mov	QWORD PTR tv1148[rsp], rcx
	cmp	QWORD PTR [rcx], rax
	jne	$LN226@pyx_pf_15V@6

; 20326:       __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

	mov	r12, QWORD PTR [r13+24]

; 20327:       if (likely(__pyx_t_5)) {

	test	r12, r12
	je	$LN226@pyx_pf_15V@6

; 20328:         PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

	mov	rbx, QWORD PTR [r13+16]

; 20329:         __Pyx_INCREF(__pyx_t_5);

	inc	QWORD PTR [r12]

; 20330:         __Pyx_INCREF(function);

	inc	QWORD PTR [rbx]

; 20331:         __Pyx_DECREF_SET(__pyx_t_2, function);

	add	QWORD PTR [r13], -1
	jne	SHORT $LN170@pyx_pf_15V@6
	mov	rax, QWORD PTR [rcx]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN170@pyx_pf_15V@6:

; 20337:       __Pyx_GOTREF(__pyx_t_3);
; 20338:     } else {
; 20339:       #if CYTHON_FAST_PYCALL
; 20340:       if (PyFunction_Check(__pyx_t_2)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	lea	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR tv1148[rsp], rcx
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN162@pyx_pf_15V@6

; 20341:         PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
; 20342:         __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 4, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, QWORD PTR __pyx_temp$27409[rsp]
	mov	rcx, rbx
	lea	r8d, QWORD PTR [r9+2]
	mov	QWORD PTR __pyx_temp$27409[rsp], r12
	mov	QWORD PTR __pyx_temp$27409[rsp+8], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN160@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20342		; 00004f76H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN160@pyx_pf_15V@6:

; 20343:         __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN154@pyx_pf_15V@6
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN154@pyx_pf_15V@6:

; 20344:         __Pyx_GOTREF(__pyx_t_3);
; 20345:         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	r12, r15
	jne	$LN137@pyx_pf_15V@6
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]

; 20346:       } else

	jmp	$LN137@pyx_pf_15V@6
$LN162@pyx_pf_15V@6:

; 20347:       #endif
; 20348:       #if CYTHON_FAST_PYCCALL
; 20349:       if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
; 20350:         PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
; 20351:         __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 4, __pyx_L1_error)
; 20352:         __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
; 20353:         __Pyx_GOTREF(__pyx_t_3);
; 20354:         __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 20355:       } else
; 20356:       #endif
; 20357:       {
; 20358:         __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rbp, rax
	test	rax, rax
	jne	SHORT $LN144@pyx_pf_15V@6
	mov	rcx, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20358		; 00004f86H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$27322
$LN144@pyx_pf_15V@6:

; 20359:         __Pyx_GOTREF(__pyx_t_6);
; 20360:         __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;

	mov	QWORD PTR [rax+24], r12

; 20361:         __Pyx_GIVEREF(__pyx_t_4);
; 20362:         PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);

	mov	QWORD PTR [rax+32], rsi

; 20363:         __pyx_t_4 = 0;
; 20364:         __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 4, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, rbx
	mov	r12, r15
	mov	rsi, r15
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN142@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20364		; 00004f8cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN142@pyx_pf_15V@6:

; 20365:         __Pyx_GOTREF(__pyx_t_3);
; 20366:         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN141@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN141@pyx_pf_15V@6:
	mov	rbp, r15
	jmp	SHORT $LN137@pyx_pf_15V@6
$LN226@pyx_pf_15V@6:

; 20332:       }
; 20333:     }
; 20334:     if (!__pyx_t_5) {
; 20335:       __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rdx, rsi
	mov	rcx, r13
	call	__Pyx_PyObject_CallOneArg
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN168@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20335		; 00004f6fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN168@pyx_pf_15V@6:

; 20336:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN137@pyx_pf_15V@6
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN137@pyx_pf_15V@6:

; 20367:       }
; 20368:     }
; 20369:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN136@pyx_pf_15V@6
	mov	rax, QWORD PTR tv1148[rsp]
	mov	rcx, rbx
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+48]
$LN136@pyx_pf_15V@6:

; 20370:     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rdi
	call	__Pyx_Raise

; 20371:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN131@pyx_pf_15V@6
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN131@pyx_pf_15V@6:

; 20372:     __PYX_ERR(2, 4, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 4
	mov	DWORD PTR __pyx_clineno, 20372		; 00004f94H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN43@pyx_pf_15V@6
$LN206@pyx_pf_15V@6:

; 20373: 
; 20374:     /* "(tree fragment)":2
; 20375:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
; 20376:  *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
; 20377:  *         from pickle import PickleError as __pyx_PickleError
; 20378:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20379:  */
; 20380:   }
; 20381: 
; 20382:   /* "(tree fragment)":5
; 20383:  *         from pickle import PickleError as __pyx_PickleError
; 20384:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20385:  *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
; 20386:  *     if __pyx_state is not None:
; 20387:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 20388:  */
; 20389:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	mov	rax, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN222@pyx_pf_15V@6
	mov	rdx, QWORD PTR __pyx_n_s_new
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN223@pyx_pf_15V@6
$LN222@pyx_pf_15V@6:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN221@pyx_pf_15V@6
	mov	rdx, QWORD PTR __pyx_n_s_new
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN223@pyx_pf_15V@6
$LN221@pyx_pf_15V@6:
	mov	rdx, QWORD PTR __pyx_n_s_new
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN223@pyx_pf_15V@6:
	test	rbx, rbx
	jne	SHORT $LN127@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 5
	mov	DWORD PTR __pyx_clineno, 20389		; 00004fa5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_pf_15V@6
$LN127@pyx_pf_15V@6:

; 20390:   __Pyx_GOTREF(__pyx_t_2);
; 20391:   __pyx_t_6 = NULL;
; 20392:   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	lea	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR tv1147[rsp], rcx
	cmp	QWORD PTR [rcx], rax
	jne	$LN225@pyx_pf_15V@6

; 20393:     __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);

	mov	rbp, QWORD PTR [rbx+24]

; 20394:     if (likely(__pyx_t_6)) {

	test	rbp, rbp
	je	$LN225@pyx_pf_15V@6

; 20395:       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

	mov	rdi, QWORD PTR [rbx+16]

; 20396:       __Pyx_INCREF(__pyx_t_6);

	inc	QWORD PTR [rbp]

; 20397:       __Pyx_INCREF(function);
; 20398:       __Pyx_DECREF_SET(__pyx_t_2, function);

	mov	rcx, rbx
	inc	QWORD PTR [rdi]
	add	QWORD PTR [rcx], -1
	mov	rbx, rdi
	jne	SHORT $LN116@pyx_pf_15V@6
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN116@pyx_pf_15V@6:

; 20403:     __Pyx_GOTREF(__pyx_t_3);
; 20404:   } else {
; 20405:     #if CYTHON_FAST_PYCALL
; 20406:     if (PyFunction_Check(__pyx_t_2)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	lea	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR tv1147[rsp], rcx
	cmp	QWORD PTR [rcx], rax
	jne	$LN113@pyx_pf_15V@6

; 20407:       PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};

	mov	rax, QWORD PTR __pyx_v___pyx_type$[rsp]

; 20408:       __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, QWORD PTR __pyx_temp$27505[rsp]
	lea	r8d, QWORD PTR [r9+2]
	mov	rcx, rdi
	mov	QWORD PTR __pyx_temp$27505[rsp], rbp
	mov	QWORD PTR __pyx_temp$27505[rsp+8], rax
	call	__Pyx_PyFunction_FastCallDict
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN111@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 5
	mov	DWORD PTR __pyx_clineno, 20408		; 00004fb8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN111@pyx_pf_15V@6:

; 20409:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rbp], -1
	jne	SHORT $LN105@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN105@pyx_pf_15V@6:
	mov	rbp, r15
$LN93@pyx_pf_15V@6:

; 20431:     }
; 20432:   }
; 20433:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN92@pyx_pf_15V@6
	mov	rax, QWORD PTR tv1147[rsp]
	mov	rcx, rbx
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+48]
$LN92@pyx_pf_15V@6:

; 20434:   __pyx_v___pyx_result = __pyx_t_3;
; 20435:   __pyx_t_3 = 0;
; 20436: 
; 20437:   /* "(tree fragment)":6
; 20438:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20439:  *     __pyx_result = Enum.__new__(__pyx_type)
; 20440:  *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
; 20441:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 20442:  *     return __pyx_result
; 20443:  */
; 20444:   __pyx_t_1 = (__pyx_v___pyx_state != Py_None);

	mov	rax, QWORD PTR __pyx_v___pyx_state$[rsp]
	mov	r14, rdi
	cmp	rax, QWORD PTR __imp__Py_NoneStruct

; 20445:   __pyx_t_7 = (__pyx_t_1 != 0);
; 20446:   if (__pyx_t_7) {

	je	$LN73@pyx_pf_15V@6

; 20447: 
; 20448:     /* "(tree fragment)":7
; 20449:  *     __pyx_result = Enum.__new__(__pyx_type)
; 20450:  *     if __pyx_state is not None:
; 20451:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
; 20452:  *     return __pyx_result
; 20453:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
; 20454:  */
; 20455:     if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 7, __pyx_L1_error)

	mov	r9, QWORD PTR [rax+8]
	cmp	r9, QWORD PTR __imp_PyTuple_Type
	je	$LN87@pyx_pf_15V@6
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	lea	r8, OFFSET FLAT:??_C@_05NNMEHDAO@tuple?$AA@
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, OFFSET FLAT:??_C@_0BL@JGMPJDKP@Expected?5?$CF?416s?0?5got?5?$CF?4200s?$AA@
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 7
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 20455		; 00004fe7H
	jmp	$LN33@pyx_pf_15V@6
$LN113@pyx_pf_15V@6:

; 20410:       __Pyx_GOTREF(__pyx_t_3);
; 20411:     } else
; 20412:     #endif
; 20413:     #if CYTHON_FAST_PYCCALL
; 20414:     if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
; 20415:       PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
; 20416:       __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
; 20417:       __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
; 20418:       __Pyx_GOTREF(__pyx_t_3);
; 20419:     } else
; 20420:     #endif
; 20421:     {
; 20422:       __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)

	mov	ecx, 2
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN100@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 5
	mov	DWORD PTR __pyx_clineno, 20422		; 00004fc6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$27322
$LN100@pyx_pf_15V@6:

; 20423:       __Pyx_GOTREF(__pyx_t_4);
; 20424:       __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;

	mov	QWORD PTR [rax+24], rbp

; 20425:       __Pyx_INCREF(__pyx_v___pyx_type);

	mov	rax, QWORD PTR __pyx_v___pyx_type$[rsp]

; 20426:       __Pyx_GIVEREF(__pyx_v___pyx_type);
; 20427:       PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
; 20428:       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)

	xor	r8d, r8d
	inc	QWORD PTR [rax]
	mov	rdx, rsi
	mov	rcx, rdi
	mov	QWORD PTR [rsi+32], rax
	mov	rbp, r15
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN98@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 5
	mov	DWORD PTR __pyx_clineno, 20428		; 00004fccH
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$27322
$LN98@pyx_pf_15V@6:

; 20429:       __Pyx_GOTREF(__pyx_t_3);
; 20430:       __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	$LN93@pyx_pf_15V@6
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
	jmp	$LN93@pyx_pf_15V@6
$LN225@pyx_pf_15V@6:

; 20399:     }
; 20400:   }
; 20401:   if (!__pyx_t_6) {
; 20402:     __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)

	mov	rdx, rdi
	mov	rcx, rbx
	call	__Pyx_PyObject_CallOneArg
	mov	rdi, rax
	test	rax, rax
	jne	$LN93@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 5
	mov	DWORD PTR __pyx_clineno, 20402		; 00004fb2H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$27322:

; 20479:   goto __pyx_L0;
; 20480: 
; 20481:   /* "(tree fragment)":1
; 20482:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
; 20483:  *     if __pyx_checksum != 0xb068931:
; 20484:  *         from pickle import PickleError as __pyx_PickleError
; 20485:  */
; 20486: 
; 20487:   /* function exit code */
; 20488:   __pyx_L1_error:;
; 20489:   __Pyx_XDECREF(__pyx_t_2);

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN53@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN53@pyx_pf_15V@6:

; 20491:   __Pyx_XDECREF(__pyx_t_4);

	test	rsi, rsi
	je	SHORT $LN43@pyx_pf_15V@6
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN43@pyx_pf_15V@6
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN43@pyx_pf_15V@6:

; 20492:   __Pyx_XDECREF(__pyx_t_5);

	test	r12, r12
	je	SHORT $LN33@pyx_pf_15V@6
	add	QWORD PTR [r12], -1
	jne	SHORT $LN33@pyx_pf_15V@6
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN33@pyx_pf_15V@6
$LN87@pyx_pf_15V@6:

; 20456:     __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)

	mov	rdx, rax
	mov	rcx, rdi
	call	__pyx_unpickle_Enum__set_state
	mov	rdi, rax
	test	rax, rax
	jne	$LN85@pyx_pf_15V@6
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 7
	mov	DWORD PTR __pyx_clineno, 20456		; 00004fe8H
	mov	QWORD PTR __pyx_filename, rax
$LN63@pyx_pf_15V@6:

; 20490:   __Pyx_XDECREF(__pyx_t_3);

	test	rdi, rdi
	je	SHORT $LN33@pyx_pf_15V@6
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN33@pyx_pf_15V@6
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN33@pyx_pf_15V@6:

; 20493:   __Pyx_XDECREF(__pyx_t_6);

	test	rbp, rbp
	je	SHORT $LN23@pyx_pf_15V@6
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN23@pyx_pf_15V@6
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN23@pyx_pf_15V@6:

; 20494:   __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CE@HECFPOBJ@View?4MemoryView?4__pyx_unpickle_E@
	call	__Pyx_AddTraceback
$__pyx_L0$27586:

; 20495:   __pyx_r = NULL;
; 20496:   __pyx_L0:;
; 20497:   __Pyx_XDECREF(__pyx_v___pyx_PickleError);

	test	r13, r13
	je	SHORT $LN13@pyx_pf_15V@6
	add	QWORD PTR [r13], -1
	jne	SHORT $LN13@pyx_pf_15V@6
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN13@pyx_pf_15V@6
$LN85@pyx_pf_15V@6:

; 20457:     __Pyx_GOTREF(__pyx_t_3);
; 20458:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN73@pyx_pf_15V@6
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN73@pyx_pf_15V@6:

; 20459: 
; 20460:     /* "(tree fragment)":6
; 20461:  *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
; 20462:  *     __pyx_result = Enum.__new__(__pyx_type)
; 20463:  *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
; 20464:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 20465:  *     return __pyx_result
; 20466:  */
; 20467:   }
; 20468: 
; 20469:   /* "(tree fragment)":8
; 20470:  *     if __pyx_state is not None:
; 20471:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 20472:  *     return __pyx_result             # <<<<<<<<<<<<<<
; 20473:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
; 20474:  *     __pyx_result.name = __pyx_state[0]
; 20475:  */
; 20476:   __Pyx_XDECREF(__pyx_r);
; 20477:   __Pyx_INCREF(__pyx_v___pyx_result);

	inc	QWORD PTR [r14]

; 20478:   __pyx_r = __pyx_v___pyx_result;

	mov	r15, r14
$LN13@pyx_pf_15V@6:
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+144]

; 20498:   __Pyx_XDECREF(__pyx_v___pyx_result);

	test	r14, r14
	je	SHORT $LN227@pyx_pf_15V@6
	add	QWORD PTR [r14], -1
	jne	SHORT $LN227@pyx_pf_15V@6
	mov	rdx, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rdx+48]
$LN227@pyx_pf_15V@6:

; 20499:   __Pyx_XGIVEREF(__pyx_r);
; 20500:   __Pyx_RefNannyFinishContext();
; 20501:   return __pyx_r;

	mov	rax, r15

; 20502: }

	add	rsp, 120				; 00000078H
	pop	r15
	pop	r14
	ret	0
__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum ENDP
_TEXT	ENDS
EXTRN	__imp_PyErr_Restore:PROC
EXTRN	__imp_PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_dealloc_array DD imagerel __pyx_tp_dealloc_array
	DD	imagerel __pyx_tp_dealloc_array+144
	DD	imagerel $unwind$__pyx_tp_dealloc_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_dealloc_array DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_dealloc_array
_TEXT	SEGMENT
etb$28041 = 48
o$ = 48
eval$28040 = 56
etype$28039 = 64
__pyx_tp_dealloc_array PROC				; COMDAT

; 20686: static void __pyx_tp_dealloc_array(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 20687:   struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
; 20688:   #if CYTHON_USE_TP_FINALIZE
; 20689:   if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
; 20690:     if (PyObject_CallFinalizerFromDealloc(o)) return;
; 20691:   }
; 20692:   #endif
; 20693:   {
; 20694:     PyObject *etype, *eval, *etb;
; 20695:     PyErr_Fetch(&etype, &eval, &etb);

	lea	r8, QWORD PTR etb$28041[rsp]
	lea	rdx, QWORD PTR eval$28040[rsp]
	lea	rcx, QWORD PTR etype$28039[rsp]
	call	QWORD PTR __imp_PyErr_Fetch

; 20696:     ++Py_REFCNT(o);

	inc	QWORD PTR [rbx]

; 20697:     __pyx_array___dealloc__(o);

	mov	rcx, rbx
	call	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__

; 20698:     --Py_REFCNT(o);
; 20699:     PyErr_Restore(etype, eval, etb);

	mov	r8, QWORD PTR etb$28041[rsp]
	mov	rdx, QWORD PTR eval$28040[rsp]
	mov	rcx, QWORD PTR etype$28039[rsp]
	dec	QWORD PTR [rbx]
	call	QWORD PTR __imp_PyErr_Restore

; 20700:   }
; 20701:   Py_CLEAR(p->mode);

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN12@pyx_tp_dea@2
	mov	QWORD PTR [rbx+80], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN12@pyx_tp_dea@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN12@pyx_tp_dea@2:

; 20702:   Py_CLEAR(p->_format);

	mov	rcx, QWORD PTR [rbx+88]
	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_dea@2
	mov	QWORD PTR [rbx+88], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN3@pyx_tp_dea@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@pyx_tp_dea@2:

; 20703:   (*Py_TYPE(o)->tp_free)(o);

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx

; 20704: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR [rax+320]
__pyx_tp_dealloc_array ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@GPGPKDOG@Subscript?5deletion?5not?5supported@ ; `string'
EXTRN	__imp_PyExc_NotImplementedError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_mp_ass_subscript_array DD imagerel __pyx_mp_ass_subscript_array
	DD	imagerel __pyx_mp_ass_subscript_array+57
	DD	imagerel $unwind$__pyx_mp_ass_subscript_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_mp_ass_subscript_array DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CL@GPGPKDOG@Subscript?5deletion?5not?5supported@
CONST	SEGMENT
??_C@_0CL@GPGPKDOG@Subscript?5deletion?5not?5supported@ DB 'Subscript del'
	DB	'etion not supported by %.200s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_mp_ass_subscript_array
_TEXT	SEGMENT
o$ = 48
i$ = 56
v$ = 64
__pyx_mp_ass_subscript_array PROC			; COMDAT

; 20713: static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {

	sub	rsp, 40					; 00000028H

; 20714:   if (v) {

	test	r8, r8
	je	SHORT $LN2@pyx_mp_ass

; 20721:   }
; 20722: }

	add	rsp, 40					; 00000028H
	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__
$LN2@pyx_mp_ass:

; 20715:     return __pyx_array___setitem__(o, i, v);
; 20716:   }
; 20717:   else {
; 20718:     PyErr_Format(PyExc_NotImplementedError,
; 20719:       "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);

	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR __imp_PyExc_NotImplementedError
	lea	rdx, OFFSET FLAT:??_C@_0CL@GPGPKDOG@Subscript?5deletion?5not?5supported@
	mov	rcx, QWORD PTR [rcx]
	mov	r8, QWORD PTR [r8+24]
	call	QWORD PTR __imp_PyErr_Format

; 20720:     return -1;

	or	eax, -1

; 20721:   }
; 20722: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_mp_ass_subscript_array ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_GenericGetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_getattro_array DD imagerel __pyx_tp_getattro_array
	DD	imagerel __pyx_tp_getattro_array+106
	DD	imagerel $unwind$__pyx_tp_getattro_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_getattro_array DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_getattro_array
_TEXT	SEGMENT
o$ = 48
n$ = 56
__pyx_tp_getattro_array PROC				; COMDAT

; 20724: static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rsi, rcx

; 20725:   PyObject *v = PyObject_GenericGetAttr(o, n);

	call	QWORD PTR __imp_PyObject_GenericGetAttr
	mov	rbx, rax

; 20726:   if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {

	test	rax, rax
	jne	SHORT $LN1@pyx_tp_get
	mov	rcx, QWORD PTR __imp_PyExc_AttributeError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_ExceptionMatches
	test	eax, eax
	je	SHORT $LN7@pyx_tp_get

; 20727:     PyErr_Clear();

	call	QWORD PTR __imp_PyErr_Clear

; 20728:     v = __pyx_array___getattr__(o, n);

	mov	rdx, rdi
	mov	rcx, rsi

; 20731: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__
$LN7@pyx_tp_get:

; 20729:   }
; 20730:   return v;

	mov	rax, rbx
$LN1@pyx_tp_get:

; 20731: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_tp_getattro_array ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_getprop___pyx_array_memview DD imagerel __pyx_getprop___pyx_array_memview
	DD	imagerel __pyx_getprop___pyx_array_memview+79
	DD	imagerel $unwind$__pyx_getprop___pyx_array_memview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_getprop___pyx_array_memview DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_getprop___pyx_array_memview
_TEXT	SEGMENT
o$ = 48
x$ = 56
__pyx_getprop___pyx_array_memview PROC			; COMDAT

; 20733: static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {

	sub	rsp, 40					; 00000028H

; 20734:   return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);

	mov	rax, QWORD PTR [rcx+16]
	call	QWORD PTR [rax]
	test	rax, rax
	jne	SHORT $__pyx_L0$43443
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CG@JAPMHOB@View?4MemoryView?4array?4memview?4__@
	mov	edx, 9067				; 0000236bH
	mov	r8d, 221				; 000000ddH
	mov	DWORD PTR __pyx_lineno, 221		; 000000ddH
	mov	DWORD PTR __pyx_clineno, 9067		; 0000236bH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$43442:
	call	__Pyx_AddTraceback
	xor	eax, eax
$__pyx_L0$43443:

; 20735: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_getprop___pyx_array_memview ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_shape
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_shape PROC		; COMDAT

; 21057:   return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
; 21058: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__
__pyx_getprop___pyx_memoryview_shape ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_strides
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_strides PROC		; COMDAT

; 21061:   return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
; 21062: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__
__pyx_getprop___pyx_memoryview_strides ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_suboffsets
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_suboffsets PROC		; COMDAT

; 21065:   return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
; 21066: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__
__pyx_getprop___pyx_memoryview_suboffsets ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_getprop___pyx_memoryview_ndim DD imagerel __pyx_getprop___pyx_memoryview_ndim
	DD	imagerel __pyx_getprop___pyx_memoryview_ndim+86
	DD	imagerel $unwind$__pyx_getprop___pyx_memoryview_ndim
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_getprop___pyx_memoryview_ndim DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_ndim
_TEXT	SEGMENT
$T43512 = 48
o$ = 48
x$ = 56
__pyx_getprop___pyx_memoryview_ndim PROC		; COMDAT

; 21068: static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {

	sub	rsp, 40					; 00000028H

; 21069:   return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);

	mov	ecx, DWORD PTR [rcx+108]
	mov	DWORD PTR $T43512[rsp], ecx
	call	QWORD PTR __imp_PyInt_FromLong
	test	rax, rax
	jne	SHORT $__pyx_L0$43593
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CI@FHALIMBM@View?4MemoryView?4memoryview?4ndim?4@
	mov	edx, 13185				; 00003381H
	mov	r8d, 571				; 0000023bH
	mov	DWORD PTR __pyx_lineno, 571		; 0000023bH
	mov	DWORD PTR __pyx_clineno, 13185		; 00003381H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$43592:
	call	__Pyx_AddTraceback
	xor	eax, eax
$__pyx_L0$43593:

; 21070: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_getprop___pyx_memoryview_ndim ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_getprop___pyx_memoryview_itemsize DD imagerel __pyx_getprop___pyx_memoryview_itemsize
	DD	imagerel __pyx_getprop___pyx_memoryview_itemsize+83
	DD	imagerel $unwind$__pyx_getprop___pyx_memoryview_itemsize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_getprop___pyx_memoryview_itemsize DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_itemsize
_TEXT	SEGMENT
o$ = 48
x$ = 56
__pyx_getprop___pyx_memoryview_itemsize PROC		; COMDAT

; 21072: static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {

	sub	rsp, 40					; 00000028H

; 21073:   return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);

	mov	rcx, QWORD PTR [rcx+96]
	call	QWORD PTR __imp_PyInt_FromSsize_t
	test	rax, rax
	jne	SHORT $__pyx_L0$43665
	mov	r9, QWORD PTR __pyx_f+16
	lea	rcx, OFFSET FLAT:??_C@_0CM@NOGJEKNH@View?4MemoryView?4memoryview?4items@
	mov	edx, 13245				; 000033bdH
	mov	r8d, 575				; 0000023fH
	mov	DWORD PTR __pyx_lineno, 575		; 0000023fH
	mov	DWORD PTR __pyx_clineno, 13245		; 000033bdH
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$43664:
	call	__Pyx_AddTraceback
	xor	eax, eax
$__pyx_L0$43665:

; 21074: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_getprop___pyx_memoryview_itemsize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_nbytes
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_nbytes PROC		; COMDAT

; 21077:   return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
; 21078: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__
__pyx_getprop___pyx_memoryview_nbytes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_size
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_size PROC		; COMDAT

; 21081:   return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
; 21082: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__
__pyx_getprop___pyx_memoryview_size ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_SafeReleaseBuffer DD imagerel __Pyx_SafeReleaseBuffer
	DD	imagerel __Pyx_SafeReleaseBuffer+41
	DD	imagerel $unwind$__Pyx_SafeReleaseBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_SafeReleaseBuffer DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __Pyx_SafeReleaseBuffer
_TEXT	SEGMENT
info$ = 48
__Pyx_SafeReleaseBuffer PROC				; COMDAT

; 23193:   static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {

	sub	rsp, 40					; 00000028H

; 23194:   if (unlikely(info->buf == NULL)) return;

	cmp	QWORD PTR [rcx], 0
	je	SHORT $LN3@Pyx_SafeRe

; 23195:   if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;

	lea	rax, OFFSET FLAT:__Pyx_minusones
	cmp	QWORD PTR [rcx+64], rax
	jne	SHORT $LN1@Pyx_SafeRe
	mov	QWORD PTR [rcx+64], 0
$LN1@Pyx_SafeRe:

; 23196:   __Pyx_ReleaseBuffer(info);

	call	__Pyx_ReleaseBuffer
$LN3@Pyx_SafeRe:

; 23197: }

	add	rsp, 40					; 00000028H
	ret	0
__Pyx_SafeReleaseBuffer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_8rsrpsinr_7gain DD imagerel __pyx_pw_8rsrpsinr_7gain
	DD	imagerel __pyx_pw_8rsrpsinr_7gain+764
	DD	imagerel $unwind$__pyx_pw_8rsrpsinr_7gain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_8rsrpsinr_7gain DD 0102e01H
	DD	05782eH
	DD	066824H
	DD	015741dH
	DD	014641dH
	DD	013541dH
	DD	012341dH
	DD	0e019d21dH
	DD	0c015d017H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_8rsrpsinr_7gain
_TEXT	SEGMENT
values$16620 = 64
__pyx_self$ = 144
__pyx_args$ = 152
__pyx_kwds$ = 160
__pyx_pw_8rsrpsinr_7gain PROC				; COMDAT

; 4908 : static PyObject *__pyx_pw_8rsrpsinr_7gain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 112				; 00000070H

; 4909 :   double __pyx_v_alpha;
; 4910 :   double __pyx_v_beta;
; 4911 :   PyObject *__pyx_r = 0;
; 4912 :   __Pyx_RefNannyDeclarations
; 4913 :   __Pyx_RefNannySetupContext("gain (wrapper)", 0);
; 4914 :   {
; 4915 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_beta,0};
; 4916 :     PyObject* values[2] = {0,0};

	xor	r13d, r13d
	movaps	XMMWORD PTR [rax-40], xmm6
	mov	r12, r8
	mov	rbx, r13
	movaps	XMMWORD PTR [rax-56], xmm7
	mov	rsi, rdx
	mov	rdi, r13
	mov	QWORD PTR [rax-64], r13
	mov	QWORD PTR [rax-72], rbx

; 4917 :     if (unlikely(__pyx_kwds)) {

	test	r8, r8
	je	$LN22@pyx_pw_8rs@3

; 4918 :       Py_ssize_t kw_args;
; 4919 :       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	r14, QWORD PTR [rdx+16]

; 4920 :       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN17@pyx_pw_8rs@3
	sub	rax, 1
	je	SHORT $LN18@pyx_pw_8rs@3
	cmp	rax, 1
	jne	$__pyx_L5_argtuple_error$16635

; 4921 :         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rdi, QWORD PTR [rdx+32]
	mov	QWORD PTR values$16620[rsp+8], rdi
$LN18@pyx_pw_8rs@3:

; 4922 :         CYTHON_FALLTHROUGH;
; 4923 :         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR [rdx+24]
	mov	QWORD PTR values$16620[rsp], rbx
$LN17@pyx_pw_8rs@3:

; 4924 :         CYTHON_FALLTHROUGH;
; 4925 :         case  0: break;
; 4926 :         default: goto __pyx_L5_argtuple_error;
; 4927 :       }
; 4928 :       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	rbp, rax

; 4929 :       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN13@pyx_pw_8rs@3
	cmp	rax, 1
	je	SHORT $LN11@pyx_pw_8rs@3
	jmp	SHORT $LN8@pyx_pw_8rs@3
$LN13@pyx_pw_8rs@3:

; 4930 :         case  0:
; 4931 :         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_alpha
	mov	rcx, r12
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbx, rax
	mov	QWORD PTR values$16620[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$16635
	dec	rbp
$LN11@pyx_pw_8rs@3:

; 4932 :         else goto __pyx_L5_argtuple_error;
; 4933 :         CYTHON_FALLTHROUGH;
; 4934 :         case  1:
; 4935 :         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_beta
	mov	rcx, r12
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rdi, rax
	mov	QWORD PTR values$16620[rsp+8], rax
	test	rax, rax
	je	SHORT $LN9@pyx_pw_8rs@3
	dec	rbp
$LN8@pyx_pw_8rs@3:

; 4938 :         }
; 4939 :       }
; 4940 :       if (unlikely(kw_args > 0)) {

	test	rbp, rbp
	jle	$LN3@pyx_pw_8rs@3

; 4941 :         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gain") < 0)) __PYX_ERR(0, 238, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_04CNCNIFFP@gain?$AA@
	lea	r9, QWORD PTR values$16620[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_7gain@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r12
	mov	QWORD PTR [rsp+32], r14
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN62@pyx_pw_8rs@3
	mov	edx, 4941				; 0000134dH
	jmp	$LN64@pyx_pw_8rs@3
$LN62@pyx_pw_8rs@3:

; 4947 :       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rdi, QWORD PTR values$16620[rsp+8]
	mov	rbx, QWORD PTR values$16620[rsp]
	jmp	$LN3@pyx_pw_8rs@3
$LN9@pyx_pw_8rs@3:

; 4936 :         else {
; 4937 :           __Pyx_RaiseArgtupleInvalid("gain", 1, 2, 2, 1); __PYX_ERR(0, 238, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	lea	r8, OFFSET FLAT:??_C@_04CNCNIFFP@gain?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 2
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 4937				; 00001349H
	jmp	$LN64@pyx_pw_8rs@3
$LN22@pyx_pw_8rs@3:

; 4942 :       }
; 4943 :     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

	cmp	QWORD PTR [rdx+16], 2
	je	SHORT $LN4@pyx_pw_8rs@3
$__pyx_L5_argtuple_error$16635:

; 4951 :   }
; 4952 :   goto __pyx_L4_argument_unpacking_done;
; 4953 :   __pyx_L5_argtuple_error:;
; 4954 :   __Pyx_RaiseArgtupleInvalid("gain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 238, __pyx_L3_error)

	mov	rax, QWORD PTR [rsi+16]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+40], rax
	lea	r8, OFFSET FLAT:??_C@_04CNCNIFFP@gain?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 2
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 4954				; 0000135aH
	jmp	$LN64@pyx_pw_8rs@3
$LN4@pyx_pw_8rs@3:

; 4944 :       goto __pyx_L5_argtuple_error;
; 4945 :     } else {
; 4946 :       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR [rdx+24]

; 4947 :       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rdi, QWORD PTR [rdx+32]
$LN3@pyx_pw_8rs@3:

; 4948 :     }
; 4949 :     __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN25@pyx_pw_8rs@3
	movsdx	xmm7, QWORD PTR [rbx+16]
	jmp	SHORT $LN26@pyx_pw_8rs@3
$LN25@pyx_pw_8rs@3:
	mov	rcx, rbx
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm7, xmm0
$LN26@pyx_pw_8rs@3:
	ucomisd	xmm7, QWORD PTR __real@bff0000000000000
	jp	SHORT $LN63@pyx_pw_8rs@3
	jne	SHORT $LN63@pyx_pw_8rs@3
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN63@pyx_pw_8rs@3
	mov	edx, 4949				; 00001355H
	jmp	SHORT $LN64@pyx_pw_8rs@3
$LN63@pyx_pw_8rs@3:

; 4950 :     __pyx_v_beta = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [rdi+8], rax
	jne	SHORT $LN27@pyx_pw_8rs@3
	movsdx	xmm6, QWORD PTR [rdi+16]
	jmp	SHORT $LN28@pyx_pw_8rs@3
$LN27@pyx_pw_8rs@3:
	mov	rcx, rdi
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm6, xmm0
$LN28@pyx_pw_8rs@3:
	ucomisd	xmm6, QWORD PTR __real@bff0000000000000
	jp	SHORT $__pyx_L4_argument_unpacking_done$16663
	jne	SHORT $__pyx_L4_argument_unpacking_done$16663
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$16663
	mov	edx, 4950				; 00001356H
$LN64@pyx_pw_8rs@3:
	mov	r9, QWORD PTR __pyx_f

; 4955 :   __pyx_L3_error:;
; 4956 :   __Pyx_AddTraceback("rsrpsinr.gain", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@
	mov	r8d, 238				; 000000eeH
	mov	DWORD PTR __pyx_lineno, 238		; 000000eeH
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L3_error$16646:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 4957 :   __Pyx_RefNannyFinishContext();
; 4958 :   return NULL;

	xor	eax, eax
	jmp	SHORT $LN23@pyx_pw_8rs@3
$__pyx_L4_argument_unpacking_done$16663:

; 4959 :   __pyx_L4_argument_unpacking_done:;
; 4960 :   __pyx_r = __pyx_pf_8rsrpsinr_6gain(__pyx_self, __pyx_v_alpha, __pyx_v_beta);

	movapd	xmm1, xmm6
	movapd	xmm0, xmm7
	call	__pyx_f_8rsrpsinr_cgain
	call	QWORD PTR __imp_PyFloat_FromDouble
	test	rax, rax
	jne	SHORT $LN49@pyx_pw_8rs@3
	mov	r9, QWORD PTR __pyx_f
	lea	rcx, OFFSET FLAT:??_C@_0O@GOFGDPBG@rsrpsinr?4gain?$AA@
	mov	edx, 4981				; 00001375H
	mov	r8d, 239				; 000000efH
	mov	DWORD PTR __pyx_lineno, 239		; 000000efH
	mov	DWORD PTR __pyx_clineno, 4981		; 00001375H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$43751:
	call	__Pyx_AddTraceback
	jmp	SHORT $__pyx_L0$43752
$LN49@pyx_pw_8rs@3:
	mov	r13, rax
$__pyx_L0$43752:

; 4961 : 
; 4962 :   /* function exit code */
; 4963 :   __Pyx_RefNannyFinishContext();
; 4964 :   return __pyx_r;

	mov	rax, r13
$LN23@pyx_pw_8rs@3:

; 4965 : }

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	ret	0
__pyx_pw_8rsrpsinr_7gain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@KOHCKCFP@numpy?4ndarray?4__getbuffer__?$AA@ ; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_02ELCJHAOL@Zg?$AA@			; `string'
PUBLIC	??_C@_02GAAECDCI@Zd?$AA@			; `string'
PUBLIC	??_C@_02FCDCEBKK@Zf?$AA@			; `string'
PUBLIC	??_C@_01JEJKBAGA@g?$AA@				; `string'
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_01BNIGIBBF@Q?$AA@				; `string'
PUBLIC	??_C@_01IIACKFLH@q?$AA@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_01HHGOMJKL@l?$AA@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_01IGIGCIAN@H?$AA@				; `string'
PUBLIC	??_C@_01BDACAMKP@h?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01OJONOECF@b?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_5numpy_7ndarray___getbuffer__ DD imagerel __pyx_pf_5numpy_7ndarray___getbuffer__
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+432
	DD	imagerel $unwind$__pyx_pf_5numpy_7ndarray___getbuffer__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_pf_5numpy_7ndarray___getbuffer__ DD imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+432
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+608
	DD	imagerel $chain$0$__pyx_pf_5numpy_7ndarray___getbuffer__
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_pf_5numpy_7ndarray___getbuffer__ DD imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+608
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+1840
	DD	imagerel $chain$1$__pyx_pf_5numpy_7ndarray___getbuffer__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_pf_5numpy_7ndarray___getbuffer__ DD 021H
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+432
	DD	imagerel $unwind$__pyx_pf_5numpy_7ndarray___getbuffer__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_pf_5numpy_7ndarray___getbuffer__ DD 020521H
	DD	0ac405H
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__
	DD	imagerel __pyx_pf_5numpy_7ndarray___getbuffer__+432
	DD	imagerel $unwind$__pyx_pf_5numpy_7ndarray___getbuffer__
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_5numpy_7ndarray___getbuffer__ DD 060b01H
	DD	0d007320bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT ??_C@_0BM@KOHCKCFP@numpy?4ndarray?4__getbuffer__?$AA@
CONST	SEGMENT
??_C@_0BM@KOHCKCFP@numpy?4ndarray?4__getbuffer__?$AA@ DB 'numpy.ndarray._'
	DB	'_getbuffer__', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELCJHAOL@Zg?$AA@
CONST	SEGMENT
??_C@_02ELCJHAOL@Zg?$AA@ DB 'Zg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GAAECDCI@Zd?$AA@
CONST	SEGMENT
??_C@_02GAAECDCI@Zd?$AA@ DB 'Zd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCDCEBKK@Zf?$AA@
CONST	SEGMENT
??_C@_02FCDCEBKK@Zf?$AA@ DB 'Zf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JEJKBAGA@g?$AA@
CONST	SEGMENT
??_C@_01JEJKBAGA@g?$AA@ DB 'g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BNIGIBBF@Q?$AA@
CONST	SEGMENT
??_C@_01BNIGIBBF@Q?$AA@ DB 'Q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IIACKFLH@q?$AA@
CONST	SEGMENT
??_C@_01IIACKFLH@q?$AA@ DB 'q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HHGOMJKL@l?$AA@
CONST	SEGMENT
??_C@_01HHGOMJKL@l?$AA@ DB 'l', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IGIGCIAN@H?$AA@
CONST	SEGMENT
??_C@_01IGIGCIAN@H?$AA@ DB 'H', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BDACAMKP@h?$AA@
CONST	SEGMENT
??_C@_01BDACAMKP@h?$AA@ DB 'h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b?$AA@
CONST	SEGMENT
??_C@_01OJONOECF@b?$AA@ DB 'b', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_5numpy_7ndarray___getbuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 80
__pyx_v_offset$ = 88
__pyx_v_info$ = 88
__pyx_v_flags$ = 96
$T43807 = 104
__pyx_pf_5numpy_7ndarray___getbuffer__ PROC		; COMDAT

; 5297 : static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	sub	rsp, 32					; 00000020H

; 5298 :   int __pyx_v_copy_shape;
; 5299 :   int __pyx_v_i;
; 5300 :   int __pyx_v_ndim;
; 5301 :   int __pyx_v_endian_detector;
; 5302 :   int __pyx_v_little_endian;
; 5303 :   int __pyx_v_t;
; 5304 :   char *__pyx_v_f;
; 5305 :   PyArray_Descr *__pyx_v_descr = 0;

	xor	r13d, r13d
	mov	rsi, rdx
	mov	rbx, rcx
	mov	rbp, r13

; 5306 :   int __pyx_v_offset;
; 5307 :   int __pyx_v_hasfields;
; 5308 :   int __pyx_r;
; 5309 :   __Pyx_RefNannyDeclarations
; 5310 :   int __pyx_t_1;
; 5311 :   int __pyx_t_2;
; 5312 :   PyObject *__pyx_t_3 = NULL;
; 5313 :   int __pyx_t_4;
; 5314 :   int __pyx_t_5;
; 5315 :   PyObject *__pyx_t_6 = NULL;

	mov	rdi, r13

; 5316 :   char *__pyx_t_7;
; 5317 :   __Pyx_RefNannySetupContext("__getbuffer__", 0);
; 5318 :   if (__pyx_v_info != NULL) {

	test	rdx, rdx
	je	$LN151@pyx_pf_5nu@2

; 5319 :     __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$__pyx_L4$17044:
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 5320 :     __Pyx_GIVEREF(__pyx_v_info->obj);
; 5321 :   }
; 5322 : 
; 5323 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":220
; 5324 :  *             # of flags
; 5325 :  * 
; 5326 :  *             if info == NULL: return             # <<<<<<<<<<<<<<
; 5327 :  * 
; 5328 :  *             cdef int copy_shape, i, ndim
; 5329 :  */
; 5330 :   __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
; 5331 :   if (__pyx_t_1) {
; 5332 :     __pyx_r = 0;
; 5333 :     goto __pyx_L0;
; 5334 :   }
; 5335 : 
; 5336 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":223
; 5337 :  * 
; 5338 :  *             cdef int copy_shape, i, ndim
; 5339 :  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
; 5340 :  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
; 5341 :  * 
; 5342 :  */
; 5343 :   __pyx_v_endian_detector = 1;
; 5344 : 
; 5345 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":224
; 5346 :  *             cdef int copy_shape, i, ndim
; 5347 :  *             cdef int endian_detector = 1
; 5348 :  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
; 5349 :  * 
; 5350 :  *             ndim = PyArray_NDIM(self)
; 5351 :  */
; 5352 :   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
; 5353 : 
; 5354 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":226
; 5355 :  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
; 5356 :  * 
; 5357 :  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
; 5358 :  * 
; 5359 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 5360 :  */
; 5361 :   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

	mov	edx, DWORD PTR [rcx+24]

; 5362 : 
; 5363 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
; 5364 :  *             ndim = PyArray_NDIM(self)
; 5365 :  * 
; 5366 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
; 5367 :  *                 copy_shape = 1
; 5368 :  *             else:
; 5369 :  */
; 5370 :   __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
; 5371 :   if (__pyx_t_1) {
; 5372 : 
; 5373 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":229
; 5374 :  * 
; 5375 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
; 5376 :  *                 copy_shape = 1             # <<<<<<<<<<<<<<
; 5377 :  *             else:
; 5378 :  *                 copy_shape = 0
; 5379 :  */
; 5380 :     __pyx_v_copy_shape = 1;
; 5381 : 
; 5382 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
; 5383 :  *             ndim = PyArray_NDIM(self)
; 5384 :  * 
; 5385 :  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
; 5386 :  *                 copy_shape = 1
; 5387 :  *             else:
; 5388 :  */
; 5389 :     goto __pyx_L4;
; 5390 :   }
; 5391 : 
; 5392 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
; 5393 :  *                 copy_shape = 1
; 5394 :  *             else:
; 5395 :  *                 copy_shape = 0             # <<<<<<<<<<<<<<
; 5396 :  * 
; 5397 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
; 5398 :  */
; 5399 :   /*else*/ {
; 5400 :     __pyx_v_copy_shape = 0;
; 5401 :   }
; 5402 :   __pyx_L4:;
; 5403 : 
; 5404 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
; 5405 :  *                 copy_shape = 0
; 5406 :  * 
; 5407 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5408 :  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
; 5409 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5410 :  */
; 5411 :   __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);

	mov	ecx, r13d
	mov	eax, r8d
	and	eax, 56					; 00000038H
	cmp	al, 56					; 00000038H
	sete	cl

; 5412 :   if (__pyx_t_2) {

	test	ecx, ecx
	je	$LN129@pyx_pf_5nu@2

; 5413 :   } else {
; 5414 :     __pyx_t_1 = __pyx_t_2;
; 5415 :     goto __pyx_L6_bool_binop_done;
; 5416 :   }
; 5417 : 
; 5418 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":234
; 5419 :  * 
; 5420 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
; 5421 :  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
; 5422 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5423 :  * 
; 5424 :  */
; 5425 :   __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);

	mov	eax, DWORD PTR [rbx+64]
	mov	ecx, r13d
$__pyx_L6_bool_binop_done$17047:
	and	al, 1
	cmp	al, 1
	setne	cl

; 5426 :   __pyx_t_1 = __pyx_t_2;
; 5427 :   __pyx_L6_bool_binop_done:;
; 5428 : 
; 5429 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
; 5430 :  *                 copy_shape = 0
; 5431 :  * 
; 5432 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5433 :  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
; 5434 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5435 :  */
; 5436 :   if (__pyx_t_1) {

	test	ecx, ecx
	je	$LN129@pyx_pf_5nu@2

; 5437 : 
; 5438 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
; 5439 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
; 5440 :  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
; 5441 :  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
; 5442 :  * 
; 5443 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
; 5444 :  */
; 5445 :     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 235, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__3
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN128@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 235		; 000000ebH
	mov	DWORD PTR __pyx_clineno, 5445		; 00001545H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN25@pyx_pf_5nu@2
$LN128@pyx_pf_5nu@2:

; 5446 :     __Pyx_GOTREF(__pyx_t_3);
; 5447 :     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 5448 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN126@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN126@pyx_pf_5nu@2:

; 5449 :     __PYX_ERR(1, 235, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 235		; 000000ebH
	mov	DWORD PTR __pyx_clineno, 5449		; 00001549H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN25@pyx_pf_5nu@2
$LN129@pyx_pf_5nu@2:

; 5450 : 
; 5451 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
; 5452 :  *                 copy_shape = 0
; 5453 :  * 
; 5454 :  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5455 :  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
; 5456 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5457 :  */
; 5458 :   }
; 5459 : 
; 5460 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
; 5461 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5462 :  * 
; 5463 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5464 :  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
; 5465 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")
; 5466 :  */
; 5467 :   __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);

	and	r8d, 88					; 00000058H
	mov	eax, r13d
	cmp	r8b, 88					; 00000058H
	sete	al

; 5468 :   if (__pyx_t_2) {

	test	eax, eax
	je	$LN120@pyx_pf_5nu@2

; 5469 :   } else {
; 5470 :     __pyx_t_1 = __pyx_t_2;
; 5471 :     goto __pyx_L9_bool_binop_done;
; 5472 :   }
; 5473 : 
; 5474 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":238
; 5475 :  * 
; 5476 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
; 5477 :  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
; 5478 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")
; 5479 :  * 
; 5480 :  */
; 5481 :   __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);

	mov	eax, DWORD PTR [rbx+64]
	mov	ecx, r13d
$__pyx_L9_bool_binop_done$17065:
	and	al, 2
	cmp	al, 2
	setne	cl

; 5482 :   __pyx_t_1 = __pyx_t_2;
; 5483 :   __pyx_L9_bool_binop_done:;
; 5484 : 
; 5485 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
; 5486 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5487 :  * 
; 5488 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5489 :  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
; 5490 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")
; 5491 :  */
; 5492 :   if (__pyx_t_1) {

	test	ecx, ecx
	je	$LN120@pyx_pf_5nu@2

; 5493 : 
; 5494 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":239
; 5495 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
; 5496 :  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
; 5497 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
; 5498 :  * 
; 5499 :  *             info.buf = PyArray_DATA(self)
; 5500 :  */
; 5501 :     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 239, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__4
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN119@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 239		; 000000efH
	mov	DWORD PTR __pyx_clineno, 5501		; 0000157dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17052
$LN119@pyx_pf_5nu@2:

; 5502 :     __Pyx_GOTREF(__pyx_t_3);
; 5503 :     __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 5504 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN117@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN117@pyx_pf_5nu@2:

; 5505 :     __PYX_ERR(1, 239, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 239		; 000000efH
	mov	DWORD PTR __pyx_clineno, 5505		; 00001581H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN25@pyx_pf_5nu@2
$LN120@pyx_pf_5nu@2:

; 5506 : 
; 5507 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
; 5508 :  *                 raise ValueError(u"ndarray is not C contiguous")
; 5509 :  * 
; 5510 :  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
; 5511 :  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
; 5512 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")
; 5513 :  */
; 5514 :   }
; 5515 : 
; 5516 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":241
; 5517 :  *                 raise ValueError(u"ndarray is not Fortran contiguous")
; 5518 :  * 
; 5519 :  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
; 5520 :  *             info.ndim = ndim
; 5521 :  *             if copy_shape:
; 5522 :  */
; 5523 :   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

	mov	rax, QWORD PTR [rbx+16]

; 5524 : 
; 5525 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":242
; 5526 :  * 
; 5527 :  *             info.buf = PyArray_DATA(self)
; 5528 :  *             info.ndim = ndim             # <<<<<<<<<<<<<<
; 5529 :  *             if copy_shape:
; 5530 :  *                 # Allocate new buffer for strides and shape info.
; 5531 :  */
; 5532 :   __pyx_v_info->ndim = __pyx_v_ndim;

	mov	DWORD PTR [rsi+36], edx
	mov	QWORD PTR [rsp+80], r12
	mov	QWORD PTR [rsi], rax

; 5533 : 
; 5534 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
; 5535 :  *             info.buf = PyArray_DATA(self)
; 5536 :  *             info.ndim = ndim
; 5537 :  *             if copy_shape:             # <<<<<<<<<<<<<<
; 5538 :  *                 # Allocate new buffer for strides and shape info.
; 5539 :  *                 # This is allocated as one block, strides first.
; 5540 :  */
; 5541 :   __pyx_t_1 = (__pyx_v_copy_shape != 0);
; 5542 :   if (__pyx_t_1) {
; 5543 : 
; 5544 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":246
; 5545 :  *                 # Allocate new buffer for strides and shape info.
; 5546 :  *                 # This is allocated as one block, strides first.
; 5547 :  *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
; 5548 :  *                 info.shape = info.strides + ndim
; 5549 :  *                 for i in range(ndim):
; 5550 :  */
; 5551 :     __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));
; 5552 : 
; 5553 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":247
; 5554 :  *                 # This is allocated as one block, strides first.
; 5555 :  *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
; 5556 :  *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
; 5557 :  *                 for i in range(ndim):
; 5558 :  *                     info.strides[i] = PyArray_STRIDES(self)[i]
; 5559 :  */
; 5560 :     __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);
; 5561 : 
; 5562 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":248
; 5563 :  *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
; 5564 :  *                 info.shape = info.strides + ndim
; 5565 :  *                 for i in range(ndim):             # <<<<<<<<<<<<<<
; 5566 :  *                     info.strides[i] = PyArray_STRIDES(self)[i]
; 5567 :  *                     info.shape[i] = PyArray_DIMS(self)[i]
; 5568 :  */
; 5569 :     __pyx_t_4 = __pyx_v_ndim;
; 5570 :     for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
; 5571 :       __pyx_v_i = __pyx_t_5;
; 5572 : 
; 5573 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":249
; 5574 :  *                 info.shape = info.strides + ndim
; 5575 :  *                 for i in range(ndim):
; 5576 :  *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
; 5577 :  *                     info.shape[i] = PyArray_DIMS(self)[i]
; 5578 :  *             else:
; 5579 :  */
; 5580 :       (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);
; 5581 : 
; 5582 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":250
; 5583 :  *                 for i in range(ndim):
; 5584 :  *                     info.strides[i] = PyArray_STRIDES(self)[i]
; 5585 :  *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
; 5586 :  *             else:
; 5587 :  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
; 5588 :  */
; 5589 :       (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
; 5590 :     }
; 5591 : 
; 5592 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
; 5593 :  *             info.buf = PyArray_DATA(self)
; 5594 :  *             info.ndim = ndim
; 5595 :  *             if copy_shape:             # <<<<<<<<<<<<<<
; 5596 :  *                 # Allocate new buffer for strides and shape info.
; 5597 :  *                 # This is allocated as one block, strides first.
; 5598 :  */
; 5599 :     goto __pyx_L11;
; 5600 :   }
; 5601 : 
; 5602 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":252
; 5603 :  *                     info.shape[i] = PyArray_DIMS(self)[i]
; 5604 :  *             else:
; 5605 :  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
; 5606 :  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
; 5607 :  *             info.suboffsets = NULL
; 5608 :  */
; 5609 :   /*else*/ {
; 5610 :     __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

	mov	rax, QWORD PTR [rbx+40]

; 5611 : 
; 5612 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":253
; 5613 :  *             else:
; 5614 :  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
; 5615 :  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
; 5616 :  *             info.suboffsets = NULL
; 5617 :  *             info.itemsize = PyArray_ITEMSIZE(self)
; 5618 :  */
; 5619 :     __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
; 5620 :   }
; 5621 :   __pyx_L11:;
; 5622 : 
; 5623 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":254
; 5624 :  *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
; 5625 :  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
; 5626 :  *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
; 5627 :  *             info.itemsize = PyArray_ITEMSIZE(self)
; 5628 :  *             info.readonly = not PyArray_ISWRITEABLE(self)
; 5629 :  */
; 5630 :   __pyx_v_info->suboffsets = NULL;
; 5631 : 
; 5632 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":255
; 5633 :  *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
; 5634 :  *             info.suboffsets = NULL
; 5635 :  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
; 5636 :  *             info.readonly = not PyArray_ISWRITEABLE(self)
; 5637 :  * 
; 5638 :  */
; 5639 :   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
; 5640 : 
; 5641 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":256
; 5642 :  *             info.suboffsets = NULL
; 5643 :  *             info.itemsize = PyArray_ITEMSIZE(self)
; 5644 :  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
; 5645 :  * 
; 5646 :  *             cdef int t
; 5647 :  */
; 5648 :   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
; 5649 : 
; 5650 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":259
; 5651 :  * 
; 5652 :  *             cdef int t
; 5653 :  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
; 5654 :  *             cdef dtype descr = self.descr
; 5655 :  *             cdef int offset
; 5656 :  */
; 5657 :   __pyx_v_f = NULL;
; 5658 : 
; 5659 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":260
; 5660 :  *             cdef int t
; 5661 :  *             cdef char* f = NULL
; 5662 :  *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
; 5663 :  *             cdef int offset
; 5664 :  * 
; 5665 :  */
; 5666 :   __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
; 5667 :   __Pyx_INCREF(__pyx_t_3);
; 5668 :   __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
; 5669 :   __pyx_t_3 = 0;
; 5670 : 
; 5671 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":263
; 5672 :  *             cdef int offset
; 5673 :  * 
; 5674 :  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
; 5675 :  * 
; 5676 :  *             if not hasfields and not copy_shape:
; 5677 :  */
; 5678 :   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

	mov	r12d, r13d
	mov	QWORD PTR [rsi+56], rax
	mov	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+64], r13
	mov	QWORD PTR [rsi+48], rax
	mov	rax, QWORD PTR [rbx+56]
$__pyx_L11$17091:
	movsxd	rcx, DWORD PTR [rax+32]
	mov	eax, r13d
	mov	QWORD PTR [rsi+24], rcx
	bt	DWORD PTR [rbx+64], 10
	setae	al
	mov	DWORD PTR [rsi+32], eax
	mov	rbp, QWORD PTR [rbx+56]

; 5679 : 
; 5680 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
; 5681 :  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
; 5682 :  * 
; 5683 :  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
; 5684 :  *                 # do not call releasebuffer
; 5685 :  *                 info.obj = None
; 5686 :  */
; 5687 :   __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);

	mov	eax, r13d
	inc	QWORD PTR [rbp]
	cmp	QWORD PTR [rbp+56], rdi
	setne	r12b
	test	r12d, r12d
	sete	al

; 5688 :   if (__pyx_t_2) {

	test	eax, eax

; 5689 :   } else {
; 5690 :     __pyx_t_1 = __pyx_t_2;
; 5691 :     goto __pyx_L15_bool_binop_done;
; 5692 :   }
; 5693 :   __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
; 5694 :   __pyx_t_1 = __pyx_t_2;
; 5695 :   __pyx_L15_bool_binop_done:;
; 5696 :   if (__pyx_t_1) {

	je	SHORT $LN107@pyx_pf_5nu@2

; 5697 : 
; 5698 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":267
; 5699 :  *             if not hasfields and not copy_shape:
; 5700 :  *                 # do not call releasebuffer
; 5701 :  *                 info.obj = None             # <<<<<<<<<<<<<<
; 5702 :  *             else:
; 5703 :  *                 # need to call releasebuffer
; 5704 :  */
; 5705 :     __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 5706 :     __Pyx_GIVEREF(Py_None);
; 5707 :     __Pyx_GOTREF(__pyx_v_info->obj);
; 5708 :     __Pyx_DECREF(__pyx_v_info->obj);

	mov	rax, QWORD PTR [rsi+8]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rsi+8]
	cmp	QWORD PTR [rcx], rdi
	jne	SHORT $LN105@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN105@pyx_pf_5nu@2:

; 5709 :     __pyx_v_info->obj = Py_None;

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rsi+8], rax

; 5710 : 
; 5711 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
; 5712 :  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
; 5713 :  * 
; 5714 :  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
; 5715 :  *                 # do not call releasebuffer
; 5716 :  *                 info.obj = None
; 5717 :  */
; 5718 :     goto __pyx_L14;

	jmp	SHORT $__pyx_L14$17120
$LN107@pyx_pf_5nu@2:

; 5719 :   }
; 5720 : 
; 5721 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
; 5722 :  *             else:
; 5723 :  *                 # need to call releasebuffer
; 5724 :  *                 info.obj = self             # <<<<<<<<<<<<<<
; 5725 :  * 
; 5726 :  *             if not hasfields:
; 5727 :  */
; 5728 :   /*else*/ {
; 5729 :     __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rbx]

; 5730 :     __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
; 5731 :     __Pyx_GOTREF(__pyx_v_info->obj);
; 5732 :     __Pyx_DECREF(__pyx_v_info->obj);

	mov	rax, QWORD PTR [rsi+8]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rsi+8]
	cmp	QWORD PTR [rcx], rdi
	jne	SHORT $LN100@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN100@pyx_pf_5nu@2:

; 5733 :     __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

	mov	QWORD PTR [rsi+8], rbx
$__pyx_L14$17120:

; 5734 :   }
; 5735 :   __pyx_L14:;
; 5736 : 
; 5737 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
; 5738 :  *                 info.obj = self
; 5739 :  * 
; 5740 :  *             if not hasfields:             # <<<<<<<<<<<<<<
; 5741 :  *                 t = descr.type_num
; 5742 :  *                 if ((descr.byteorder == c'>' and little_endian) or
; 5743 :  */
; 5744 :   __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);

	test	r12d, r12d
	mov	r12, QWORD PTR [rsp+80]

; 5745 :   if (__pyx_t_1) {

	jne	$LN96@pyx_pf_5nu@2

; 5746 : 
; 5747 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":273
; 5748 :  * 
; 5749 :  *             if not hasfields:
; 5750 :  *                 t = descr.type_num             # <<<<<<<<<<<<<<
; 5751 :  *                 if ((descr.byteorder == c'>' and little_endian) or
; 5752 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5753 :  */
; 5754 :     __pyx_t_4 = __pyx_v_descr->type_num;
; 5755 :     __pyx_v_t = __pyx_t_4;
; 5756 : 
; 5757 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
; 5758 :  *             if not hasfields:
; 5759 :  *                 t = descr.type_num
; 5760 :  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 5761 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5762 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5763 :  */
; 5764 :     __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);

	movzx	ecx, BYTE PTR [rbp+26]
	mov	edx, DWORD PTR [rbp+28]
	cmp	cl, 62					; 0000003eH

; 5765 :     if (!__pyx_t_2) {
; 5766 :       goto __pyx_L20_next_or;
; 5767 :     } else {
; 5768 :     }
; 5769 :     __pyx_t_2 = (__pyx_v_little_endian != 0);
; 5770 :     if (!__pyx_t_2) {

	je	$LN93@pyx_pf_5nu@2

; 5815 : 
; 5816 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
; 5817 :  *             if not hasfields:
; 5818 :  *                 t = descr.type_num
; 5819 :  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 5820 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5821 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5822 :  */
; 5823 :     }
; 5824 : 
; 5825 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":277
; 5826 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5827 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5828 :  *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
; 5829 :  *                 elif t == NPY_UBYTE:       f = "B"
; 5830 :  *                 elif t == NPY_SHORT:       f = "h"
; 5831 :  */
; 5832 :     switch (__pyx_v_t) {

	lea	eax, DWORD PTR [rdx-1]
$__pyx_L20_next_or$17136:
	cmp	eax, 16
	ja	$LN63@pyx_pf_5nu@2
	lea	r8, OFFSET FLAT:__ImageBase
	cdqe
	mov	ecx, DWORD PTR $LN154@pyx_pf_5nu@2[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN80@pyx_pf_5nu@2:

; 5833 :       case NPY_BYTE:
; 5834 :       __pyx_v_f = ((char *)"b");

	lea	rax, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN79@pyx_pf_5nu@2:

; 5835 :       break;
; 5836 : 
; 5837 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
; 5838 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5839 :  *                 if   t == NPY_BYTE:        f = "b"
; 5840 :  *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
; 5841 :  *                 elif t == NPY_SHORT:       f = "h"
; 5842 :  *                 elif t == NPY_USHORT:      f = "H"
; 5843 :  */
; 5844 :       case NPY_UBYTE:
; 5845 :       __pyx_v_f = ((char *)"B");

	lea	rax, OFFSET FLAT:??_C@_01HMGJMAIH@B?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN78@pyx_pf_5nu@2:

; 5846 :       break;
; 5847 : 
; 5848 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
; 5849 :  *                 if   t == NPY_BYTE:        f = "b"
; 5850 :  *                 elif t == NPY_UBYTE:       f = "B"
; 5851 :  *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
; 5852 :  *                 elif t == NPY_USHORT:      f = "H"
; 5853 :  *                 elif t == NPY_INT:         f = "i"
; 5854 :  */
; 5855 :       case NPY_SHORT:
; 5856 :       __pyx_v_f = ((char *)"h");

	lea	rax, OFFSET FLAT:??_C@_01BDACAMKP@h?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN77@pyx_pf_5nu@2:

; 5857 :       break;
; 5858 : 
; 5859 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
; 5860 :  *                 elif t == NPY_UBYTE:       f = "B"
; 5861 :  *                 elif t == NPY_SHORT:       f = "h"
; 5862 :  *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
; 5863 :  *                 elif t == NPY_INT:         f = "i"
; 5864 :  *                 elif t == NPY_UINT:        f = "I"
; 5865 :  */
; 5866 :       case NPY_USHORT:
; 5867 :       __pyx_v_f = ((char *)"H");

	lea	rax, OFFSET FLAT:??_C@_01IGIGCIAN@H?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN76@pyx_pf_5nu@2:

; 5868 :       break;
; 5869 : 
; 5870 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":281
; 5871 :  *                 elif t == NPY_SHORT:       f = "h"
; 5872 :  *                 elif t == NPY_USHORT:      f = "H"
; 5873 :  *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
; 5874 :  *                 elif t == NPY_UINT:        f = "I"
; 5875 :  *                 elif t == NPY_LONG:        f = "l"
; 5876 :  */
; 5877 :       case NPY_INT:
; 5878 :       __pyx_v_f = ((char *)"i");

	lea	rax, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN75@pyx_pf_5nu@2:

; 5879 :       break;
; 5880 : 
; 5881 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":282
; 5882 :  *                 elif t == NPY_USHORT:      f = "H"
; 5883 :  *                 elif t == NPY_INT:         f = "i"
; 5884 :  *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
; 5885 :  *                 elif t == NPY_LONG:        f = "l"
; 5886 :  *                 elif t == NPY_ULONG:       f = "L"
; 5887 :  */
; 5888 :       case NPY_UINT:
; 5889 :       __pyx_v_f = ((char *)"I");

	lea	rax, OFFSET FLAT:??_C@_01JPJNBJEM@I?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN74@pyx_pf_5nu@2:

; 5890 :       break;
; 5891 : 
; 5892 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
; 5893 :  *                 elif t == NPY_INT:         f = "i"
; 5894 :  *                 elif t == NPY_UINT:        f = "I"
; 5895 :  *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
; 5896 :  *                 elif t == NPY_ULONG:       f = "L"
; 5897 :  *                 elif t == NPY_LONGLONG:    f = "q"
; 5898 :  */
; 5899 :       case NPY_LONG:
; 5900 :       __pyx_v_f = ((char *)"l");

	lea	rax, OFFSET FLAT:??_C@_01HHGOMJKL@l?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN73@pyx_pf_5nu@2:

; 5901 :       break;
; 5902 : 
; 5903 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
; 5904 :  *                 elif t == NPY_UINT:        f = "I"
; 5905 :  *                 elif t == NPY_LONG:        f = "l"
; 5906 :  *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
; 5907 :  *                 elif t == NPY_LONGLONG:    f = "q"
; 5908 :  *                 elif t == NPY_ULONGLONG:   f = "Q"
; 5909 :  */
; 5910 :       case NPY_ULONG:
; 5911 :       __pyx_v_f = ((char *)"L");

	lea	rax, OFFSET FLAT:??_C@_01OCOKONAJ@L?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN72@pyx_pf_5nu@2:

; 5912 :       break;
; 5913 : 
; 5914 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
; 5915 :  *                 elif t == NPY_LONG:        f = "l"
; 5916 :  *                 elif t == NPY_ULONG:       f = "L"
; 5917 :  *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
; 5918 :  *                 elif t == NPY_ULONGLONG:   f = "Q"
; 5919 :  *                 elif t == NPY_FLOAT:       f = "f"
; 5920 :  */
; 5921 :       case NPY_LONGLONG:
; 5922 :       __pyx_v_f = ((char *)"q");

	lea	rax, OFFSET FLAT:??_C@_01IIACKFLH@q?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN71@pyx_pf_5nu@2:

; 5923 :       break;
; 5924 : 
; 5925 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
; 5926 :  *                 elif t == NPY_ULONG:       f = "L"
; 5927 :  *                 elif t == NPY_LONGLONG:    f = "q"
; 5928 :  *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
; 5929 :  *                 elif t == NPY_FLOAT:       f = "f"
; 5930 :  *                 elif t == NPY_DOUBLE:      f = "d"
; 5931 :  */
; 5932 :       case NPY_ULONGLONG:
; 5933 :       __pyx_v_f = ((char *)"Q");

	lea	rax, OFFSET FLAT:??_C@_01BNIGIBBF@Q?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN70@pyx_pf_5nu@2:

; 5934 :       break;
; 5935 : 
; 5936 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
; 5937 :  *                 elif t == NPY_LONGLONG:    f = "q"
; 5938 :  *                 elif t == NPY_ULONGLONG:   f = "Q"
; 5939 :  *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
; 5940 :  *                 elif t == NPY_DOUBLE:      f = "d"
; 5941 :  *                 elif t == NPY_LONGDOUBLE:  f = "g"
; 5942 :  */
; 5943 :       case NPY_FLOAT:
; 5944 :       __pyx_v_f = ((char *)"f");

	lea	rax, OFFSET FLAT:??_C@_01INIBCBCB@f?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN69@pyx_pf_5nu@2:

; 5945 :       break;
; 5946 : 
; 5947 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":288
; 5948 :  *                 elif t == NPY_ULONGLONG:   f = "Q"
; 5949 :  *                 elif t == NPY_FLOAT:       f = "f"
; 5950 :  *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
; 5951 :  *                 elif t == NPY_LONGDOUBLE:  f = "g"
; 5952 :  *                 elif t == NPY_CFLOAT:      f = "Zf"
; 5953 :  */
; 5954 :       case NPY_DOUBLE:
; 5955 :       __pyx_v_f = ((char *)"d");

	lea	rax, OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN68@pyx_pf_5nu@2:

; 5956 :       break;
; 5957 : 
; 5958 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
; 5959 :  *                 elif t == NPY_FLOAT:       f = "f"
; 5960 :  *                 elif t == NPY_DOUBLE:      f = "d"
; 5961 :  *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
; 5962 :  *                 elif t == NPY_CFLOAT:      f = "Zf"
; 5963 :  *                 elif t == NPY_CDOUBLE:     f = "Zd"
; 5964 :  */
; 5965 :       case NPY_LONGDOUBLE:
; 5966 :       __pyx_v_f = ((char *)"g");

	lea	rax, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN67@pyx_pf_5nu@2:

; 5967 :       break;
; 5968 : 
; 5969 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
; 5970 :  *                 elif t == NPY_DOUBLE:      f = "d"
; 5971 :  *                 elif t == NPY_LONGDOUBLE:  f = "g"
; 5972 :  *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
; 5973 :  *                 elif t == NPY_CDOUBLE:     f = "Zd"
; 5974 :  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
; 5975 :  */
; 5976 :       case NPY_CFLOAT:
; 5977 :       __pyx_v_f = ((char *)"Zf");

	lea	rax, OFFSET FLAT:??_C@_02FCDCEBKK@Zf?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN66@pyx_pf_5nu@2:

; 5978 :       break;
; 5979 : 
; 5980 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
; 5981 :  *                 elif t == NPY_LONGDOUBLE:  f = "g"
; 5982 :  *                 elif t == NPY_CFLOAT:      f = "Zf"
; 5983 :  *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
; 5984 :  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
; 5985 :  *                 elif t == NPY_OBJECT:      f = "O"
; 5986 :  */
; 5987 :       case NPY_CDOUBLE:
; 5988 :       __pyx_v_f = ((char *)"Zd");

	lea	rax, OFFSET FLAT:??_C@_02GAAECDCI@Zd?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN65@pyx_pf_5nu@2:

; 5989 :       break;
; 5990 : 
; 5991 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
; 5992 :  *                 elif t == NPY_CFLOAT:      f = "Zf"
; 5993 :  *                 elif t == NPY_CDOUBLE:     f = "Zd"
; 5994 :  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
; 5995 :  *                 elif t == NPY_OBJECT:      f = "O"
; 5996 :  *                 else:
; 5997 :  */
; 5998 :       case NPY_CLONGDOUBLE:
; 5999 :       __pyx_v_f = ((char *)"Zg");

	lea	rax, OFFSET FLAT:??_C@_02ELCJHAOL@Zg?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN64@pyx_pf_5nu@2:

; 6000 :       break;
; 6001 : 
; 6002 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
; 6003 :  *                 elif t == NPY_CDOUBLE:     f = "Zd"
; 6004 :  *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
; 6005 :  *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
; 6006 :  *                 else:
; 6007 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6008 :  */
; 6009 :       case NPY_OBJECT:
; 6010 :       __pyx_v_f = ((char *)"O");

	lea	rax, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@

; 6037 :       break;
; 6038 :     }
; 6039 : 
; 6040 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
; 6041 :  *                 else:
; 6042 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6043 :  *                 info.format = f             # <<<<<<<<<<<<<<
; 6044 :  *                 return
; 6045 :  *             else:
; 6046 :  */
; 6047 :     __pyx_v_info->format = __pyx_v_f;
; 6048 : 
; 6049 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
; 6050 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
; 6051 :  *                 info.format = f
; 6052 :  *                 return             # <<<<<<<<<<<<<<
; 6053 :  *             else:
; 6054 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6055 :  */
; 6056 :     __pyx_r = 0;

	mov	ebx, r13d
	mov	QWORD PTR [rsi+40], rax

; 6057 :     goto __pyx_L0;

	jmp	$__pyx_L0$17038
$LN63@pyx_pf_5nu@2:

; 6011 :       break;
; 6012 :       default:
; 6013 : 
; 6014 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":295
; 6015 :  *                 elif t == NPY_OBJECT:      f = "O"
; 6016 :  *                 else:
; 6017 :  *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
; 6018 :  *                 info.format = f
; 6019 :  *                 return
; 6020 :  */
; 6021 :       __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 295, __pyx_L1_error)

	mov	ecx, edx
	mov	DWORD PTR $T43807[rsp], edx
	call	QWORD PTR __imp_PyInt_FromLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN62@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 295		; 00000127H
	mov	DWORD PTR __pyx_clineno, 6021		; 00001785H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17052
$LN62@pyx_pf_5nu@2:

; 6022 :       __Pyx_GOTREF(__pyx_t_3);
; 6023 :       __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 295, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_kp_u_unknown_dtype_code_in_numpy_pxd
	mov	rdx, rax
	call	QWORD PTR __imp_PyUnicodeUCS2_Format
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN60@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 295		; 00000127H
	mov	DWORD PTR __pyx_clineno, 6023		; 00001787H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17052
$LN60@pyx_pf_5nu@2:

; 6024 :       __Pyx_GOTREF(__pyx_t_6);
; 6025 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN59@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN59@pyx_pf_5nu@2:

; 6026 :       __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 295, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN55@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 295		; 00000127H
	mov	DWORD PTR __pyx_clineno, 6026		; 0000178aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17052
$LN55@pyx_pf_5nu@2:

; 6027 :       __Pyx_GOTREF(__pyx_t_3);
; 6028 :       __Pyx_GIVEREF(__pyx_t_6);
; 6029 :       PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
; 6030 :       __pyx_t_6 = 0;
; 6031 :       __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 295, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	mov	rdx, rax
	mov	QWORD PTR [rax+24], rdi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN53@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 295		; 00000127H
	mov	DWORD PTR __pyx_clineno, 6031		; 0000178fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$17052
$LN53@pyx_pf_5nu@2:

; 6032 :       __Pyx_GOTREF(__pyx_t_6);
; 6033 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN52@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN52@pyx_pf_5nu@2:

; 6034 :       __Pyx_Raise(__pyx_t_6, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rdi
	call	__Pyx_Raise

; 6035 :       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN47@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN47@pyx_pf_5nu@2:

; 6036 :       __PYX_ERR(1, 295, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 295		; 00000127H
	mov	DWORD PTR __pyx_clineno, 6036		; 00001794H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN25@pyx_pf_5nu@2
$LN93@pyx_pf_5nu@2:

; 5771 :     } else {
; 5772 :       __pyx_t_1 = __pyx_t_2;
; 5773 :       goto __pyx_L19_bool_binop_done;
; 5774 :     }
; 5775 :     __pyx_L20_next_or:;
; 5776 : 
; 5777 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
; 5778 :  *                 t = descr.type_num
; 5779 :  *                 if ((descr.byteorder == c'>' and little_endian) or
; 5780 :  *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
; 5781 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5782 :  *                 if   t == NPY_BYTE:        f = "b"
; 5783 :  */
; 5784 :     __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
; 5785 :     if (__pyx_t_2) {
; 5786 :     } else {
; 5787 :       __pyx_t_1 = __pyx_t_2;
; 5788 :       goto __pyx_L19_bool_binop_done;
; 5789 :     }
; 5790 :     __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
; 5791 :     __pyx_t_1 = __pyx_t_2;
; 5792 :     __pyx_L19_bool_binop_done:;
; 5793 : 
; 5794 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
; 5795 :  *             if not hasfields:
; 5796 :  *                 t = descr.type_num
; 5797 :  *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
; 5798 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5799 :  *                     raise ValueError(u"Non-native byte order not supported")
; 5800 :  */
; 5801 :     if (__pyx_t_1) {
; 5802 : 
; 5803 :       /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
; 5804 :  *                 if ((descr.byteorder == c'>' and little_endian) or
; 5805 :  *                     (descr.byteorder == c'<' and not little_endian)):
; 5806 :  *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
; 5807 :  *                 if   t == NPY_BYTE:        f = "b"
; 5808 :  *                 elif t == NPY_UBYTE:       f = "B"
; 5809 :  */
; 5810 :       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 276, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__5
	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN88@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 276		; 00000114H
	mov	DWORD PTR __pyx_clineno, 5810		; 000016b2H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$17052:

; 6126 :   goto __pyx_L0;
; 6127 :   __pyx_L1_error:;
; 6128 :   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN35@pyx_pf_5nu@2
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN35@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN35@pyx_pf_5nu@2:

; 6129 :   __Pyx_XDECREF(__pyx_t_6);

	test	rdi, rdi
	je	$LN25@pyx_pf_5nu@2
	add	QWORD PTR [rdi], -1
	jne	$LN25@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
	jmp	$LN25@pyx_pf_5nu@2
$LN88@pyx_pf_5nu@2:

; 5811 :       __Pyx_GOTREF(__pyx_t_3);
; 5812 :       __Pyx_Raise(__pyx_t_3, 0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	__Pyx_Raise

; 5813 :       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN86@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN86@pyx_pf_5nu@2:

; 5814 :       __PYX_ERR(1, 276, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 276		; 00000114H
	mov	DWORD PTR __pyx_clineno, 5814		; 000016b6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN25@pyx_pf_5nu@2
$LN96@pyx_pf_5nu@2:

; 6058 : 
; 6059 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
; 6060 :  *                 info.obj = self
; 6061 :  * 
; 6062 :  *             if not hasfields:             # <<<<<<<<<<<<<<
; 6063 :  *                 t = descr.type_num
; 6064 :  *                 if ((descr.byteorder == c'>' and little_endian) or
; 6065 :  */
; 6066 :   }
; 6067 : 
; 6068 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":299
; 6069 :  *                 return
; 6070 :  *             else:
; 6071 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
; 6072 :  *                 info.format[0] = c'^' # Native data types, manual alignment
; 6073 :  *                 offset = 0
; 6074 :  */
; 6075 :   /*else*/ {
; 6076 :     __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

	mov	ecx, 255				; 000000ffH
	call	QWORD PTR __imp_PyObject_Malloc

; 6077 : 
; 6078 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
; 6079 :  *             else:
; 6080 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6081 :  *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
; 6082 :  *                 offset = 0
; 6083 :  *                 f = _util_dtypestring(descr, info.format + 1,
; 6084 :  */
; 6085 :     (__pyx_v_info->format[0]) = '^';
; 6086 : 
; 6087 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":301
; 6088 :  *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
; 6089 :  *                 info.format[0] = c'^' # Native data types, manual alignment
; 6090 :  *                 offset = 0             # <<<<<<<<<<<<<<
; 6091 :  *                 f = _util_dtypestring(descr, info.format + 1,
; 6092 :  *                                       info.format + _buffer_format_string_len,
; 6093 :  */
; 6094 :     __pyx_v_offset = 0;
; 6095 : 
; 6096 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
; 6097 :  *                 info.format[0] = c'^' # Native data types, manual alignment
; 6098 :  *                 offset = 0
; 6099 :  *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
; 6100 :  *                                       info.format + _buffer_format_string_len,
; 6101 :  *                                       &offset)
; 6102 :  */
; 6103 :     __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 302, __pyx_L1_error)

	lea	r9, QWORD PTR __pyx_v_offset$[rsp]
	mov	rcx, rbp
	mov	QWORD PTR [rsi+40], rax
	mov	BYTE PTR [rax], 94			; 0000005eH
	mov	rdx, QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rdx+255]
	inc	rdx
	mov	DWORD PTR __pyx_v_offset$[rsp], r13d
	call	__pyx_f_5numpy__util_dtypestring
	test	rax, rax
	jne	SHORT $LN43@pyx_pf_5nu@2
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 302		; 0000012eH
	mov	DWORD PTR __pyx_clineno, 6103		; 000017d7H
	mov	QWORD PTR __pyx_filename, rax
$LN25@pyx_pf_5nu@2:

; 6130 :   __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BM@KOHCKCFP@numpy?4ndarray?4__getbuffer__?$AA@
	call	__Pyx_AddTraceback

; 6131 :   __pyx_r = -1;
; 6132 :   if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

	mov	rax, QWORD PTR [rsi+8]
	or	ebx, -1
	test	rax, rax
	je	SHORT $__pyx_L2$17298

; 6133 :     __Pyx_GOTREF(__pyx_v_info->obj);
; 6134 :     __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rsi+8]
	cmp	QWORD PTR [rcx], r13
	jne	SHORT $LN20@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN20@pyx_pf_5nu@2:
	mov	QWORD PTR [rsi+8], r13

; 6135 :   }
; 6136 :   goto __pyx_L2;

	jmp	SHORT $__pyx_L2$17298
$LN43@pyx_pf_5nu@2:

; 6104 :     __pyx_v_f = __pyx_t_7;
; 6105 : 
; 6106 :     /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
; 6107 :  *                                       info.format + _buffer_format_string_len,
; 6108 :  *                                       &offset)
; 6109 :  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
; 6110 :  * 
; 6111 :  *         def __releasebuffer__(ndarray self, Py_buffer* info):
; 6112 :  */
; 6113 :     (__pyx_v_f[0]) = '\x00';

	mov	BYTE PTR [rax], dil

; 6114 :   }
; 6115 : 
; 6116 :   /* "C:/Python27/lib/site-packages/Cython/Includes/numpy/__init__.pxd":214
; 6117 :  *         # experimental exception made for __getbuffer__ and __releasebuffer__
; 6118 :  *         # -- the details of this may change.
; 6119 :  *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
; 6120 :  *             # This implementation of getbuffer is geared towards Cython
; 6121 :  *             # requirements, and does not yet fullfill the PEP.
; 6122 :  */
; 6123 : 
; 6124 :   /* function exit code */
; 6125 :   __pyx_r = 0;

	mov	ebx, r13d
$__pyx_L0$17038:

; 6137 :   __pyx_L0:;
; 6138 :   if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	cmp	QWORD PTR [rsi+8], rax
	jne	SHORT $__pyx_L2$17298

; 6139 :     __Pyx_GOTREF(Py_None);
; 6140 :     __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR __imp__Py_NoneStruct
	cmp	QWORD PTR [rcx], rdi
	jne	SHORT $LN14@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN14@pyx_pf_5nu@2:
	mov	QWORD PTR [rsi+8], r13
$__pyx_L2$17298:

; 6141 :   }
; 6142 :   __pyx_L2:;
; 6143 :   __Pyx_XDECREF((PyObject *)__pyx_v_descr);

	test	rbp, rbp
	je	SHORT $LN4@pyx_pf_5nu@2
	add	QWORD PTR [rbp], -1
	jne	SHORT $LN4@pyx_pf_5nu@2
	mov	rax, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	QWORD PTR [rax+48]
$LN4@pyx_pf_5nu@2:

; 6144 :   __Pyx_RefNannyFinishContext();
; 6145 :   return __pyx_r;

	mov	eax, ebx

; 6146 : }

	add	rsp, 32					; 00000020H
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN151@pyx_pf_5nu@2:

; 6144 :   __Pyx_RefNannyFinishContext();
; 6145 :   return __pyx_r;

	mov	eax, r13d

; 6146 : }

	add	rsp, 32					; 00000020H
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN154@pyx_pf_5nu@2:
	DD	$LN80@pyx_pf_5nu@2
	DD	$LN79@pyx_pf_5nu@2
	DD	$LN78@pyx_pf_5nu@2
	DD	$LN77@pyx_pf_5nu@2
	DD	$LN76@pyx_pf_5nu@2
	DD	$LN75@pyx_pf_5nu@2
	DD	$LN74@pyx_pf_5nu@2
	DD	$LN73@pyx_pf_5nu@2
	DD	$LN72@pyx_pf_5nu@2
	DD	$LN71@pyx_pf_5nu@2
	DD	$LN70@pyx_pf_5nu@2
	DD	$LN69@pyx_pf_5nu@2
	DD	$LN68@pyx_pf_5nu@2
	DD	$LN67@pyx_pf_5nu@2
	DD	$LN66@pyx_pf_5nu@2
	DD	$LN65@pyx_pf_5nu@2
	DD	$LN64@pyx_pf_5nu@2
__pyx_pf_5numpy_7ndarray___getbuffer__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IFDOHMKM@Argument?5?8?$CF?4200s?8?5must?5not?5be?5No@ ; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_09KBIJAOEO@__cinit__?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_array___cinit__ DD imagerel __pyx_array___cinit__
	DD	imagerel __pyx_array___cinit__+1404
	DD	imagerel $unwind$__pyx_array___cinit__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_array___cinit__ DD 0a1e01H
	DD	017341eH
	DD	0f01ad21eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT ??_C@_0CD@IFDOHMKM@Argument?5?8?$CF?4200s?8?5must?5not?5be?5No@
CONST	SEGMENT
??_C@_0CD@IFDOHMKM@Argument?5?8?$CF?4200s?8?5must?5not?5be?5No@ DB 'Argum'
	DB	'ent ''%.200s'' must not be None', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBIJAOEO@__cinit__?$AA@
CONST	SEGMENT
??_C@_09KBIJAOEO@__cinit__?$AA@ DB '__cinit__', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_array___cinit__
_TEXT	SEGMENT
values$19094 = 64
__pyx_v_self$ = 176
__pyx_args$ = 184
__pyx_kwds$ = 192
pos_args$1$ = 200
__pyx_array___cinit__ PROC				; COMDAT

; 7868 : static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 112				; 00000070H

; 7869 :   PyObject *__pyx_v_shape = 0;
; 7870 :   Py_ssize_t __pyx_v_itemsize;
; 7871 :   PyObject *__pyx_v_format = 0;
; 7872 :   PyObject *__pyx_v_mode = 0;
; 7873 :   int __pyx_v_allocate_buffer;
; 7874 :   int __pyx_r;
; 7875 :   __Pyx_RefNannyDeclarations
; 7876 :   __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
; 7877 :   {
; 7878 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
; 7879 :     PyObject* values[5] = {0,0,0,0,0};
; 7880 :     values[3] = ((PyObject *)__pyx_n_s_c);

	mov	r14, QWORD PTR __pyx_n_s_c
	xor	r15d, r15d
	mov	rbx, rdx
	mov	QWORD PTR [rax-80], r14
	mov	QWORD PTR [rax-104], r15
	mov	QWORD PTR [rax-96], r15
	mov	QWORD PTR [rax-88], r15
	mov	QWORD PTR [rax-72], r15

; 7881 :     if (unlikely(__pyx_kwds)) {
; 7882 :       Py_ssize_t kw_args;
; 7883 :       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	rax, QWORD PTR [rdx+16]
	mov	r13, r15
	mov	rbp, r15
	mov	r12, r15
	mov	rsi, r15
	test	r8, r8
	je	$LN42@pyx_array_@9
	mov	QWORD PTR pos_args$1$[rsp], rax

; 7884 :       switch (pos_args) {

	cmp	rax, 5
	ja	$__pyx_L5_argtuple_error$19116
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN78@pyx_array_@9[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN39@pyx_array_@9:

; 7885 :         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

	mov	rsi, QWORD PTR [rdx+56]
	mov	QWORD PTR values$19094[rsp+32], rsi
$LN38@pyx_array_@9:

; 7886 :         CYTHON_FALLTHROUGH;
; 7887 :         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

	mov	r14, QWORD PTR [rdx+48]
	mov	QWORD PTR values$19094[rsp+24], r14
$LN37@pyx_array_@9:

; 7888 :         CYTHON_FALLTHROUGH;
; 7889 :         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	r12, QWORD PTR [rdx+40]
	mov	QWORD PTR values$19094[rsp+16], r12
$LN36@pyx_array_@9:

; 7890 :         CYTHON_FALLTHROUGH;
; 7891 :         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbp, QWORD PTR [rdx+32]
	mov	QWORD PTR values$19094[rsp+8], rbp
$LN35@pyx_array_@9:

; 7892 :         CYTHON_FALLTHROUGH;
; 7893 :         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	r13, QWORD PTR [rdx+24]
	mov	QWORD PTR values$19094[rsp], r13
$LN34@pyx_array_@9:

; 7894 :         CYTHON_FALLTHROUGH;
; 7895 :         case  0: break;
; 7896 :         default: goto __pyx_L5_argtuple_error;
; 7897 :       }
; 7898 :       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size

; 7899 :       switch (pos_args) {

	mov	rcx, QWORD PTR pos_args$1$[rsp]
	mov	rdi, rax
	mov	rax, rcx
	test	rcx, rcx
	je	SHORT $LN30@pyx_array_@9
	sub	rax, 1
	je	SHORT $LN28@pyx_array_@9
	sub	rax, 1
	mov	rbx, QWORD PTR __pyx_kwds$[rsp]
	je	SHORT $LN25@pyx_array_@9
	sub	rax, 1
	je	$LN22@pyx_array_@9
	cmp	rax, 1
	je	$LN19@pyx_array_@9
	jmp	$LN16@pyx_array_@9
$LN30@pyx_array_@9:

; 7900 :         case  0:
; 7901 :         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_shape
	mov	rcx, QWORD PTR __pyx_kwds$[rsp]
	call	QWORD PTR __imp_PyDict_GetItem
	mov	r13, rax
	mov	QWORD PTR values$19094[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$19116
	dec	rdi
$LN28@pyx_array_@9:

; 7902 :         else goto __pyx_L5_argtuple_error;
; 7903 :         CYTHON_FALLTHROUGH;
; 7904 :         case  1:
; 7905 :         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;

	mov	rbx, QWORD PTR __pyx_kwds$[rsp]
	mov	rdx, QWORD PTR __pyx_n_s_itemsize
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbp, rax
	mov	QWORD PTR values$19094[rsp+8], rax
	test	rax, rax
	je	$LN26@pyx_array_@9
	dec	rdi
$LN25@pyx_array_@9:

; 7908 :         }
; 7909 :         CYTHON_FALLTHROUGH;
; 7910 :         case  2:
; 7911 :         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_format
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_GetItem
	mov	r12, rax
	mov	QWORD PTR values$19094[rsp+16], rax
	test	rax, rax
	je	$LN23@pyx_array_@9
	dec	rdi
$LN22@pyx_array_@9:

; 7914 :         }
; 7915 :         CYTHON_FALLTHROUGH;
; 7916 :         case  3:
; 7917 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN11@pyx_array_@9

; 7918 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);

	mov	rdx, QWORD PTR __pyx_n_s_mode
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_GetItem

; 7919 :           if (value) { values[3] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN19@pyx_array_@9
	mov	r14, rax
	mov	QWORD PTR values$19094[rsp+24], rax
	dec	rdi
$LN19@pyx_array_@9:

; 7920 :         }
; 7921 :         CYTHON_FALLTHROUGH;
; 7922 :         case  4:
; 7923 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN11@pyx_array_@9

; 7924 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);

	mov	rdx, QWORD PTR __pyx_n_s_allocate_buffer
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rcx, QWORD PTR pos_args$1$[rsp]

; 7925 :           if (value) { values[4] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN16@pyx_array_@9
	mov	rsi, rax
	mov	QWORD PTR values$19094[rsp+32], rax
	dec	rdi
$LN16@pyx_array_@9:

; 7926 :         }
; 7927 :       }
; 7928 :       if (unlikely(kw_args > 0)) {

	test	rdi, rdi
	jle	$LN11@pyx_array_@9

; 7929 :         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 120, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	lea	r9, QWORD PTR values$19094[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_array___cinit__@@9@9
	mov	QWORD PTR [rsp+40], r8
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, rbx
	xor	r8d, r8d
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN79@pyx_array_@9
	mov	eax, 120				; 00000078H
	mov	edx, 7929				; 00001ef9H
	jmp	$LN85@pyx_array_@9
$LN79@pyx_array_@9:

; 7939 :         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rsi, QWORD PTR values$19094[rsp+32]
	mov	r14, QWORD PTR values$19094[rsp+24]
	mov	r12, QWORD PTR values$19094[rsp+16]
	mov	rbp, QWORD PTR values$19094[rsp+8]
	mov	r13, QWORD PTR values$19094[rsp]
	jmp	$LN11@pyx_array_@9
$LN23@pyx_array_@9:

; 7912 :         else {
; 7913 :           __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 120, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 2
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rdx
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	eax, 120				; 00000078H
	mov	edx, 7913				; 00001ee9H
	jmp	$LN85@pyx_array_@9
$LN26@pyx_array_@9:

; 7906 :         else {
; 7907 :           __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 120, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	eax, 3
	mov	rcx, QWORD PTR [rcx]
	mov	ebx, 1
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+40], rdx
	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	lea	eax, QWORD PTR [rbx+119]
	mov	edx, 7907				; 00001ee3H
	jmp	$LN85@pyx_array_@9
$LN42@pyx_array_@9:

; 7930 :       }
; 7931 :     } else {
; 7932 :       switch (PyTuple_GET_SIZE(__pyx_args)) {

	sub	rax, 3
	je	$LN8@pyx_array_@9
	sub	rax, 1
	je	$LN9@pyx_array_@9
	cmp	rax, 1
	je	SHORT $LN10@pyx_array_@9
$__pyx_L5_argtuple_error$19116:

; 7960 :     }
; 7961 :   }
; 7962 :   goto __pyx_L4_argument_unpacking_done;
; 7963 :   __pyx_L5_argtuple_error:;
; 7964 :   __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 120, __pyx_L3_error)

	mov	rcx, QWORD PTR [rbx+16]
	cmp	rcx, 3
	jge	SHORT $LN65@pyx_array_@9
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	jmp	SHORT $LN64@pyx_array_@9
$LN65@pyx_array_@9:
	mov	eax, 5
	lea	r9, OFFSET FLAT:??_C@_07IGBEEPOP@at?5most?$AA@
$LN64@pyx_array_@9:
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	rcx, QWORD PTR [rcx]
	cmp	rax, 1
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	cmove	rdx, r8
	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	eax, 120				; 00000078H
	mov	edx, 7964				; 00001f1cH
	jmp	$LN85@pyx_array_@9
$LN10@pyx_array_@9:

; 7933 :         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

	mov	rsi, QWORD PTR [rdx+56]
$LN9@pyx_array_@9:

; 7934 :         CYTHON_FALLTHROUGH;
; 7935 :         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

	mov	r14, QWORD PTR [rdx+48]
$LN8@pyx_array_@9:

; 7936 :         CYTHON_FALLTHROUGH;
; 7937 :         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	r12, QWORD PTR [rdx+40]

; 7938 :         values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbp, QWORD PTR [rdx+32]

; 7939 :         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	r13, QWORD PTR [rdx+24]
$LN11@pyx_array_@9:

; 7940 :         break;
; 7941 :         default: goto __pyx_L5_argtuple_error;
; 7942 :       }
; 7943 :     }
; 7944 :     __pyx_v_shape = ((PyObject*)values[0]);
; 7945 :     __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 120, __pyx_L3_error)

	mov	rcx, rbp
	call	__Pyx_PyIndex_AsSsize_t
	mov	rdi, rax
	cmp	rax, -1
	jne	SHORT $LN6@pyx_array_@9
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN6@pyx_array_@9
	lea	eax, QWORD PTR [rdi+121]
	mov	edx, 7945				; 00001f09H
	jmp	SHORT $LN85@pyx_array_@9
$LN6@pyx_array_@9:

; 7946 :     __pyx_v_format = values[2];
; 7947 :     __pyx_v_mode = values[3];
; 7948 :     if (values[4]) {

	test	rsi, rsi
	je	$LN5@pyx_array_@9

; 7949 :       __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 121, __pyx_L3_error)

	cmp	rsi, QWORD PTR __imp__Py_TrueStruct
	mov	ebx, r15d
	mov	ecx, r15d
	sete	bl
	cmp	rsi, QWORD PTR __imp__Py_ZeroStruct
	mov	eax, r15d
	sete	cl
	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	sete	al
	or	ecx, eax
	or	ecx, ebx
	jne	SHORT $LN59@pyx_array_@9
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	ebx, eax
$LN59@pyx_array_@9:
	cmp	ebx, -1
	jne	SHORT $__pyx_L4_argument_unpacking_done$19165
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$19165
	mov	eax, 121				; 00000079H
	mov	edx, 7949				; 00001f0dH
$LN85@pyx_array_@9:
	mov	r9, QWORD PTR __pyx_f+16

; 7965 :   __pyx_L3_error:;
; 7966 :   __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CA@NAILOBKL@View?4MemoryView?4array?4__cinit__?$AA@
	mov	r8d, eax
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, eax
$__pyx_L3_error$19128:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 7967 :   __Pyx_RefNannyFinishContext();
; 7968 :   return -1;

	or	eax, -1
	jmp	$__pyx_L0$19180
$LN5@pyx_array_@9:

; 7950 :     } else {
; 7951 : 
; 7952 :       /* "View.MemoryView":121
; 7953 :  * 
; 7954 :  *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
; 7955 :  *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
; 7956 :  * 
; 7957 :  *         cdef int idx
; 7958 :  */
; 7959 :       __pyx_v_allocate_buffer = ((int)1);

	mov	ebx, 1
$__pyx_L4_argument_unpacking_done$19165:

; 7969 :   __pyx_L4_argument_unpacking_done:;
; 7970 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 120, __pyx_L1_error)

	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR [r13+8]
	mov	r9, QWORD PTR __imp_PyTuple_Type
	mov	eax, r15d
	sete	al
	cmp	rcx, r9
	sete	r15b
	or	r15d, eax
	jne	$LN2@pyx_array_@9
	test	r9, r9
	jne	SHORT $LN74@pyx_array_@9
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN77@pyx_array_@9
$LN74@pyx_array_@9:
	cmp	r9, QWORD PTR __imp_PyBaseString_Type
	jne	SHORT $LN71@pyx_array_@9
	cmp	rcx, QWORD PTR __imp_PyString_Type
	je	SHORT $LN2@pyx_array_@9
	cmp	rcx, QWORD PTR __imp_PyUnicode_Type
	je	SHORT $LN2@pyx_array_@9
$LN71@pyx_array_@9:
	mov	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r9, QWORD PTR [r9+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_05KFCIHKGL@shape?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN77@pyx_array_@9:
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, 7970		; 00001f22H
$__pyx_L1_error$19174:
	mov	QWORD PTR __pyx_filename, rax

; 7972 :     PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 120, __pyx_L1_error)

	mov	eax, 120				; 00000078H
	mov	DWORD PTR __pyx_lineno, eax

; 7975 : 
; 7976 :   /* "View.MemoryView":120
; 7977 :  *         cdef bint dtype_is_object
; 7978 :  * 
; 7979 :  *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
; 7980 :  *                   mode="c", bint allocate_buffer=True):
; 7981 :  * 
; 7982 :  */
; 7983 : 
; 7984 :   /* function exit code */
; 7985 :   goto __pyx_L0;
; 7986 :   __pyx_L1_error:;
; 7987 :   __pyx_r = -1;

	or	eax, -1
	jmp	SHORT $__pyx_L0$19180
$LN2@pyx_array_@9:

; 7971 :   if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {

	cmp	r12, QWORD PTR __imp__Py_NoneStruct
	jne	SHORT $LN1@pyx_array_@9

; 7972 :     PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 120, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r8, OFFSET FLAT:??_C@_06DLEPGFEF@format?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0CD@IFDOHMKM@Argument?5?8?$CF?4200s?8?5must?5not?5be?5No@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	eax, 120				; 00000078H
	mov	DWORD PTR __pyx_lineno, eax
	mov	DWORD PTR __pyx_clineno, 7972		; 00001f24H
$__pyx_L1_error_1$19174:
	mov	QWORD PTR __pyx_filename, r11

; 7975 : 
; 7976 :   /* "View.MemoryView":120
; 7977 :  *         cdef bint dtype_is_object
; 7978 :  * 
; 7979 :  *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
; 7980 :  *                   mode="c", bint allocate_buffer=True):
; 7981 :  * 
; 7982 :  */
; 7983 : 
; 7984 :   /* function exit code */
; 7985 :   goto __pyx_L0;
; 7986 :   __pyx_L1_error:;
; 7987 :   __pyx_r = -1;

	or	eax, -1
	jmp	SHORT $__pyx_L0$19180
$LN1@pyx_array_@9:

; 7973 :   }
; 7974 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

	mov	rcx, QWORD PTR __pyx_v_self$[rsp]
	mov	r9, r12
	mov	r8, rdi
	mov	rdx, r13
	mov	DWORD PTR [rsp+40], ebx
	mov	QWORD PTR [rsp+32], r14
	call	__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__
$__pyx_L0$19180:

; 7988 :   __pyx_L0:;
; 7989 :   __Pyx_RefNannyFinishContext();
; 7990 :   return __pyx_r;
; 7991 : }

	mov	rbx, QWORD PTR [rsp+184]
	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
	npad	2
$LN78@pyx_array_@9:
	DD	$LN34@pyx_array_@9
	DD	$LN35@pyx_array_@9
	DD	$LN36@pyx_array_@9
	DD	$LN37@pyx_array_@9
	DD	$LN38@pyx_array_@9
	DD	$LN39@pyx_array_@9
__pyx_array___cinit__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_array_getbuffer
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_info$ = 16
__pyx_v_flags$ = 24
__pyx_array_getbuffer PROC				; COMDAT

; 8610 :   int __pyx_r;
; 8611 :   __Pyx_RefNannyDeclarations
; 8612 :   __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
; 8613 :   __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
; 8614 : 
; 8615 :   /* function exit code */
; 8616 :   __Pyx_RefNannyFinishContext();
; 8617 :   return __pyx_r;
; 8618 : }

	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__
__pyx_array_getbuffer ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_MemviewEnum_1__reduce_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_pw___pyx_MemviewEnum_1__reduce_cython__ PROC	; COMDAT

; 9839 :   PyObject *__pyx_r = 0;
; 9840 :   __Pyx_RefNannyDeclarations
; 9841 :   __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
; 9842 :   __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));
; 9843 : 
; 9844 :   /* function exit code */
; 9845 :   __Pyx_RefNannyFinishContext();
; 9846 :   return __pyx_r;
; 9847 : }

	jmp	__pyx_pf___pyx_MemviewEnum___reduce_cython__
__pyx_pw___pyx_MemviewEnum_1__reduce_cython__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw___pyx_MemviewEnum_3__setstate_cython__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v___pyx_state$ = 16
__pyx_pw___pyx_MemviewEnum_3__setstate_cython__ PROC	; COMDAT

; 10071:   PyObject *__pyx_r = 0;
; 10072:   __Pyx_RefNannyDeclarations
; 10073:   __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
; 10074:   __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));
; 10075: 
; 10076:   /* function exit code */
; 10077:   __Pyx_RefNannyFinishContext();
; 10078:   return __pyx_r;
; 10079: }

	jmp	__pyx_pf___pyx_MemviewEnum_2__setstate_cython__
__pyx_pw___pyx_MemviewEnum_3__setstate_cython__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___dealloc__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_memoryview___dealloc__ PROC			; COMDAT

; 10584:   __Pyx_RefNannyDeclarations
; 10585:   __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
; 10586:   __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 10587: 
; 10588:   /* function exit code */
; 10589:   __Pyx_RefNannyFinishContext();
; 10590: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__
__pyx_memoryview___dealloc__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___setitem__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_index$ = 16
__pyx_v_value$ = 24
__pyx_memoryview___setitem__ PROC			; COMDAT

; 11099:   int __pyx_r;
; 11100:   __Pyx_RefNannyDeclarations
; 11101:   __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
; 11102:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));
; 11103: 
; 11104:   /* function exit code */
; 11105:   __Pyx_RefNannyFinishContext();
; 11106:   return __pyx_r;
; 11107: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__
__pyx_memoryview___setitem__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@FKKKOFOE@View?4MemoryView?4memoryview?4setit@ ; `string'
EXTRN	__imp_PyMem_Free:PROC
EXTRN	__imp_PyErr_NoMemory:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_setitem_slice_assign_scalar DD imagerel __pyx_memoryview_setitem_slice_assign_scalar
	DD	imagerel __pyx_memoryview_setitem_slice_assign_scalar+471
	DD	imagerel $unwind$__pyx_memoryview_setitem_slice_assign_scalar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_setitem_slice_assign_scalar DD 0d1f01H
	DD	068641fH
	DD	067541fH
	DD	066341fH
	DD	060011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
xdata	ENDS
;	COMDAT ??_C@_0DH@FKKKOFOE@View?4MemoryView?4memoryview?4setit@
CONST	SEGMENT
??_C@_0DH@FKKKOFOE@View?4MemoryView?4memoryview?4setit@ DB 'View.MemoryVi'
	DB	'ew.memoryview.setitem_slice_assign_scalar', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_setitem_slice_assign_scalar
_TEXT	SEGMENT
__pyx_v_tmp_slice$ = 48
__pyx_v_array$ = 256
__pyx_v_self$ = 816
__pyx_v_dst$ = 824
__pyx_v_value$ = 832
__pyx_memoryview_setitem_slice_assign_scalar PROC	; COMDAT

; 11584: static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 768				; 00000300H
	mov	rbp, rdx
	mov	rbx, rcx

; 11585:   int __pyx_v_array[0x80];
; 11586:   void *__pyx_v_tmp;
; 11587:   void *__pyx_v_item;
; 11588:   __Pyx_memviewslice *__pyx_v_dst_slice;
; 11589:   __Pyx_memviewslice __pyx_v_tmp_slice;
; 11590:   PyObject *__pyx_r = NULL;
; 11591:   __Pyx_RefNannyDeclarations
; 11592:   int __pyx_t_1;
; 11593:   PyObject *__pyx_t_2 = NULL;
; 11594:   int __pyx_t_3;
; 11595:   int __pyx_t_4;
; 11596:   char const *__pyx_t_5;
; 11597:   PyObject *__pyx_t_6 = NULL;
; 11598:   PyObject *__pyx_t_7 = NULL;
; 11599:   PyObject *__pyx_t_8 = NULL;
; 11600:   PyObject *__pyx_t_9 = NULL;
; 11601:   PyObject *__pyx_t_10 = NULL;
; 11602:   PyObject *__pyx_t_11 = NULL;
; 11603:   __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);
; 11604: 
; 11605:   /* "View.MemoryView":442
; 11606:  *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
; 11607:  *         cdef int array[128]
; 11608:  *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
; 11609:  *         cdef void *item
; 11610:  * 
; 11611:  */
; 11612:   __pyx_v_tmp = NULL;
; 11613: 
; 11614:   /* "View.MemoryView":447
; 11615:  *         cdef __Pyx_memviewslice *dst_slice
; 11616:  *         cdef __Pyx_memviewslice tmp_slice
; 11617:  *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
; 11618:  * 
; 11619:  *         if <size_t>self.view.itemsize > sizeof(array):
; 11620:  */
; 11621:   __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

	lea	rdx, QWORD PTR __pyx_v_tmp_slice$[rsp]
	mov	rcx, rbp
	mov	rsi, r8
	xor	r15d, r15d
	call	__pyx_memoryview_get_slice_from_memoryview

; 11622: 
; 11623:   /* "View.MemoryView":449
; 11624:  *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
; 11625:  * 
; 11626:  *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
; 11627:  *             tmp = PyMem_Malloc(self.view.itemsize)
; 11628:  *             if tmp == NULL:
; 11629:  */
; 11630:   __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);

	mov	rcx, QWORD PTR [rbx+96]
	mov	r12, rax
	cmp	rcx, 512				; 00000200H

; 11631:   if (__pyx_t_1) {

	jbe	SHORT $LN39@pyx_memory@33

; 11632: 
; 11633:     /* "View.MemoryView":450
; 11634:  * 
; 11635:  *         if <size_t>self.view.itemsize > sizeof(array):
; 11636:  *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
; 11637:  *             if tmp == NULL:
; 11638:  *                 raise MemoryError
; 11639:  */
; 11640:     __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

	call	QWORD PTR __imp_PyMem_Malloc
	mov	r15, rax

; 11641: 
; 11642:     /* "View.MemoryView":451
; 11643:  *         if <size_t>self.view.itemsize > sizeof(array):
; 11644:  *             tmp = PyMem_Malloc(self.view.itemsize)
; 11645:  *             if tmp == NULL:             # <<<<<<<<<<<<<<
; 11646:  *                 raise MemoryError
; 11647:  *             item = tmp
; 11648:  */
; 11649:     __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);

	test	rax, rax

; 11650:     if (__pyx_t_1) {

	jne	SHORT $LN38@pyx_memory@33

; 11651: 
; 11652:       /* "View.MemoryView":452
; 11653:  *             tmp = PyMem_Malloc(self.view.itemsize)
; 11654:  *             if tmp == NULL:
; 11655:  *                 raise MemoryError             # <<<<<<<<<<<<<<
; 11656:  *             item = tmp
; 11657:  *         else:
; 11658:  */
; 11659:       PyErr_NoMemory(); __PYX_ERR(2, 452, __pyx_L1_error)

	call	QWORD PTR __imp_PyErr_NoMemory
	mov	r12, QWORD PTR __pyx_f+16
	mov	r13d, 452				; 000001c4H
	mov	r14d, 11659				; 00002d8bH
	jmp	$LN46@pyx_memory@33
$LN38@pyx_memory@33:

; 11660: 
; 11661:       /* "View.MemoryView":451
; 11662:  *         if <size_t>self.view.itemsize > sizeof(array):
; 11663:  *             tmp = PyMem_Malloc(self.view.itemsize)
; 11664:  *             if tmp == NULL:             # <<<<<<<<<<<<<<
; 11665:  *                 raise MemoryError
; 11666:  *             item = tmp
; 11667:  */
; 11668:     }
; 11669: 
; 11670:     /* "View.MemoryView":453
; 11671:  *             if tmp == NULL:
; 11672:  *                 raise MemoryError
; 11673:  *             item = tmp             # <<<<<<<<<<<<<<
; 11674:  *         else:
; 11675:  *             item = <void *> array
; 11676:  */
; 11677:     __pyx_v_item = __pyx_v_tmp;

	mov	rdi, rax

; 11678: 
; 11679:     /* "View.MemoryView":449
; 11680:  *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
; 11681:  * 
; 11682:  *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
; 11683:  *             tmp = PyMem_Malloc(self.view.itemsize)
; 11684:  *             if tmp == NULL:
; 11685:  */
; 11686:     goto __pyx_L3;

	jmp	SHORT $__pyx_L3$21961
$LN39@pyx_memory@33:

; 11687:   }
; 11688: 
; 11689:   /* "View.MemoryView":455
; 11690:  *             item = tmp
; 11691:  *         else:
; 11692:  *             item = <void *> array             # <<<<<<<<<<<<<<
; 11693:  * 
; 11694:  *         try:
; 11695:  */
; 11696:   /*else*/ {
; 11697:     __pyx_v_item = ((void *)__pyx_v_array);

	lea	rdi, QWORD PTR __pyx_v_array$[rsp]
$__pyx_L3$21961:

; 11698:   }
; 11699:   __pyx_L3:;
; 11700: 
; 11701:   /* "View.MemoryView":457
; 11702:  *             item = <void *> array
; 11703:  * 
; 11704:  *         try:             # <<<<<<<<<<<<<<
; 11705:  *             if self.dtype_is_object:
; 11706:  *                 (<PyObject **> item)[0] = <PyObject *> value
; 11707:  */
; 11708:   /*try:*/ {
; 11709: 
; 11710:     /* "View.MemoryView":458
; 11711:  * 
; 11712:  *         try:
; 11713:  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 11714:  *                 (<PyObject **> item)[0] = <PyObject *> value
; 11715:  *             else:
; 11716:  */
; 11717:     __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);

	cmp	DWORD PTR [rbx+172], 0

; 11718:     if (__pyx_t_1) {

	je	SHORT $LN37@pyx_memory@33

; 11719: 
; 11720:       /* "View.MemoryView":459
; 11721:  *         try:
; 11722:  *             if self.dtype_is_object:
; 11723:  *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
; 11724:  *             else:
; 11725:  *                 self.assign_item_from_object(<char *> item, value)
; 11726:  */
; 11727:       (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

	mov	QWORD PTR [rdi], rsi

; 11728: 
; 11729:       /* "View.MemoryView":458
; 11730:  * 
; 11731:  *         try:
; 11732:  *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
; 11733:  *                 (<PyObject **> item)[0] = <PyObject *> value
; 11734:  *             else:
; 11735:  */
; 11736:       goto __pyx_L8;

	jmp	SHORT $__pyx_L8$21966
$LN37@pyx_memory@33:

; 11737:     }
; 11738: 
; 11739:     /* "View.MemoryView":461
; 11740:  *                 (<PyObject **> item)[0] = <PyObject *> value
; 11741:  *             else:
; 11742:  *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
; 11743:  * 
; 11744:  * 
; 11745:  */
; 11746:     /*else*/ {
; 11747:       __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 461, __pyx_L6_error)

	mov	rax, QWORD PTR [rbx+16]
	mov	r8, rsi
	mov	rdx, rdi
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	rcx, rax
	test	rax, rax
	jne	SHORT $LN35@pyx_memory@33
	mov	r13d, 461				; 000001cdH
	mov	r14d, 11747				; 00002de3H
	jmp	SHORT $LN47@pyx_memory@33
$LN35@pyx_memory@33:

; 11748:       __Pyx_GOTREF(__pyx_t_2);
; 11749:       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $__pyx_L8$21966
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$__pyx_L8$21966:

; 11750:     }
; 11751:     __pyx_L8:;
; 11752: 
; 11753:     /* "View.MemoryView":465
; 11754:  * 
; 11755:  * 
; 11756:  *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
; 11757:  *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
; 11758:  *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
; 11759:  */
; 11760:     __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);

	mov	rcx, QWORD PTR [rbx+136]
	test	rcx, rcx

; 11761:     if (__pyx_t_1) {

	je	$LN27@pyx_memory@33

; 11762: 
; 11763:       /* "View.MemoryView":466
; 11764:  * 
; 11765:  *             if self.view.suboffsets != NULL:
; 11766:  *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
; 11767:  *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
; 11768:  *                                 item, self.dtype_is_object)
; 11769:  */
; 11770:       __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 466, __pyx_L6_error)

	mov	edx, DWORD PTR [rbx+108]
	call	assert_direct_dimensions
	mov	rcx, rax
	test	rax, rax
	jne	$LN28@pyx_memory@33
	mov	r13d, 466				; 000001d2H
	mov	r14d, 11770				; 00002dfaH
$LN47@pyx_memory@33:

; 11803:       goto __pyx_L7;
; 11804:     }
; 11805:     __pyx_L6_error:;
; 11806:     /*exception exit:*/{
; 11807:       __Pyx_PyThreadState_declare
; 11808:       __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	r12, QWORD PTR __pyx_f+16

; 11809:       __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
; 11810:       __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
; 11811:       if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
; 11812:       if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
; 11813:       __Pyx_XGOTREF(__pyx_t_6);
; 11814:       __Pyx_XGOTREF(__pyx_t_7);
; 11815:       __Pyx_XGOTREF(__pyx_t_8);
; 11816:       __Pyx_XGOTREF(__pyx_t_9);
; 11817:       __Pyx_XGOTREF(__pyx_t_10);
; 11818:       __Pyx_XGOTREF(__pyx_t_11);
; 11819:       __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
; 11820:       {
; 11821:         PyMem_Free(__pyx_v_tmp);

	mov	rcx, r15
	mov	rbp, QWORD PTR [rax]
	xor	eax, eax
	mov	DWORD PTR __pyx_clineno, r14d
	mov	rsi, QWORD PTR [rbp+72]
	mov	rdi, QWORD PTR [rbp+80]
	mov	rbx, QWORD PTR [rbp+88]
	mov	QWORD PTR [rbp+72], rax
	mov	QWORD PTR [rbp+80], rax
	mov	QWORD PTR [rbp+88], rax
	mov	DWORD PTR __pyx_lineno, r13d
	mov	QWORD PTR __pyx_filename, r12
$__pyx_L6_error$21970:
	call	QWORD PTR __imp_PyMem_Free

; 11822:       }
; 11823:       if (PY_MAJOR_VERSION >= 3) {
; 11824:         __Pyx_XGIVEREF(__pyx_t_9);
; 11825:         __Pyx_XGIVEREF(__pyx_t_10);
; 11826:         __Pyx_XGIVEREF(__pyx_t_11);
; 11827:         __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
; 11828:       }
; 11829:       __Pyx_XGIVEREF(__pyx_t_6);
; 11830:       __Pyx_XGIVEREF(__pyx_t_7);
; 11831:       __Pyx_XGIVEREF(__pyx_t_8);
; 11832:       __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);

	mov	r9, rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbp
	call	__Pyx_ErrRestoreInState
$LN46@pyx_memory@33:

; 11850:   goto __pyx_L0;
; 11851:   __pyx_L1_error:;
; 11852:   __Pyx_XDECREF(__pyx_t_2);
; 11853:   __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DH@FKKKOFOE@View?4MemoryView?4memoryview?4setit@
	mov	r9, r12
	mov	r8d, r13d
	mov	edx, r14d
	mov	QWORD PTR __pyx_filename, r12
	mov	DWORD PTR __pyx_clineno, r14d
	mov	DWORD PTR __pyx_lineno, r13d
	call	__Pyx_AddTraceback

; 11854:   __pyx_r = 0;
; 11855:   __pyx_L0:;
; 11856:   __Pyx_XGIVEREF(__pyx_r);
; 11857:   __Pyx_RefNannyFinishContext();
; 11858:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$22016
$LN28@pyx_memory@33:

; 11771:       __Pyx_GOTREF(__pyx_t_2);
; 11772:       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN27@pyx_memory@33
	mov	rax, QWORD PTR [rax+8]
	call	QWORD PTR [rax+48]
$LN27@pyx_memory@33:

; 11773: 
; 11774:       /* "View.MemoryView":465
; 11775:  * 
; 11776:  * 
; 11777:  *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
; 11778:  *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
; 11779:  *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
; 11780:  */
; 11781:     }
; 11782: 
; 11783:     /* "View.MemoryView":467
; 11784:  *             if self.view.suboffsets != NULL:
; 11785:  *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
; 11786:  *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
; 11787:  *                                 item, self.dtype_is_object)
; 11788:  *         finally:
; 11789:  */
; 11790:     __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);

	mov	eax, DWORD PTR [rbx+172]
	mov	r8, QWORD PTR [rbx+96]
	mov	edx, DWORD PTR [rbp+108]
	mov	r9, rdi
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], eax
	call	__pyx_memoryview_slice_assign_scalar

; 11791:   }
; 11792: 
; 11793:   /* "View.MemoryView":470
; 11794:  *                                 item, self.dtype_is_object)
; 11795:  *         finally:
; 11796:  *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
; 11797:  * 
; 11798:  *     cdef setitem_indexed(self, index, value):
; 11799:  */
; 11800:   /*finally:*/ {
; 11801:     /*normal exit:*/{
; 11802:       PyMem_Free(__pyx_v_tmp);

	mov	rcx, r15
	call	QWORD PTR __imp_PyMem_Free

; 11833:       __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
; 11834:       __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
; 11835:       goto __pyx_L1_error;
; 11836:     }
; 11837:     __pyx_L7:;
; 11838:   }
; 11839: 
; 11840:   /* "View.MemoryView":440
; 11841:  *                                  src.ndim, dst.ndim, self.dtype_is_object)
; 11842:  * 
; 11843:  *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
; 11844:  *         cdef int array[128]
; 11845:  *         cdef void *tmp = NULL
; 11846:  */
; 11847: 
; 11848:   /* function exit code */
; 11849:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
$__pyx_L7$21994:
	inc	QWORD PTR [rax]
$__pyx_L0$22016:

; 11859: }

	lea	r11, QWORD PTR [rsp+768]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_memoryview_setitem_slice_assign_scalar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EENEOGNI@View?4MemoryView?4memoryview?4T?4__g@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__ DD imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__
	DD	imagerel __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__+282
	DD	imagerel $unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CF@EENEOGNI@View?4MemoryView?4memoryview?4T?4__g@
CONST	SEGMENT
??_C@_0CF@EENEOGNI@View?4MemoryView?4memoryview?4T?4__g@ DB 'View.MemoryV'
	DB	'iew.memoryview.T.__get__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__ PROC ; COMDAT

; 12731: static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 12732:   struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;

	xor	esi, esi
	mov	rdi, rsi

; 12733:   PyObject *__pyx_r = NULL;
; 12734:   __Pyx_RefNannyDeclarations
; 12735:   PyObject *__pyx_t_1 = NULL;
; 12736:   int __pyx_t_2;
; 12737:   __Pyx_RefNannySetupContext("__get__", 0);
; 12738: 
; 12739:   /* "View.MemoryView":542
; 12740:  *     @property
; 12741:  *     def T(self):
; 12742:  *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
; 12743:  *         transpose_memslice(&result.from_slice)
; 12744:  *         return result
; 12745:  */
; 12746:   __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 542, __pyx_L1_error)

	call	__pyx_memoryview_copy_object
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN33@pyx_pf_15V@7
	mov	r8d, 542				; 0000021eH
	mov	edx, 12746				; 000031caH
	jmp	$LN37@pyx_pf_15V@7
$LN33@pyx_pf_15V@7:

; 12747:   __Pyx_GOTREF(__pyx_t_1);
; 12748:   if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 542, __pyx_L1_error)

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN32@pyx_pf_15V@7
	mov	rdx, QWORD PTR __pyx_memoryviewslice_type
	mov	rcx, rax
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN32@pyx_pf_15V@7
	mov	r9, QWORD PTR __pyx_f+16

; 12771:   goto __pyx_L0;
; 12772: 
; 12773:   /* "View.MemoryView":541
; 12774:  * 
; 12775:  *     @property
; 12776:  *     def T(self):             # <<<<<<<<<<<<<<
; 12777:  *         cdef _memoryviewslice result = memoryview_copy(self)
; 12778:  *         transpose_memslice(&result.from_slice)
; 12779:  */
; 12780: 
; 12781:   /* function exit code */
; 12782:   __pyx_L1_error:;
; 12783:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbx], -1
	mov	r8d, 542				; 0000021eH
	mov	edx, 12748				; 000031ccH
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$22927:
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
	jne	SHORT $LN13@pyx_pf_15V@7
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno

; 12784:   __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CF@EENEOGNI@View?4MemoryView?4memoryview?4T?4__g@
	call	__Pyx_AddTraceback

; 12785:   __pyx_r = NULL;

	jmp	SHORT $__pyx_L0$22951
$LN32@pyx_pf_15V@7:

; 12749:   __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
; 12750:   __pyx_t_1 = 0;
; 12751: 
; 12752:   /* "View.MemoryView":543
; 12753:  *     def T(self):
; 12754:  *         cdef _memoryviewslice result = memoryview_copy(self)
; 12755:  *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
; 12756:  *         return result
; 12757:  * 
; 12758:  */
; 12759:   __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 543, __pyx_L1_error)

	lea	rcx, QWORD PTR [rbx+184]
	mov	rdi, rbx
	call	__pyx_memslice_transpose
	test	eax, eax
	jne	SHORT $LN23@pyx_pf_15V@7
	mov	r8d, 543				; 0000021fH
	mov	edx, 12759				; 000031d7H
$LN37@pyx_pf_15V@7:
	mov	r9, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, r8d
	mov	QWORD PTR __pyx_filename, r9
$LN13@pyx_pf_15V@7:

; 12784:   __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CF@EENEOGNI@View?4MemoryView?4memoryview?4T?4__g@
	call	__Pyx_AddTraceback

; 12785:   __pyx_r = NULL;

	jmp	SHORT $__pyx_L0$22951
$LN23@pyx_pf_15V@7:

; 12760: 
; 12761:   /* "View.MemoryView":544
; 12762:  *         cdef _memoryviewslice result = memoryview_copy(self)
; 12763:  *         transpose_memslice(&result.from_slice)
; 12764:  *         return result             # <<<<<<<<<<<<<<
; 12765:  * 
; 12766:  *     @property
; 12767:  */
; 12768:   __Pyx_XDECREF(__pyx_r);
; 12769:   __Pyx_INCREF(((PyObject *)__pyx_v_result));

	inc	QWORD PTR [rbx]

; 12770:   __pyx_r = ((PyObject *)__pyx_v_result);

	mov	rsi, rbx
$__pyx_L0$22951:

; 12786:   __pyx_L0:;
; 12787:   __Pyx_XDECREF((PyObject *)__pyx_v_result);

	test	rdi, rdi
	je	SHORT $LN36@pyx_pf_15V@7
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN36@pyx_pf_15V@7
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN36@pyx_pf_15V@7:

; 12788:   __Pyx_XGIVEREF(__pyx_r);
; 12789:   __Pyx_RefNannyFinishContext();
; 12790:   return __pyx_r;
; 12791: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@CLAAODON@View?4MemoryView?4memoryview?4is_c_@ ; `string'
PUBLIC	$T44027
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig+226
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig DD 030901H
	DD	0380109H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0CH@CLAAODON@View?4MemoryView?4memoryview?4is_c_@
CONST	SEGMENT
??_C@_0CH@CLAAODON@View?4MemoryView?4memoryview?4is_c_@ DB 'View.MemoryVi'
	DB	'ew.memoryview.is_c_contig', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig
_TEXT	SEGMENT
$T44027 = 32
__pyx_v_tmp$ = 240
__pyx_v_self$ = 464
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig PROC ; COMDAT

; 13760: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 448				; 000001c0H

; 13761:   __Pyx_memviewslice *__pyx_v_mslice;
; 13762:   __Pyx_memviewslice __pyx_v_tmp;
; 13763:   PyObject *__pyx_r = NULL;
; 13764:   __Pyx_RefNannyDeclarations
; 13765:   PyObject *__pyx_t_1 = NULL;
; 13766:   __Pyx_RefNannySetupContext("is_c_contig", 0);
; 13767: 
; 13768:   /* "View.MemoryView":610
; 13769:  *         cdef __Pyx_memviewslice *mslice
; 13770:  *         cdef __Pyx_memviewslice tmp
; 13771:  *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
; 13772:  *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
; 13773:  * 
; 13774:  */
; 13775:   __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

	lea	rdx, QWORD PTR __pyx_v_tmp$[rsp]
	mov	rbx, rcx
	call	__pyx_memoryview_get_slice_from_memoryview

; 13776: 
; 13777:   /* "View.MemoryView":611
; 13778:  *         cdef __Pyx_memviewslice tmp
; 13779:  *         mslice = get_slice_from_memview(self, &tmp)
; 13780:  *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
; 13781:  * 
; 13782:  *     def is_f_contig(self):
; 13783:  */
; 13784:   __Pyx_XDECREF(__pyx_r);
; 13785:   __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 611, __pyx_L1_error)

	lea	rcx, QWORD PTR $T44027[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy
	mov	r11d, DWORD PTR [rbx+108]
	mov	rax, QWORD PTR $T44027[rsp]
	mov	rcx, QWORD PTR [rax+96]
	xor	edx, edx
	lea	r8d, DWORD PTR [r11-1]
	test	r11d, r11d
	jle	SHORT $LN28@pyx_memory@34
	npad	12
$LL30@pyx_memory@34:
	movsxd	rax, r8d
	cmp	QWORD PTR $T44027[rsp+rax*8+144], 0
	jge	SHORT $LN24@pyx_memory@34
	cmp	QWORD PTR $T44027[rsp+rax*8+80], rcx
	jne	SHORT $LN24@pyx_memory@34
	imul	rcx, QWORD PTR $T44027[rsp+rax*8+16]
	inc	edx
	dec	r8d
	cmp	edx, r11d
	jl	SHORT $LL30@pyx_memory@34
$LN28@pyx_memory@34:
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_TrueStruct
$LN25@pyx_memory@34:
	test	rax, rax
	jne	SHORT $__pyx_L0$24043
	mov	r9, QWORD PTR __pyx_f+16

; 13786:   __Pyx_GOTREF(__pyx_t_1);
; 13787:   __pyx_r = __pyx_t_1;
; 13788:   __pyx_t_1 = 0;
; 13789:   goto __pyx_L0;
; 13790: 
; 13791:   /* "View.MemoryView":607
; 13792:  * 
; 13793:  * 
; 13794:  *     def is_c_contig(self):             # <<<<<<<<<<<<<<
; 13795:  *         cdef __Pyx_memviewslice *mslice
; 13796:  *         cdef __Pyx_memviewslice tmp
; 13797:  */
; 13798: 
; 13799:   /* function exit code */
; 13800:   __pyx_L1_error:;
; 13801:   __Pyx_XDECREF(__pyx_t_1);
; 13802:   __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CH@CLAAODON@View?4MemoryView?4memoryview?4is_c_@
	mov	edx, 13785				; 000035d9H
	mov	r8d, 611				; 00000263H
	mov	DWORD PTR __pyx_lineno, 611		; 00000263H
	mov	DWORD PTR __pyx_clineno, 13785		; 000035d9H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$24042:
	call	__Pyx_AddTraceback

; 13803:   __pyx_r = NULL;
; 13804:   __pyx_L0:;
; 13805:   __Pyx_XGIVEREF(__pyx_r);
; 13806:   __Pyx_RefNannyFinishContext();
; 13807:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$24043:

; 13808: }

	add	rsp, 448				; 000001c0H
	pop	rbx
	ret	0
$LN24@pyx_memory@34:

; 13776: 
; 13777:   /* "View.MemoryView":611
; 13778:  *         cdef __Pyx_memviewslice tmp
; 13779:  *         mslice = get_slice_from_memview(self, &tmp)
; 13780:  *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
; 13781:  * 
; 13782:  *     def is_f_contig(self):
; 13783:  */
; 13784:   __Pyx_XDECREF(__pyx_r);
; 13785:   __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 611, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	jmp	SHORT $LN25@pyx_memory@34
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@GBJHKGKC@View?4MemoryView?4memoryview?4is_f_@ ; `string'
PUBLIC	$T44071
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig+207
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig DD 030901H
	DD	0380109H
	DD	03002H
xdata	ENDS
;	COMDAT ??_C@_0CH@GBJHKGKC@View?4MemoryView?4memoryview?4is_f_@
CONST	SEGMENT
??_C@_0CH@GBJHKGKC@View?4MemoryView?4memoryview?4is_f_@ DB 'View.MemoryVi'
	DB	'ew.memoryview.is_f_contig', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig
_TEXT	SEGMENT
$T44071 = 32
__pyx_v_tmp$ = 240
__pyx_v_self$ = 464
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig PROC ; COMDAT

; 13831: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {

	push	rbx
	sub	rsp, 448				; 000001c0H

; 13832:   __Pyx_memviewslice *__pyx_v_mslice;
; 13833:   __Pyx_memviewslice __pyx_v_tmp;
; 13834:   PyObject *__pyx_r = NULL;
; 13835:   __Pyx_RefNannyDeclarations
; 13836:   PyObject *__pyx_t_1 = NULL;
; 13837:   __Pyx_RefNannySetupContext("is_f_contig", 0);
; 13838: 
; 13839:   /* "View.MemoryView":616
; 13840:  *         cdef __Pyx_memviewslice *mslice
; 13841:  *         cdef __Pyx_memviewslice tmp
; 13842:  *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
; 13843:  *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
; 13844:  * 
; 13845:  */
; 13846:   __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

	lea	rdx, QWORD PTR __pyx_v_tmp$[rsp]
	mov	rbx, rcx
	call	__pyx_memoryview_get_slice_from_memoryview

; 13847: 
; 13848:   /* "View.MemoryView":617
; 13849:  *         cdef __Pyx_memviewslice tmp
; 13850:  *         mslice = get_slice_from_memview(self, &tmp)
; 13851:  *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
; 13852:  * 
; 13853:  *     def copy(self):
; 13854:  */
; 13855:   __Pyx_XDECREF(__pyx_r);
; 13856:   __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 617, __pyx_L1_error)

	lea	rcx, QWORD PTR $T44071[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy
	mov	rax, QWORD PTR $T44071[rsp]
	mov	r11d, DWORD PTR [rbx+108]
	mov	rdx, QWORD PTR [rax+96]
	xor	eax, eax
	test	r11d, r11d
	jle	SHORT $LN28@pyx_memory@35
$LL30@pyx_memory@35:
	movsxd	rcx, eax
	cmp	QWORD PTR $T44071[rsp+rcx*8+144], 0
	jge	SHORT $LN24@pyx_memory@35
	cmp	QWORD PTR $T44071[rsp+rcx*8+80], rdx
	jne	SHORT $LN24@pyx_memory@35
	imul	rdx, QWORD PTR $T44071[rsp+rcx*8+16]
	inc	eax
	cmp	eax, r11d
	jl	SHORT $LL30@pyx_memory@35
$LN28@pyx_memory@35:
	mov	rax, QWORD PTR __imp__Py_TrueStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_TrueStruct
$LN25@pyx_memory@35:
	test	rax, rax
	jne	SHORT $__pyx_L0$24107
	mov	r9, QWORD PTR __pyx_f+16

; 13857:   __Pyx_GOTREF(__pyx_t_1);
; 13858:   __pyx_r = __pyx_t_1;
; 13859:   __pyx_t_1 = 0;
; 13860:   goto __pyx_L0;
; 13861: 
; 13862:   /* "View.MemoryView":613
; 13863:  *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
; 13864:  * 
; 13865:  *     def is_f_contig(self):             # <<<<<<<<<<<<<<
; 13866:  *         cdef __Pyx_memviewslice *mslice
; 13867:  *         cdef __Pyx_memviewslice tmp
; 13868:  */
; 13869: 
; 13870:   /* function exit code */
; 13871:   __pyx_L1_error:;
; 13872:   __Pyx_XDECREF(__pyx_t_1);
; 13873:   __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CH@GBJHKGKC@View?4MemoryView?4memoryview?4is_f_@
	mov	edx, 13856				; 00003620H
	mov	r8d, 617				; 00000269H
	mov	DWORD PTR __pyx_lineno, 617		; 00000269H
	mov	DWORD PTR __pyx_clineno, 13856		; 00003620H
	mov	QWORD PTR __pyx_filename, r9
$__pyx_L1_error$24106:
	call	__Pyx_AddTraceback

; 13874:   __pyx_r = NULL;
; 13875:   __pyx_L0:;
; 13876:   __Pyx_XGIVEREF(__pyx_r);
; 13877:   __Pyx_RefNannyFinishContext();
; 13878:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$24107:

; 13879: }

	add	rsp, 448				; 000001c0H
	pop	rbx
	ret	0
$LN24@pyx_memory@35:

; 13847: 
; 13848:   /* "View.MemoryView":617
; 13849:  *         cdef __Pyx_memviewslice tmp
; 13850:  *         mslice = get_slice_from_memview(self, &tmp)
; 13851:  *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
; 13852:  * 
; 13853:  *     def copy(self):
; 13854:  */
; 13855:   __Pyx_XDECREF(__pyx_r);
; 13856:   __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 617, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_ZeroStruct
	jmp	SHORT $LN25@pyx_memory@35
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@EBCLHCNA@View?4MemoryView?4memview_slice?$AA@ ; `string'
PUBLIC	$T44115
PUBLIC	$T44114
PUBLIC	??_C@_0BA@MLNPJDBI@memviewsliceobj?$AA@		; `string'
EXTRN	__imp_PyErr_SetNone:PROC
EXTRN	__imp_PyExc_AssertionError:QWORD
EXTRN	__imp_Py_OptimizeFlag:DWORD
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memview_slice DD imagerel __pyx_memview_slice
	DD	imagerel __pyx_memview_slice+18
	DD	imagerel $unwind$__pyx_memview_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memview_slice DD imagerel __pyx_memview_slice+18
	DD	imagerel __pyx_memview_slice+4095
	DD	imagerel $chain$5$__pyx_memview_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memview_slice DD imagerel __pyx_memview_slice+4095
	DD	imagerel __pyx_memview_slice+4124
	DD	imagerel $chain$6$__pyx_memview_slice
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memview_slice DD imagerel __pyx_memview_slice+4124
	DD	imagerel __pyx_memview_slice+4157
	DD	imagerel $chain$7$__pyx_memview_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memview_slice DD 021H
	DD	imagerel __pyx_memview_slice
	DD	imagerel __pyx_memview_slice+18
	DD	imagerel $unwind$__pyx_memview_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memview_slice DD 020021H
	DD	04f6400H
	DD	imagerel __pyx_memview_slice
	DD	imagerel __pyx_memview_slice+18
	DD	imagerel $unwind$__pyx_memview_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memview_slice DD 0c3521H
	DD	04cf435H
	DD	04dd414H
	DD	04e7410H
	DD	04f640cH
	DD	0505408H
	DD	0553404H
	DD	imagerel __pyx_memview_slice
	DD	imagerel __pyx_memview_slice+18
	DD	imagerel $unwind$__pyx_memview_slice
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memview_slice DD 041201H
	DD	0510112H
	DD	0c009e00bH
xdata	ENDS
;	COMDAT ??_C@_0BO@EBCLHCNA@View?4MemoryView?4memview_slice?$AA@
CONST	SEGMENT
??_C@_0BO@EBCLHCNA@View?4MemoryView?4memview_slice?$AA@ DB 'View.MemoryVi'
	DB	'ew.memview_slice', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLNPJDBI@memviewsliceobj?$AA@
CONST	SEGMENT
??_C@_0BA@MLNPJDBI@memviewsliceobj?$AA@ DB 'memviewsliceobj', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memview_slice
_TEXT	SEGMENT
$T44390 = 112
__pyx_t_7$1$ = 120
__pyx_t_8$1$ = 128
$T44391 = 136
__pyx_t_6$1$ = 144
__pyx_v_suboffset_dim$ = 148
__pyx_v_memviewsliceobj$1$ = 152
__pyx_v_p_src$1$ = 160
__pyx_v_start$1$ = 168
$T44389 = 176
$T44115 = 192
$T44114 = 192
__pyx_v_src$ = 192
__pyx_v_dst$ = 400
__pyx_v_memview$ = 672
__pyx_v_indices$ = 680
__pyx_v_new_ndim$1$ = 688
__pyx_v_dim$1$ = 696
__pyx_memview_slice PROC				; COMDAT

; 14850: static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {

	mov	r11, rsp
	mov	QWORD PTR [r11+8], rcx
	push	r12
	push	r14
	sub	rsp, 648				; 00000288H
	mov	QWORD PTR [r11+16], rbx
	mov	QWORD PTR [r11-24], rbp
	mov	QWORD PTR [r11-32], rsi
	mov	QWORD PTR [r11-40], rdi
	mov	QWORD PTR [r11-48], r13
	mov	rsi, rcx
	mov	r14, rdx

; 14851:   int __pyx_v_new_ndim;
; 14852:   int __pyx_v_suboffset_dim;
; 14853:   int __pyx_v_dim;
; 14854:   __Pyx_memviewslice __pyx_v_src;
; 14855:   __Pyx_memviewslice __pyx_v_dst;
; 14856:   __Pyx_memviewslice *__pyx_v_p_src;
; 14857:   struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;

	xor	eax, eax

; 14858:   __Pyx_memviewslice *__pyx_v_p_dst;
; 14859:   int *__pyx_v_p_suboffset_dim;
; 14860:   Py_ssize_t __pyx_v_start;
; 14861:   Py_ssize_t __pyx_v_stop;
; 14862:   Py_ssize_t __pyx_v_step;
; 14863:   int __pyx_v_have_start;
; 14864:   int __pyx_v_have_stop;
; 14865:   int __pyx_v_have_step;
; 14866:   PyObject *__pyx_v_index = NULL;
; 14867:   struct __pyx_memoryview_obj *__pyx_r = NULL;
; 14868:   __Pyx_RefNannyDeclarations
; 14869:   int __pyx_t_1;
; 14870:   int __pyx_t_2;
; 14871:   PyObject *__pyx_t_3 = NULL;
; 14872:   struct __pyx_memoryview_obj *__pyx_t_4;
; 14873:   char *__pyx_t_5;
; 14874:   int __pyx_t_6;
; 14875:   Py_ssize_t __pyx_t_7;
; 14876:   PyObject *(*__pyx_t_8)(PyObject *);
; 14877:   PyObject *__pyx_t_9 = NULL;
; 14878:   Py_ssize_t __pyx_t_10;
; 14879:   int __pyx_t_11;
; 14880:   Py_ssize_t __pyx_t_12;
; 14881:   __Pyx_RefNannySetupContext("memview_slice", 0);
; 14882: 
; 14883:   /* "View.MemoryView":699
; 14884:  * @cname('__pyx_memview_slice')
; 14885:  * cdef memoryview memview_slice(memoryview memview, object indices):
; 14886:  *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
; 14887:  *     cdef bint negative_step
; 14888:  *     cdef __Pyx_memviewslice src, dst
; 14889:  */
; 14890:   __pyx_v_new_ndim = 0;
; 14891:   __pyx_v_suboffset_dim = -1;
; 14892: 
; 14893:   /* "View.MemoryView":706
; 14894:  * 
; 14895:  * 
; 14896:  *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
; 14897:  * 
; 14898:  *     cdef _memoryviewslice memviewsliceobj
; 14899:  */
; 14900:   memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

	lea	rcx, QWORD PTR [r11-264]
	or	r13d, -1
	xor	ebp, ebp
	mov	r8d, 208				; 000000d0H
	xor	edx, edx
	mov	QWORD PTR [r11-56], r15
	mov	QWORD PTR __pyx_v_memviewsliceobj$1$[rsp], rax
	mov	DWORD PTR [r11-516], r13d
	xor	r12d, r12d
	xor	edi, edi
	mov	DWORD PTR __pyx_v_new_ndim$1$[rsp], ebp
	call	memset

; 14901: 
; 14902:   /* "View.MemoryView":710
; 14903:  *     cdef _memoryviewslice memviewsliceobj
; 14904:  * 
; 14905:  *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
; 14906:  * 
; 14907:  *     if isinstance(memview, _memoryviewslice):
; 14908:  */
; 14909:   #ifndef CYTHON_WITHOUT_ASSERTIONS
; 14910:   if (unlikely(!Py_OptimizeFlag)) {

	mov	r11, QWORD PTR __imp_Py_OptimizeFlag
	cmp	DWORD PTR [r11], edi
	jne	SHORT $LN175@pyx_memvie@2

; 14911:     if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {

	cmp	DWORD PTR [rsi+108], edi
	jg	SHORT $LN175@pyx_memvie@2

; 14912:       PyErr_SetNone(PyExc_AssertionError);

	mov	rcx, QWORD PTR __imp_PyExc_AssertionError
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetNone

; 14913:       __PYX_ERR(2, 710, __pyx_L1_error)

	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 710		; 000002c6H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 14913		; 00003a41H
	jmp	$LN23@pyx_memvie@2
$LN175@pyx_memvie@2:

; 14914:     }
; 14915:   }
; 14916:   #endif
; 14917: 
; 14918:   /* "View.MemoryView":712
; 14919:  *     assert memview.view.ndim > 0
; 14920:  * 
; 14921:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 14922:  *         memviewsliceobj = memview
; 14923:  *         p_src = &memviewsliceobj.from_slice
; 14924:  */
; 14925:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

	mov	rax, QWORD PTR [rsi+8]
	mov	rdx, QWORD PTR __pyx_memoryviewslice_type
	cmp	rax, rdx
	je	$LN301@pyx_memvie@2
	mov	r9, QWORD PTR [rax+344]
	test	r9, r9
	je	SHORT $LL191@pyx_memvie@2
	mov	r8, QWORD PTR [r9+16]
	xor	ecx, ecx
	test	r8, r8
	jle	SHORT $LN174@pyx_memvie@2
	lea	rax, QWORD PTR [r9+24]
	npad	2
$LL184@pyx_memvie@2:
	cmp	QWORD PTR [rax], rdx
	je	$LN301@pyx_memvie@2
	inc	rcx
	add	rax, 8
	cmp	rcx, r8
	jl	SHORT $LL184@pyx_memvie@2

; 15271:       __pyx_v_have_step = __pyx_t_1;
; 15272: 
; 15273:       /* "View.MemoryView":756
; 15274:  *             have_step = index.step is not None
; 15275:  * 
; 15276:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15277:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15278:  *                 dim, new_ndim, p_suboffset_dim,
; 15279:  */
; 15280:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 756, __pyx_L1_error)

	jmp	SHORT $LN174@pyx_memvie@2
	npad	9

; 14914:     }
; 14915:   }
; 14916:   #endif
; 14917: 
; 14918:   /* "View.MemoryView":712
; 14919:  *     assert memview.view.ndim > 0
; 14920:  * 
; 14921:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 14922:  *         memviewsliceobj = memview
; 14923:  *         p_src = &memviewsliceobj.from_slice
; 14924:  */
; 14925:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

$LL191@pyx_memvie@2:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rdx
	je	$LN301@pyx_memvie@2
	test	rax, rax
	jne	SHORT $LL191@pyx_memvie@2
	cmp	rdx, QWORD PTR __imp_PyBaseObject_Type
	sete	al

; 14926:   __pyx_t_2 = (__pyx_t_1 != 0);

	test	eax, eax

; 14927:   if (__pyx_t_2) {

	jne	$LN301@pyx_memvie@2
$LN174@pyx_memvie@2:

; 14950: 
; 14951:     /* "View.MemoryView":712
; 14952:  *     assert memview.view.ndim > 0
; 14953:  * 
; 14954:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 14955:  *         memviewsliceobj = memview
; 14956:  *         p_src = &memviewsliceobj.from_slice
; 14957:  */
; 14958:     goto __pyx_L3;
; 14959:   }
; 14960: 
; 14961:   /* "View.MemoryView":716
; 14962:  *         p_src = &memviewsliceobj.from_slice
; 14963:  *     else:
; 14964:  *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
; 14965:  *         p_src = &src
; 14966:  * 
; 14967:  */
; 14968:   /*else*/ {
; 14969:     __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

	movsxd	r8, DWORD PTR [rsi+108]
	mov	rax, QWORD PTR [rsi+72]
	mov	r9, QWORD PTR [rsi+120]
	mov	r10, QWORD PTR [rsi+128]
	mov	rbx, QWORD PTR [rsi+136]
	xor	edx, edx
	mov	QWORD PTR __pyx_v_src$[rsp], rsi
	mov	QWORD PTR __pyx_v_src$[rsp+8], rax
	test	r8, r8
	jle	SHORT $LN196@pyx_memvie@2
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	mov	r11, rbx
	sub	r9, rax
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	sub	r10, rax
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	sub	r11, rax
	npad	4
$LL198@pyx_memvie@2:
	lea	rax, QWORD PTR [r9+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	lea	rax, QWORD PTR [r10+rdx*8]
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+16], rcx
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+80], rcx
	test	rbx, rbx
	je	SHORT $LN195@pyx_memvie@2
	lea	rax, QWORD PTR [r11+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	jmp	SHORT $LN194@pyx_memvie@2
$LN195@pyx_memvie@2:
	or	rcx, -1
$LN194@pyx_memvie@2:
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+144], rcx
	inc	rdx
	cmp	rdx, r8
	jl	SHORT $LL198@pyx_memvie@2
$LN196@pyx_memvie@2:

; 14970: 
; 14971:     /* "View.MemoryView":717
; 14972:  *     else:
; 14973:  *         slice_copy(memview, &src)
; 14974:  *         p_src = &src             # <<<<<<<<<<<<<<
; 14975:  * 
; 14976:  * 
; 14977:  */
; 14978:     __pyx_v_p_src = (&__pyx_v_src);

	lea	rdx, QWORD PTR __pyx_v_src$[rsp]
	mov	QWORD PTR __pyx_v_p_src$1$[rsp], rdx
	jmp	SHORT $__pyx_L3$25003
$LN301@pyx_memvie@2:

; 14928: 
; 14929:     /* "View.MemoryView":713
; 14930:  * 
; 14931:  *     if isinstance(memview, _memoryviewslice):
; 14932:  *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
; 14933:  *         p_src = &memviewsliceobj.from_slice
; 14934:  *     else:
; 14935:  */
; 14936:     if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 713, __pyx_L1_error)

	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN173@pyx_memvie@2
	mov	rcx, rsi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN173@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 713		; 000002c9H
	mov	DWORD PTR __pyx_clineno, 14936		; 00003a58H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN23@pyx_memvie@2
$LN173@pyx_memvie@2:

; 14937:     __pyx_t_3 = ((PyObject *)__pyx_v_memview);
; 14938:     __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [rsi]

; 14939:     __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
; 14940:     __pyx_t_3 = 0;
; 14941: 
; 14942:     /* "View.MemoryView":714
; 14943:  *     if isinstance(memview, _memoryviewslice):
; 14944:  *         memviewsliceobj = memview
; 14945:  *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
; 14946:  *     else:
; 14947:  *         slice_copy(memview, &src)
; 14948:  */
; 14949:     __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

	lea	rdx, QWORD PTR [rsi+184]
	mov	QWORD PTR __pyx_v_memviewsliceobj$1$[rsp], rsi
	mov	QWORD PTR __pyx_v_p_src$1$[rsp], rdx
$__pyx_L3$25003:

; 14979:   }
; 14980:   __pyx_L3:;
; 14981: 
; 14982:   /* "View.MemoryView":723
; 14983:  * 
; 14984:  * 
; 14985:  *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
; 14986:  *     dst.data = p_src.data
; 14987:  * 
; 14988:  */
; 14989:   __pyx_t_4 = __pyx_v_p_src->memview;
; 14990:   __pyx_v_dst.memview = __pyx_t_4;

	mov	rax, QWORD PTR [rdx]

; 14991: 
; 14992:   /* "View.MemoryView":724
; 14993:  * 
; 14994:  *     dst.memview = p_src.memview
; 14995:  *     dst.data = p_src.data             # <<<<<<<<<<<<<<
; 14996:  * 
; 14997:  * 
; 14998:  */
; 14999:   __pyx_t_5 = __pyx_v_p_src->data;
; 15000:   __pyx_v_dst.data = __pyx_t_5;
; 15001: 
; 15002:   /* "View.MemoryView":729
; 15003:  * 
; 15004:  * 
; 15005:  *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
; 15006:  *     cdef int *p_suboffset_dim = &suboffset_dim
; 15007:  *     cdef Py_ssize_t start, stop, step
; 15008:  */
; 15009:   __pyx_v_p_dst = (&__pyx_v_dst);
; 15010: 
; 15011:   /* "View.MemoryView":730
; 15012:  * 
; 15013:  *     cdef __Pyx_memviewslice *p_dst = &dst
; 15014:  *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
; 15015:  *     cdef Py_ssize_t start, stop, step
; 15016:  *     cdef bint have_start, have_stop, have_step
; 15017:  */
; 15018:   __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);
; 15019: 
; 15020:   /* "View.MemoryView":734
; 15021:  *     cdef bint have_start, have_stop, have_step
; 15022:  * 
; 15023:  *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
; 15024:  *         if PyIndex_Check(index):
; 15025:  *             slice_memviewslice(
; 15026:  */
; 15027:   __pyx_t_6 = 0;

	mov	DWORD PTR __pyx_t_6$1$[rsp], edi
	mov	QWORD PTR __pyx_v_dst$[rsp], rax
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR __pyx_v_dst$[rsp+8], rax

; 15028:   if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {

	mov	rax, QWORD PTR [r14+8]
	cmp	rax, QWORD PTR __imp_PyList_Type
	je	$LN171@pyx_memvie@2
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	je	$LN171@pyx_memvie@2

; 15031:   } else {
; 15032:     __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 734, __pyx_L1_error)

	or	rbx, -1
	mov	rcx, r14
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbx
	call	QWORD PTR __imp_PyObject_GetIter
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN169@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 734		; 000002deH
	mov	DWORD PTR __pyx_clineno, 15032		; 00003ab8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN169@pyx_memvie@2:

; 15033:     __Pyx_GOTREF(__pyx_t_3);
; 15034:     __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 734, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR __pyx_t_8$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN277@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 734		; 000002deH
	mov	DWORD PTR __pyx_clineno, 15034		; 00003abaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN171@pyx_memvie@2:

; 15029:     __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;

	inc	QWORD PTR [r14]
	xor	ebx, ebx

; 15030:     __pyx_t_8 = NULL;

	xor	eax, eax
	mov	QWORD PTR __pyx_t_8$1$[rsp], rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbx
$LN277@pyx_memvie@2:
	xor	edx, edx
	xor	esi, esi
	mov	QWORD PTR $T44391[rsp], rsi
	mov	QWORD PTR $T44390[rsp], rdx

; 15271:       __pyx_v_have_step = __pyx_t_1;
; 15272: 
; 15273:       /* "View.MemoryView":756
; 15274:  *             have_step = index.step is not None
; 15275:  * 
; 15276:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15277:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15278:  *                 dim, new_ndim, p_suboffset_dim,
; 15279:  */
; 15280:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 756, __pyx_L1_error)

	jmp	SHORT $LL167@pyx_memvie@2
	npad	6
$LL308@pyx_memvie@2:
	mov	ebp, DWORD PTR __pyx_v_new_ndim$1$[rsp]
$LL167@pyx_memvie@2:

; 15035:   }
; 15036:   for (;;) {
; 15037:     if (likely(!__pyx_t_8)) {

	test	rax, rax
	jne	SHORT $LN165@pyx_memvie@2

; 15038:       if (likely(PyList_CheckExact(__pyx_t_3))) {

	mov	rax, QWORD PTR __imp_PyList_Type
	cmp	QWORD PTR [r14+8], rax
	jne	SHORT $LN164@pyx_memvie@2

; 15039:         if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;

	cmp	rbx, QWORD PTR [r14+16]
	jge	$LN72@pyx_memvie@2

; 15040:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 15041:         __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 734, __pyx_L1_error)

	mov	rax, QWORD PTR [r14+24]
	mov	rdi, QWORD PTR [rax+rbx*8]
	inc	QWORD PTR [rdi]
	inc	rbx
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbx

; 15042:         #else
; 15043:         __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 734, __pyx_L1_error)
; 15044:         __Pyx_GOTREF(__pyx_t_9);
; 15045:         #endif
; 15046:       } else {

	jmp	SHORT $LN153@pyx_memvie@2
$LN164@pyx_memvie@2:

; 15047:         if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

	cmp	rbx, QWORD PTR [r14+16]
	jge	$LN72@pyx_memvie@2

; 15048:         #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 15049:         __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 734, __pyx_L1_error)

	mov	rdi, QWORD PTR [r14+rbx*8+24]
	inc	QWORD PTR [rdi]
	inc	rbx
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbx

; 15050:         #else
; 15051:         __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 734, __pyx_L1_error)
; 15052:         __Pyx_GOTREF(__pyx_t_9);
; 15053:         #endif
; 15054:       }
; 15055:     } else {

	jmp	SHORT $LN153@pyx_memvie@2
$LN165@pyx_memvie@2:

; 15056:       __pyx_t_9 = __pyx_t_8(__pyx_t_3);

	mov	rcx, r14
	call	rax
	mov	rdi, rax

; 15057:       if (unlikely(!__pyx_t_9)) {

	test	rax, rax
	je	$LN282@pyx_memvie@2
	mov	rdx, QWORD PTR $T44390[rsp]
$LN153@pyx_memvie@2:

; 15062:         }
; 15063:         break;
; 15064:       }
; 15065:       __Pyx_GOTREF(__pyx_t_9);
; 15066:     }
; 15067:     __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);

	mov	rcx, r12
	mov	r12, rdi
	test	rcx, rcx
	je	SHORT $LN143@pyx_memvie@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN144@pyx_memvie@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN144@pyx_memvie@2:
	mov	rdx, QWORD PTR $T44390[rsp]
$LN143@pyx_memvie@2:

; 15068:     __pyx_t_9 = 0;
; 15069:     __pyx_v_dim = __pyx_t_6;

	mov	r8d, DWORD PTR __pyx_t_6$1$[rsp]

; 15070:     __pyx_t_6 = (__pyx_t_6 + 1);
; 15071: 
; 15072:     /* "View.MemoryView":735
; 15073:  * 
; 15074:  *     for dim, index in enumerate(indices):
; 15075:  *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
; 15076:  *             slice_memviewslice(
; 15077:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15078:  */
; 15079:     __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);

	mov	rax, QWORD PTR [r12+8]
	mov	r15, rdx
	mov	rcx, QWORD PTR [rax+96]
	mov	QWORD PTR $T44389[rsp], rdx
	inc	rdx
	mov	DWORD PTR __pyx_v_dim$1$[rsp], r8d
	inc	r8d
	xor	edi, edi
	mov	DWORD PTR __pyx_t_6$1$[rsp], r8d
	mov	QWORD PTR $T44390[rsp], rdx
	test	rcx, rcx
	je	$LN140@pyx_memvie@2
	bt	DWORD PTR [rax+168], 17
	jae	$LN140@pyx_memvie@2
	cmp	QWORD PTR [rcx+304], rdi
	je	$LN140@pyx_memvie@2

; 15080:     if (__pyx_t_2) {
; 15081: 
; 15082:       /* "View.MemoryView":739
; 15083:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15084:  *                 dim, new_ndim, p_suboffset_dim,
; 15085:  *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
; 15086:  *                 0, 0, 0, # have_{start,stop,step}
; 15087:  *                 False)
; 15088:  */
; 15089:       __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 739, __pyx_L1_error)

	mov	rcx, r12
	call	__Pyx_PyIndex_AsSsize_t
	mov	rbx, rax
	cmp	rax, -1
	jne	SHORT $LN139@pyx_memvie@2
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN283@pyx_memvie@2
$LN139@pyx_memvie@2:

; 15090: 
; 15091:       /* "View.MemoryView":736
; 15092:  *     for dim, index in enumerate(indices):
; 15093:  *         if PyIndex_Check(index):
; 15094:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15095:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15096:  *                 dim, new_ndim, p_suboffset_dim,
; 15097:  */
; 15098:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 736, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_v_p_src$1$[rsp]
	mov	rbp, QWORD PTR [rdx+r15*8+144]
	mov	rsi, QWORD PTR [rdx+r15*8+80]
	mov	rcx, QWORD PTR [rdx+r15*8+16]
	test	rbx, rbx
	jns	SHORT $LN229@pyx_memvie@2
	add	rbx, rcx
$LN229@pyx_memvie@2:
	xor	eax, eax
	test	rbx, rbx
	setns	al
	test	eax, eax
	je	SHORT $LN300@pyx_memvie@2
	xor	eax, eax
	cmp	rbx, rcx
	setl	al
	test	eax, eax
	jne	$LN307@pyx_memvie@2
$LN300@pyx_memvie@2:
	mov	r15d, DWORD PTR __pyx_v_dim$1$[rsp]
	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	lea	rdx, OFFSET FLAT:??_C@_0BO@JFECOFFC@Index?5out?5of?5bounds?5?$CIaxis?5?$CFd?$CJ?$AA@
	mov	r8d, r15d
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	jne	$__pyx_L3$44173
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 820		; 00000334H
	mov	DWORD PTR __pyx_clineno, 15494		; 00003c86H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$44172:
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CD@HGMCNFNC@View?4MemoryView?4slice_memviewsli@
	mov	ebx, eax
	call	__Pyx_AddTraceback
	mov	ecx, ebx
	call	QWORD PTR __imp_PyGILState_Release
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 736		; 000002e0H
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 15098		; 00003afaH
	jmp	$__pyx_L1_error$24992
$LN307@pyx_memvie@2:

; 15271:       __pyx_v_have_step = __pyx_t_1;
; 15272: 
; 15273:       /* "View.MemoryView":756
; 15274:  *             have_step = index.step is not None
; 15275:  * 
; 15276:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15277:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15278:  *                 dim, new_ndim, p_suboffset_dim,
; 15279:  */
; 15280:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 756, __pyx_L1_error)

	mov	r15d, DWORD PTR __pyx_v_dim$1$[rsp]

; 15090: 
; 15091:       /* "View.MemoryView":736
; 15092:  *     for dim, index in enumerate(indices):
; 15093:  *         if PyIndex_Check(index):
; 15094:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15095:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15096:  *                 dim, new_ndim, p_suboffset_dim,
; 15097:  */
; 15098:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 736, __pyx_L1_error)

$__pyx_L3$44173:
	test	r13d, r13d
	jns	SHORT $LN205@pyx_memvie@2
	imul	rsi, rbx
	add	QWORD PTR __pyx_v_dst$[rsp+8], rsi
	jmp	SHORT $__pyx_L23$44204
$LN205@pyx_memvie@2:
	imul	rsi, rbx
	movsxd	rax, r13d
	add	QWORD PTR __pyx_v_dst$[rsp+rax*8+144], rsi
$__pyx_L23$44204:
	mov	rbx, QWORD PTR __pyx_t_7$1$[rsp]
	mov	rsi, QWORD PTR $T44391[rsp]
	mov	rax, QWORD PTR __pyx_t_8$1$[rsp]
	mov	rdx, QWORD PTR $T44390[rsp]
	test	rbp, rbp
	js	$LL308@pyx_memvie@2
	cmp	DWORD PTR __pyx_v_new_ndim$1$[rsp], edi
	jne	SHORT $LN202@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_v_dst$[rsp+8]
	mov	rax, QWORD PTR [rax]
	add	rax, rbp
	mov	ebp, DWORD PTR __pyx_v_new_ndim$1$[rsp]
	mov	QWORD PTR __pyx_v_dst$[rsp+8], rax
	mov	rax, QWORD PTR __pyx_t_8$1$[rsp]
	jmp	$LL167@pyx_memvie@2
$LN202@pyx_memvie@2:
	mov	rcx, QWORD PTR __pyx_builtin_IndexError
	lea	rdx, OFFSET FLAT:??_C@_0EF@BLHDGKFL@All?5dimensions?5preceding?5dimensi@
	mov	r8d, r15d
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	je	$LN305@pyx_memvie@2

; 15099: 
; 15100:       /* "View.MemoryView":735
; 15101:  * 
; 15102:  *     for dim, index in enumerate(indices):
; 15103:  *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
; 15104:  *             slice_memviewslice(
; 15105:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15106:  */
; 15107:       goto __pyx_L6;

	mov	ebp, DWORD PTR __pyx_v_new_ndim$1$[rsp]
	mov	rax, QWORD PTR __pyx_t_8$1$[rsp]
	mov	rdx, QWORD PTR $T44390[rsp]
$__pyx_L26$44208:
$__pyx_L25$44210:
	jmp	$LL167@pyx_memvie@2
$LN140@pyx_memvie@2:

; 15108:     }
; 15109: 
; 15110:     /* "View.MemoryView":742
; 15111:  *                 0, 0, 0, # have_{start,stop,step}
; 15112:  *                 False)
; 15113:  *         elif index is None:             # <<<<<<<<<<<<<<
; 15114:  *             p_dst.shape[new_ndim] = 1
; 15115:  *             p_dst.strides[new_ndim] = 0
; 15116:  */
; 15117:     __pyx_t_2 = (__pyx_v_index == Py_None);

	cmp	r12, QWORD PTR __imp__Py_NoneStruct

; 15118:     __pyx_t_1 = (__pyx_t_2 != 0);
; 15119:     if (__pyx_t_1) {

	jne	SHORT $LN137@pyx_memvie@2

; 15120: 
; 15121:       /* "View.MemoryView":743
; 15122:  *                 False)
; 15123:  *         elif index is None:
; 15124:  *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
; 15125:  *             p_dst.strides[new_ndim] = 0
; 15126:  *             p_dst.suboffsets[new_ndim] = -1
; 15127:  */
; 15128:       (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;
; 15129: 
; 15130:       /* "View.MemoryView":744
; 15131:  *         elif index is None:
; 15132:  *             p_dst.shape[new_ndim] = 1
; 15133:  *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
; 15134:  *             p_dst.suboffsets[new_ndim] = -1
; 15135:  *             new_ndim += 1
; 15136:  */
; 15137:       (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;
; 15138: 
; 15139:       /* "View.MemoryView":745
; 15140:  *             p_dst.shape[new_ndim] = 1
; 15141:  *             p_dst.strides[new_ndim] = 0
; 15142:  *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
; 15143:  *             new_ndim += 1
; 15144:  *         else:
; 15145:  */
; 15146:       (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;
; 15147: 
; 15148:       /* "View.MemoryView":746
; 15149:  *             p_dst.strides[new_ndim] = 0
; 15150:  *             p_dst.suboffsets[new_ndim] = -1
; 15151:  *             new_ndim += 1             # <<<<<<<<<<<<<<
; 15152:  *         else:
; 15153:  *             start = index.start or 0
; 15154:  */
; 15155:       __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
; 15156: 
; 15157:       /* "View.MemoryView":742
; 15158:  *                 0, 0, 0, # have_{start,stop,step}
; 15159:  *                 False)
; 15160:  *         elif index is None:             # <<<<<<<<<<<<<<
; 15161:  *             p_dst.shape[new_ndim] = 1
; 15162:  *             p_dst.strides[new_ndim] = 0
; 15163:  */
; 15164:       goto __pyx_L6;

	mov	rax, QWORD PTR __pyx_t_8$1$[rsp]
	inc	ebp
	mov	QWORD PTR __pyx_v_dst$[rsp+rsi*8+16], 1
	mov	QWORD PTR __pyx_v_dst$[rsp+rsi*8+80], rdi
	mov	QWORD PTR __pyx_v_dst$[rsp+rsi*8+144], -1
	inc	rsi
	mov	QWORD PTR $T44391[rsp], rsi
	mov	DWORD PTR __pyx_v_new_ndim$1$[rsp], ebp
	jmp	$LL167@pyx_memvie@2
$LN137@pyx_memvie@2:

; 15165:     }
; 15166: 
; 15167:     /* "View.MemoryView":748
; 15168:  *             new_ndim += 1
; 15169:  *         else:
; 15170:  *             start = index.start or 0             # <<<<<<<<<<<<<<
; 15171:  *             stop = index.stop or 0
; 15172:  *             step = index.step or 0
; 15173:  */
; 15174:     /*else*/ {
; 15175:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)

	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN234@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN235@pyx_memvie@2
$LN234@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN233@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN235@pyx_memvie@2
$LN233@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN235@pyx_memvie@2:
	test	rdi, rdi
	je	$LN285@pyx_memvie@2

; 15176:       __Pyx_GOTREF(__pyx_t_9);
; 15177:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)

	xor	edx, edx
	cmp	rdi, QWORD PTR __imp__Py_TrueStruct
	sete	dl
	xor	ecx, ecx
	cmp	rdi, QWORD PTR __imp__Py_ZeroStruct
	sete	cl
	xor	eax, eax
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	sete	al
	or	ecx, eax
	or	ecx, edx
	jne	SHORT $LN237@pyx_memvie@2
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	edx, eax
$LN237@pyx_memvie@2:
	test	edx, edx
	js	$LN286@pyx_memvie@2

; 15178:       if (!__pyx_t_1) {

	test	edx, edx
	jne	SHORT $LN134@pyx_memvie@2

; 15179:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN132@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN132@pyx_memvie@2:

; 15184:         goto __pyx_L7_bool_binop_done;
; 15185:       }
; 15186:       __pyx_t_10 = 0;

	mov	QWORD PTR __pyx_v_start$1$[rsp], 0
	jmp	SHORT $__pyx_L7_bool_binop_done$25093
$LN134@pyx_memvie@2:

; 15180:       } else {
; 15181:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 748, __pyx_L1_error)

	mov	rcx, rdi
	call	__Pyx_PyIndex_AsSsize_t
	mov	QWORD PTR __pyx_v_start$1$[rsp], rax
	cmp	rax, -1
	jne	SHORT $LN127@pyx_memvie@2
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN287@pyx_memvie@2
$LN127@pyx_memvie@2:

; 15182:         __pyx_t_10 = __pyx_t_12;
; 15183:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $__pyx_L7_bool_binop_done$25093
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$__pyx_L7_bool_binop_done$25093:

; 15187:       __pyx_L7_bool_binop_done:;
; 15188:       __pyx_v_start = __pyx_t_10;
; 15189: 
; 15190:       /* "View.MemoryView":749
; 15191:  *         else:
; 15192:  *             start = index.start or 0
; 15193:  *             stop = index.stop or 0             # <<<<<<<<<<<<<<
; 15194:  *             step = index.step or 0
; 15195:  * 
; 15196:  */
; 15197:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 749, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN242@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN243@pyx_memvie@2
$LN242@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN241@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN243@pyx_memvie@2
$LN241@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN243@pyx_memvie@2:
	test	rdi, rdi
	je	$LN288@pyx_memvie@2

; 15198:       __Pyx_GOTREF(__pyx_t_9);
; 15199:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 749, __pyx_L1_error)

	xor	edx, edx
	cmp	rdi, QWORD PTR __imp__Py_TrueStruct
	sete	dl
	xor	ecx, ecx
	cmp	rdi, QWORD PTR __imp__Py_ZeroStruct
	sete	cl
	xor	eax, eax
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	sete	al
	or	ecx, eax
	or	ecx, edx
	jne	SHORT $LN245@pyx_memvie@2
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	edx, eax
$LN245@pyx_memvie@2:
	test	edx, edx
	js	$LN289@pyx_memvie@2

; 15200:       if (!__pyx_t_1) {

	test	edx, edx
	jne	SHORT $LN119@pyx_memvie@2

; 15201:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN117@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN117@pyx_memvie@2:

; 15206:         goto __pyx_L9_bool_binop_done;
; 15207:       }
; 15208:       __pyx_t_10 = 0;

	xor	r15d, r15d
	jmp	SHORT $__pyx_L9_bool_binop_done$25120
$LN119@pyx_memvie@2:

; 15202:       } else {
; 15203:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 749, __pyx_L1_error)

	mov	rcx, rdi
	call	__Pyx_PyIndex_AsSsize_t
	mov	r15, rax
	cmp	rax, -1
	jne	SHORT $LN112@pyx_memvie@2
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN290@pyx_memvie@2
$LN112@pyx_memvie@2:

; 15204:         __pyx_t_10 = __pyx_t_12;
; 15205:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $__pyx_L9_bool_binop_done$25120
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$__pyx_L9_bool_binop_done$25120:

; 15209:       __pyx_L9_bool_binop_done:;
; 15210:       __pyx_v_stop = __pyx_t_10;
; 15211: 
; 15212:       /* "View.MemoryView":750
; 15213:  *             start = index.start or 0
; 15214:  *             stop = index.stop or 0
; 15215:  *             step = index.step or 0             # <<<<<<<<<<<<<<
; 15216:  * 
; 15217:  *             have_start = index.start is not None
; 15218:  */
; 15219:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 750, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN250@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN251@pyx_memvie@2
$LN250@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN249@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN251@pyx_memvie@2
$LN249@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN251@pyx_memvie@2:
	test	rdi, rdi
	je	$LN291@pyx_memvie@2

; 15220:       __Pyx_GOTREF(__pyx_t_9);
; 15221:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 750, __pyx_L1_error)

	xor	edx, edx
	cmp	rdi, QWORD PTR __imp__Py_TrueStruct
	sete	dl
	xor	ecx, ecx
	cmp	rdi, QWORD PTR __imp__Py_ZeroStruct
	sete	cl
	xor	eax, eax
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	sete	al
	or	ecx, eax
	or	ecx, edx
	jne	SHORT $LN253@pyx_memvie@2
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	edx, eax
$LN253@pyx_memvie@2:
	test	edx, edx
	js	$LN292@pyx_memvie@2

; 15222:       if (!__pyx_t_1) {

	test	edx, edx
	jne	SHORT $LN104@pyx_memvie@2

; 15223:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN102@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN102@pyx_memvie@2:

; 15228:         goto __pyx_L11_bool_binop_done;
; 15229:       }
; 15230:       __pyx_t_10 = 0;

	xor	r13d, r13d
	jmp	SHORT $__pyx_L11_bool_binop_done$25147
$LN104@pyx_memvie@2:

; 15224:       } else {
; 15225:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 750, __pyx_L1_error)

	mov	rcx, rdi
	call	__Pyx_PyIndex_AsSsize_t
	mov	r13, rax
	cmp	rax, -1
	jne	SHORT $LN97@pyx_memvie@2
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN293@pyx_memvie@2
$LN97@pyx_memvie@2:

; 15226:         __pyx_t_10 = __pyx_t_12;
; 15227:         __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $__pyx_L11_bool_binop_done$25147
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$__pyx_L11_bool_binop_done$25147:

; 15231:       __pyx_L11_bool_binop_done:;
; 15232:       __pyx_v_step = __pyx_t_10;
; 15233: 
; 15234:       /* "View.MemoryView":752
; 15235:  *             step = index.step or 0
; 15236:  * 
; 15237:  *             have_start = index.start is not None             # <<<<<<<<<<<<<<
; 15238:  *             have_stop = index.stop is not None
; 15239:  *             have_step = index.step is not None
; 15240:  */
; 15241:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 752, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN258@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN259@pyx_memvie@2
$LN258@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN257@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN259@pyx_memvie@2
$LN257@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_start
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN259@pyx_memvie@2:
	test	rdi, rdi
	je	$LN294@pyx_memvie@2

; 15242:       __Pyx_GOTREF(__pyx_t_9);
; 15243:       __pyx_t_1 = (__pyx_t_9 != Py_None);

	xor	ebp, ebp
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	setne	bpl

; 15244:       __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN89@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN89@pyx_memvie@2:

; 15245:       __pyx_v_have_start = __pyx_t_1;
; 15246: 
; 15247:       /* "View.MemoryView":753
; 15248:  * 
; 15249:  *             have_start = index.start is not None
; 15250:  *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
; 15251:  *             have_step = index.step is not None
; 15252:  * 
; 15253:  */
; 15254:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 753, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN262@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN263@pyx_memvie@2
$LN262@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN261@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN263@pyx_memvie@2
$LN261@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_stop
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN263@pyx_memvie@2:
	test	rdi, rdi
	je	$LN295@pyx_memvie@2

; 15255:       __Pyx_GOTREF(__pyx_t_9);
; 15256:       __pyx_t_1 = (__pyx_t_9 != Py_None);

	xor	esi, esi
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	setne	sil

; 15257:       __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN83@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN83@pyx_memvie@2:

; 15258:       __pyx_v_have_stop = __pyx_t_1;
; 15259: 
; 15260:       /* "View.MemoryView":754
; 15261:  *             have_start = index.start is not None
; 15262:  *             have_stop = index.stop is not None
; 15263:  *             have_step = index.step is not None             # <<<<<<<<<<<<<<
; 15264:  * 
; 15265:  *             slice_memviewslice(
; 15266:  */
; 15267:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 754, __pyx_L1_error)

	mov	rax, QWORD PTR [r12+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN266@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN267@pyx_memvie@2
$LN266@pyx_memvie@2:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN265@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN267@pyx_memvie@2
$LN265@pyx_memvie@2:
	mov	rdx, QWORD PTR __pyx_n_s_step
	mov	rcx, r12
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN267@pyx_memvie@2:
	test	rdi, rdi
	je	$LN296@pyx_memvie@2

; 15268:       __Pyx_GOTREF(__pyx_t_9);
; 15269:       __pyx_t_1 = (__pyx_t_9 != Py_None);

	xor	ebx, ebx
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	setne	bl

; 15270:       __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN77@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN77@pyx_memvie@2:

; 15271:       __pyx_v_have_step = __pyx_t_1;
; 15272: 
; 15273:       /* "View.MemoryView":756
; 15274:  *             have_step = index.step is not None
; 15275:  * 
; 15276:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15277:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15278:  *                 dim, new_ndim, p_suboffset_dim,
; 15279:  */
; 15280:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 756, __pyx_L1_error)

	mov	rdx, QWORD PTR $T44389[rsp]
	mov	rax, QWORD PTR __pyx_v_start$1$[rsp]
	mov	DWORD PTR [rsp+104], 1
	mov	DWORD PTR [rsp+96], ebx
	mov	DWORD PTR [rsp+88], esi
	mov	DWORD PTR [rsp+80], ebp
	mov	ebp, DWORD PTR __pyx_v_new_ndim$1$[rsp]
	mov	QWORD PTR [rsp+72], r13
	mov	QWORD PTR [rsp+64], r15
	mov	r15d, DWORD PTR __pyx_v_dim$1$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR __pyx_v_suboffset_dim$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR __pyx_v_p_src$1$[rsp]
	lea	rcx, QWORD PTR __pyx_v_dst$[rsp]
	mov	r9, QWORD PTR [rax+rdx*8+144]
	mov	r8, QWORD PTR [rax+rdx*8+80]
	mov	rdx, QWORD PTR [rax+rdx*8+16]
	mov	DWORD PTR [rsp+40], ebp
	xor	edi, edi
	mov	DWORD PTR [rsp+32], r15d
	call	__pyx_memoryview_slice_memviewslice
	cmp	eax, -1
	je	$LN297@pyx_memvie@2

; 15281: 
; 15282:       /* "View.MemoryView":762
; 15283:  *                 have_start, have_stop, have_step,
; 15284:  *                 True)
; 15285:  *             new_ndim += 1             # <<<<<<<<<<<<<<
; 15286:  * 
; 15287:  *     if isinstance(memview, _memoryviewslice):
; 15288:  */
; 15289:       __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

	mov	rsi, QWORD PTR $T44391[rsp]

; 15290:     }
; 15291:     __pyx_L6:;
; 15292: 
; 15293:     /* "View.MemoryView":734
; 15294:  *     cdef bint have_start, have_stop, have_step
; 15295:  * 
; 15296:  *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
; 15297:  *         if PyIndex_Check(index):
; 15298:  *             slice_memviewslice(
; 15299:  */
; 15300:   }

	mov	r13d, DWORD PTR __pyx_v_suboffset_dim$[rsp]
	mov	rbx, QWORD PTR __pyx_t_7$1$[rsp]
	mov	rax, QWORD PTR __pyx_t_8$1$[rsp]
	mov	rdx, QWORD PTR $T44390[rsp]
	inc	ebp
	inc	rsi
	mov	DWORD PTR __pyx_v_new_ndim$1$[rsp], ebp
$__pyx_L6$25065:
	mov	QWORD PTR $T44391[rsp], rsi
	jmp	$LL167@pyx_memvie@2
$LN283@pyx_memvie@2:

; 15080:     if (__pyx_t_2) {
; 15081: 
; 15082:       /* "View.MemoryView":739
; 15083:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15084:  *                 dim, new_ndim, p_suboffset_dim,
; 15085:  *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
; 15086:  *                 0, 0, 0, # have_{start,stop,step}
; 15087:  *                 False)
; 15088:  */
; 15089:       __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 739, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 739		; 000002e3H
	mov	DWORD PTR __pyx_clineno, 15089		; 00003af1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN305@pyx_memvie@2:

; 15090: 
; 15091:       /* "View.MemoryView":736
; 15092:  *     for dim, index in enumerate(indices):
; 15093:  *         if PyIndex_Check(index):
; 15094:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15095:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15096:  *                 dim, new_ndim, p_suboffset_dim,
; 15097:  */
; 15098:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 736, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 887		; 00000377H
	mov	DWORD PTR __pyx_clineno, 16131		; 00003f03H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$44172
$LN287@pyx_memvie@2:

; 15180:       } else {
; 15181:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 748, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 748		; 000002ecH
	mov	DWORD PTR __pyx_clineno, 15181		; 00003b4dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN290@pyx_memvie@2:

; 15202:       } else {
; 15203:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 749, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 749		; 000002edH
	mov	DWORD PTR __pyx_clineno, 15203		; 00003b63H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN293@pyx_memvie@2:

; 15224:       } else {
; 15225:         __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 750, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 750		; 000002eeH
	mov	DWORD PTR __pyx_clineno, 15225		; 00003b79H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN297@pyx_memvie@2:

; 15271:       __pyx_v_have_step = __pyx_t_1;
; 15272: 
; 15273:       /* "View.MemoryView":756
; 15274:  *             have_step = index.step is not None
; 15275:  * 
; 15276:  *             slice_memviewslice(             # <<<<<<<<<<<<<<
; 15277:  *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
; 15278:  *                 dim, new_ndim, p_suboffset_dim,
; 15279:  */
; 15280:       __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 756, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 756		; 000002f4H
	mov	DWORD PTR __pyx_clineno, 15280		; 00003bb0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN296@pyx_memvie@2:

; 15258:       __pyx_v_have_stop = __pyx_t_1;
; 15259: 
; 15260:       /* "View.MemoryView":754
; 15261:  *             have_start = index.start is not None
; 15262:  *             have_stop = index.stop is not None
; 15263:  *             have_step = index.step is not None             # <<<<<<<<<<<<<<
; 15264:  * 
; 15265:  *             slice_memviewslice(
; 15266:  */
; 15267:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 754, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 754		; 000002f2H
	mov	DWORD PTR __pyx_clineno, 15267		; 00003ba3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN295@pyx_memvie@2:

; 15245:       __pyx_v_have_start = __pyx_t_1;
; 15246: 
; 15247:       /* "View.MemoryView":753
; 15248:  * 
; 15249:  *             have_start = index.start is not None
; 15250:  *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
; 15251:  *             have_step = index.step is not None
; 15252:  * 
; 15253:  */
; 15254:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 753, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 753		; 000002f1H
	mov	DWORD PTR __pyx_clineno, 15254		; 00003b96H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN294@pyx_memvie@2:

; 15231:       __pyx_L11_bool_binop_done:;
; 15232:       __pyx_v_step = __pyx_t_10;
; 15233: 
; 15234:       /* "View.MemoryView":752
; 15235:  *             step = index.step or 0
; 15236:  * 
; 15237:  *             have_start = index.start is not None             # <<<<<<<<<<<<<<
; 15238:  *             have_stop = index.stop is not None
; 15239:  *             have_step = index.step is not None
; 15240:  */
; 15241:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 752, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 752		; 000002f0H
	mov	DWORD PTR __pyx_clineno, 15241		; 00003b89H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN292@pyx_memvie@2:

; 15220:       __Pyx_GOTREF(__pyx_t_9);
; 15221:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 750, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 750		; 000002eeH
	mov	DWORD PTR __pyx_clineno, 15221		; 00003b75H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN291@pyx_memvie@2:

; 15209:       __pyx_L9_bool_binop_done:;
; 15210:       __pyx_v_stop = __pyx_t_10;
; 15211: 
; 15212:       /* "View.MemoryView":750
; 15213:  *             start = index.start or 0
; 15214:  *             stop = index.stop or 0
; 15215:  *             step = index.step or 0             # <<<<<<<<<<<<<<
; 15216:  * 
; 15217:  *             have_start = index.start is not None
; 15218:  */
; 15219:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 750, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 750		; 000002eeH
	mov	DWORD PTR __pyx_clineno, 15219		; 00003b73H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN289@pyx_memvie@2:

; 15198:       __Pyx_GOTREF(__pyx_t_9);
; 15199:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 749, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 749		; 000002edH
	mov	DWORD PTR __pyx_clineno, 15199		; 00003b5fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN288@pyx_memvie@2:

; 15187:       __pyx_L7_bool_binop_done:;
; 15188:       __pyx_v_start = __pyx_t_10;
; 15189: 
; 15190:       /* "View.MemoryView":749
; 15191:  *         else:
; 15192:  *             start = index.start or 0
; 15193:  *             stop = index.stop or 0             # <<<<<<<<<<<<<<
; 15194:  *             step = index.step or 0
; 15195:  * 
; 15196:  */
; 15197:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 749, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 749		; 000002edH
	mov	DWORD PTR __pyx_clineno, 15197		; 00003b5dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN286@pyx_memvie@2:

; 15176:       __Pyx_GOTREF(__pyx_t_9);
; 15177:       __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 748		; 000002ecH
	mov	DWORD PTR __pyx_clineno, 15177		; 00003b49H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN285@pyx_memvie@2:

; 15165:     }
; 15166: 
; 15167:     /* "View.MemoryView":748
; 15168:  *             new_ndim += 1
; 15169:  *         else:
; 15170:  *             start = index.start or 0             # <<<<<<<<<<<<<<
; 15171:  *             stop = index.stop or 0
; 15172:  *             step = index.step or 0
; 15173:  */
; 15174:     /*else*/ {
; 15175:       __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 748		; 000002ecH
	mov	DWORD PTR __pyx_clineno, 15175		; 00003b47H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN282@pyx_memvie@2:

; 15058:         PyObject* exc_type = PyErr_Occurred();

	call	QWORD PTR __imp_PyErr_Occurred

; 15059:         if (exc_type) {

	test	rax, rax
	je	SHORT $LN72@pyx_memvie@2

; 15060:           if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

	mov	rdx, QWORD PTR __imp_PyExc_StopIteration
	mov	rcx, rax
	mov	rdx, QWORD PTR [rdx]
	call	__Pyx_PyErr_GivenExceptionMatches
	test	eax, eax
	je	$LN155@pyx_memvie@2
	call	QWORD PTR __imp_PyErr_Clear
$LN72@pyx_memvie@2:

; 15301:   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r14], -1
	jne	SHORT $LN71@pyx_memvie@2
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN71@pyx_memvie@2:

; 15302: 
; 15303:   /* "View.MemoryView":764
; 15304:  *             new_ndim += 1
; 15305:  * 
; 15306:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 15307:  *         return memoryview_fromslice(dst, new_ndim,
; 15308:  *                                     memviewsliceobj.to_object_func,
; 15309:  */
; 15310:   __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

	mov	rbx, QWORD PTR __pyx_v_memview$[rsp]
	mov	rdx, QWORD PTR __pyx_memoryviewslice_type
	mov	rcx, QWORD PTR [rbx+8]
	call	__Pyx_IsSubtype

; 15311:   __pyx_t_2 = (__pyx_t_1 != 0);

	test	eax, eax

; 15312:   if (__pyx_t_2) {

	je	$LN45@pyx_memvie@2

; 15313: 
; 15314:     /* "View.MemoryView":765
; 15315:  * 
; 15316:  *     if isinstance(memview, _memoryviewslice):
; 15317:  *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
; 15318:  *                                     memviewsliceobj.to_object_func,
; 15319:  *                                     memviewsliceobj.to_dtype_func,
; 15320:  */
; 15321:     __Pyx_XDECREF(((PyObject *)__pyx_r));
; 15322: 
; 15323:     /* "View.MemoryView":766
; 15324:  *     if isinstance(memview, _memoryviewslice):
; 15325:  *         return memoryview_fromslice(dst, new_ndim,
; 15326:  *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
; 15327:  *                                     memviewsliceobj.to_dtype_func,
; 15328:  *                                     memview.dtype_is_object)
; 15329:  */
; 15330:     if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 766, __pyx_L1_error) }

	mov	rsi, QWORD PTR __pyx_v_memviewsliceobj$1$[rsp]
	test	rsi, rsi
	jne	SHORT $LN55@pyx_memvie@2
	mov	rcx, QWORD PTR __imp_PyExc_UnboundLocalError
	lea	r8, OFFSET FLAT:??_C@_0BA@MLNPJDBI@memviewsliceobj?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DB@GMPLJDFN@local?5variable?5?8?$CFs?8?5referenced?5b@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	mov	r11, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 766		; 000002feH
	mov	QWORD PTR __pyx_filename, r11
	mov	DWORD PTR __pyx_clineno, 15330		; 00003be2H
	jmp	$LN23@pyx_memvie@2
$LN155@pyx_memvie@2:

; 15061:           else __PYX_ERR(2, 734, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 734		; 000002deH
	mov	DWORD PTR __pyx_clineno, 15061		; 00003ad5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN55@pyx_memvie@2:

; 15331: 
; 15332:     /* "View.MemoryView":767
; 15333:  *         return memoryview_fromslice(dst, new_ndim,
; 15334:  *                                     memviewsliceobj.to_object_func,
; 15335:  *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
; 15336:  *                                     memview.dtype_is_object)
; 15337:  *     else:
; 15338:  */
; 15339:     if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 767, __pyx_L1_error) }
; 15340: 
; 15341:     /* "View.MemoryView":765
; 15342:  * 
; 15343:  *     if isinstance(memview, _memoryviewslice):
; 15344:  *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
; 15345:  *                                     memviewsliceobj.to_object_func,
; 15346:  *                                     memviewsliceobj.to_dtype_func,
; 15347:  */
; 15348:     __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 765, __pyx_L1_error)

	lea	rcx, QWORD PTR $T44114[rsp]
	lea	rdx, QWORD PTR __pyx_v_dst$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11d, DWORD PTR [rbx+172]
	mov	r9, QWORD PTR [rsi+408]
	mov	r8, QWORD PTR [rsi+400]
	lea	rcx, QWORD PTR $T44114[rsp]
	mov	edx, ebp
	mov	DWORD PTR [rsp+32], r11d
	call	__pyx_memoryview_fromslice
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN54@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 765		; 000002fdH
	mov	DWORD PTR __pyx_clineno, 15348		; 00003bf4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN54@pyx_memvie@2:

; 15349:     __Pyx_GOTREF(__pyx_t_3);
; 15350:     if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 765, __pyx_L1_error)

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	$__pyx_L0$25223
	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, rax
	call	__Pyx_TypeTest
	test	eax, eax
	jne	$__pyx_L0$25223
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 765		; 000002fdH
	mov	DWORD PTR __pyx_clineno, 15350		; 00003bf6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$24992
$LN45@pyx_memvie@2:

; 15351:     __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
; 15352:     __pyx_t_3 = 0;
; 15353:     goto __pyx_L0;
; 15354: 
; 15355:     /* "View.MemoryView":764
; 15356:  *             new_ndim += 1
; 15357:  * 
; 15358:  *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
; 15359:  *         return memoryview_fromslice(dst, new_ndim,
; 15360:  *                                     memviewsliceobj.to_object_func,
; 15361:  */
; 15362:   }
; 15363: 
; 15364:   /* "View.MemoryView":770
; 15365:  *                                     memview.dtype_is_object)
; 15366:  *     else:
; 15367:  *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
; 15368:  *                                     memview.dtype_is_object)
; 15369:  * 
; 15370:  */
; 15371:   /*else*/ {
; 15372:     __Pyx_XDECREF(((PyObject *)__pyx_r));
; 15373: 
; 15374:     /* "View.MemoryView":771
; 15375:  *     else:
; 15376:  *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
; 15377:  *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
; 15378:  * 
; 15379:  * 
; 15380:  */
; 15381:     __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 770, __pyx_L1_error)

	lea	rcx, QWORD PTR $T44115[rsp]
	lea	rdx, QWORD PTR __pyx_v_dst$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11d, DWORD PTR [rbx+172]
	lea	rcx, QWORD PTR $T44115[rsp]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, ebp
	mov	DWORD PTR [rsp+32], r11d
	call	__pyx_memoryview_fromslice
	mov	r14, rax
	test	rax, rax
	jne	SHORT $LN42@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 770		; 00000302H
	mov	DWORD PTR __pyx_clineno, 15381		; 00003c15H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$24992
$LN42@pyx_memvie@2:

; 15382:     __Pyx_GOTREF(__pyx_t_3);
; 15383: 
; 15384:     /* "View.MemoryView":770
; 15385:  *                                     memview.dtype_is_object)
; 15386:  *     else:
; 15387:  *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
; 15388:  *                                     memview.dtype_is_object)
; 15389:  * 
; 15390:  */
; 15391:     if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 770, __pyx_L1_error)

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	$LN41@pyx_memvie@2
	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, rax
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN41@pyx_memvie@2
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 770		; 00000302H
	mov	DWORD PTR __pyx_clineno, 15391		; 00003c1fH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$24992:

; 15392:     __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
; 15393:     __pyx_t_3 = 0;
; 15394:     goto __pyx_L0;
; 15395:   }
; 15396: 
; 15397:   /* "View.MemoryView":698
; 15398:  * 
; 15399:  * @cname('__pyx_memview_slice')
; 15400:  * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
; 15401:  *     cdef int new_ndim = 0, suboffset_dim = -1, dim
; 15402:  *     cdef bint negative_step
; 15403:  */
; 15404: 
; 15405:   /* function exit code */
; 15406:   __pyx_L1_error:;
; 15407:   __Pyx_XDECREF(__pyx_t_3);

	test	r14, r14
	je	SHORT $LN33@pyx_memvie@2
	add	QWORD PTR [r14], -1
	jne	SHORT $LN33@pyx_memvie@2
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN33@pyx_memvie@2:

; 15408:   __Pyx_XDECREF(__pyx_t_9);

	test	rdi, rdi
	je	SHORT $LN23@pyx_memvie@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN23@pyx_memvie@2
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN23@pyx_memvie@2:

; 15409:   __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BO@EBCLHCNA@View?4MemoryView?4memview_slice?$AA@
	call	__Pyx_AddTraceback

; 15410:   __pyx_r = 0;

	mov	rsi, QWORD PTR __pyx_v_memviewsliceobj$1$[rsp]
	xor	r14d, r14d
	jmp	SHORT $__pyx_L0$25223
$LN41@pyx_memvie@2:
	mov	rsi, QWORD PTR __pyx_v_memviewsliceobj$1$[rsp]
$__pyx_L0$25223:
	mov	r15, QWORD PTR [rsp+608]
	mov	r13, QWORD PTR [rsp+616]
	mov	rdi, QWORD PTR [rsp+624]
	mov	rbp, QWORD PTR [rsp+640]
	mov	rbx, QWORD PTR [rsp+680]

; 15411:   __pyx_L0:;
; 15412:   __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);

	test	rsi, rsi
	je	SHORT $LN13@pyx_memvie@2
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN13@pyx_memvie@2
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN13@pyx_memvie@2:
	mov	rsi, QWORD PTR [rsp+632]

; 15413:   __Pyx_XDECREF(__pyx_v_index);

	test	r12, r12
	je	SHORT $LN306@pyx_memvie@2
	add	QWORD PTR [r12], -1
	jne	SHORT $LN306@pyx_memvie@2
	mov	rdx, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rdx+48]
$LN306@pyx_memvie@2:

; 15414:   __Pyx_XGIVEREF((PyObject *)__pyx_r);
; 15415:   __Pyx_RefNannyFinishContext();
; 15416:   return __pyx_r;

	mov	rax, r14

; 15417: }

	add	rsp, 648				; 00000288H
	pop	r14
	pop	r12
	ret	0
__pyx_memview_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@FIBAEBGJ@View?4MemoryView?4memoryview_copy_@ ; `string'
PUBLIC	$T44420
PUBLIC	$T44419
PUBLIC	$T44418
PUBLIC	$T44417
PUBLIC	$T44416
PUBLIC	??_C@_0BL@KMAFLFON@Dimension?5?$CFd?5is?5not?5direct?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_copy_contents DD imagerel __pyx_memoryview_copy_contents
	DD	imagerel __pyx_memoryview_copy_contents+1718
	DD	imagerel $unwind$__pyx_memoryview_copy_contents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_copy_contents DD 0b1c01H
	DD	047341cH
	DD	03e011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT ??_C@_0CJ@FIBAEBGJ@View?4MemoryView?4memoryview_copy_@
CONST	SEGMENT
??_C@_0CJ@FIBAEBGJ@View?4MemoryView?4memoryview_copy_@ DB 'View.MemoryVie'
	DB	'w.memoryview_copy_contents', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KMAFLFON@Dimension?5?$CFd?5is?5not?5direct?$AA@
CONST	SEGMENT
??_C@_0BL@KMAFLFON@Dimension?5?$CFd?5is?5not?5direct?$AA@ DB 'Dimension %'
	DB	'd is not direct', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_copy_contents
_TEXT	SEGMENT
__pyx_v_tmpdata$1$ = 64
__pyx_v_itemsize$1$ = 72
$T44420 = 80
$T44419 = 80
$T44418 = 80
$T44417 = 80
$T44416 = 80
__pyx_v_tmp$ = 288
__pyx_v_src$ = 560
__pyx_v_dst$ = 568
__pyx_v_order$1$ = 576
__pyx_v_src_ndim$ = 576
__pyx_v_dst_ndim$ = 584
__pyx_v_dtype_is_object$ = 592
__pyx_memoryview_copy_contents PROC			; COMDAT

; 19115: static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 496				; 000001f0H

; 19116:   void *__pyx_v_tmpdata;
; 19117:   size_t __pyx_v_itemsize;
; 19118:   int __pyx_v_i;
; 19119:   char __pyx_v_order;
; 19120:   int __pyx_v_broadcasting;
; 19121:   int __pyx_v_direct_copy;
; 19122:   __Pyx_memviewslice __pyx_v_tmp;
; 19123:   int __pyx_v_ndim;
; 19124:   int __pyx_r;
; 19125:   Py_ssize_t __pyx_t_1;
; 19126:   int __pyx_t_2;
; 19127:   int __pyx_t_3;
; 19128:   int __pyx_t_4;
; 19129:   int __pyx_t_5;
; 19130:   void *__pyx_t_6;
; 19131:   int __pyx_t_7;
; 19132: 
; 19133:   /* "View.MemoryView":1262
; 19134:  *     Check for overlapping memory and verify the shapes.
; 19135:  *     """
; 19136:  *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
; 19137:  *     cdef size_t itemsize = src.memview.view.itemsize
; 19138:  *     cdef int i
; 19139:  */
; 19140:   __pyx_v_tmpdata = NULL;
; 19141: 
; 19142:   /* "View.MemoryView":1263
; 19143:  *     """
; 19144:  *     cdef void *tmpdata = NULL
; 19145:  *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
; 19146:  *     cdef int i
; 19147:  *     cdef char order = get_best_order(&src, src_ndim)
; 19148:  */
; 19149:   __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
; 19150:   __pyx_v_itemsize = __pyx_t_1;

	mov	rax, QWORD PTR [rcx]
	mov	rdi, rdx

; 19151: 
; 19152:   /* "View.MemoryView":1265
; 19153:  *     cdef size_t itemsize = src.memview.view.itemsize
; 19154:  *     cdef int i
; 19155:  *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
; 19156:  *     cdef bint broadcasting = False
; 19157:  *     cdef bint direct_copy = False
; 19158:  */
; 19159:   __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

	mov	edx, r8d
	mov	rax, QWORD PTR [rax+96]
	mov	ebx, r9d
	mov	esi, r8d
	mov	r13, rcx
	mov	QWORD PTR __pyx_v_tmpdata$1$[rsp], 0
	mov	QWORD PTR __pyx_v_itemsize$1$[rsp], rax
	call	__pyx_get_best_slice_order

; 19160: 
; 19161:   /* "View.MemoryView":1266
; 19162:  *     cdef int i
; 19163:  *     cdef char order = get_best_order(&src, src_ndim)
; 19164:  *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
; 19165:  *     cdef bint direct_copy = False
; 19166:  *     cdef __Pyx_memviewslice tmp
; 19167:  */
; 19168:   __pyx_v_broadcasting = 0;

	xor	r15d, r15d

; 19169: 
; 19170:   /* "View.MemoryView":1267
; 19171:  *     cdef char order = get_best_order(&src, src_ndim)
; 19172:  *     cdef bint broadcasting = False
; 19173:  *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
; 19174:  *     cdef __Pyx_memviewslice tmp
; 19175:  * 
; 19176:  */
; 19177:   __pyx_v_direct_copy = 0;
; 19178: 
; 19179:   /* "View.MemoryView":1270
; 19180:  *     cdef __Pyx_memviewslice tmp
; 19181:  * 
; 19182:  *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
; 19183:  *         broadcast_leading(&src, src_ndim, dst_ndim)
; 19184:  *     elif dst_ndim < src_ndim:
; 19185:  */
; 19186:   __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);

	cmp	ebx, esi
	movzx	r14d, al
	mov	BYTE PTR __pyx_v_order$1$[rsp], al

; 19187:   if (__pyx_t_2) {

	jle	SHORT $LN181@pyx_memory@36

; 19188: 
; 19189:     /* "View.MemoryView":1271
; 19190:  * 
; 19191:  *     if src_ndim < dst_ndim:
; 19192:  *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
; 19193:  *     elif dst_ndim < src_ndim:
; 19194:  *         broadcast_leading(&dst, dst_ndim, src_ndim)
; 19195:  */
; 19196:     __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

	mov	r8d, ebx
	mov	edx, esi
	mov	rcx, r13

; 19197: 
; 19198:     /* "View.MemoryView":1270
; 19199:  *     cdef __Pyx_memviewslice tmp
; 19200:  * 
; 19201:  *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
; 19202:  *         broadcast_leading(&src, src_ndim, dst_ndim)
; 19203:  *     elif dst_ndim < src_ndim:
; 19204:  */
; 19205:     goto __pyx_L3;

	jmp	SHORT $LN182@pyx_memory@36
$LN181@pyx_memory@36:

; 19206:   }
; 19207: 
; 19208:   /* "View.MemoryView":1272
; 19209:  *     if src_ndim < dst_ndim:
; 19210:  *         broadcast_leading(&src, src_ndim, dst_ndim)
; 19211:  *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
; 19212:  *         broadcast_leading(&dst, dst_ndim, src_ndim)
; 19213:  * 
; 19214:  */
; 19215:   __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
; 19216:   if (__pyx_t_2) {

	jge	SHORT $__pyx_L3$27071

; 19217: 
; 19218:     /* "View.MemoryView":1273
; 19219:  *         broadcast_leading(&src, src_ndim, dst_ndim)
; 19220:  *     elif dst_ndim < src_ndim:
; 19221:  *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
; 19222:  * 
; 19223:  *     cdef int ndim = max(src_ndim, dst_ndim)
; 19224:  */
; 19225:     __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

	mov	r8d, esi
	mov	edx, ebx
	mov	rcx, rdi
$LN182@pyx_memory@36:
	call	__pyx_memoryview_broadcast_leading
$__pyx_L3$27071:

; 19226: 
; 19227:     /* "View.MemoryView":1272
; 19228:  *     if src_ndim < dst_ndim:
; 19229:  *         broadcast_leading(&src, src_ndim, dst_ndim)
; 19230:  *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
; 19231:  *         broadcast_leading(&dst, dst_ndim, src_ndim)
; 19232:  * 
; 19233:  */
; 19234:   }
; 19235:   __pyx_L3:;
; 19236: 
; 19237:   /* "View.MemoryView":1275
; 19238:  *         broadcast_leading(&dst, dst_ndim, src_ndim)
; 19239:  * 
; 19240:  *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
; 19241:  * 
; 19242:  *     for i in range(ndim):
; 19243:  */
; 19244:   __pyx_t_3 = __pyx_v_dst_ndim;
; 19245:   __pyx_t_4 = __pyx_v_src_ndim;
; 19246:   if (((__pyx_t_3 > __pyx_t_4) != 0)) {

	cmp	ebx, esi
	cmovg	esi, ebx

; 19247:     __pyx_t_5 = __pyx_t_3;
; 19248:   } else {
; 19249:     __pyx_t_5 = __pyx_t_4;
; 19250:   }
; 19251:   __pyx_v_ndim = __pyx_t_5;
; 19252: 
; 19253:   /* "View.MemoryView":1277
; 19254:  *     cdef int ndim = max(src_ndim, dst_ndim)
; 19255:  * 
; 19256:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 19257:  *         if src.shape[i] != dst.shape[i]:
; 19258:  *             if src.shape[i] == 1:
; 19259:  */
; 19260:   __pyx_t_5 = __pyx_v_ndim;
; 19261:   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {

	xor	ebp, ebp
	xor	r12d, r12d
	test	esi, esi
	jle	$LN179@pyx_memory@36
	mov	rcx, QWORD PTR __pyx_v_src$[rsp]
	lea	rbx, QWORD PTR [r13+16]
	mov	r13, rdi
	sub	r13, rcx
	movsxd	r14, esi
	npad	9
$LL19@pyx_memory@36:

; 19262:     __pyx_v_i = __pyx_t_3;
; 19263: 
; 19264:     /* "View.MemoryView":1278
; 19265:  * 
; 19266:  *     for i in range(ndim):
; 19267:  *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
; 19268:  *             if src.shape[i] == 1:
; 19269:  *                 broadcasting = True
; 19270:  */
; 19271:     __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);

	mov	r8, QWORD PTR [rbx]
	mov	rdx, QWORD PTR [r13+rbx]
	cmp	r8, rdx

; 19272:     if (__pyx_t_2) {

	je	SHORT $__pyx_L7$27080

; 19273: 
; 19274:       /* "View.MemoryView":1279
; 19275:  *     for i in range(ndim):
; 19276:  *         if src.shape[i] != dst.shape[i]:
; 19277:  *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
; 19278:  *                 broadcasting = True
; 19279:  *                 src.strides[i] = 0
; 19280:  */
; 19281:       __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);

	cmp	r8, 1

; 19282:       if (__pyx_t_2) {

	jne	SHORT $LN15@pyx_memory@36

; 19283: 
; 19284:         /* "View.MemoryView":1280
; 19285:  *         if src.shape[i] != dst.shape[i]:
; 19286:  *             if src.shape[i] == 1:
; 19287:  *                 broadcasting = True             # <<<<<<<<<<<<<<
; 19288:  *                 src.strides[i] = 0
; 19289:  *             else:
; 19290:  */
; 19291:         __pyx_v_broadcasting = 1;

	mov	r15d, r8d

; 19292: 
; 19293:         /* "View.MemoryView":1281
; 19294:  *             if src.shape[i] == 1:
; 19295:  *                 broadcasting = True
; 19296:  *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
; 19297:  *             else:
; 19298:  *                 _err_extents(i, dst.shape[i], src.shape[i])
; 19299:  */
; 19300:         (__pyx_v_src.strides[__pyx_v_i]) = 0;

	mov	QWORD PTR [rbx+64], 0

; 19301: 
; 19302:         /* "View.MemoryView":1279
; 19303:  *     for i in range(ndim):
; 19304:  *         if src.shape[i] != dst.shape[i]:
; 19305:  *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
; 19306:  *                 broadcasting = True
; 19307:  *                 src.strides[i] = 0
; 19308:  */
; 19309:         goto __pyx_L7;

	jmp	SHORT $__pyx_L7$27080
$LN15@pyx_memory@36:

; 19310:       }
; 19311: 
; 19312:       /* "View.MemoryView":1283
; 19313:  *                 src.strides[i] = 0
; 19314:  *             else:
; 19315:  *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
; 19316:  * 
; 19317:  *         if src.suboffsets[i] >= 0:
; 19318:  */
; 19319:       /*else*/ {
; 19320:         __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1283, __pyx_L1_error)

	mov	ecx, ebp
	call	__pyx_memoryview_err_extents
	cmp	eax, -1
	je	$LN157@pyx_memory@36
$__pyx_L7$27080:

; 19321:       }
; 19322:       __pyx_L7:;
; 19323: 
; 19324:       /* "View.MemoryView":1278
; 19325:  * 
; 19326:  *     for i in range(ndim):
; 19327:  *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
; 19328:  *             if src.shape[i] == 1:
; 19329:  *                 broadcasting = True
; 19330:  */
; 19331:     }
; 19332: 
; 19333:     /* "View.MemoryView":1285
; 19334:  *                 _err_extents(i, dst.shape[i], src.shape[i])
; 19335:  * 
; 19336:  *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
; 19337:  *             _err_dim(ValueError, "Dimension %d is not direct", i)
; 19338:  * 
; 19339:  */
; 19340:     __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);

	cmp	QWORD PTR [rbx+128], 0

; 19341:     if (__pyx_t_2) {

	jl	SHORT $LN18@pyx_memory@36

; 19342: 
; 19343:       /* "View.MemoryView":1286
; 19344:  * 
; 19345:  *         if src.suboffsets[i] >= 0:
; 19346:  *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
; 19347:  * 
; 19348:  *     if slices_overlap(&src, &dst, ndim, itemsize):
; 19349:  */
; 19350:       __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1286, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_builtin_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0BL@KMAFLFON@Dimension?5?$CFd?5is?5not?5direct?$AA@
	mov	r8d, ebp
	call	__pyx_memoryview_err_dim
	cmp	eax, -1
	je	SHORT $LN158@pyx_memory@36
$LN18@pyx_memory@36:

; 19247:     __pyx_t_5 = __pyx_t_3;
; 19248:   } else {
; 19249:     __pyx_t_5 = __pyx_t_4;
; 19250:   }
; 19251:   __pyx_v_ndim = __pyx_t_5;
; 19252: 
; 19253:   /* "View.MemoryView":1277
; 19254:  *     cdef int ndim = max(src_ndim, dst_ndim)
; 19255:  * 
; 19256:  *     for i in range(ndim):             # <<<<<<<<<<<<<<
; 19257:  *         if src.shape[i] != dst.shape[i]:
; 19258:  *             if src.shape[i] == 1:
; 19259:  */
; 19260:   __pyx_t_5 = __pyx_v_ndim;
; 19261:   for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {

	inc	r12
	inc	ebp
	add	rbx, 8
	cmp	r12, r14
	jl	SHORT $LL19@pyx_memory@36
	mov	r13, QWORD PTR __pyx_v_src$[rsp]
	mov	r14b, BYTE PTR __pyx_v_order$1$[rsp]
$LN179@pyx_memory@36:

; 19351: 
; 19352:       /* "View.MemoryView":1285
; 19353:  *                 _err_extents(i, dst.shape[i], src.shape[i])
; 19354:  * 
; 19355:  *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
; 19356:  *             _err_dim(ValueError, "Dimension %d is not direct", i)
; 19357:  * 
; 19358:  */
; 19359:     }
; 19360:   }
; 19361: 
; 19362:   /* "View.MemoryView":1288
; 19363:  *             _err_dim(ValueError, "Dimension %d is not direct", i)
; 19364:  * 
; 19365:  *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
; 19366:  * 
; 19367:  *         if not slice_is_contig(src, order, ndim):
; 19368:  */
; 19369:   __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);

	mov	r9, QWORD PTR __pyx_v_itemsize$1$[rsp]
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, r13
	call	__pyx_slices_overlap
	test	eax, eax

; 19370:   if (__pyx_t_2) {

	je	$LN11@pyx_memory@36

; 19371: 
; 19372:     /* "View.MemoryView":1290
; 19373:  *     if slices_overlap(&src, &dst, ndim, itemsize):
; 19374:  * 
; 19375:  *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
; 19376:  *             order = get_best_order(&dst, ndim)
; 19377:  * 
; 19378:  */
; 19379:     __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);

	lea	rcx, QWORD PTR $T44416[rsp]
	mov	rdx, r13
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11, QWORD PTR $T44416[rsp]
	mov	rdx, QWORD PTR [r11+96]
	cmp	r14b, 70				; 00000046H
	jne	SHORT $LN32@pyx_memory@36
	xor	ecx, ecx
	lea	r9d, QWORD PTR [rcx+1]
	jmp	SHORT $LN31@pyx_memory@36
$LN157@pyx_memory@36:

; 19310:       }
; 19311: 
; 19312:       /* "View.MemoryView":1283
; 19313:  *                 src.strides[i] = 0
; 19314:  *             else:
; 19315:  *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
; 19316:  * 
; 19317:  *         if src.suboffsets[i] >= 0:
; 19318:  */
; 19319:       /*else*/ {
; 19320:         __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1283, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1283		; 00000503H
	mov	DWORD PTR __pyx_clineno, 19320		; 00004b78H
	jmp	$LN183@pyx_memory@36
$LN158@pyx_memory@36:

; 19342: 
; 19343:       /* "View.MemoryView":1286
; 19344:  * 
; 19345:  *         if src.suboffsets[i] >= 0:
; 19346:  *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
; 19347:  * 
; 19348:  *     if slices_overlap(&src, &dst, ndim, itemsize):
; 19349:  */
; 19350:       __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1286, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 1286		; 00000506H
	mov	DWORD PTR __pyx_clineno, 19350		; 00004b96H
	jmp	$LN183@pyx_memory@36

; 19371: 
; 19372:     /* "View.MemoryView":1290
; 19373:  *     if slices_overlap(&src, &dst, ndim, itemsize):
; 19374:  * 
; 19375:  *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
; 19376:  *             order = get_best_order(&dst, ndim)
; 19377:  * 
; 19378:  */
; 19379:     __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);

$LN32@pyx_memory@36:
	or	r9d, -1
	lea	ecx, DWORD PTR [rsi-1]
$LN31@pyx_memory@36:
	xor	r8d, r8d
	test	esi, esi
	jle	SHORT $LN10@pyx_memory@36
	npad	8
$LL30@pyx_memory@36:
	movsxd	rax, ecx
	cmp	QWORD PTR $T44416[rsp+rax*8+144], 0
	jge	SHORT $LN175@pyx_memory@36
	cmp	QWORD PTR $T44416[rsp+rax*8+80], rdx
	jne	SHORT $LN175@pyx_memory@36
	imul	rdx, QWORD PTR $T44416[rsp+rax*8+16]
	inc	r8d
	add	ecx, r9d
	cmp	r8d, esi
	jl	SHORT $LL30@pyx_memory@36

; 19475:     if (__pyx_t_2) {
; 19476: 
; 19477:       /* "View.MemoryView":1302
; 19478:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19479:  *         elif slice_is_contig(src, 'F', ndim):
; 19480:  *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
; 19481:  * 
; 19482:  *         if direct_copy:
; 19483:  */
; 19484:       __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

	jmp	SHORT $LN10@pyx_memory@36
$LN175@pyx_memory@36:

; 19380:     if (__pyx_t_2) {
; 19381: 
; 19382:       /* "View.MemoryView":1291
; 19383:  * 
; 19384:  *         if not slice_is_contig(src, order, ndim):
; 19385:  *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
; 19386:  * 
; 19387:  *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
; 19388:  */
; 19389:       __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

	mov	edx, esi
	mov	rcx, rdi
	call	__pyx_get_best_slice_order
	mov	r14b, al
	mov	BYTE PTR __pyx_v_order$1$[rsp], al
$LN10@pyx_memory@36:

; 19390: 
; 19391:       /* "View.MemoryView":1290
; 19392:  *     if slices_overlap(&src, &dst, ndim, itemsize):
; 19393:  * 
; 19394:  *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
; 19395:  *             order = get_best_order(&dst, ndim)
; 19396:  * 
; 19397:  */
; 19398:     }
; 19399: 
; 19400:     /* "View.MemoryView":1293
; 19401:  *             order = get_best_order(&dst, ndim)
; 19402:  * 
; 19403:  *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
; 19404:  *         src = tmp
; 19405:  * 
; 19406:  */
; 19407:     __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == ((void *)NULL))) __PYX_ERR(2, 1293, __pyx_L1_error)

	lea	rdx, QWORD PTR __pyx_v_tmp$[rsp]
	mov	r9d, esi
	movzx	r8d, r14b
	mov	rcx, r13
	call	__pyx_memoryview_copy_data_to_temp
	mov	QWORD PTR __pyx_v_tmpdata$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN9@pyx_memory@36
	mov	DWORD PTR __pyx_lineno, 1293		; 0000050dH
	mov	DWORD PTR __pyx_clineno, 19407		; 00004bcfH
	jmp	$LN183@pyx_memory@36
$LN9@pyx_memory@36:

; 19408:     __pyx_v_tmpdata = __pyx_t_6;
; 19409: 
; 19410:     /* "View.MemoryView":1294
; 19411:  * 
; 19412:  *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
; 19413:  *         src = tmp             # <<<<<<<<<<<<<<
; 19414:  * 
; 19415:  *     if not broadcasting:
; 19416:  */
; 19417:     __pyx_v_src = __pyx_v_tmp;

	lea	rdx, QWORD PTR __pyx_v_tmp$[rsp]
	mov	rcx, r13
	mov	r8d, 208				; 000000d0H
	call	memcpy
$LN11@pyx_memory@36:

; 19485: 
; 19486:       /* "View.MemoryView":1301
; 19487:  *         if slice_is_contig(src, 'C', ndim):
; 19488:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19489:  *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
; 19490:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19491:  * 
; 19492:  */
; 19493:     }
; 19494:     __pyx_L12:;
; 19495: 
; 19496:     /* "View.MemoryView":1304
; 19497:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19498:  * 
; 19499:  *         if direct_copy:             # <<<<<<<<<<<<<<
; 19500:  * 
; 19501:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19502:  */
; 19503:     __pyx_t_2 = (__pyx_v_direct_copy != 0);
; 19504:     if (__pyx_t_2) {
; 19505: 
; 19506:       /* "View.MemoryView":1306
; 19507:  *         if direct_copy:
; 19508:  * 
; 19509:  *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
; 19510:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
; 19511:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19512:  */
; 19513:       __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

	movsxd	r14, esi
	test	r15d, r15d
	jne	$LN5@pyx_memory@36
	lea	rcx, QWORD PTR $T44417[rsp]
	mov	rdx, r13
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11, QWORD PTR $T44417[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR [r11+96]
	lea	r15d, DWORD PTR [rsi-1]
	test	esi, esi
	jle	SHORT $LN37@pyx_memory@36

; 19418: 
; 19419:     /* "View.MemoryView":1288
; 19420:  *             _err_dim(ValueError, "Dimension %d is not direct", i)
; 19421:  * 
; 19422:  *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
; 19423:  * 
; 19424:  *         if not slice_is_contig(src, order, ndim):
; 19425:  */
; 19426:   }
; 19427: 
; 19428:   /* "View.MemoryView":1296
; 19429:  *         src = tmp
; 19430:  * 
; 19431:  *     if not broadcasting:             # <<<<<<<<<<<<<<
; 19432:  * 
; 19433:  * 
; 19434:  */
; 19435:   __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
; 19436:   if (__pyx_t_2) {
; 19437: 
; 19438:     /* "View.MemoryView":1299
; 19439:  * 
; 19440:  * 
; 19441:  *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
; 19442:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19443:  *         elif slice_is_contig(src, 'F', ndim):
; 19444:  */
; 19445:     __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);

	mov	ecx, r15d
	npad	11
$LL39@pyx_memory@36:
	movsxd	rax, ecx
	cmp	QWORD PTR $T44417[rsp+rax*8+144], 0
	jge	$LN7@pyx_memory@36
	cmp	QWORD PTR $T44417[rsp+rax*8+80], rdx
	jne	$LN7@pyx_memory@36
	imul	rdx, QWORD PTR $T44417[rsp+rax*8+16]
	inc	r8d
	dec	ecx
	cmp	r8d, esi
	jl	SHORT $LL39@pyx_memory@36
$LN37@pyx_memory@36:

; 19446:     if (__pyx_t_2) {
; 19447: 
; 19448:       /* "View.MemoryView":1300
; 19449:  * 
; 19450:  *         if slice_is_contig(src, 'C', ndim):
; 19451:  *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
; 19452:  *         elif slice_is_contig(src, 'F', ndim):
; 19453:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19454:  */
; 19455:       __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

	lea	rcx, QWORD PTR $T44418[rsp]
	mov	rdx, rdi
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11, QWORD PTR $T44418[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR [r11+96]
	test	esi, esi
	jle	SHORT $LN64@pyx_memory@36
	mov	ecx, r15d
	npad	10
$LL48@pyx_memory@36:
	movsxd	rax, ecx
	cmp	QWORD PTR $T44418[rsp+rax*8+144], 0
	jge	$LN5@pyx_memory@36
	cmp	QWORD PTR $T44418[rsp+rax*8+80], rdx
	jne	$LN5@pyx_memory@36
	imul	rdx, QWORD PTR $T44418[rsp+rax*8+16]
	inc	r8d
	dec	ecx
	cmp	r8d, esi
	jl	SHORT $LL48@pyx_memory@36

; 19475:     if (__pyx_t_2) {
; 19476: 
; 19477:       /* "View.MemoryView":1302
; 19478:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19479:  *         elif slice_is_contig(src, 'F', ndim):
; 19480:  *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
; 19481:  * 
; 19482:  *         if direct_copy:
; 19483:  */
; 19484:       __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

$LN64@pyx_memory@36:

; 19485: 
; 19486:       /* "View.MemoryView":1301
; 19487:  *         if slice_is_contig(src, 'C', ndim):
; 19488:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19489:  *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
; 19490:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19491:  * 
; 19492:  */
; 19493:     }
; 19494:     __pyx_L12:;
; 19495: 
; 19496:     /* "View.MemoryView":1304
; 19497:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19498:  * 
; 19499:  *         if direct_copy:             # <<<<<<<<<<<<<<
; 19500:  * 
; 19501:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19502:  */
; 19503:     __pyx_t_2 = (__pyx_v_direct_copy != 0);
; 19504:     if (__pyx_t_2) {
; 19505: 
; 19506:       /* "View.MemoryView":1306
; 19507:  *         if direct_copy:
; 19508:  * 
; 19509:  *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
; 19510:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
; 19511:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19512:  */
; 19513:       __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

	mov	r12d, DWORD PTR __pyx_v_dtype_is_object$[rsp]
	test	r12d, r12d
	je	$LN74@pyx_memory@36
	mov	rbx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rbp, QWORD PTR [rdi+16]
	mov	r13d, eax
	test	rbp, rbp
	jle	$LN83@pyx_memory@36
	npad	5
$LL85@pyx_memory@36:
	cmp	r14, 1
	jne	$LN82@pyx_memory@36
	mov	rax, QWORD PTR [rbx]
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], 0
	jne	$__pyx_L5$44564
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$__pyx_L6$44558:
	jmp	$__pyx_L5$44564
$LN7@pyx_memory@36:

; 19456: 
; 19457:       /* "View.MemoryView":1299
; 19458:  * 
; 19459:  * 
; 19460:  *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
; 19461:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19462:  *         elif slice_is_contig(src, 'F', ndim):
; 19463:  */
; 19464:       goto __pyx_L12;
; 19465:     }
; 19466: 
; 19467:     /* "View.MemoryView":1301
; 19468:  *         if slice_is_contig(src, 'C', ndim):
; 19469:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19470:  *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
; 19471:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19472:  * 
; 19473:  */
; 19474:     __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);

	lea	rcx, QWORD PTR $T44419[rsp]
	mov	rdx, r13
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11, QWORD PTR $T44419[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR [r11+96]
	npad	9
$LL57@pyx_memory@36:
	movsxd	rax, ecx
	cmp	QWORD PTR $T44419[rsp+rax*8+144], 0
	jge	$LN5@pyx_memory@36
	cmp	QWORD PTR $T44419[rsp+rax*8+80], rdx
	jne	$LN5@pyx_memory@36
	imul	rdx, QWORD PTR $T44419[rsp+rax*8+16]
	inc	ecx
	cmp	ecx, esi
	jl	SHORT $LL57@pyx_memory@36

; 19475:     if (__pyx_t_2) {
; 19476: 
; 19477:       /* "View.MemoryView":1302
; 19478:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19479:  *         elif slice_is_contig(src, 'F', ndim):
; 19480:  *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
; 19481:  * 
; 19482:  *         if direct_copy:
; 19483:  */
; 19484:       __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

	lea	rcx, QWORD PTR $T44420[rsp]
	mov	rdx, rdi
	mov	r8d, 208				; 000000d0H
	call	memcpy
	mov	r11, QWORD PTR $T44420[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR [r11+96]
	npad	6
$LL66@pyx_memory@36:
	movsxd	rax, ecx
	cmp	QWORD PTR $T44420[rsp+rax*8+144], 0
	jge	$LN5@pyx_memory@36
	cmp	QWORD PTR $T44420[rsp+rax*8+80], rdx
	jne	$LN5@pyx_memory@36
	imul	rdx, QWORD PTR $T44420[rsp+rax*8+16]
	inc	ecx
	cmp	ecx, esi
	jl	SHORT $LL66@pyx_memory@36
	jmp	$LN64@pyx_memory@36

; 19485: 
; 19486:       /* "View.MemoryView":1301
; 19487:  *         if slice_is_contig(src, 'C', ndim):
; 19488:  *             direct_copy = slice_is_contig(dst, 'C', ndim)
; 19489:  *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
; 19490:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19491:  * 
; 19492:  */
; 19493:     }
; 19494:     __pyx_L12:;
; 19495: 
; 19496:     /* "View.MemoryView":1304
; 19497:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19498:  * 
; 19499:  *         if direct_copy:             # <<<<<<<<<<<<<<
; 19500:  * 
; 19501:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19502:  */
; 19503:     __pyx_t_2 = (__pyx_v_direct_copy != 0);
; 19504:     if (__pyx_t_2) {
; 19505: 
; 19506:       /* "View.MemoryView":1306
; 19507:  *         if direct_copy:
; 19508:  * 
; 19509:  *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
; 19510:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
; 19511:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19512:  */
; 19513:       __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

$LN82@pyx_memory@36:
	lea	r8, QWORD PTR [rdi+88]
	lea	rdx, QWORD PTR [rdi+24]
	mov	r9d, r15d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 0
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$44564:
	add	rbx, QWORD PTR [rdi+80]
	sub	rbp, 1
	jne	$LL85@pyx_memory@36
$LN83@pyx_memory@36:
	mov	ecx, r13d
	call	QWORD PTR __imp_PyGILState_Release
	mov	r13, QWORD PTR __pyx_v_src$[rsp]
$LN74@pyx_memory@36:

; 19514: 
; 19515:       /* "View.MemoryView":1307
; 19516:  * 
; 19517:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19518:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
; 19519:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19520:  *             free(tmpdata)
; 19521:  */
; 19522:       memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

	mov	rax, QWORD PTR [r13]
	mov	r8, QWORD PTR [rax+96]
	test	esi, esi
	jle	SHORT $LN88@pyx_memory@36
	lea	rax, QWORD PTR [r13+16]
	mov	rcx, r14
	npad	2
$LL90@pyx_memory@36:
	imul	r8, QWORD PTR [rax]
	add	rax, 8
	sub	rcx, 1
	jne	SHORT $LL90@pyx_memory@36
$LN88@pyx_memory@36:
	mov	rdx, QWORD PTR [r13+8]
	mov	rcx, QWORD PTR [rdi+8]
$__pyx_L0$44582:
	call	memcpy

; 19523: 
; 19524:       /* "View.MemoryView":1308
; 19525:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19526:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
; 19527:  *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
; 19528:  *             free(tmpdata)
; 19529:  *             return 0
; 19530:  */
; 19531:       __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

	test	r12d, r12d
	je	$LN132@pyx_memory@36
	mov	rbx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rsi, QWORD PTR [rdi+16]
	mov	ebp, eax
	test	rsi, rsi
	jle	SHORT $LN105@pyx_memory@36
	npad	7
$LL107@pyx_memory@36:
	cmp	r14, 1
	jne	SHORT $LN104@pyx_memory@36
	mov	rax, QWORD PTR [rbx]
$__pyx_L6$44646:
	inc	QWORD PTR [rax]
	jmp	SHORT $__pyx_L5$44653
$LN104@pyx_memory@36:
	lea	r8, QWORD PTR [rdi+88]
	lea	rdx, QWORD PTR [rdi+24]
	mov	r9d, r15d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 1
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$44653:
	add	rbx, QWORD PTR [rdi+80]
	sub	rsi, 1
	jne	SHORT $LL107@pyx_memory@36
$LN105@pyx_memory@36:
	mov	ecx, ebp

; 19532: 
; 19533:       /* "View.MemoryView":1309
; 19534:  *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
; 19535:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19536:  *             free(tmpdata)             # <<<<<<<<<<<<<<
; 19537:  *             return 0
; 19538:  * 
; 19539:  */
; 19540:       free(__pyx_v_tmpdata);
; 19541: 
; 19542:       /* "View.MemoryView":1310
; 19543:  *             refcount_copying(&dst, dtype_is_object, ndim, True)
; 19544:  *             free(tmpdata)
; 19545:  *             return 0             # <<<<<<<<<<<<<<
; 19546:  * 
; 19547:  *     if order == 'F' == get_best_order(&dst, ndim):
; 19548:  */
; 19549:       __pyx_r = 0;
; 19550:       goto __pyx_L0;

	jmp	$LN184@pyx_memory@36
$LN5@pyx_memory@36:

; 19551: 
; 19552:       /* "View.MemoryView":1304
; 19553:  *             direct_copy = slice_is_contig(dst, 'F', ndim)
; 19554:  * 
; 19555:  *         if direct_copy:             # <<<<<<<<<<<<<<
; 19556:  * 
; 19557:  *             refcount_copying(&dst, dtype_is_object, ndim, False)
; 19558:  */
; 19559:     }
; 19560: 
; 19561:     /* "View.MemoryView":1296
; 19562:  *         src = tmp
; 19563:  * 
; 19564:  *     if not broadcasting:             # <<<<<<<<<<<<<<
; 19565:  * 
; 19566:  * 
; 19567:  */
; 19568:   }
; 19569: 
; 19570:   /* "View.MemoryView":1312
; 19571:  *             return 0
; 19572:  * 
; 19573:  *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
; 19574:  * 
; 19575:  * 
; 19576:  */
; 19577:   __pyx_t_2 = (__pyx_v_order == 'F');

	xor	eax, eax
	cmp	BYTE PTR __pyx_v_order$1$[rsp], 70	; 00000046H
	sete	al

; 19578:   if (__pyx_t_2) {

	test	eax, eax
	je	$LN1@pyx_memory@36

; 19579:     __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));

	mov	edx, esi
	mov	rcx, rdi
	call	__pyx_get_best_slice_order
	xor	ecx, ecx
	cmp	al, 70					; 00000046H
	sete	cl

; 19580:   }
; 19581:   __pyx_t_7 = (__pyx_t_2 != 0);

	test	ecx, ecx

; 19582:   if (__pyx_t_7) {

	je	$LN1@pyx_memory@36

; 19583: 
; 19584:     /* "View.MemoryView":1315
; 19585:  * 
; 19586:  * 
; 19587:  *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
; 19588:  *         transpose_memslice(&dst)
; 19589:  * 
; 19590:  */
; 19591:     __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1315, __pyx_L1_error)

	mov	rcx, r13
	call	__pyx_memslice_transpose
	test	eax, eax
	jne	SHORT $LN2@pyx_memory@36
	mov	DWORD PTR __pyx_lineno, 1315		; 00000523H
	mov	DWORD PTR __pyx_clineno, 19591		; 00004c87H
	jmp	SHORT $LN183@pyx_memory@36
$LN2@pyx_memory@36:

; 19592: 
; 19593:     /* "View.MemoryView":1316
; 19594:  * 
; 19595:  *         transpose_memslice(&src)
; 19596:  *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
; 19597:  * 
; 19598:  *     refcount_copying(&dst, dtype_is_object, ndim, False)
; 19599:  */
; 19600:     __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1316, __pyx_L1_error)

	mov	rcx, rdi
	call	__pyx_memslice_transpose
	test	eax, eax
	jne	SHORT $LN1@pyx_memory@36
	mov	DWORD PTR __pyx_lineno, 1316		; 00000524H
	mov	DWORD PTR __pyx_clineno, 19600		; 00004c90H
$LN183@pyx_memory@36:
	mov	rax, QWORD PTR __pyx_f+16
$__pyx_L1_error$27083:
	mov	QWORD PTR __pyx_filename, rax

; 19646: 
; 19647:   /* "View.MemoryView":1323
; 19648:  * 
; 19649:  *     free(tmpdata)
; 19650:  *     return 0             # <<<<<<<<<<<<<<
; 19651:  * 
; 19652:  * @cname('__pyx_memoryview_broadcast_leading')
; 19653:  */
; 19654:   __pyx_r = 0;
; 19655:   goto __pyx_L0;
; 19656: 
; 19657:   /* "View.MemoryView":1254
; 19658:  * 
; 19659:  * @cname('__pyx_memoryview_copy_contents')
; 19660:  * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
; 19661:  *                                   __Pyx_memviewslice dst,
; 19662:  *                                   int src_ndim, int dst_ndim,
; 19663:  */
; 19664: 
; 19665:   /* function exit code */
; 19666:   __pyx_L1_error:;
; 19667:   {
; 19668:     #ifdef WITH_THREAD
; 19669:     PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

	call	QWORD PTR __imp_PyGILState_Ensure

; 19670:     #endif
; 19671:     __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0CJ@FIBAEBGJ@View?4MemoryView?4memoryview_copy_@
	mov	ebx, eax
	call	__Pyx_AddTraceback

; 19672:     #ifdef WITH_THREAD
; 19673:     __Pyx_PyGILState_Release(__pyx_gilstate_save);

	mov	ecx, ebx
	call	QWORD PTR __imp_PyGILState_Release

; 19674:     #endif
; 19675:   }
; 19676:   __pyx_r = -1;
; 19677:   __pyx_L0:;
; 19678:   return __pyx_r;

	or	eax, -1
	jmp	$__pyx_L0$27099
$LN1@pyx_memory@36:

; 19601: 
; 19602:     /* "View.MemoryView":1312
; 19603:  *             return 0
; 19604:  * 
; 19605:  *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
; 19606:  * 
; 19607:  * 
; 19608:  */
; 19609:   }
; 19610: 
; 19611:   /* "View.MemoryView":1318
; 19612:  *         transpose_memslice(&dst)
; 19613:  * 
; 19614:  *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
; 19615:  *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
; 19616:  *     refcount_copying(&dst, dtype_is_object, ndim, True)
; 19617:  */
; 19618:   __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

	mov	r13d, DWORD PTR __pyx_v_dtype_is_object$[rsp]
	test	r13d, r13d
	je	SHORT $LN113@pyx_memory@36
	mov	rbx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rbp, QWORD PTR [rdi+16]
	mov	r12d, eax
	test	rbp, rbp
	jle	SHORT $LN122@pyx_memory@36
$LL124@pyx_memory@36:
	cmp	r14, 1
	jne	SHORT $LN121@pyx_memory@36
	mov	rcx, QWORD PTR [rbx]
	dec	QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rbx]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $__pyx_L5$44723
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$__pyx_L6$44717:
	jmp	SHORT $__pyx_L5$44723
$LN121@pyx_memory@36:
	lea	r9d, DWORD PTR [rsi-1]
	lea	r8, QWORD PTR [rdi+88]
	lea	rdx, QWORD PTR [rdi+24]
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 0
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$44723:
	add	rbx, QWORD PTR [rdi+80]
	sub	rbp, 1
	jne	SHORT $LL124@pyx_memory@36
$LN122@pyx_memory@36:
	mov	ecx, r12d
	call	QWORD PTR __imp_PyGILState_Release
$LN113@pyx_memory@36:

; 19619: 
; 19620:   /* "View.MemoryView":1319
; 19621:  * 
; 19622:  *     refcount_copying(&dst, dtype_is_object, ndim, False)
; 19623:  *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
; 19624:  *     refcount_copying(&dst, dtype_is_object, ndim, True)
; 19625:  * 
; 19626:  */
; 19627:   copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

	mov	rcx, QWORD PTR __pyx_v_src$[rsp]
	mov	r8, QWORD PTR __pyx_v_itemsize$1$[rsp]
	lea	rbp, QWORD PTR [rdi+80]
	mov	QWORD PTR [rsp+56], r8
	mov	r8, QWORD PTR [rdi+8]
	lea	rax, QWORD PTR [rcx+16]
	lea	rdx, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+48], esi
	lea	r12, QWORD PTR [rdi+16]
	mov	r9, rbp
	mov	QWORD PTR [rsp+40], r12
	mov	QWORD PTR [rsp+32], rax
	call	_copy_strided_to_strided

; 19628: 
; 19629:   /* "View.MemoryView":1320
; 19630:  *     refcount_copying(&dst, dtype_is_object, ndim, False)
; 19631:  *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
; 19632:  *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
; 19633:  * 
; 19634:  *     free(tmpdata)
; 19635:  */
; 19636:   __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

	test	r13d, r13d
	je	SHORT $LN132@pyx_memory@36
	mov	rbx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_PyGILState_Ensure
	mov	rdi, QWORD PTR [r12]
	mov	r13d, eax
	test	rdi, rdi
	jle	SHORT $LN141@pyx_memory@36
	npad	5
$LL143@pyx_memory@36:
	cmp	r14, 1
	jne	SHORT $LN140@pyx_memory@36
	mov	rcx, QWORD PTR [rbx]
$__pyx_L6$44791:
	inc	QWORD PTR [rcx]
	jmp	SHORT $__pyx_L5$44797
$LN140@pyx_memory@36:
	lea	r9d, DWORD PTR [rsi-1]
	lea	r8, QWORD PTR [rbp+8]
	lea	rdx, QWORD PTR [r12+8]
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 1
	call	__pyx_memoryview_refcount_objects_in_slice
$__pyx_L5$44797:
	add	rbx, QWORD PTR [rbp]
	sub	rdi, 1
	jne	SHORT $LL143@pyx_memory@36
$LN141@pyx_memory@36:
	mov	ecx, r13d
$LN184@pyx_memory@36:
	call	QWORD PTR __imp_PyGILState_Release
$LN132@pyx_memory@36:

; 19637: 
; 19638:   /* "View.MemoryView":1322
; 19639:  *     refcount_copying(&dst, dtype_is_object, ndim, True)
; 19640:  * 
; 19641:  *     free(tmpdata)             # <<<<<<<<<<<<<<
; 19642:  *     return 0
; 19643:  * 
; 19644:  */
; 19645:   free(__pyx_v_tmpdata);

	mov	rcx, QWORD PTR __pyx_v_tmpdata$1$[rsp]
	call	QWORD PTR __imp_free

; 19674:     #endif
; 19675:   }
; 19676:   __pyx_r = -1;
; 19677:   __pyx_L0:;
; 19678:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$27099:

; 19679: }

	mov	rbx, QWORD PTR [rsp+568]
	add	rsp, 496				; 000001f0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
__pyx_memoryview_copy_contents ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum DD imagerel __pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum
	DD	imagerel __pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum+721
	DD	imagerel $unwind$__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum DD 0c1c01H
	DD	014641cH
	DD	013541cH
	DD	012341cH
	DD	0f018b21cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum
_TEXT	SEGMENT
values$27246 = 64
__pyx_self$ = 144
__pyx_args$ = 152
__pyx_kwds$ = 160
__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum PROC ; COMDAT

; 20196: static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	r11, rsp
	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+16], rbp
	mov	QWORD PTR [r11+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 20197:   PyObject *__pyx_v___pyx_type = 0;
; 20198:   long __pyx_v___pyx_checksum;
; 20199:   PyObject *__pyx_v___pyx_state = 0;
; 20200:   PyObject *__pyx_r = 0;
; 20201:   __Pyx_RefNannyDeclarations
; 20202:   __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
; 20203:   {
; 20204:     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
; 20205:     PyObject* values[3] = {0,0,0};

	xor	edi, edi
	mov	r13, r8
	mov	rbx, rdx
	mov	r15, rcx
	mov	QWORD PTR [r11-72], rdi
	mov	rsi, rdi
	mov	QWORD PTR [r11-64], rdi
	mov	rbp, rdi
	mov	QWORD PTR [r11-56], rdi

; 20206:     if (unlikely(__pyx_kwds)) {

	test	r8, r8
	je	$LN25@pyx_pw_15V

; 20207:       Py_ssize_t kw_args;
; 20208:       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	r14, QWORD PTR [rdx+16]

; 20209:       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN19@pyx_pw_15V
	sub	rax, 1
	je	SHORT $LN20@pyx_pw_15V
	sub	rax, 1
	je	SHORT $LN21@pyx_pw_15V
	cmp	rax, 1
	jne	$__pyx_L5_argtuple_error$27263

; 20210:         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rbp, QWORD PTR [rdx+40]
	mov	QWORD PTR [r11-56], rbp
$LN21@pyx_pw_15V:

; 20211:         CYTHON_FALLTHROUGH;
; 20212:         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rsi, QWORD PTR [rdx+32]
	mov	QWORD PTR values$27246[rsp+8], rsi
$LN20@pyx_pw_15V:

; 20213:         CYTHON_FALLTHROUGH;
; 20214:         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rdi, QWORD PTR [rdx+24]
	mov	QWORD PTR values$27246[rsp], rdi
$LN19@pyx_pw_15V:

; 20215:         CYTHON_FALLTHROUGH;
; 20216:         case  0: break;
; 20217:         default: goto __pyx_L5_argtuple_error;
; 20218:       }
; 20219:       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	r12, rax

; 20220:       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN15@pyx_pw_15V
	sub	rax, 1
	je	SHORT $LN13@pyx_pw_15V
	cmp	rax, 1
	je	SHORT $LN10@pyx_pw_15V
	jmp	SHORT $LN7@pyx_pw_15V
$LN15@pyx_pw_15V:

; 20221:         case  0:
; 20222:         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_pyx_type
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rdi, rax
	mov	QWORD PTR values$27246[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$27263
	dec	r12
$LN13@pyx_pw_15V:

; 20223:         else goto __pyx_L5_argtuple_error;
; 20224:         CYTHON_FALLTHROUGH;
; 20225:         case  1:
; 20226:         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_pyx_checksum
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rsi, rax
	mov	QWORD PTR values$27246[rsp+8], rax
	test	rax, rax
	je	$LN11@pyx_pw_15V
	dec	r12
$LN10@pyx_pw_15V:

; 20229:         }
; 20230:         CYTHON_FALLTHROUGH;
; 20231:         case  2:
; 20232:         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_pyx_state
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbp, rax
	mov	QWORD PTR values$27246[rsp+16], rax
	test	rax, rax
	je	SHORT $LN8@pyx_pw_15V
	dec	r12
$LN7@pyx_pw_15V:

; 20235:         }
; 20236:       }
; 20237:       if (unlikely(kw_args > 0)) {

	test	r12, r12
	jle	$LN2@pyx_pw_15V

; 20238:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
	lea	r9, QWORD PTR values$27246[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r13
	mov	QWORD PTR [rsp+32], r14
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN43@pyx_pw_15V
	mov	edx, 20238				; 00004f0eH
	jmp	$LN44@pyx_pw_15V
$LN43@pyx_pw_15V:

; 20245:       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rbp, QWORD PTR values$27246[rsp+16]
	mov	rsi, QWORD PTR values$27246[rsp+8]
	mov	rdi, QWORD PTR values$27246[rsp]
	jmp	$LN2@pyx_pw_15V
$LN8@pyx_pw_15V:

; 20233:         else {
; 20234:           __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 2
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	lea	r8, OFFSET FLAT:??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 3
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 20234				; 00004f0aH
	jmp	$LN44@pyx_pw_15V
$LN11@pyx_pw_15V:

; 20227:         else {
; 20228:           __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	lea	r8, OFFSET FLAT:??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 3
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 20228				; 00004f04H
	jmp	SHORT $LN44@pyx_pw_15V
$LN25@pyx_pw_15V:

; 20239:       }
; 20240:     } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

	cmp	QWORD PTR [rdx+16], 3
	je	SHORT $LN3@pyx_pw_15V
$__pyx_L5_argtuple_error$27263:

; 20249:     __pyx_v___pyx_state = values[2];
; 20250:   }
; 20251:   goto __pyx_L4_argument_unpacking_done;
; 20252:   __pyx_L5_argtuple_error:;
; 20253:   __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)

	mov	rax, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+40], rax
	lea	r8, OFFSET FLAT:??_C@_0BE@OFCNINNK@__pyx_unpickle_Enum?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 3
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 20253				; 00004f1dH
	jmp	SHORT $LN44@pyx_pw_15V
$LN3@pyx_pw_15V:

; 20241:       goto __pyx_L5_argtuple_error;
; 20242:     } else {
; 20243:       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rdi, QWORD PTR [rdx+24]

; 20244:       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rsi, QWORD PTR [rdx+32]

; 20245:       values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rbp, QWORD PTR [rdx+40]
$LN2@pyx_pw_15V:

; 20246:     }
; 20247:     __pyx_v___pyx_type = values[0];
; 20248:     __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)

	mov	rcx, rsi
	call	__Pyx_PyInt_As_long
	mov	ebx, eax
	cmp	eax, -1
	jne	SHORT $LN1@pyx_pw_15V
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN1@pyx_pw_15V
	mov	edx, 20248				; 00004f18H
$LN44@pyx_pw_15V:
	mov	r9, QWORD PTR __pyx_f+16

; 20254:   __pyx_L3_error:;
; 20255:   __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CE@HECFPOBJ@View?4MemoryView?4__pyx_unpickle_E@
	mov	r8d, 1
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L3_error$27274:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 20256:   __Pyx_RefNannyFinishContext();
; 20257:   return NULL;

	xor	eax, eax
	jmp	SHORT $LN26@pyx_pw_15V
$LN1@pyx_pw_15V:

; 20258:   __pyx_L4_argument_unpacking_done:;
; 20259:   __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

	mov	r9, rbp
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, r15
$__pyx_L4_argument_unpacking_done$27289:
	call	__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum
$LN26@pyx_pw_15V:

; 20260: 
; 20261:   /* function exit code */
; 20262:   __Pyx_RefNannyFinishContext();
; 20263:   return __pyx_r;
; 20264: }

	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum ENDP
_TEXT	ENDS
_BSS	SEGMENT
	ALIGN	8

__pyx_vtabptr_array DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_new_array DD imagerel __pyx_tp_new_array
	DD	imagerel __pyx_tp_new_array+199
	DD	imagerel $unwind$__pyx_tp_new_array
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_new_array DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_new_array
_TEXT	SEGMENT
t$ = 48
a$ = 56
k$ = 64
__pyx_tp_new_array PROC					; COMDAT

; 20666: static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 20667:   struct __pyx_array_obj *p;
; 20668:   PyObject *o;
; 20669:   if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

	bt	DWORD PTR [rcx+168], 20
	mov	rdi, r8
	mov	rsi, rdx
	mov	rax, rcx
	jb	SHORT $LN9@pyx_tp_new@2

; 20670:     o = (*t->tp_alloc)(t, 0);

	xor	edx, edx
	call	QWORD PTR [rax+304]

; 20671:   } else {

	jmp	SHORT $LN12@pyx_tp_new@2
$LN9@pyx_tp_new@2:

; 20672:     o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

	mov	rax, QWORD PTR __imp_PyBaseObject_Type
	mov	rdx, QWORD PTR __pyx_empty_tuple
	xor	r8d, r8d
	call	QWORD PTR [rax+312]
$LN12@pyx_tp_new@2:
	mov	rbx, rax

; 20673:   }
; 20674:   if (unlikely(!o)) return 0;

	test	rax, rax
	je	SHORT $LN4@pyx_tp_new@2

; 20675:   p = ((struct __pyx_array_obj *)o);
; 20676:   p->__pyx_vtab = __pyx_vtabptr_array;

	mov	rax, QWORD PTR __pyx_vtabptr_array

; 20677:   p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
; 20678:   p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
; 20679:   if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;

	mov	r8, rdi
	mov	rdx, rsi
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, rbx
	mov	QWORD PTR [rbx+80], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbx+88], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	call	__pyx_array___cinit__
	test	eax, eax
	jns	SHORT $LN6@pyx_tp_new@2
$bad$28021:

; 20680:   return o;
; 20681:   bad:
; 20682:   Py_DECREF(o); o = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN4@pyx_tp_new@2
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN4@pyx_tp_new@2:

; 20683:   return NULL;

	xor	eax, eax

; 20684: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@pyx_tp_new@2:
	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_tp_new_array ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_dealloc_memoryview DD imagerel __pyx_tp_dealloc_memoryview
	DD	imagerel __pyx_tp_dealloc_memoryview+180
	DD	imagerel $unwind$__pyx_tp_dealloc_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_dealloc_memoryview DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_dealloc_memoryview
_TEXT	SEGMENT
etb$28265 = 48
o$ = 48
eval$28264 = 56
etype$28263 = 64
__pyx_tp_dealloc_memoryview PROC			; COMDAT

; 20974: static void __pyx_tp_dealloc_memoryview(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 20975:   struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
; 20976:   #if CYTHON_USE_TP_FINALIZE
; 20977:   if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
; 20978:     if (PyObject_CallFinalizerFromDealloc(o)) return;
; 20979:   }
; 20980:   #endif
; 20981:   PyObject_GC_UnTrack(o);

	call	QWORD PTR __imp_PyObject_GC_UnTrack

; 20982:   {
; 20983:     PyObject *etype, *eval, *etb;
; 20984:     PyErr_Fetch(&etype, &eval, &etb);

	lea	r8, QWORD PTR etb$28265[rsp]
	lea	rdx, QWORD PTR eval$28264[rsp]
	lea	rcx, QWORD PTR etype$28263[rsp]
	call	QWORD PTR __imp_PyErr_Fetch

; 20985:     ++Py_REFCNT(o);

	inc	QWORD PTR [rbx]

; 20986:     __pyx_memoryview___dealloc__(o);

	mov	rcx, rbx
	call	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__

; 20987:     --Py_REFCNT(o);
; 20988:     PyErr_Restore(etype, eval, etb);

	mov	r8, QWORD PTR etb$28265[rsp]
	mov	rdx, QWORD PTR eval$28264[rsp]
	mov	rcx, QWORD PTR etype$28263[rsp]
	dec	QWORD PTR [rbx]
	call	QWORD PTR __imp_PyErr_Restore

; 20989:   }
; 20990:   Py_CLEAR(p->obj);

	mov	rcx, QWORD PTR [rbx+24]
	test	rcx, rcx
	je	SHORT $LN21@pyx_tp_dea@3
	mov	QWORD PTR [rbx+24], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN21@pyx_tp_dea@3
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN21@pyx_tp_dea@3:

; 20991:   Py_CLEAR(p->_size);

	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN12@pyx_tp_dea@3
	mov	QWORD PTR [rbx+32], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN12@pyx_tp_dea@3
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN12@pyx_tp_dea@3:

; 20992:   Py_CLEAR(p->_array_interface);

	mov	rcx, QWORD PTR [rbx+40]
	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_dea@3
	mov	QWORD PTR [rbx+40], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN3@pyx_tp_dea@3
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@pyx_tp_dea@3:

; 20993:   (*Py_TYPE(o)->tp_free)(o);

	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx

; 20994: }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR [rax+320]
__pyx_tp_dealloc_memoryview ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_mp_ass_subscript_memoryview DD imagerel __pyx_mp_ass_subscript_memoryview
	DD	imagerel __pyx_mp_ass_subscript_memoryview+57
	DD	imagerel $unwind$__pyx_mp_ass_subscript_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_mp_ass_subscript_memoryview DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_mp_ass_subscript_memoryview
_TEXT	SEGMENT
o$ = 48
i$ = 56
v$ = 64
__pyx_mp_ass_subscript_memoryview PROC			; COMDAT

; 21037: static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {

	sub	rsp, 40					; 00000028H

; 21038:   if (v) {

	test	r8, r8
	je	SHORT $LN2@pyx_mp_ass@2

; 21045:   }
; 21046: }

	add	rsp, 40					; 00000028H
	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__
$LN2@pyx_mp_ass@2:

; 21039:     return __pyx_memoryview___setitem__(o, i, v);
; 21040:   }
; 21041:   else {
; 21042:     PyErr_Format(PyExc_NotImplementedError,
; 21043:       "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);

	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR __imp_PyExc_NotImplementedError
	lea	rdx, OFFSET FLAT:??_C@_0CL@GPGPKDOG@Subscript?5deletion?5not?5supported@
	mov	rcx, QWORD PTR [rcx]
	mov	r8, QWORD PTR [r8+24]
	call	QWORD PTR __imp_PyErr_Format

; 21044:     return -1;

	or	eax, -1

; 21045:   }
; 21046: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_mp_ass_subscript_memoryview ENDP
_TEXT	ENDS
EXTRN	__imp_PyObject_GC_Track:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_dealloc__memoryviewslice DD imagerel __pyx_tp_dealloc__memoryviewslice
	DD	imagerel __pyx_tp_dealloc__memoryviewslice+144
	DD	imagerel $unwind$__pyx_tp_dealloc__memoryviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_dealloc__memoryviewslice DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_dealloc__memoryviewslice
_TEXT	SEGMENT
etb$28569 = 48
o$ = 48
eval$28568 = 56
etype$28567 = 64
__pyx_tp_dealloc__memoryviewslice PROC			; COMDAT

; 21213: static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 21214:   struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
; 21215:   #if CYTHON_USE_TP_FINALIZE
; 21216:   if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
; 21217:     if (PyObject_CallFinalizerFromDealloc(o)) return;
; 21218:   }
; 21219:   #endif
; 21220:   PyObject_GC_UnTrack(o);

	call	QWORD PTR __imp_PyObject_GC_UnTrack

; 21221:   {
; 21222:     PyObject *etype, *eval, *etb;
; 21223:     PyErr_Fetch(&etype, &eval, &etb);

	lea	r8, QWORD PTR etb$28569[rsp]
	lea	rdx, QWORD PTR eval$28568[rsp]
	lea	rcx, QWORD PTR etype$28567[rsp]
	call	QWORD PTR __imp_PyErr_Fetch

; 21224:     ++Py_REFCNT(o);

	inc	QWORD PTR [rbx]

; 21225:     __pyx_memoryviewslice___dealloc__(o);

	lea	rcx, QWORD PTR [rbx+184]
	mov	edx, 1
	mov	r8d, 16715				; 0000414bH
	call	__Pyx_XDEC_MEMVIEW

; 21226:     --Py_REFCNT(o);
; 21227:     PyErr_Restore(etype, eval, etb);

	mov	r8, QWORD PTR etb$28569[rsp]
	mov	rdx, QWORD PTR eval$28568[rsp]
	mov	rcx, QWORD PTR etype$28567[rsp]
	dec	QWORD PTR [rbx]
	call	QWORD PTR __imp_PyErr_Restore

; 21228:   }
; 21229:   Py_CLEAR(p->from_object);

	mov	rcx, QWORD PTR [rbx+392]
	test	rcx, rcx
	je	SHORT $LN3@pyx_tp_dea@4
	mov	QWORD PTR [rbx+392], 0
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN3@pyx_tp_dea@4
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN3@pyx_tp_dea@4:

; 21230:   PyObject_GC_Track(o);

	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GC_Track

; 21231:   __pyx_tp_dealloc_memoryview(o);

	mov	rcx, rbx

; 21232: }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	__pyx_tp_dealloc_memoryview
__pyx_tp_dealloc__memoryviewslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EA@MAHDLHKC@Cannot?5copy?5memoryview?5slice?5wit@ ; `string'
PUBLIC	$T45016
PUBLIC	$T45017
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_copy_new_contig DD imagerel __pyx_memoryview_copy_new_contig
	DD	imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel $unwind$__pyx_memoryview_copy_new_contig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$__pyx_memoryview_copy_new_contig DD imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel __pyx_memoryview_copy_new_contig+627
	DD	imagerel $chain$5$__pyx_memoryview_copy_new_contig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$__pyx_memoryview_copy_new_contig DD imagerel __pyx_memoryview_copy_new_contig+627
	DD	imagerel __pyx_memoryview_copy_new_contig+658
	DD	imagerel $chain$6$__pyx_memoryview_copy_new_contig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_memoryview_copy_new_contig DD imagerel __pyx_memoryview_copy_new_contig+658
	DD	imagerel __pyx_memoryview_copy_new_contig+689
	DD	imagerel $chain$7$__pyx_memoryview_copy_new_contig
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$__pyx_memoryview_copy_new_contig DD imagerel __pyx_memoryview_copy_new_contig+689
	DD	imagerel __pyx_memoryview_copy_new_contig+717
	DD	imagerel $chain$8$__pyx_memoryview_copy_new_contig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$__pyx_memoryview_copy_new_contig DD 0c0021H
	DD	03af400H
	DD	03be400H
	DD	03cc400H
	DD	03d7400H
	DD	03e6400H
	DD	0433400H
	DD	imagerel __pyx_memoryview_copy_new_contig
	DD	imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel $unwind$__pyx_memoryview_copy_new_contig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_memoryview_copy_new_contig DD 021H
	DD	imagerel __pyx_memoryview_copy_new_contig
	DD	imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel $unwind$__pyx_memoryview_copy_new_contig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$__pyx_memoryview_copy_new_contig DD 020021H
	DD	03cc400H
	DD	imagerel __pyx_memoryview_copy_new_contig
	DD	imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel $unwind$__pyx_memoryview_copy_new_contig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$__pyx_memoryview_copy_new_contig DD 0c1821H
	DD	03af418H
	DD	03be414H
	DD	03cc410H
	DD	03d740cH
	DD	03e6408H
	DD	0433404H
	DD	imagerel __pyx_memoryview_copy_new_contig
	DD	imagerel __pyx_memoryview_copy_new_contig+44
	DD	imagerel $unwind$__pyx_memoryview_copy_new_contig
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_copy_new_contig DD 041501H
	DD	03f0115H
	DD	0500cd00eH
xdata	ENDS
;	COMDAT ??_C@_0EA@MAHDLHKC@Cannot?5copy?5memoryview?5slice?5wit@
CONST	SEGMENT
??_C@_0EA@MAHDLHKC@Cannot?5copy?5memoryview?5slice?5wit@ DB 'Cannot copy '
	DB	'memoryview slice with indirect dimensions (axis %d)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_copy_new_contig
_TEXT	SEGMENT
$T45017 = 48
$T45016 = 256
buf$1$ = 528
$T45015 = 528
from_mvs$ = 536
mode$ = 544
ndim$ = 552
sizeof_dtype$ = 560
contig_flag$ = 568
dtype_is_object$ = 576
__pyx_memoryview_copy_new_contig PROC			; COMDAT

; 25376: {

	mov	rax, rsp
	mov	DWORD PTR [rax+32], r9d
	mov	QWORD PTR [rax+24], r8
	push	rbp
	push	r13
	sub	rsp, 504				; 000001f8H

; 25377:     __Pyx_RefNannyDeclarations
; 25378:     int i;
; 25379:     __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };

	mov	QWORD PTR [rcx], 0
	mov	QWORD PTR [rcx+8], 0
	mov	QWORD PTR [rcx+16], 0
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax-24], rsi
	mov	QWORD PTR [rax-32], rdi
	mov	QWORD PTR [rax-40], r12
	mov	QWORD PTR [rax-48], r14
	mov	QWORD PTR [rax-56], r15
	xor	eax, eax
	movsxd	rdi, r9d
	mov	rbp, rcx
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax
	mov	QWORD PTR [rcx+56], rax
	mov	QWORD PTR [rcx+64], rax
	mov	QWORD PTR [rcx+72], rax
	mov	QWORD PTR [rcx+80], rax
	mov	QWORD PTR [rcx+88], rax
	mov	QWORD PTR [rcx+96], rax
	mov	QWORD PTR [rcx+104], rax
	mov	QWORD PTR [rcx+112], rax
	mov	QWORD PTR [rcx+120], rax
	mov	QWORD PTR [rcx+128], rax
	mov	QWORD PTR [rcx+136], rax
	mov	QWORD PTR [rcx+144], rax
	mov	QWORD PTR [rcx+152], rax
	mov	QWORD PTR [rcx+160], rax
	mov	QWORD PTR [rcx+168], rax
	mov	QWORD PTR [rcx+176], rax
	mov	QWORD PTR [rcx+184], rax
	mov	QWORD PTR [rcx+192], rax
	mov	QWORD PTR [rcx+200], rax

; 25380:     struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
; 25381:     Py_buffer *buf = &from_memview->view;

	mov	rax, QWORD PTR [rdx]
	add	rax, 72					; 00000048H

; 25382:     PyObject *shape_tuple = NULL;

	xor	r12d, r12d

; 25383:     PyObject *temp_int = NULL;
; 25384:     struct __pyx_array_obj *array_obj = NULL;

	xor	r13d, r13d

; 25385:     struct __pyx_memoryview_obj *memview_obj = NULL;
; 25386:     __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
; 25387:     for (i = 0; i < ndim; i++) {

	xor	r8d, r8d
	xor	ecx, ecx
	mov	r15, rdx
	mov	QWORD PTR buf$1$[rsp], rax
	mov	r14, rdi
	test	r9d, r9d
	jle	SHORT $LN52@pyx_memory@37

; 25377:     __Pyx_RefNannyDeclarations
; 25378:     int i;
; 25379:     __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };

	lea	rax, QWORD PTR [rdx+144]
$LL54@pyx_memory@37:

; 25388:         if (from_mvs->suboffsets[i] >= 0) {

	cmp	QWORD PTR [rax], r12
	jge	$LN59@pyx_memory@37
	inc	rcx
	inc	r8d
	add	rax, 8
	cmp	rcx, rdi
	jl	SHORT $LL54@pyx_memory@37
$LN52@pyx_memory@37:

; 25392:         }
; 25393:     }
; 25394:     shape_tuple = PyTuple_New(ndim);

	mov	rcx, rdi
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax

; 25395:     if (unlikely(!shape_tuple)) {

	test	rax, rax
	je	$fail$32123
	xor	ebx, ebx

; 25396:         goto fail;
; 25397:     }
; 25398:     __Pyx_GOTREF(shape_tuple);
; 25399:     for(i = 0; i < ndim; i++) {

	test	edi, edi
	jle	SHORT $LN47@pyx_memory@37

; 25400:         temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);

	lea	rdi, QWORD PTR [rax+24]
	lea	rsi, QWORD PTR [r15+16]
	npad	3
$LL49@pyx_memory@37:
	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_PyInt_FromSsize_t

; 25401:         if(unlikely(!temp_int)) {

	test	rax, rax
	je	$fail$32123
	inc	rbx

; 25402:             goto fail;
; 25403:         } else {
; 25404:             PyTuple_SET_ITEM(shape_tuple, i, temp_int);

	mov	QWORD PTR [rdi], rax
	add	rsi, 8
	add	rdi, 8
	cmp	rbx, r14
	jl	SHORT $LL49@pyx_memory@37
	mov	edi, DWORD PTR ndim$[rsp]
$LN47@pyx_memory@37:

; 25405:             temp_int = NULL;
; 25406:         }
; 25407:     }
; 25408:     array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);

	mov	r8, QWORD PTR buf$1$[rsp]
	mov	r9, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR sizeof_dtype$[rsp]
	mov	r8, QWORD PTR [r8+40]
	mov	rcx, r12
	mov	QWORD PTR [rsp+32], r13
	call	__pyx_array_new
	mov	r13, rax

; 25409:     if (unlikely(!array_obj)) {

	test	rax, rax
	je	$fail$32123

; 25410:         goto fail;
; 25411:     }
; 25412:     __Pyx_GOTREF(array_obj);
; 25413:     memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
; 25414:                                     (PyObject *) array_obj, contig_flag,
; 25415:                                     dtype_is_object,
; 25416:                                     from_mvs->memview->typeinfo);

	mov	r9, QWORD PTR [r15]
	mov	ebx, DWORD PTR dtype_is_object$[rsp]
	mov	edx, DWORD PTR contig_flag$[rsp]
	mov	r9, QWORD PTR [r9+176]
	mov	r8d, ebx
	mov	rcx, rax
	call	__pyx_memoryview_new

; 25417:     if (unlikely(!memview_obj))

	test	rax, rax
	je	SHORT $fail$32123

; 25418:         goto fail;
; 25419:     if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))

	mov	r9d, 1
	mov	r8, rbp
	mov	edx, edi
	mov	rcx, rax
	call	__Pyx_init_memviewslice
	test	eax, eax
	js	SHORT $fail$32123

; 25420:         goto fail;
; 25421:     if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
; 25422:                                                 dtype_is_object) < 0))

	lea	rcx, QWORD PTR $T45017[rsp]
	mov	rdx, rbp
	mov	r8d, 208				; 000000d0H
	call	memcpy
	lea	rcx, QWORD PTR $T45016[rsp]
	mov	rdx, r15
	mov	r8d, 208				; 000000d0H
	call	memcpy
	lea	rdx, QWORD PTR $T45017[rsp]
	lea	rcx, QWORD PTR $T45016[rsp]
	mov	r9d, edi
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], ebx
	call	__pyx_memoryview_copy_contents
	test	eax, eax
	jns	SHORT $no_fail$32140
$fail$32123:

; 25423:         goto fail;
; 25424:     goto no_fail;
; 25425: fail:
; 25426:     __Pyx_XDECREF(new_mvs.memview);

	mov	rax, QWORD PTR [rbp]
	test	rax, rax
	je	SHORT $LN33@pyx_memory@37
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rbp]
	cmp	QWORD PTR [rcx], 0
	jne	SHORT $LN33@pyx_memory@37
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN33@pyx_memory@37:

; 25427:     new_mvs.memview = NULL;

	mov	QWORD PTR [rbp], 0

; 25428:     new_mvs.data = NULL;

	mov	QWORD PTR [rbp+8], 0
$no_fail$32140:
	mov	r15, QWORD PTR [rsp+464]
	mov	r14, QWORD PTR [rsp+472]
	mov	rdi, QWORD PTR [rsp+488]
	mov	rsi, QWORD PTR [rsp+496]
	mov	rbx, QWORD PTR [rsp+536]

; 25429: no_fail:
; 25430:     __Pyx_XDECREF(shape_tuple);

	test	r12, r12
	je	SHORT $LN13@pyx_memory@37
	add	QWORD PTR [r12], -1
	jne	SHORT $LN13@pyx_memory@37
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@37:
	mov	r12, QWORD PTR [rsp+480]

; 25431:     __Pyx_XDECREF(temp_int);
; 25432:     __Pyx_XDECREF(array_obj);

	test	r13, r13
	je	SHORT $LN63@pyx_memory@37
	add	QWORD PTR [r13], -1
	jne	SHORT $LN63@pyx_memory@37
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN63@pyx_memory@37:

; 25433:     __Pyx_RefNannyFinishContext();
; 25434:     return new_mvs;

	mov	rax, rbp

; 25435: }

	add	rsp, 504				; 000001f8H
	pop	r13
	pop	rbp
	ret	0
$LN59@pyx_memory@37:

; 25389:             PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
; 25390:                                            "indirect dimensions (axis %d)", i);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0EA@MAHDLHKC@Cannot?5copy?5memoryview?5slice?5wit@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 25391:             goto fail;

	jmp	$fail$32123
__pyx_memoryview_copy_new_contig ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_5numpy_7ndarray_1__getbuffer__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_info$ = 16
__pyx_v_flags$ = 24
__pyx_pw_5numpy_7ndarray_1__getbuffer__ PROC		; COMDAT

; 5287 :   int __pyx_r;
; 5288 :   __Pyx_RefNannyDeclarations
; 5289 :   __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
; 5290 :   __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
; 5291 : 
; 5292 :   /* function exit code */
; 5293 :   __Pyx_RefNannyFinishContext();
; 5294 :   return __pyx_r;
; 5295 : }

	jmp	__pyx_pf_5numpy_7ndarray___getbuffer__
__pyx_pw_5numpy_7ndarray_1__getbuffer__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@FAGJAJJE@View?4MemoryView?4memoryview?4__get@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__+698
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__ DD 084301H
	DD	063443H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CH@FAGJAJJE@View?4MemoryView?4memoryview?4__get@
CONST	SEGMENT
??_C@_0CH@FAGJAJJE@View?4MemoryView?4memoryview?4__get@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__getitem__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_index$ = 56
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__ PROC ; COMDAT

; 10919: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {

	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 10920:   PyObject *__pyx_v_have_slices = NULL;

	xor	esi, esi

; 10921:   PyObject *__pyx_v_indices = NULL;

	xor	edi, edi
	mov	rax, rdx
	mov	rbp, rcx

; 10922:   char *__pyx_v_itemp;
; 10923:   PyObject *__pyx_r = NULL;
; 10924:   __Pyx_RefNannyDeclarations
; 10925:   int __pyx_t_1;
; 10926:   int __pyx_t_2;
; 10927:   PyObject *__pyx_t_3 = NULL;
; 10928:   PyObject *__pyx_t_4 = NULL;
; 10929:   PyObject *__pyx_t_5 = NULL;
; 10930:   char *__pyx_t_6;
; 10931:   __Pyx_RefNannySetupContext("__getitem__", 0);
; 10932: 
; 10933:   /* "View.MemoryView":398
; 10934:  * 
; 10935:  *     def __getitem__(memoryview self, object index):
; 10936:  *         if index is Ellipsis:             # <<<<<<<<<<<<<<
; 10937:  *             return self
; 10938:  * 
; 10939:  */
; 10940:   __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);

	cmp	rdx, QWORD PTR __pyx_builtin_Ellipsis

; 10941:   __pyx_t_2 = (__pyx_t_1 != 0);
; 10942:   if (__pyx_t_2) {

	jne	SHORT $LN98@pyx_memory@38

; 10943: 
; 10944:     /* "View.MemoryView":399
; 10945:  *     def __getitem__(memoryview self, object index):
; 10946:  *         if index is Ellipsis:
; 10947:  *             return self             # <<<<<<<<<<<<<<
; 10948:  * 
; 10949:  *         have_slices, indices = _unellipsify(index, self.view.ndim)
; 10950:  */
; 10951:     __Pyx_XDECREF(__pyx_r);
; 10952:     __Pyx_INCREF(((PyObject *)__pyx_v_self));

	inc	QWORD PTR [rcx]

; 11083:   __Pyx_XGIVEREF(__pyx_r);
; 11084:   __Pyx_RefNannyFinishContext();
; 11085:   return __pyx_r;

	mov	rax, rcx

; 11086: }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN98@pyx_memory@38:

; 10953:     __pyx_r = ((PyObject *)__pyx_v_self);
; 10954:     goto __pyx_L0;
; 10955: 
; 10956:     /* "View.MemoryView":398
; 10957:  * 
; 10958:  *     def __getitem__(memoryview self, object index):
; 10959:  *         if index is Ellipsis:             # <<<<<<<<<<<<<<
; 10960:  *             return self
; 10961:  * 
; 10962:  */
; 10963:   }
; 10964: 
; 10965:   /* "View.MemoryView":401
; 10966:  *             return self
; 10967:  * 
; 10968:  *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
; 10969:  * 
; 10970:  *         cdef char *itemp
; 10971:  */
; 10972:   __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 401, __pyx_L1_error)

	mov	edx, DWORD PTR [rcx+108]
	mov	rcx, rax
	mov	QWORD PTR [rsp+48], rbx
	call	_unellipsify
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN87@pyx_memory@38
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 401				; 00000191H
	mov	edx, 10972				; 00002adcH
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$LN23@pyx_memory@38
$LN87@pyx_memory@38:

; 10973:   __Pyx_GOTREF(__pyx_t_3);
; 10974:   if (likely(__pyx_t_3 != Py_None)) {

	cmp	rax, QWORD PTR __imp__Py_NoneStruct
	je	$LN86@pyx_memory@38

; 10975:     PyObject* sequence = __pyx_t_3;
; 10976:     #if !CYTHON_COMPILING_IN_PYPY
; 10977:     Py_ssize_t size = Py_SIZE(sequence);

	mov	rcx, QWORD PTR [rax+16]

; 10978:     #else
; 10979:     Py_ssize_t size = PySequence_Size(sequence);
; 10980:     #endif
; 10981:     if (unlikely(size != 2)) {

	cmp	rcx, 2
	je	SHORT $LN85@pyx_memory@38

; 10982:       if (size > 2) __Pyx_RaiseTooManyValuesError(2);

	cmp	rcx, 2
	jle	SHORT $LN84@pyx_memory@38
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0CJ@PLBMFMCE@too?5many?5values?5to?5unpack?5?$CIexpec@
	mov	r8d, 2
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format
	jmp	SHORT $LN82@pyx_memory@38
$LN84@pyx_memory@38:

; 10983:       else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

	test	rcx, rcx
	js	SHORT $LN82@pyx_memory@38
	call	__Pyx_RaiseNeedMoreValuesError
$LN82@pyx_memory@38:

; 10984:       __PYX_ERR(2, 401, __pyx_L1_error)

	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 401				; 00000191H
	mov	edx, 10984				; 00002ae8H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$21160
$LN85@pyx_memory@38:

; 10985:     }
; 10986:     #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 10987:     __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 

	mov	rsi, QWORD PTR [rax+24]

; 10988:     __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

	mov	rdi, QWORD PTR [rax+32]

; 10989:     __Pyx_INCREF(__pyx_t_4);

	inc	QWORD PTR [rsi]

; 10990:     __Pyx_INCREF(__pyx_t_5);

	inc	QWORD PTR [rdi]

; 10991:     #else
; 10992:     __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 401, __pyx_L1_error)
; 10993:     __Pyx_GOTREF(__pyx_t_4);
; 10994:     __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 401, __pyx_L1_error)
; 10995:     __Pyx_GOTREF(__pyx_t_5);
; 10996:     #endif
; 10997:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [rax], -1
	jne	SHORT $LN80@pyx_memory@38
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN80@pyx_memory@38:

; 11000:   }
; 11001:   __pyx_v_have_slices = __pyx_t_4;
; 11002:   __pyx_t_4 = 0;
; 11003:   __pyx_v_indices = __pyx_t_5;
; 11004:   __pyx_t_5 = 0;
; 11005: 
; 11006:   /* "View.MemoryView":404
; 11007:  * 
; 11008:  *         cdef char *itemp
; 11009:  *         if have_slices:             # <<<<<<<<<<<<<<
; 11010:  *             return memview_slice(self, indices)
; 11011:  *         else:
; 11012:  */
; 11013:   __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 404, __pyx_L1_error)

	mov	rcx, rsi
	call	__Pyx_PyObject_IsTrue
	test	eax, eax
	jns	SHORT $LN75@pyx_memory@38
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 404				; 00000194H
	mov	edx, 11013				; 00002b05H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$LN23@pyx_memory@38
$LN75@pyx_memory@38:

; 11014:   if (__pyx_t_2) {

	test	eax, eax
	je	SHORT $LN74@pyx_memory@38

; 11015: 
; 11016:     /* "View.MemoryView":405
; 11017:  *         cdef char *itemp
; 11018:  *         if have_slices:
; 11019:  *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
; 11020:  *         else:
; 11021:  *             itemp = self.get_item_pointer(indices)
; 11022:  */
; 11023:     __Pyx_XDECREF(__pyx_r);
; 11024:     __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 405, __pyx_L1_error)

	mov	rdx, rdi
	mov	rcx, rbp
	call	__pyx_memview_slice
	mov	rbx, rax
	test	rax, rax
	jne	$__pyx_L0$21158
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 405				; 00000195H
	mov	edx, 11024				; 00002b10H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$__pyx_L1_error$21160
$LN74@pyx_memory@38:

; 11025:     __Pyx_GOTREF(__pyx_t_3);
; 11026:     __pyx_r = __pyx_t_3;
; 11027:     __pyx_t_3 = 0;
; 11028:     goto __pyx_L0;
; 11029: 
; 11030:     /* "View.MemoryView":404
; 11031:  * 
; 11032:  *         cdef char *itemp
; 11033:  *         if have_slices:             # <<<<<<<<<<<<<<
; 11034:  *             return memview_slice(self, indices)
; 11035:  *         else:
; 11036:  */
; 11037:   }
; 11038: 
; 11039:   /* "View.MemoryView":407
; 11040:  *             return memview_slice(self, indices)
; 11041:  *         else:
; 11042:  *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
; 11043:  *             return self.convert_item_to_object(itemp)
; 11044:  * 
; 11045:  */
; 11046:   /*else*/ {
; 11047:     __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(2, 407, __pyx_L1_error)

	mov	rax, QWORD PTR [rbp+16]
	mov	rdx, rdi
	mov	rcx, rbp
	call	QWORD PTR [rax]
	mov	rdx, rax
	test	rax, rax
	jne	SHORT $LN62@pyx_memory@38
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 407				; 00000197H
	mov	edx, 11047				; 00002b27H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	$LN23@pyx_memory@38
$LN62@pyx_memory@38:

; 11048:     __pyx_v_itemp = __pyx_t_6;
; 11049: 
; 11050:     /* "View.MemoryView":408
; 11051:  *         else:
; 11052:  *             itemp = self.get_item_pointer(indices)
; 11053:  *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
; 11054:  * 
; 11055:  *     def __setitem__(memoryview self, object index, object value):
; 11056:  */
; 11057:     __Pyx_XDECREF(__pyx_r);
; 11058:     __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 408, __pyx_L1_error)

	mov	rax, QWORD PTR [rbp+16]
	mov	rcx, rbp
	call	QWORD PTR [rax+40]
	mov	rbx, rax
	test	rax, rax
	jne	$__pyx_L0$21158
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 408				; 00000198H
	mov	edx, 11058				; 00002b32H
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	jmp	SHORT $__pyx_L1_error$21160
$LN86@pyx_memory@38:

; 10998:   } else {
; 10999:     __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 401, __pyx_L1_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_0CC@PALEDHEH@?8NoneType?8?5object?5is?5not?5iterabl@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	mov	r9, QWORD PTR __pyx_f+16
	mov	r8d, 401				; 00000191H
	mov	edx, 10999				; 00002af7H
	mov	DWORD PTR __pyx_lineno, r8d
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L1_error$21160:

; 11059:     __Pyx_GOTREF(__pyx_t_3);
; 11060:     __pyx_r = __pyx_t_3;
; 11061:     __pyx_t_3 = 0;
; 11062:     goto __pyx_L0;
; 11063:   }
; 11064: 
; 11065:   /* "View.MemoryView":397
; 11066:  * 
; 11067:  * 
; 11068:  *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
; 11069:  *         if index is Ellipsis:
; 11070:  *             return self
; 11071:  */
; 11072: 
; 11073:   /* function exit code */
; 11074:   __pyx_L1_error:;
; 11075:   __Pyx_XDECREF(__pyx_t_3);

	test	rbx, rbx
	je	SHORT $LN23@pyx_memory@38
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN23@pyx_memory@38
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
$LN23@pyx_memory@38:

; 11076:   __Pyx_XDECREF(__pyx_t_4);
; 11077:   __Pyx_XDECREF(__pyx_t_5);
; 11078:   __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CH@FAGJAJJE@View?4MemoryView?4memoryview?4__get@
	call	__Pyx_AddTraceback

; 11079:   __pyx_r = NULL;

	xor	ebx, ebx
$__pyx_L0$21158:

; 11080:   __pyx_L0:;
; 11081:   __Pyx_XDECREF(__pyx_v_have_slices);

	test	rsi, rsi
	je	SHORT $LN13@pyx_memory@38
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN13@pyx_memory@38
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN13@pyx_memory@38:

; 11082:   __Pyx_XDECREF(__pyx_v_indices);

	test	rdi, rdi
	je	SHORT $LN105@pyx_memory@38
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN105@pyx_memory@38
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN105@pyx_memory@38:

; 11086: }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__ ENDP
_TEXT	ENDS
PUBLIC	$T45097
PUBLIC	$T45098
PUBLIC	??_C@_0DE@IELHIJBP@View?4MemoryView?4memoryview?4setit@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview_setitem_slice_assignment DD imagerel __pyx_memoryview_setitem_slice_assignment
	DD	imagerel __pyx_memoryview_setitem_slice_assignment+678
	DD	imagerel $unwind$__pyx_memoryview_setitem_slice_assignment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview_setitem_slice_assignment DD 0b1b01H
	DD	074641bH
	DD	073541bH
	DD	072341bH
	DD	06e011bH
	DD	0c012d014H
	DD	07010H
xdata	ENDS
;	COMDAT ??_C@_0DE@IELHIJBP@View?4MemoryView?4memoryview?4setit@
CONST	SEGMENT
??_C@_0DE@IELHIJBP@View?4MemoryView?4memoryview?4setit@ DB 'View.MemoryVi'
	DB	'ew.memoryview.setitem_slice_assignment', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview_setitem_slice_assignment
_TEXT	SEGMENT
$T45097 = 48
$T45098 = 256
__pyx_v_dst_slice$ = 464
__pyx_v_src_slice$ = 672
__pyx_v_self$ = 912
__pyx_v_dst$ = 920
__pyx_v_src$ = 928
__pyx_memoryview_setitem_slice_assignment PROC		; COMDAT

; 11501: static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 880				; 00000370H

; 11502:   __Pyx_memviewslice __pyx_v_dst_slice;
; 11503:   __Pyx_memviewslice __pyx_v_src_slice;
; 11504:   PyObject *__pyx_r = NULL;
; 11505:   __Pyx_RefNannyDeclarations
; 11506:   PyObject *__pyx_t_1 = NULL;
; 11507:   int __pyx_t_2;
; 11508:   int __pyx_t_3;
; 11509:   int __pyx_t_4;
; 11510:   __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);
; 11511: 
; 11512:   /* "View.MemoryView":436
; 11513:  *         cdef __Pyx_memviewslice src_slice
; 11514:  * 
; 11515:  *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
; 11516:  *                                  get_slice_from_memview(dst, &dst_slice)[0],
; 11517:  *                                  src.ndim, dst.ndim, self.dtype_is_object)
; 11518:  */
; 11519:   if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 436, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rdi, r8
	mov	rsi, rdx
	mov	r13, rcx
	cmp	r8, rax
	je	SHORT $LN27@pyx_memory@39
	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, r8
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN38@pyx_memory@39
	mov	edx, 11519				; 00002cffH
	jmp	$LN39@pyx_memory@39
$LN38@pyx_memory@39:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
$LN27@pyx_memory@39:

; 11520: 
; 11521:   /* "View.MemoryView":437
; 11522:  * 
; 11523:  *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
; 11524:  *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
; 11525:  *                                  src.ndim, dst.ndim, self.dtype_is_object)
; 11526:  * 
; 11527:  */
; 11528:   if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 437, __pyx_L1_error)

	cmp	rsi, rax
	je	SHORT $LN26@pyx_memory@39
	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, rsi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN26@pyx_memory@39
	mov	r8d, 437				; 000001b5H
	mov	edx, 11528				; 00002d08H
	jmp	$LN40@pyx_memory@39
$LN26@pyx_memory@39:

; 11529: 
; 11530:   /* "View.MemoryView":438
; 11531:  *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
; 11532:  *                                  get_slice_from_memview(dst, &dst_slice)[0],
; 11533:  *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
; 11534:  * 
; 11535:  *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
; 11536:  */
; 11537:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 438, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	rdx, QWORD PTR __pyx_n_s_ndim
	mov	rcx, rdi
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN31@pyx_memory@39
	call	r8
	jmp	SHORT $LN41@pyx_memory@39
$LN31@pyx_memory@39:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN30@pyx_memory@39
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN41@pyx_memory@39
$LN30@pyx_memory@39:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN41@pyx_memory@39:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN25@pyx_memory@39
	mov	r8d, 438				; 000001b6H
	mov	edx, 11537				; 00002d11H
	jmp	$LN40@pyx_memory@39
$LN25@pyx_memory@39:

; 11538:   __Pyx_GOTREF(__pyx_t_1);
; 11539:   __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 438, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_PyInt_As_int
	mov	r12d, eax
	cmp	eax, -1
	jne	SHORT $LN23@pyx_memory@39
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN23@pyx_memory@39
	mov	edx, 11539				; 00002d13H
	jmp	SHORT $LN42@pyx_memory@39
$LN23@pyx_memory@39:

; 11540:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN22@pyx_memory@39
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN22@pyx_memory@39:

; 11541:   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 438, __pyx_L1_error)

	mov	rax, QWORD PTR [rsi+8]
	mov	rdx, QWORD PTR __pyx_n_s_ndim
	mov	rcx, rsi
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN35@pyx_memory@39
	call	r8
	jmp	SHORT $LN43@pyx_memory@39
$LN35@pyx_memory@39:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN34@pyx_memory@39
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN43@pyx_memory@39
$LN34@pyx_memory@39:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN43@pyx_memory@39:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN18@pyx_memory@39
	mov	r8d, 438				; 000001b6H
	mov	edx, 11541				; 00002d15H
	jmp	$LN40@pyx_memory@39
$LN18@pyx_memory@39:

; 11542:   __Pyx_GOTREF(__pyx_t_1);
; 11543:   __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 438, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_PyInt_As_int
	mov	ebp, eax
	cmp	eax, -1
	jne	SHORT $LN16@pyx_memory@39
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN16@pyx_memory@39
	mov	edx, 11543				; 00002d17H
$LN42@pyx_memory@39:
	mov	r9, QWORD PTR __pyx_f+16

; 11565:   goto __pyx_L0;
; 11566:   __pyx_L1_error:;
; 11567:   __Pyx_XDECREF(__pyx_t_1);

	add	QWORD PTR [rbx], -1
	mov	r8d, 438				; 000001b6H
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$21872:
	mov	QWORD PTR __pyx_filename, r9
	jne	$LN3@pyx_memory@39
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno

; 11568:   __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DE@IELHIJBP@View?4MemoryView?4memoryview?4setit@
	call	__Pyx_AddTraceback

; 11569:   __pyx_r = 0;
; 11570:   __pyx_L0:;
; 11571:   __Pyx_XGIVEREF(__pyx_r);
; 11572:   __Pyx_RefNannyFinishContext();
; 11573:   return __pyx_r;

	xor	eax, eax
	jmp	$__pyx_L0$21905
$LN16@pyx_memory@39:

; 11544:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN15@pyx_memory@39
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN15@pyx_memory@39:

; 11545: 
; 11546:   /* "View.MemoryView":436
; 11547:  *         cdef __Pyx_memviewslice src_slice
; 11548:  * 
; 11549:  *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
; 11550:  *                                  get_slice_from_memview(dst, &dst_slice)[0],
; 11551:  *                                  src.ndim, dst.ndim, self.dtype_is_object)
; 11552:  */
; 11553:   __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 436, __pyx_L1_error)

	lea	rdx, QWORD PTR __pyx_v_dst_slice$[rsp]
	mov	rcx, rsi
	call	__pyx_memoryview_get_slice_from_memoryview
	lea	rcx, QWORD PTR $T45098[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy
	lea	rdx, QWORD PTR __pyx_v_src_slice$[rsp]
	mov	rcx, rdi
	call	__pyx_memoryview_get_slice_from_memoryview
	lea	rcx, QWORD PTR $T45097[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy
	mov	r11d, DWORD PTR [r13+172]
	lea	rdx, QWORD PTR $T45098[rsp]
	lea	rcx, QWORD PTR $T45097[rsp]
	mov	r9d, ebp
	mov	r8d, r12d
	mov	DWORD PTR [rsp+32], r11d
	call	__pyx_memoryview_copy_contents
	cmp	eax, -1
	jne	SHORT $LN11@pyx_memory@39
	mov	edx, 11553				; 00002d21H
$LN39@pyx_memory@39:
	mov	r8d, 436				; 000001b4H
$LN40@pyx_memory@39:
	mov	r9, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
$LN3@pyx_memory@39:

; 11568:   __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0DE@IELHIJBP@View?4MemoryView?4memoryview?4setit@
	call	__Pyx_AddTraceback

; 11569:   __pyx_r = 0;
; 11570:   __pyx_L0:;
; 11571:   __Pyx_XGIVEREF(__pyx_r);
; 11572:   __Pyx_RefNannyFinishContext();
; 11573:   return __pyx_r;

	xor	eax, eax
	jmp	SHORT $__pyx_L0$21905
$LN11@pyx_memory@39:

; 11554: 
; 11555:   /* "View.MemoryView":432
; 11556:  *         return obj
; 11557:  * 
; 11558:  *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
; 11559:  *         cdef __Pyx_memviewslice dst_slice
; 11560:  *         cdef __Pyx_memviewslice src_slice
; 11561:  */
; 11562: 
; 11563:   /* function exit code */
; 11564:   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
$__pyx_L0$21905:

; 11574: }

	lea	r11, QWORD PTR [rsp+880]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_memoryview_setitem_slice_assignment ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__ PROC ; COMDAT

; 12721:   PyObject *__pyx_r = 0;
; 12722:   __Pyx_RefNannyDeclarations
; 12723:   __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
; 12724:   __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 12725: 
; 12726:   /* function exit code */
; 12727:   __Pyx_RefNannyFinishContext();
; 12728:   return __pyx_r;
; 12729: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__
__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_is_c_contig
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_memoryview_is_c_contig PROC			; COMDAT

; 13750:   PyObject *__pyx_r = 0;
; 13751:   __Pyx_RefNannyDeclarations
; 13752:   __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
; 13753:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13754: 
; 13755:   /* function exit code */
; 13756:   __Pyx_RefNannyFinishContext();
; 13757:   return __pyx_r;
; 13758: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig
__pyx_memoryview_is_c_contig ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_is_f_contig
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_memoryview_is_f_contig PROC			; COMDAT

; 13821:   PyObject *__pyx_r = 0;
; 13822:   __Pyx_RefNannyDeclarations
; 13823:   __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
; 13824:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13825: 
; 13826:   /* function exit code */
; 13827:   __Pyx_RefNannyFinishContext();
; 13828:   return __pyx_r;
; 13829: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig
__pyx_memoryview_is_f_contig ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@GPMPHFEJ@View?4MemoryView?4memoryview?4copy?$AA@ ; `string'
PUBLIC	??_C@_01PAPGNFGE@c?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy+395
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy DD 071201H
	DD	0596412H
	DD	0583412H
	DD	0560112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0CA@GPMPHFEJ@View?4MemoryView?4memoryview?4copy?$AA@
CONST	SEGMENT
??_C@_0CA@GPMPHFEJ@View?4MemoryView?4memoryview?4copy?$AA@ DB 'View.Memor'
	DB	'yView.memoryview.copy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PAPGNFGE@c?$AA@
CONST	SEGMENT
??_C@_01PAPGNFGE@c?$AA@ DB 'c', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy
_TEXT	SEGMENT
__pyx_v_mslice$ = 64
__pyx_t_1$ = 272
$T45153 = 480
__pyx_v_self$ = 704
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy PROC ; COMDAT

; 13902: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 688				; 000002b0H

; 13903:   __Pyx_memviewslice __pyx_v_mslice;
; 13904:   int __pyx_v_flags;
; 13905:   PyObject *__pyx_r = NULL;
; 13906:   __Pyx_RefNannyDeclarations
; 13907:   __Pyx_memviewslice __pyx_t_1;
; 13908:   PyObject *__pyx_t_2 = NULL;
; 13909:   __Pyx_RefNannySetupContext("copy", 0);
; 13910: 
; 13911:   /* "View.MemoryView":621
; 13912:  *     def copy(self):
; 13913:  *         cdef __Pyx_memviewslice mslice
; 13914:  *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
; 13915:  * 
; 13916:  *         slice_copy(self, &mslice)
; 13917:  */
; 13918:   __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

	mov	esi, DWORD PTR [rcx+168]

; 13919: 
; 13920:   /* "View.MemoryView":623
; 13921:  *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
; 13922:  * 
; 13923:  *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
; 13924:  *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
; 13925:  *                                    self.view.itemsize,
; 13926:  */
; 13927:   __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

	movsxd	r8, DWORD PTR [rcx+108]
	mov	rax, QWORD PTR [rcx+72]
	mov	r10, QWORD PTR [rcx+120]
	mov	r11, QWORD PTR [rcx+128]
	mov	rdi, QWORD PTR [rcx+136]
	and	esi, -89				; ffffffffffffffa7H
	xor	edx, edx
	mov	rbx, rcx
	mov	QWORD PTR __pyx_v_mslice$[rsp], rcx
	mov	QWORD PTR __pyx_v_mslice$[rsp+8], rax
	test	r8, r8
	jle	SHORT $LN27@pyx_memory@40
	lea	rax, QWORD PTR __pyx_v_mslice$[rsp+16]
	mov	r9, rdi
	sub	r10, rax
	lea	rax, QWORD PTR __pyx_v_mslice$[rsp+16]
	sub	r11, rax
	lea	rax, QWORD PTR __pyx_v_mslice$[rsp+16]
	sub	r9, rax
	npad	12
$LL29@pyx_memory@40:
	lea	rax, QWORD PTR [r10+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_mslice$[rsp+rax+16]
	lea	rax, QWORD PTR [r11+rdx*8]
	mov	QWORD PTR __pyx_v_mslice$[rsp+rdx*8+16], rcx
	mov	rcx, QWORD PTR __pyx_v_mslice$[rsp+rax+16]
	mov	QWORD PTR __pyx_v_mslice$[rsp+rdx*8+80], rcx
	test	rdi, rdi
	je	SHORT $LN26@pyx_memory@40
	lea	rax, QWORD PTR [r9+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_mslice$[rsp+rax+16]
	jmp	SHORT $LN25@pyx_memory@40
$LN26@pyx_memory@40:
	or	rcx, -1
$LN25@pyx_memory@40:
	mov	QWORD PTR __pyx_v_mslice$[rsp+rdx*8+144], rcx
	inc	rdx
	cmp	rdx, r8
	jl	SHORT $LL29@pyx_memory@40
$LN27@pyx_memory@40:

; 13928: 
; 13929:   /* "View.MemoryView":624
; 13930:  * 
; 13931:  *         slice_copy(self, &mslice)
; 13932:  *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
; 13933:  *                                    self.view.itemsize,
; 13934:  *                                    flags|PyBUF_C_CONTIGUOUS,
; 13935:  */
; 13936:   __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 624, __pyx_L1_error)

	mov	eax, DWORD PTR [rbx+172]
	mov	r9d, DWORD PTR [rbx+108]
	or	esi, 56					; 00000038H
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR [rbx+96]
	lea	r8, OFFSET FLAT:??_C@_01PAPGNFGE@c?$AA@
	lea	rdx, QWORD PTR __pyx_v_mslice$[rsp]
	lea	rcx, QWORD PTR $T45153[rsp]
	mov	DWORD PTR [rsp+40], esi
	mov	QWORD PTR [rsp+32], rax
	call	__pyx_memoryview_copy_new_contig
	lea	rcx, QWORD PTR __pyx_t_1$[rsp]
	mov	rdx, rax
	mov	r8d, 208				; 000000d0H
	call	memcpy
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN22@pyx_memory@40
	mov	r8d, 624				; 00000270H
	mov	edx, 13936				; 00003670H
	jmp	SHORT $LN34@pyx_memory@40
$LN22@pyx_memory@40:

; 13937:   __pyx_v_mslice = __pyx_t_1;

	lea	rcx, QWORD PTR __pyx_v_mslice$[rsp]
	lea	rdx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy

; 13938: 
; 13939:   /* "View.MemoryView":629
; 13940:  *                                    self.dtype_is_object)
; 13941:  * 
; 13942:  *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
; 13943:  * 
; 13944:  *     def copy_fortran(self):
; 13945:  */
; 13946:   __Pyx_XDECREF(__pyx_r);
; 13947:   __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 629, __pyx_L1_error)

	lea	rdx, QWORD PTR __pyx_v_mslice$[rsp]
	mov	rcx, rbx
	call	__pyx_memoryview_copy_object_from_slice
	test	rax, rax
	jne	SHORT $__pyx_L0$24169
	mov	r8d, 629				; 00000275H
	mov	edx, 13947				; 0000367bH
$__pyx_L1_error$24151:
$LN34@pyx_memory@40:
	mov	r9, QWORD PTR __pyx_f+16

; 13948:   __Pyx_GOTREF(__pyx_t_2);
; 13949:   __pyx_r = __pyx_t_2;
; 13950:   __pyx_t_2 = 0;
; 13951:   goto __pyx_L0;
; 13952: 
; 13953:   /* "View.MemoryView":619
; 13954:  *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
; 13955:  * 
; 13956:  *     def copy(self):             # <<<<<<<<<<<<<<
; 13957:  *         cdef __Pyx_memviewslice mslice
; 13958:  *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
; 13959:  */
; 13960: 
; 13961:   /* function exit code */
; 13962:   __pyx_L1_error:;
; 13963:   __Pyx_XDECREF(__pyx_t_2);
; 13964:   __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CA@GPMPHFEJ@View?4MemoryView?4memoryview?4copy?$AA@
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	call	__Pyx_AddTraceback

; 13965:   __pyx_r = NULL;
; 13966:   __pyx_L0:;
; 13967:   __Pyx_XGIVEREF(__pyx_r);
; 13968:   __Pyx_RefNannyFinishContext();
; 13969:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$24169:

; 13970: }

	lea	r11, QWORD PTR [rsp+688]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@IMCKBEMM@View?4MemoryView?4memoryview?4copy_@ ; `string'
PUBLIC	??_C@_07MIECNAEK@fortran?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran+395
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran DD 071201H
	DD	03f6412H
	DD	03e3412H
	DD	03c0112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0CI@IMCKBEMM@View?4MemoryView?4memoryview?4copy_@
CONST	SEGMENT
??_C@_0CI@IMCKBEMM@View?4MemoryView?4memoryview?4copy_@ DB 'View.MemoryVi'
	DB	'ew.memoryview.copy_fortran', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIECNAEK@fortran?$AA@
CONST	SEGMENT
??_C@_07MIECNAEK@fortran?$AA@ DB 'fortran', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran
_TEXT	SEGMENT
__pyx_t_1$ = 64
__pyx_v_src$ = 64
__pyx_v_dst$ = 272
$T45199 = 272
__pyx_v_self$ = 496
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran PROC ; COMDAT

; 13993: static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 480				; 000001e0H

; 13994:   __Pyx_memviewslice __pyx_v_src;
; 13995:   __Pyx_memviewslice __pyx_v_dst;
; 13996:   int __pyx_v_flags;
; 13997:   PyObject *__pyx_r = NULL;
; 13998:   __Pyx_RefNannyDeclarations
; 13999:   __Pyx_memviewslice __pyx_t_1;
; 14000:   PyObject *__pyx_t_2 = NULL;
; 14001:   __Pyx_RefNannySetupContext("copy_fortran", 0);
; 14002: 
; 14003:   /* "View.MemoryView":633
; 14004:  *     def copy_fortran(self):
; 14005:  *         cdef __Pyx_memviewslice src, dst
; 14006:  *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
; 14007:  * 
; 14008:  *         slice_copy(self, &src)
; 14009:  */
; 14010:   __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

	mov	esi, DWORD PTR [rcx+168]

; 14011: 
; 14012:   /* "View.MemoryView":635
; 14013:  *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
; 14014:  * 
; 14015:  *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
; 14016:  *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
; 14017:  *                                 self.view.itemsize,
; 14018:  */
; 14019:   __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

	movsxd	r8, DWORD PTR [rcx+108]
	mov	rax, QWORD PTR [rcx+72]
	mov	r10, QWORD PTR [rcx+120]
	mov	r11, QWORD PTR [rcx+128]
	mov	rdi, QWORD PTR [rcx+136]
	and	esi, -57				; ffffffffffffffc7H
	xor	edx, edx
	mov	rbx, rcx
	mov	QWORD PTR __pyx_v_src$[rsp], rcx
	mov	QWORD PTR __pyx_v_src$[rsp+8], rax
	test	r8, r8
	jle	SHORT $LN27@pyx_memory@41
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	mov	r9, rdi
	sub	r10, rax
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	sub	r11, rax
	lea	rax, QWORD PTR __pyx_v_src$[rsp+16]
	sub	r9, rax
	npad	12
$LL29@pyx_memory@41:
	lea	rax, QWORD PTR [r10+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	lea	rax, QWORD PTR [r11+rdx*8]
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+16], rcx
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+80], rcx
	test	rdi, rdi
	je	SHORT $LN26@pyx_memory@41
	lea	rax, QWORD PTR [r9+rdx*8]
	mov	rcx, QWORD PTR __pyx_v_src$[rsp+rax+16]
	jmp	SHORT $LN25@pyx_memory@41
$LN26@pyx_memory@41:
	or	rcx, -1
$LN25@pyx_memory@41:
	mov	QWORD PTR __pyx_v_src$[rsp+rdx*8+144], rcx
	inc	rdx
	cmp	rdx, r8
	jl	SHORT $LL29@pyx_memory@41
$LN27@pyx_memory@41:

; 14020: 
; 14021:   /* "View.MemoryView":636
; 14022:  * 
; 14023:  *         slice_copy(self, &src)
; 14024:  *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
; 14025:  *                                 self.view.itemsize,
; 14026:  *                                 flags|PyBUF_F_CONTIGUOUS,
; 14027:  */
; 14028:   __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 636, __pyx_L1_error)

	mov	eax, DWORD PTR [rbx+172]
	mov	r9d, DWORD PTR [rbx+108]
	or	esi, 88					; 00000058H
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR [rbx+96]
	lea	r8, OFFSET FLAT:??_C@_07MIECNAEK@fortran?$AA@
	lea	rdx, QWORD PTR __pyx_v_src$[rsp]
	lea	rcx, QWORD PTR $T45199[rsp]
	mov	DWORD PTR [rsp+40], esi
	mov	QWORD PTR [rsp+32], rax
	call	__pyx_memoryview_copy_new_contig
	lea	rcx, QWORD PTR __pyx_t_1$[rsp]
	mov	rdx, rax
	mov	r8d, 208				; 000000d0H
	call	memcpy
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN22@pyx_memory@41
	mov	r8d, 636				; 0000027cH
	mov	edx, 14028				; 000036ccH
	jmp	SHORT $LN34@pyx_memory@41
$LN22@pyx_memory@41:

; 14029:   __pyx_v_dst = __pyx_t_1;

	lea	rcx, QWORD PTR __pyx_v_dst$[rsp]
	lea	rdx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy

; 14030: 
; 14031:   /* "View.MemoryView":641
; 14032:  *                                 self.dtype_is_object)
; 14033:  * 
; 14034:  *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
; 14035:  * 
; 14036:  * 
; 14037:  */
; 14038:   __Pyx_XDECREF(__pyx_r);
; 14039:   __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 641, __pyx_L1_error)

	lea	rdx, QWORD PTR __pyx_v_dst$[rsp]
	mov	rcx, rbx
	call	__pyx_memoryview_copy_object_from_slice
	test	rax, rax
	jne	SHORT $__pyx_L0$24232
	mov	r8d, 641				; 00000281H
	mov	edx, 14039				; 000036d7H
$__pyx_L1_error$24214:
$LN34@pyx_memory@41:
	mov	r9, QWORD PTR __pyx_f+16

; 14040:   __Pyx_GOTREF(__pyx_t_2);
; 14041:   __pyx_r = __pyx_t_2;
; 14042:   __pyx_t_2 = 0;
; 14043:   goto __pyx_L0;
; 14044: 
; 14045:   /* "View.MemoryView":631
; 14046:  *         return memoryview_copy_from_slice(self, &mslice)
; 14047:  * 
; 14048:  *     def copy_fortran(self):             # <<<<<<<<<<<<<<
; 14049:  *         cdef __Pyx_memviewslice src, dst
; 14050:  *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
; 14051:  */
; 14052: 
; 14053:   /* function exit code */
; 14054:   __pyx_L1_error:;
; 14055:   __Pyx_XDECREF(__pyx_t_2);
; 14056:   __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CI@IMCKBEMM@View?4MemoryView?4memoryview?4copy_@
	mov	DWORD PTR __pyx_clineno, edx
	mov	QWORD PTR __pyx_filename, r9
	mov	DWORD PTR __pyx_lineno, r8d
	call	__Pyx_AddTraceback

; 14057:   __pyx_r = NULL;
; 14058:   __pyx_L0:;
; 14059:   __Pyx_XGIVEREF(__pyx_r);
; 14060:   __Pyx_RefNannyFinishContext();
; 14061:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$24232:

; 14062: }

	lea	r11, QWORD PTR [rsp+480]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_getprop___pyx_memoryview_T
_TEXT	SEGMENT
o$ = 8
x$ = 16
__pyx_getprop___pyx_memoryview_T PROC			; COMDAT

; 21049:   return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
; 21050: }

	jmp	__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__
__pyx_getprop___pyx_memoryview_T ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GHMEDKKM@init?5rsrpsinr?$AA@		; `string'
PUBLIC	??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@ ; `string'
PUBLIC	__real@3fcd791c5f888823
PUBLIC	__real@3f91df46a2529d39
PUBLIC	__real@400921fb54442d18
PUBLIC	??_C@_05FDNIMOCD@ufunc?$AA@			; `string'
PUBLIC	??_C@_07BGCBJOAG@ndarray?$AA@			; `string'
PUBLIC	??_C@_09OALBOHJN@broadcast?$AA@			; `string'
PUBLIC	??_C@_08CPNDJOEF@flatiter?$AA@			; `string'
PUBLIC	??_C@_05COLBNKPI@numpy?$AA@			; `string'
PUBLIC	??_C@_05ILEGENLL@dtype?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0P@LKIOHFKF@cython_runtime?$AA@		; `string'
PUBLIC	??_C@_0M@EILMOIBE@__builtin__?$AA@		; `string'
PUBLIC	initrsrpsinr
EXTRN	__imp_PyThread_allocate_lock:PROC
EXTRN	__imp_PyCFunction_NewEx:PROC
EXTRN	__imp_PyType_Ready:PROC
EXTRN	__imp_PyObject_SetAttrString:PROC
EXTRN	__imp_PyImport_AddModule:PROC
EXTRN	__imp_Py_InitModule4_64:PROC
EXTRN	__imp_PyUnicodeUCS2_FromStringAndSize:PROC
_BSS	SEGMENT
?__pyx_t_3@?1??initrsrpsinr@@9@9 DQ 08H DUP (?)		; `initrsrpsinr'::`2'::__pyx_t_3
__pyx_v_8rsrpsinr_log10_10 DQ 01H DUP (?)
__pyx_vtabptr__memoryviewslice DQ 01H DUP (?)
__pyx_vtable__memoryviewslice DB 038H DUP (?)
__pyx_vtabptr_memoryview DQ 01H DUP (?)
__pyx_vtable_memoryview DB 038H DUP (?)
__pyx_vtable_array DQ 01H DUP (?)
__pyx_empty_unicode DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$initrsrpsinr DD imagerel $LN222
	DD	imagerel $LN222+4992
	DD	imagerel $unwind$initrsrpsinr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initrsrpsinr DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT ??_C@_0O@GHMEDKKM@init?5rsrpsinr?$AA@
CONST	SEGMENT
??_C@_0O@GHMEDKKM@init?5rsrpsinr?$AA@ DB 'init rsrpsinr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@ DB 'getbuff'
	DB	'er(obj, view, flags)', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3fcd791c5f888823
CONST	SEGMENT
__real@3fcd791c5f888823 DQ 03fcd791c5f888823r	; 0.230259
CONST	ENDS
;	COMDAT __real@3f91df46a2529d39
CONST	SEGMENT
__real@3f91df46a2529d39 DQ 03f91df46a2529d39r	; 0.0174533
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT ??_C@_05FDNIMOCD@ufunc?$AA@
CONST	SEGMENT
??_C@_05FDNIMOCD@ufunc?$AA@ DB 'ufunc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGCBJOAG@ndarray?$AA@
CONST	SEGMENT
??_C@_07BGCBJOAG@ndarray?$AA@ DB 'ndarray', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OALBOHJN@broadcast?$AA@
CONST	SEGMENT
??_C@_09OALBOHJN@broadcast?$AA@ DB 'broadcast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNDJOEF@flatiter?$AA@
CONST	SEGMENT
??_C@_08CPNDJOEF@flatiter?$AA@ DB 'flatiter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05COLBNKPI@numpy?$AA@
CONST	SEGMENT
??_C@_05COLBNKPI@numpy?$AA@ DB 'numpy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILEGENLL@dtype?$AA@
CONST	SEGMENT
??_C@_05ILEGENLL@dtype?$AA@ DB 'dtype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKIOHFKF@cython_runtime?$AA@
CONST	SEGMENT
??_C@_0P@LKIOHFKF@cython_runtime?$AA@ DB 'cython_runtime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EILMOIBE@__builtin__?$AA@
CONST	SEGMENT
??_C@_0M@EILMOIBE@__builtin__?$AA@ DB '__builtin__', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT initrsrpsinr
_TEXT	SEGMENT
initrsrpsinr PROC					; COMDAT

; 22034: {

$LN222:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 22035:   PyObject *__pyx_t_1 = NULL;
; 22036:   PyObject *__pyx_t_2 = NULL;
; 22037:   static PyThread_type_lock __pyx_t_3[8];
; 22038:   __Pyx_RefNannyDeclarations
; 22039:   #if CYTHON_PEP489_MULTI_PHASE_INIT
; 22040:   if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
; 22041:   #endif
; 22042:   #if CYTHON_REFNANNY
; 22043:   __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
; 22044:   if (!__Pyx_RefNanny) {
; 22045:       PyErr_Clear();
; 22046:       __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
; 22047:       if (!__Pyx_RefNanny)
; 22048:           Py_FatalError("failed to import 'refnanny' module");
; 22049:   }
; 22050:   #endif
; 22051:   __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_rsrpsinr(void)", 0);
; 22052:   if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	call	__Pyx_check_binary_version
	xor	esi, esi
	test	eax, eax
	jns	SHORT $LN200@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22052		; 00005624H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN200@initrsrpsi:

; 22053:   __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)

	xor	ecx, ecx
	call	QWORD PTR __imp_PyTuple_New
	mov	QWORD PTR __pyx_empty_tuple, rax
	test	rax, rax
	jne	SHORT $LN199@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22053		; 00005625H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN199@initrsrpsi:

; 22054:   __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)

	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	xor	edx, edx
	call	QWORD PTR __imp_PyString_FromStringAndSize
	mov	QWORD PTR __pyx_empty_bytes, rax
	test	rax, rax
	jne	SHORT $LN198@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22054		; 00005626H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN198@initrsrpsi:

; 22055:   __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)

	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	xor	edx, edx
	call	QWORD PTR __imp_PyUnicodeUCS2_FromStringAndSize
	mov	QWORD PTR __pyx_empty_unicode, rax
	test	rax, rax
	jne	SHORT $LN197@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22055		; 00005627H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN197@initrsrpsi:

; 22056:   #ifdef __Pyx_CyFunction_USED
; 22057:   if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22058:   #endif
; 22059:   #ifdef __Pyx_FusedFunction_USED
; 22060:   if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22061:   #endif
; 22062:   #ifdef __Pyx_Coroutine_USED
; 22063:   if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22064:   #endif
; 22065:   #ifdef __Pyx_Generator_USED
; 22066:   if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22067:   #endif
; 22068:   #ifdef __Pyx_AsyncGen_USED
; 22069:   if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22070:   #endif
; 22071:   #ifdef __Pyx_StopAsyncIteration_USED
; 22072:   if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22073:   #endif
; 22074:   /*--- Library function declarations ---*/
; 22075:   /*--- Threads initialization code ---*/
; 22076:   #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
; 22077:   #ifdef WITH_THREAD /* Python build with threading support? */
; 22078:   PyEval_InitThreads();
; 22079:   #endif
; 22080:   #endif
; 22081:   /*--- Module creation code ---*/
; 22082:   #if CYTHON_PEP489_MULTI_PHASE_INIT
; 22083:   __pyx_m = __pyx_pyinit_module;
; 22084:   Py_INCREF(__pyx_m);
; 22085:   #else
; 22086:   #if PY_MAJOR_VERSION < 3
; 22087:   __pyx_m = Py_InitModule4("rsrpsinr", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);

	lea	rdx, OFFSET FLAT:__pyx_methods
	lea	rcx, OFFSET FLAT:??_C@_08DCLFIFHK@rsrpsinr?$AA@
	xor	r9d, r9d
	xor	r8d, r8d
	mov	DWORD PTR [rsp+32], 1013		; 000003f5H
	call	QWORD PTR __imp_Py_InitModule4_64
	mov	QWORD PTR __pyx_m, rax
	test	rax, rax
	je	$LN213@initrsrpsi
	inc	QWORD PTR [rax]

; 22092:   #endif
; 22093:   __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	rcx, rax
	call	QWORD PTR __imp_PyModule_GetDict
	mov	QWORD PTR __pyx_d, rax
	test	rax, rax
	jne	SHORT $LN190@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22093		; 0000564dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN190@initrsrpsi:

; 22094:   Py_INCREF(__pyx_d);

	mov	rax, QWORD PTR __pyx_d

; 22095:   __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)

	lea	rcx, OFFSET FLAT:??_C@_0M@EILMOIBE@__builtin__?$AA@
	inc	QWORD PTR [rax]
	call	QWORD PTR __imp_PyImport_AddModule
	mov	QWORD PTR __pyx_b, rax
	test	rax, rax
	jne	SHORT $LN189@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22095		; 0000564fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN189@initrsrpsi:

; 22096:   __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)

	lea	rcx, OFFSET FLAT:??_C@_0P@LKIOHFKF@cython_runtime?$AA@
	call	QWORD PTR __imp_PyImport_AddModule
	mov	QWORD PTR __pyx_cython_runtime, rax
	test	rax, rax
	jne	SHORT $LN188@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22096		; 00005650H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN188@initrsrpsi:

; 22097:   #if CYTHON_COMPILING_IN_PYPY
; 22098:   Py_INCREF(__pyx_b);
; 22099:   #endif
; 22100:   if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);

	mov	r8, QWORD PTR __pyx_b
	mov	rcx, QWORD PTR __pyx_m
	lea	rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
	call	QWORD PTR __imp_PyObject_SetAttrString
	test	eax, eax
	jns	SHORT $LN187@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22100		; 00005654H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN187@initrsrpsi:

; 22101:   /*--- Initialize various global constants etc. ---*/
; 22102:   if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	call	__Pyx_InitGlobals
	test	eax, eax
	jns	SHORT $LN186@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22102		; 00005656H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN186@initrsrpsi:

; 22103:   #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
; 22104:   if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22105:   #endif
; 22106:   if (__pyx_module_is_main_rsrpsinr) {

	cmp	DWORD PTR __pyx_module_is_main_rsrpsinr, esi
	je	SHORT $LN184@initrsrpsi

; 22107:     if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_main
	mov	rcx, QWORD PTR __pyx_m
	lea	rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	call	QWORD PTR __imp_PyObject_SetAttrString
	test	eax, eax
	jns	SHORT $LN184@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22107		; 0000565bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN184@initrsrpsi:

; 22108:   }
; 22109:   #if PY_MAJOR_VERSION >= 3
; 22110:   {
; 22111:     PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
; 22112:     if (!PyDict_GetItemString(modules, "rsrpsinr")) {
; 22113:       if (unlikely(PyDict_SetItemString(modules, "rsrpsinr", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
; 22114:     }
; 22115:   }
; 22116:   #endif
; 22117:   /*--- Builtin init code ---*/
; 22118:   if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	call	__Pyx_InitCachedBuiltins
	test	eax, eax
	jns	SHORT $LN183@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22118		; 00005666H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN183@initrsrpsi:

; 22119:   /*--- Constants init code ---*/
; 22120:   if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	call	__Pyx_InitCachedConstants
	test	eax, eax
	jns	SHORT $LN182@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22120		; 00005668H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN182@initrsrpsi:

; 22121:   /*--- Global init code ---*/
; 22122:   generic = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 22123:   strided = Py_None; Py_INCREF(Py_None);
; 22124:   indirect = Py_None; Py_INCREF(Py_None);
; 22125:   contiguous = Py_None; Py_INCREF(Py_None);
; 22126:   indirect_contiguous = Py_None; Py_INCREF(Py_None);
; 22127:   /*--- Variable export code ---*/
; 22128:   /*--- Function export code ---*/
; 22129:   /*--- Type init code ---*/
; 22130:   __pyx_vtabptr_array = &__pyx_vtable_array;
; 22131:   __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
; 22132:   if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)

	lea	rbx, OFFSET FLAT:__pyx_type___pyx_array
	inc	QWORD PTR [rax]
	mov	QWORD PTR generic, rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	QWORD PTR strided, rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	QWORD PTR indirect, rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	QWORD PTR contiguous, rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	QWORD PTR indirect_contiguous, rax
	lea	rax, OFFSET FLAT:__pyx_vtable_array
	mov	QWORD PTR __pyx_vtabptr_array, rax
	lea	rax, OFFSET FLAT:__pyx_array_get_memview
	mov	rcx, rbx
	mov	QWORD PTR __pyx_vtable_array, rax
	call	QWORD PTR __imp_PyType_Ready
	test	eax, eax
	jns	SHORT $LN181@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 103		; 00000067H
	mov	DWORD PTR __pyx_clineno, 22132		; 00005674H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN181@initrsrpsi:

; 22133:   __pyx_type___pyx_array.tp_print = 0;
; 22134:   if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_vtabptr_array
	mov	rcx, QWORD PTR __pyx_type___pyx_array+264
	mov	QWORD PTR __pyx_type___pyx_array+56, rsi
	call	__Pyx_SetVtable
	test	eax, eax
	jns	SHORT $LN180@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 103		; 00000067H
	mov	DWORD PTR __pyx_clineno, 22134		; 00005676H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN180@initrsrpsi:

; 22135:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_setup_reduce
	test	eax, eax
	jns	SHORT $LN179@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 103		; 00000067H
	mov	DWORD PTR __pyx_clineno, 22135		; 00005677H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN179@initrsrpsi:

; 22136:   __pyx_array_type = &__pyx_type___pyx_array;

	mov	QWORD PTR __pyx_array_type, rbx

; 22137:   if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 277, __pyx_L1_error)

	lea	rbx, OFFSET FLAT:__pyx_type___pyx_MemviewEnum
	mov	rcx, rbx
	call	QWORD PTR __imp_PyType_Ready
	test	eax, eax
	jns	SHORT $LN178@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 277		; 00000115H
	mov	DWORD PTR __pyx_clineno, 22137		; 00005679H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN178@initrsrpsi:

; 22138:   __pyx_type___pyx_MemviewEnum.tp_print = 0;
; 22139:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 277, __pyx_L1_error)

	mov	rcx, rbx
	mov	QWORD PTR __pyx_type___pyx_MemviewEnum+56, rsi
	call	__Pyx_setup_reduce
	test	eax, eax
	jns	SHORT $LN177@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 277		; 00000115H
	mov	DWORD PTR __pyx_clineno, 22139		; 0000567bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN177@initrsrpsi:

; 22140:   __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
; 22141:   __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;

	lea	rax, OFFSET FLAT:__pyx_vtable_memoryview
	mov	QWORD PTR __pyx_MemviewEnum_type, rbx

; 22142:   __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
; 22143:   __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
; 22144:   __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
; 22145:   __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
; 22146:   __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
; 22147:   __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
; 22148:   __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
; 22149:   if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 328, __pyx_L1_error)

	lea	rbx, OFFSET FLAT:__pyx_type___pyx_memoryview
	mov	QWORD PTR __pyx_vtabptr_memoryview, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_get_item_pointer
	mov	rcx, rbx
	mov	QWORD PTR __pyx_vtable_memoryview, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_is_slice
	mov	QWORD PTR __pyx_vtable_memoryview+8, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_setitem_slice_assignment
	mov	QWORD PTR __pyx_vtable_memoryview+16, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_setitem_slice_assign_scalar
	mov	QWORD PTR __pyx_vtable_memoryview+24, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_setitem_indexed
	mov	QWORD PTR __pyx_vtable_memoryview+32, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_convert_item_to_object
	mov	QWORD PTR __pyx_vtable_memoryview+40, rax
	lea	rax, OFFSET FLAT:__pyx_memoryview_assign_item_from_object
	mov	QWORD PTR __pyx_vtable_memoryview+48, rax
	call	QWORD PTR __imp_PyType_Ready
	test	eax, eax
	jns	SHORT $LN176@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 328		; 00000148H
	mov	DWORD PTR __pyx_clineno, 22149		; 00005685H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN176@initrsrpsi:

; 22150:   __pyx_type___pyx_memoryview.tp_print = 0;
; 22151:   if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 328, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_vtabptr_memoryview
	mov	rcx, QWORD PTR __pyx_type___pyx_memoryview+264
	mov	QWORD PTR __pyx_type___pyx_memoryview+56, rsi
	call	__Pyx_SetVtable
	test	eax, eax
	jns	SHORT $LN175@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 328		; 00000148H
	mov	DWORD PTR __pyx_clineno, 22151		; 00005687H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN175@initrsrpsi:

; 22152:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 328, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_setup_reduce
	test	eax, eax
	jns	SHORT $LN174@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 328		; 00000148H
	mov	DWORD PTR __pyx_clineno, 22152		; 00005688H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN174@initrsrpsi:

; 22153:   __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
; 22154:   __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
; 22155:   __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;

	mov	rcx, QWORD PTR __pyx_vtabptr_memoryview
	lea	rdx, OFFSET FLAT:__pyx_vtable__memoryviewslice
	mov	QWORD PTR __pyx_memoryview_type, rbx
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR __pyx_vtabptr__memoryviewslice, rdx
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR [rdx+24], rax
	mov	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rdx+32], rax
	mov	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR [rdx+40], rax
	mov	rax, QWORD PTR [rcx+48]

; 22156:   __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
; 22157:   __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
; 22158:   __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;

	mov	QWORD PTR __pyx_type___pyx_memoryviewslice+256, rbx
	mov	QWORD PTR [rdx+48], rax
	lea	rax, OFFSET FLAT:__pyx_memoryviewslice_convert_item_to_object

; 22159:   if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 953, __pyx_L1_error)

	lea	rbx, OFFSET FLAT:__pyx_type___pyx_memoryviewslice
	mov	QWORD PTR __pyx_vtable__memoryviewslice+40, rax
	lea	rax, OFFSET FLAT:__pyx_memoryviewslice_assign_item_from_object
	mov	rcx, rbx
	mov	QWORD PTR __pyx_vtable__memoryviewslice+48, rax
	call	QWORD PTR __imp_PyType_Ready
	test	eax, eax
	jns	SHORT $LN173@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 953		; 000003b9H
	mov	DWORD PTR __pyx_clineno, 22159		; 0000568fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN173@initrsrpsi:

; 22160:   __pyx_type___pyx_memoryviewslice.tp_print = 0;
; 22161:   if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 953, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_vtabptr__memoryviewslice
	mov	rcx, QWORD PTR __pyx_type___pyx_memoryviewslice+264
	mov	QWORD PTR __pyx_type___pyx_memoryviewslice+56, rsi
	call	__Pyx_SetVtable
	test	eax, eax
	jns	SHORT $LN172@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 953		; 000003b9H
	mov	DWORD PTR __pyx_clineno, 22161		; 00005691H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN172@initrsrpsi:

; 22162:   if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 953, __pyx_L1_error)

	mov	rcx, rbx
	call	__Pyx_setup_reduce
	test	eax, eax
	jns	SHORT $LN171@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 953		; 000003b9H
	mov	DWORD PTR __pyx_clineno, 22162		; 00005692H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN171@initrsrpsi:

; 22163:   __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
; 22164:   /*--- Type import code ---*/
; 22165:   __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
; 22166:   #if CYTHON_COMPILING_IN_PYPY
; 22167:   sizeof(PyTypeObject),
; 22168:   #else
; 22169:   sizeof(PyHeapTypeObject),
; 22170:   #endif
; 22171:   0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_04GPMDFGEJ@type?$AA@
	lea	rcx, OFFSET FLAT:??_C@_0M@EILMOIBE@__builtin__?$AA@
	xor	r9d, r9d
	mov	r8d, 872				; 00000368H
	mov	QWORD PTR __pyx_memoryviewslice_type, rbx
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_7cpython_4type_type, rax
	test	rax, rax
	jne	SHORT $LN170@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+24
	mov	DWORD PTR __pyx_lineno, 9
	mov	DWORD PTR __pyx_clineno, 22171		; 0000569bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN170@initrsrpsi:

; 22172:   __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 163, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:??_C@_05ILEGENLL@dtype?$AA@
	lea	rcx, OFFSET FLAT:??_C@_05COLBNKPI@numpy?$AA@
	lea	r8d, QWORD PTR [r9+96]
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_5numpy_dtype, rax
	test	rax, rax
	jne	SHORT $LN169@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 163		; 000000a3H
	mov	DWORD PTR __pyx_clineno, 22172		; 0000569cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN169@initrsrpsi:

; 22173:   __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 185, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_08CPNDJOEF@flatiter?$AA@
	lea	rcx, OFFSET FLAT:??_C@_05COLBNKPI@numpy?$AA@
	xor	r9d, r9d
	mov	r8d, 2632				; 00000a48H
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_5numpy_flatiter, rax
	test	rax, rax
	jne	SHORT $LN168@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 185		; 000000b9H
	mov	DWORD PTR __pyx_clineno, 22173		; 0000569dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN168@initrsrpsi:

; 22174:   __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 189, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_09OALBOHJN@broadcast?$AA@
	lea	rcx, OFFSET FLAT:??_C@_05COLBNKPI@numpy?$AA@
	xor	r9d, r9d
	mov	r8d, 560				; 00000230H
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_5numpy_broadcast, rax
	test	rax, rax
	jne	SHORT $LN167@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 189		; 000000bdH
	mov	DWORD PTR __pyx_clineno, 22174		; 0000569eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN167@initrsrpsi:

; 22175:   __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 198, __pyx_L1_error)

	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:??_C@_07BGCBJOAG@ndarray?$AA@
	lea	rcx, OFFSET FLAT:??_C@_05COLBNKPI@numpy?$AA@
	lea	r8d, QWORD PTR [r9+80]
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_5numpy_ndarray, rax
	test	rax, rax
	jne	SHORT $LN166@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 198		; 000000c6H
	mov	DWORD PTR __pyx_clineno, 22175		; 0000569fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN166@initrsrpsi:

; 22176:   __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 885, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_05FDNIMOCD@ufunc?$AA@
	lea	rcx, OFFSET FLAT:??_C@_05COLBNKPI@numpy?$AA@
	xor	r9d, r9d
	mov	r8d, 192				; 000000c0H
	call	__Pyx_ImportType
	mov	QWORD PTR __pyx_ptype_5numpy_ufunc, rax
	test	rax, rax
	jne	SHORT $LN165@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+8
	mov	DWORD PTR __pyx_lineno, 885		; 00000375H
	mov	DWORD PTR __pyx_clineno, 22176		; 000056a0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN12@initrsrpsi
$LN165@initrsrpsi:

; 22177:   /*--- Variable import code ---*/
; 22178:   /*--- Function import code ---*/
; 22179:   /*--- Execution code ---*/
; 22180:   #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
; 22181:   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
; 22182:   #endif
; 22183: 
; 22184:   /* "rsrpsinr.pyx":8
; 22185:  * cimport cython
; 22186:  * 
; 22187:  * import numpy as np             # <<<<<<<<<<<<<<
; 22188:  * cimport numpy as np
; 22189:  * 
; 22190:  */
; 22191:   __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_numpy
	or	r8d, -1
	xor	edx, edx
	call	__Pyx_Import
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN164@initrsrpsi
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 8
	mov	DWORD PTR __pyx_clineno, 22191		; 000056afH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$28740
$LN164@initrsrpsi:

; 22192:   __Pyx_GOTREF(__pyx_t_1);
; 22193:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_np
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN162@initrsrpsi
	mov	DWORD PTR __pyx_lineno, 8
	mov	DWORD PTR __pyx_clineno, 22193		; 000056b1H
	jmp	$LN215@initrsrpsi
$LN162@initrsrpsi:

; 22194:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN161@initrsrpsi
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN161@initrsrpsi:

; 22195: 
; 22196:   /* "rsrpsinr.pyx":11
; 22197:  * cimport numpy as np
; 22198:  * 
; 22199:  * DTYPE = np.float64             # <<<<<<<<<<<<<<
; 22200:  * ctypedef np.float64_t DTYPE_t
; 22201:  * 
; 22202:  */
; 22203:   __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN157@initrsrpsi
	mov	DWORD PTR __pyx_clineno, 22203		; 000056bbH
	jmp	SHORT $LN216@initrsrpsi
$LN157@initrsrpsi:

; 22204:   __Pyx_GOTREF(__pyx_t_1);
; 22205:   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR __pyx_n_s_float64
	mov	rcx, rdi
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN204@initrsrpsi
	call	r8
	jmp	SHORT $LN217@initrsrpsi
$LN204@initrsrpsi:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN203@initrsrpsi
	add	rdx, 32					; 00000020H
	call	r8
	jmp	SHORT $LN217@initrsrpsi
$LN203@initrsrpsi:
	call	QWORD PTR __imp_PyObject_GetAttr
$LN217@initrsrpsi:
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN155@initrsrpsi
	mov	DWORD PTR __pyx_clineno, 22205		; 000056bdH
$LN216@initrsrpsi:
	mov	DWORD PTR __pyx_lineno, 11
$LN215@initrsrpsi:
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$28740:

; 22452: 
; 22453:   /* "(tree fragment)":9
; 22454:  *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
; 22455:  *     return __pyx_result
; 22456:  * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
; 22457:  *     __pyx_result.name = __pyx_state[0]
; 22458:  *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
; 22459:  */
; 22460: 
; 22461:   /*--- Wrapped vars code ---*/
; 22462: 
; 22463:   goto __pyx_L0;
; 22464:   __pyx_L1_error:;
; 22465:   __Pyx_XDECREF(__pyx_t_1);

	test	rdi, rdi
	je	$LN12@initrsrpsi
	add	QWORD PTR [rdi], -1
	jne	$LN12@initrsrpsi
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi

; 22466:   __Pyx_XDECREF(__pyx_t_2);

	jmp	$LN218@initrsrpsi
$LN155@initrsrpsi:

; 22206:   __Pyx_GOTREF(__pyx_t_2);
; 22207:   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN154@initrsrpsi
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN154@initrsrpsi:

; 22208:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_DTYPE, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_DTYPE
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rbx
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN149@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 11
	mov	DWORD PTR __pyx_clineno, 22208		; 000056c0H
	jmp	$LN219@initrsrpsi
$LN149@initrsrpsi:

; 22209:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN148@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN148@initrsrpsi:

; 22210: 
; 22211:   /* "rsrpsinr.pyx":17
; 22212:  * 
; 22213:  * cdef:
; 22214:  *     double pi = 3.1415926535897932384626  #             # <<<<<<<<<<<<<<
; 22215:  *     double pi180 = pi/180.0
; 22216:  *     DTYPE_t[:] ahv
; 22217:  */
; 22218:   __pyx_v_8rsrpsinr_pi = 3.1415926535897932384626;

	movsdx	xmm0, QWORD PTR __real@400921fb54442d18

; 22219: 
; 22220:   /* "rsrpsinr.pyx":18
; 22221:  * cdef:
; 22222:  *     double pi = 3.1415926535897932384626  #
; 22223:  *     double pi180 = pi/180.0             # <<<<<<<<<<<<<<
; 22224:  *     DTYPE_t[:] ahv
; 22225:  *     DTYPE_t[:] avv
; 22226:  */
; 22227:   __pyx_v_8rsrpsinr_pi180 = (__pyx_v_8rsrpsinr_pi / 180.0);

	movsdx	xmm1, QWORD PTR __real@3f91df46a2529d39

; 22228: 
; 22229:   /* "rsrpsinr.pyx":22
; 22230:  *     DTYPE_t[:] avv
; 22231:  * 
; 22232:  * def degree_to_rad(double d):             # <<<<<<<<<<<<<<
; 22233:  *     return d*pi180
; 22234:  * 
; 22235:  */
; 22236:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8rsrpsinr_1degree_to_rad, NULL, __pyx_n_s_rsrpsinr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_rsrpsinr
	lea	rcx, OFFSET FLAT:__pyx_mdef_8rsrpsinr_1degree_to_rad
	xor	edx, edx
	movsdx	QWORD PTR __pyx_v_8rsrpsinr_pi, xmm0
	movsdx	QWORD PTR __pyx_v_8rsrpsinr_pi180, xmm1
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN144@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 22
	mov	DWORD PTR __pyx_clineno, 22236		; 000056dcH
	jmp	$LN219@initrsrpsi
$LN144@initrsrpsi:

; 22237:   __Pyx_GOTREF(__pyx_t_2);
; 22238:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_degree_to_rad, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_degree_to_rad
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN142@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 22
	mov	DWORD PTR __pyx_clineno, 22238		; 000056deH
	jmp	$LN219@initrsrpsi
$LN142@initrsrpsi:

; 22239:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN141@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN141@initrsrpsi:

; 22240: 
; 22241:   /* "rsrpsinr.pyx":25
; 22242:  *     return d*pi180
; 22243:  * 
; 22244:  * def rad_to_degree(double d):             # <<<<<<<<<<<<<<
; 22245:  *     return d/pi180
; 22246:  * 
; 22247:  */
; 22248:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8rsrpsinr_3rad_to_degree, NULL, __pyx_n_s_rsrpsinr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_rsrpsinr
	lea	rcx, OFFSET FLAT:__pyx_mdef_8rsrpsinr_3rad_to_degree
	xor	edx, edx
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN137@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 25
	mov	DWORD PTR __pyx_clineno, 22248		; 000056e8H
	jmp	$LN219@initrsrpsi
$LN137@initrsrpsi:

; 22249:   __Pyx_GOTREF(__pyx_t_2);
; 22250:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_rad_to_degree, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_rad_to_degree
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN135@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 25
	mov	DWORD PTR __pyx_clineno, 22250		; 000056eaH
	jmp	$LN219@initrsrpsi
$LN135@initrsrpsi:

; 22251:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN134@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN134@initrsrpsi:

; 22252: 
; 22253:   /* "rsrpsinr.pyx":34
; 22254:  *     return d/pi180
; 22255:  * 
; 22256:  * def set_antenna_hv_vv(             # <<<<<<<<<<<<<<
; 22257:  *     np.ndarray[DTYPE_t, mode='c', ndim=1] hv,
; 22258:  *     np.ndarray[DTYPE_t, mode='c', ndim=1] vv):
; 22259:  */
; 22260:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8rsrpsinr_5set_antenna_hv_vv, NULL, __pyx_n_s_rsrpsinr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_rsrpsinr
	lea	rcx, OFFSET FLAT:__pyx_mdef_8rsrpsinr_5set_antenna_hv_vv
	xor	edx, edx
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN130@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 22260		; 000056f4H
	jmp	$LN219@initrsrpsi
$LN130@initrsrpsi:

; 22261:   __Pyx_GOTREF(__pyx_t_2);
; 22262:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_antenna_hv_vv, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_set_antenna_hv_vv
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN128@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 22262		; 000056f6H
	jmp	$LN219@initrsrpsi
$LN128@initrsrpsi:

; 22263:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN127@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN127@initrsrpsi:

; 22264: 
; 22265:   /* "rsrpsinr.pyx":105
; 22266:  * # pow(10, x/10) = exp(lg(10)*x/10)=exp(x*lg(10)/10)
; 22267:  * 
; 22268:  * cdef double log10_10 = 0.23025850929940458 # log(10)/10.             # <<<<<<<<<<<<<<
; 22269:  * 
; 22270:  * cdef object cget_coverage(
; 22271:  */
; 22272:   __pyx_v_8rsrpsinr_log10_10 = 0.23025850929940458;

	movsdx	xmm0, QWORD PTR __real@3fcd791c5f888823

; 22273: 
; 22274:   /* "rsrpsinr.pyx":238
; 22275:  * Interface
; 22276:  * """
; 22277:  * def gain(double alpha, double beta):             # <<<<<<<<<<<<<<
; 22278:  *     return cgain(alpha, beta)
; 22279:  * 
; 22280:  */
; 22281:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8rsrpsinr_7gain, NULL, __pyx_n_s_rsrpsinr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_rsrpsinr
	lea	rcx, OFFSET FLAT:__pyx_mdef_8rsrpsinr_7gain
	xor	edx, edx
	movsdx	QWORD PTR __pyx_v_8rsrpsinr_log10_10, xmm0
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN123@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 238		; 000000eeH
	mov	DWORD PTR __pyx_clineno, 22281		; 00005709H
	jmp	$LN219@initrsrpsi
$LN123@initrsrpsi:

; 22282:   __Pyx_GOTREF(__pyx_t_2);
; 22283:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_gain, __pyx_t_2) < 0) __PYX_ERR(0, 238, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_gain
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN121@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 238		; 000000eeH
	mov	DWORD PTR __pyx_clineno, 22283		; 0000570bH
	jmp	$LN219@initrsrpsi
$LN121@initrsrpsi:

; 22284:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN120@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN120@initrsrpsi:

; 22285: 
; 22286:   /* "rsrpsinr.pyx":241
; 22287:  *     return cgain(alpha, beta)
; 22288:  * 
; 22289:  * def get_coverage(             # <<<<<<<<<<<<<<
; 22290:  *     np.ndarray[DTYPE_t, ndim=2] S,
; 22291:  *     np.ndarray[DTYPE_t, ndim=2] B,
; 22292:  */
; 22293:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8rsrpsinr_9get_coverage, NULL, __pyx_n_s_rsrpsinr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_rsrpsinr
	lea	rcx, OFFSET FLAT:__pyx_mdef_8rsrpsinr_9get_coverage
	xor	edx, edx
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN116@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 22293		; 00005715H
	jmp	$LN219@initrsrpsi
$LN116@initrsrpsi:

; 22294:   __Pyx_GOTREF(__pyx_t_2);
; 22295:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_coverage, __pyx_t_2) < 0) __PYX_ERR(0, 241, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_get_coverage
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN114@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 22295		; 00005717H
	jmp	$LN219@initrsrpsi
$LN114@initrsrpsi:

; 22296:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN113@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN113@initrsrpsi:

; 22297: 
; 22298:   /* "rsrpsinr.pyx":1
; 22299:  * #!python             # <<<<<<<<<<<<<<
; 22300:  * #cython: boundscheck=False, cdivision=True, wraparound=False
; 22301:  * #coding=utf8
; 22302:  */
; 22303:   __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN109@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 22303		; 0000571fH
	jmp	$LN220@initrsrpsi
$LN109@initrsrpsi:

; 22304:   __Pyx_GOTREF(__pyx_t_2);
; 22305:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_test
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN107@initrsrpsi
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_clineno, 22305		; 00005721H
	jmp	$LN220@initrsrpsi
$LN107@initrsrpsi:

; 22306:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN106@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN106@initrsrpsi:

; 22307: 
; 22308:   /* "View.MemoryView":207
; 22309:  *         info.obj = self
; 22310:  * 
; 22311:  *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
; 22312:  * 
; 22313:  *     def __dealloc__(array self):
; 22314:  */
; 22315:   __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 207, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@
	lea	rcx, OFFSET FLAT:__pyx_array_getbuffer
	xor	r8d, r8d
	call	QWORD PTR __imp_PyCapsule_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN102@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 207		; 000000cfH
	mov	DWORD PTR __pyx_clineno, 22315		; 0000572bH
	jmp	$LN219@initrsrpsi
$LN102@initrsrpsi:

; 22316:   __Pyx_GOTREF(__pyx_t_2);
; 22317:   if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 207, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_array_type
	mov	rdx, QWORD PTR __pyx_n_s_pyx_getbuffer
	mov	r8, rax
	mov	rcx, QWORD PTR [rcx+264]
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN100@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 207		; 000000cfH
	mov	DWORD PTR __pyx_clineno, 22317		; 0000572dH
	jmp	$LN219@initrsrpsi
$LN100@initrsrpsi:

; 22318:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN99@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN99@initrsrpsi:

; 22319:   PyType_Modified(__pyx_array_type);

	mov	rcx, QWORD PTR __pyx_array_type
	call	QWORD PTR __imp_PyType_Modified

; 22320: 
; 22321:   /* "View.MemoryView":284
; 22322:  *         return self.name
; 22323:  * 
; 22324:  * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
; 22325:  * cdef strided = Enum("<strided and direct>") # default
; 22326:  * cdef indirect = Enum("<strided and indirect>")
; 22327:  */
; 22328:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 284, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__41
	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN94@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 284		; 0000011cH
	mov	DWORD PTR __pyx_clineno, 22328		; 00005738H
	jmp	$LN219@initrsrpsi
$LN94@initrsrpsi:

; 22329:   __Pyx_GOTREF(__pyx_t_2);
; 22330:   __Pyx_XGOTREF(generic);
; 22331:   __Pyx_DECREF_SET(generic, __pyx_t_2);

	mov	rcx, QWORD PTR generic
	mov	QWORD PTR generic, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN90@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN90@initrsrpsi:

; 22332:   __Pyx_GIVEREF(__pyx_t_2);
; 22333:   __pyx_t_2 = 0;
; 22334: 
; 22335:   /* "View.MemoryView":285
; 22336:  * 
; 22337:  * cdef generic = Enum("<strided and direct or indirect>")
; 22338:  * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
; 22339:  * cdef indirect = Enum("<strided and indirect>")
; 22340:  * 
; 22341:  */
; 22342:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 285, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__42
	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN85@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 285		; 0000011dH
	mov	DWORD PTR __pyx_clineno, 22342		; 00005746H
	jmp	$LN219@initrsrpsi
$LN85@initrsrpsi:

; 22343:   __Pyx_GOTREF(__pyx_t_2);
; 22344:   __Pyx_XGOTREF(strided);
; 22345:   __Pyx_DECREF_SET(strided, __pyx_t_2);

	mov	rcx, QWORD PTR strided
	mov	QWORD PTR strided, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN81@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN81@initrsrpsi:

; 22346:   __Pyx_GIVEREF(__pyx_t_2);
; 22347:   __pyx_t_2 = 0;
; 22348: 
; 22349:   /* "View.MemoryView":286
; 22350:  * cdef generic = Enum("<strided and direct or indirect>")
; 22351:  * cdef strided = Enum("<strided and direct>") # default
; 22352:  * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
; 22353:  * 
; 22354:  * 
; 22355:  */
; 22356:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 286, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__43
	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN76@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 286		; 0000011eH
	mov	DWORD PTR __pyx_clineno, 22356		; 00005754H
	jmp	$LN219@initrsrpsi
$LN76@initrsrpsi:

; 22357:   __Pyx_GOTREF(__pyx_t_2);
; 22358:   __Pyx_XGOTREF(indirect);
; 22359:   __Pyx_DECREF_SET(indirect, __pyx_t_2);

	mov	rcx, QWORD PTR indirect
	mov	QWORD PTR indirect, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN72@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN72@initrsrpsi:

; 22360:   __Pyx_GIVEREF(__pyx_t_2);
; 22361:   __pyx_t_2 = 0;
; 22362: 
; 22363:   /* "View.MemoryView":289
; 22364:  * 
; 22365:  * 
; 22366:  * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
; 22367:  * cdef indirect_contiguous = Enum("<contiguous and indirect>")
; 22368:  * 
; 22369:  */
; 22370:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 289, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__44
	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN67@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 289		; 00000121H
	mov	DWORD PTR __pyx_clineno, 22370		; 00005762H
	jmp	$LN219@initrsrpsi
$LN67@initrsrpsi:

; 22371:   __Pyx_GOTREF(__pyx_t_2);
; 22372:   __Pyx_XGOTREF(contiguous);
; 22373:   __Pyx_DECREF_SET(contiguous, __pyx_t_2);

	mov	rcx, QWORD PTR contiguous
	mov	QWORD PTR contiguous, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN63@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN63@initrsrpsi:

; 22374:   __Pyx_GIVEREF(__pyx_t_2);
; 22375:   __pyx_t_2 = 0;
; 22376: 
; 22377:   /* "View.MemoryView":290
; 22378:  * 
; 22379:  * cdef contiguous = Enum("<contiguous and direct>")
; 22380:  * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
; 22381:  * 
; 22382:  * 
; 22383:  */
; 22384:   __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 290, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_tuple__45
	mov	rcx, QWORD PTR __pyx_MemviewEnum_type
	xor	r8d, r8d
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN58@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 290		; 00000122H
	mov	DWORD PTR __pyx_clineno, 22384		; 00005770H
	jmp	$LN219@initrsrpsi
$LN58@initrsrpsi:

; 22385:   __Pyx_GOTREF(__pyx_t_2);
; 22386:   __Pyx_XGOTREF(indirect_contiguous);
; 22387:   __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);

	mov	rcx, QWORD PTR indirect_contiguous
	mov	QWORD PTR indirect_contiguous, rax
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN54@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN54@initrsrpsi:

; 22388:   __Pyx_GIVEREF(__pyx_t_2);
; 22389:   __pyx_t_2 = 0;
; 22390: 
; 22391:   /* "View.MemoryView":314
; 22392:  * 
; 22393:  * DEF THREAD_LOCKS_PREALLOCATED = 8
; 22394:  * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
; 22395:  * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
; 22396:  *     PyThread_allocate_lock(),
; 22397:  */
; 22398:   __pyx_memoryview_thread_locks_used = 0;

	mov	DWORD PTR __pyx_memoryview_thread_locks_used, esi

; 22399: 
; 22400:   /* "View.MemoryView":315
; 22401:  * DEF THREAD_LOCKS_PREALLOCATED = 8
; 22402:  * cdef int __pyx_memoryview_thread_locks_used = 0
; 22403:  * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
; 22404:  *     PyThread_allocate_lock(),
; 22405:  *     PyThread_allocate_lock(),
; 22406:  */
; 22407:   __pyx_t_3[0] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9, rax

; 22408:   __pyx_t_3[1] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+8, rax

; 22409:   __pyx_t_3[2] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+16, rax

; 22410:   __pyx_t_3[3] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+24, rax

; 22411:   __pyx_t_3[4] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+32, rax

; 22412:   __pyx_t_3[5] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+40, rax

; 22413:   __pyx_t_3[6] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+48, rax

; 22414:   __pyx_t_3[7] = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock

; 22415:   memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

	lea	rcx, OFFSET FLAT:__ImageBase
	mov	QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9+56, rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx]

; 22416: 
; 22417:   /* "View.MemoryView":537
; 22418:  *         info.obj = self
; 22419:  * 
; 22420:  *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
; 22421:  * 
; 22422:  * 
; 22423:  */
; 22424:   __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 537, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+8]
	xor	r8d, r8d
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+8], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+16]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+16], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+24]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+24], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+32]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+32], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+40]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+40], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+48]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+48], rax
	mov	rax, QWORD PTR ?__pyx_t_3@?1??initrsrpsinr@@9@9[rcx+56]
	mov	QWORD PTR __pyx_memoryview_thread_locks[rcx+56], rax
	lea	rcx, OFFSET FLAT:__pyx_memoryview_getbuffer
	call	QWORD PTR __imp_PyCapsule_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN50@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 537		; 00000219H
	mov	DWORD PTR __pyx_clineno, 22424		; 00005798H
	jmp	$LN219@initrsrpsi
$LN50@initrsrpsi:

; 22425:   __Pyx_GOTREF(__pyx_t_2);
; 22426:   if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 537, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_memoryview_type
	mov	rdx, QWORD PTR __pyx_n_s_pyx_getbuffer
	mov	r8, rax
	mov	rcx, QWORD PTR [rcx+264]
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN48@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 537		; 00000219H
	mov	DWORD PTR __pyx_clineno, 22426		; 0000579aH
	jmp	$LN219@initrsrpsi
$LN48@initrsrpsi:

; 22427:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN47@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN47@initrsrpsi:

; 22428:   PyType_Modified(__pyx_memoryview_type);

	mov	rcx, QWORD PTR __pyx_memoryview_type
	call	QWORD PTR __imp_PyType_Modified

; 22429: 
; 22430:   /* "View.MemoryView":983
; 22431:  *         return self.from_object
; 22432:  * 
; 22433:  *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
; 22434:  * 
; 22435:  * 
; 22436:  */
; 22437:   __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 983, __pyx_L1_error)

	lea	rdx, OFFSET FLAT:??_C@_0BM@MLEPABLO@getbuffer?$CIobj?0?5view?0?5flags?$CJ?$AA@
	lea	rcx, OFFSET FLAT:__pyx_memoryview_getbuffer
	xor	r8d, r8d
	call	QWORD PTR __imp_PyCapsule_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN43@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 983		; 000003d7H
	mov	DWORD PTR __pyx_clineno, 22437		; 000057a5H
	jmp	$LN219@initrsrpsi
$LN43@initrsrpsi:

; 22438:   __Pyx_GOTREF(__pyx_t_2);
; 22439:   if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 983, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_memoryviewslice_type
	mov	rdx, QWORD PTR __pyx_n_s_pyx_getbuffer
	mov	r8, rax
	mov	rcx, QWORD PTR [rcx+264]
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN41@initrsrpsi
	mov	rax, QWORD PTR __pyx_f+16
	mov	DWORD PTR __pyx_lineno, 983		; 000003d7H
	mov	DWORD PTR __pyx_clineno, 22439		; 000057a7H
	jmp	$LN219@initrsrpsi
$LN41@initrsrpsi:

; 22440:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN40@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN40@initrsrpsi:

; 22441:   PyType_Modified(__pyx_memoryviewslice_type);

	mov	rcx, QWORD PTR __pyx_memoryviewslice_type
	call	QWORD PTR __imp_PyType_Modified

; 22442: 
; 22443:   /* "(tree fragment)":1
; 22444:  * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
; 22445:  *     if __pyx_checksum != 0xb068931:
; 22446:  *         from pickle import PickleError as __pyx_PickleError
; 22447:  */
; 22448:   __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_View_MemoryView
	lea	rcx, OFFSET FLAT:__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum
	xor	edx, edx
	call	QWORD PTR __imp_PyCFunction_NewEx
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN36@initrsrpsi
	mov	DWORD PTR __pyx_clineno, 22448		; 000057b0H
	jmp	SHORT $LN221@initrsrpsi
$LN36@initrsrpsi:

; 22449:   __Pyx_GOTREF(__pyx_t_2);
; 22450:   if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_pyx_unpickle_Enum
	mov	rcx, QWORD PTR __pyx_d
	mov	r8, rax
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	$LN34@initrsrpsi
	mov	DWORD PTR __pyx_clineno, 22450		; 000057b2H
$LN221@initrsrpsi:
	mov	rax, QWORD PTR __pyx_f+16
$LN220@initrsrpsi:
	mov	DWORD PTR __pyx_lineno, 1
$LN219@initrsrpsi:
	mov	QWORD PTR __pyx_filename, rax

; 22466:   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN12@initrsrpsi
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN12@initrsrpsi
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
$LN218@initrsrpsi:
	call	QWORD PTR [rax+48]
$LN12@initrsrpsi:

; 22467:   if (__pyx_m) {

	mov	rcx, QWORD PTR __pyx_m
	test	rcx, rcx
	je	$LN9@initrsrpsi

; 22468:     if (__pyx_d) {

	cmp	QWORD PTR __pyx_d, rsi
	je	SHORT $LN7@initrsrpsi

; 22469:       __Pyx_AddTraceback("init rsrpsinr", 0, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	lea	rcx, OFFSET FLAT:??_C@_0O@GHMEDKKM@init?5rsrpsinr?$AA@
	xor	edx, edx
	call	__Pyx_AddTraceback
	mov	rcx, QWORD PTR __pyx_m
$LN7@initrsrpsi:

; 22470:     }
; 22471:     Py_DECREF(__pyx_m); __pyx_m = 0;

	add	QWORD PTR [rcx], -1
	jne	SHORT $LN6@initrsrpsi
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN6@initrsrpsi:
	mov	QWORD PTR __pyx_m, rsi

; 22474:   }
; 22475:   __pyx_L0:;
; 22476:   __Pyx_RefNannyFinishContext();
; 22477:   #if CYTHON_PEP489_MULTI_PHASE_INIT
; 22478:   return (__pyx_m != NULL) ? 0 : -1;
; 22479:   #elif PY_MAJOR_VERSION >= 3
; 22480:   return __pyx_m;
; 22481:   #else
; 22482:   return;
; 22483:   #endif
; 22484: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN34@initrsrpsi:

; 22451:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $__pyx_L0$29103
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx

; 22474:   }
; 22475:   __pyx_L0:;
; 22476:   __Pyx_RefNannyFinishContext();
; 22477:   #if CYTHON_PEP489_MULTI_PHASE_INIT
; 22478:   return (__pyx_m != NULL) ? 0 : -1;
; 22479:   #elif PY_MAJOR_VERSION >= 3
; 22480:   return __pyx_m;
; 22481:   #else
; 22482:   return;
; 22483:   #endif
; 22484: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	rex_jmp	QWORD PTR [rax+48]
$LN213@initrsrpsi:

; 22088:   #else
; 22089:   __pyx_m = PyModule_Create(&__pyx_moduledef);
; 22090:   #endif
; 22091:   if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 1
	mov	DWORD PTR __pyx_clineno, 22091		; 0000564bH
	mov	QWORD PTR __pyx_filename, rax
$LN9@initrsrpsi:

; 22472:   } else if (!PyErr_Occurred()) {

	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	SHORT $__pyx_L0$29103

; 22473:     PyErr_SetString(PyExc_ImportError, "init rsrpsinr");

	mov	rcx, QWORD PTR __imp_PyExc_ImportError
	lea	rdx, OFFSET FLAT:??_C@_0O@GHMEDKKM@init?5rsrpsinr?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
$__pyx_L0$29103:

; 22474:   }
; 22475:   __pyx_L0:;
; 22476:   __Pyx_RefNannyFinishContext();
; 22477:   #if CYTHON_PEP489_MULTI_PHASE_INIT
; 22478:   return (__pyx_m != NULL) ? 0 : -1;
; 22479:   #elif PY_MAJOR_VERSION >= 3
; 22480:   return __pyx_m;
; 22481:   #else
; 22482:   return;
; 22483:   #endif
; 22484: }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
initrsrpsinr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@MKANOHJP@?8?$CF?4200s?8?5does?5not?5have?5the?5buffe@ ; `string'
EXTRN	__imp_PyObject_GetBuffer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx_GetBuffer DD imagerel __Pyx_GetBuffer
	DD	imagerel __Pyx_GetBuffer+451
	DD	imagerel $unwind$__Pyx_GetBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx_GetBuffer DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT ??_C@_0CM@MKANOHJP@?8?$CF?4200s?8?5does?5not?5have?5the?5buffe@
CONST	SEGMENT
??_C@_0CM@MKANOHJP@?8?$CF?4200s?8?5does?5not?5have?5the?5buffe@ DB '''%.2'
	DB	'00s'' does not have the buffer interface', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx_GetBuffer
_TEXT	SEGMENT
obj$ = 48
view$ = 56
flags$ = 64
__Pyx_GetBuffer PROC					; COMDAT

; 24851: static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 24852:     if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);

	mov	r10, QWORD PTR [rcx+8]
	mov	edi, r8d
	mov	rsi, rdx
	mov	rax, QWORD PTR [r10+160]
	mov	rbx, rcx
	test	rax, rax
	je	SHORT $LN4@Pyx_GetBuf
	bt	DWORD PTR [r10+168], 21
	jae	SHORT $LN4@Pyx_GetBuf
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN4@Pyx_GetBuf

; 24858: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_PyObject_GetBuffer
$LN4@Pyx_GetBuf:

; 24853:         if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);

	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	cmp	r10, rdx
	je	$LN49@Pyx_GetBuf
	mov	rax, QWORD PTR [r10+344]
	mov	r11, QWORD PTR __imp_PyBaseObject_Type
	test	rax, rax
	je	SHORT $LN11@Pyx_GetBuf
	mov	r9, QWORD PTR [rax+16]
	xor	ecx, ecx
	mov	r8, rcx
	test	r9, r9
	jle	SHORT $LN3@Pyx_GetBuf
	add	rax, 24
$LL10@Pyx_GetBuf:
	cmp	QWORD PTR [rax], rdx
	je	$LN49@Pyx_GetBuf
	inc	r8
	add	rax, 8
	cmp	r8, r9
	jl	SHORT $LL10@Pyx_GetBuf

; 24854:         if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);

	jmp	SHORT $LN3@Pyx_GetBuf

; 24853:         if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);

$LN11@Pyx_GetBuf:
	mov	rax, r10
	npad	1
$LL17@Pyx_GetBuf:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rdx
	je	$LN49@Pyx_GetBuf
	test	rax, rax
	jne	SHORT $LL17@Pyx_GetBuf
	xor	ecx, ecx
	cmp	rdx, r11
	mov	eax, ecx
	sete	al
	test	eax, eax
	jne	$LN49@Pyx_GetBuf
$LN3@Pyx_GetBuf:

; 24854:         if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);

	mov	rdx, QWORD PTR __pyx_array_type
	cmp	r10, rdx
	je	$LN50@Pyx_GetBuf
	mov	rax, QWORD PTR [r10+344]
	test	rax, rax
	je	SHORT $LN26@Pyx_GetBuf
	mov	r8, QWORD PTR [rax+16]
	test	r8, r8
	jle	SHORT $LN2@Pyx_GetBuf
	add	rax, 24
$LL25@Pyx_GetBuf:
	cmp	QWORD PTR [rax], rdx
	je	$LN50@Pyx_GetBuf
	inc	rcx
	add	rax, 8
	cmp	rcx, r8
	jl	SHORT $LL25@Pyx_GetBuf
	jmp	SHORT $LN2@Pyx_GetBuf
$LN26@Pyx_GetBuf:
	mov	rax, r10
	npad	6
$LL32@Pyx_GetBuf:
	mov	rax, QWORD PTR [rax+256]
	cmp	rax, rdx
	je	SHORT $LN50@Pyx_GetBuf
	test	rax, rax
	jne	SHORT $LL32@Pyx_GetBuf
	cmp	rdx, r11
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN50@Pyx_GetBuf
$LN2@Pyx_GetBuf:

; 24855:         if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);

	mov	rdx, QWORD PTR __pyx_memoryview_type
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	je	SHORT $LN1@Pyx_GetBuf
	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx

; 24858: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__
$LN1@Pyx_GetBuf:

; 24856:     PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	r8, QWORD PTR [r10+24]
	lea	rdx, OFFSET FLAT:??_C@_0CM@MKANOHJP@?8?$CF?4200s?8?5does?5not?5have?5the?5buffe@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 24857:     return -1;

	or	eax, -1

; 24858: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN50@Pyx_GetBuf:

; 24854:         if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);

	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx

; 24858: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__
$LN49@Pyx_GetBuf:

; 24853:         if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);

	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx

; 24858: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	__pyx_pf_5numpy_7ndarray___getbuffer__
__Pyx_GetBuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@KAMCKACK@View?4MemoryView?4memoryview?4__cin@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__ DD imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__
	DD	imagerel __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__+398
	DD	imagerel $unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__ DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT ??_C@_0CF@KAMCKACK@View?4MemoryView?4memoryview?4__cin@
CONST	SEGMENT
??_C@_0CF@KAMCKACK@View?4MemoryView?4memoryview?4__cin@ DB 'View.MemoryVi'
	DB	'ew.memoryview.__cinit__', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__
_TEXT	SEGMENT
__pyx_v_self$ = 48
__pyx_v_obj$ = 56
__pyx_v_flags$ = 64
__pyx_v_dtype_is_object$ = 72
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__ PROC ; COMDAT

; 10287: static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 10288:   int __pyx_r;
; 10289:   __Pyx_RefNannyDeclarations
; 10290:   int __pyx_t_1;
; 10291:   int __pyx_t_2;
; 10292:   int __pyx_t_3;
; 10293:   int __pyx_t_4;
; 10294:   __Pyx_RefNannySetupContext("__cinit__", 0);
; 10295: 
; 10296:   /* "View.MemoryView":344
; 10297:  * 
; 10298:  *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
; 10299:  *         self.obj = obj             # <<<<<<<<<<<<<<
; 10300:  *         self.flags = flags
; 10301:  *         if type(self) is memoryview or obj is not None:
; 10302:  */
; 10303:   __Pyx_INCREF(__pyx_v_obj);

	inc	QWORD PTR [rdx]

; 10304:   __Pyx_GIVEREF(__pyx_v_obj);
; 10305:   __Pyx_GOTREF(__pyx_v_self->obj);
; 10306:   __Pyx_DECREF(__pyx_v_self->obj);

	mov	rax, QWORD PTR [rcx+24]
	mov	rbx, rcx
	dec	QWORD PTR [rax]
	mov	rcx, QWORD PTR [rcx+24]
	mov	ebp, r9d
	cmp	QWORD PTR [rcx], 0
	mov	esi, r8d
	mov	rdi, rdx
	jne	SHORT $LN15@pyx_memory@42
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN15@pyx_memory@42:

; 10307:   __pyx_v_self->obj = __pyx_v_obj;
; 10308: 
; 10309:   /* "View.MemoryView":345
; 10310:  *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
; 10311:  *         self.obj = obj
; 10312:  *         self.flags = flags             # <<<<<<<<<<<<<<
; 10313:  *         if type(self) is memoryview or obj is not None:
; 10314:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10315:  */
; 10316:   __pyx_v_self->flags = __pyx_v_flags;
; 10317: 
; 10318:   /* "View.MemoryView":346
; 10319:  *         self.obj = obj
; 10320:  *         self.flags = flags
; 10321:  *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
; 10322:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10323:  *             if <PyObject *> self.view.obj == NULL:
; 10324:  */
; 10325:   __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));

	mov	rax, QWORD PTR __pyx_memoryview_type

; 10326:   __pyx_t_3 = (__pyx_t_2 != 0);

	xor	ecx, ecx
	mov	QWORD PTR [rbx+24], rdi
	cmp	QWORD PTR [rbx+8], rax
	mov	DWORD PTR [rbx+168], esi
	sete	cl

; 10327:   if (!__pyx_t_3) {

	test	ecx, ecx
	jne	SHORT $LN23@pyx_memory@42

; 10328:   } else {
; 10329:     __pyx_t_1 = __pyx_t_3;
; 10330:     goto __pyx_L4_bool_binop_done;
; 10331:   }
; 10332:   __pyx_t_3 = (__pyx_v_obj != Py_None);

	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
$__pyx_L4_bool_binop_done$20911:

; 10333:   __pyx_t_2 = (__pyx_t_3 != 0);

	setne	cl

; 10334:   __pyx_t_1 = __pyx_t_2;
; 10335:   __pyx_L4_bool_binop_done:;
; 10336:   if (__pyx_t_1) {

	test	ecx, ecx
	je	SHORT $LN7@pyx_memory@42
$LN23@pyx_memory@42:

; 10337: 
; 10338:     /* "View.MemoryView":347
; 10339:  *         self.flags = flags
; 10340:  *         if type(self) is memoryview or obj is not None:
; 10341:  *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
; 10342:  *             if <PyObject *> self.view.obj == NULL:
; 10343:  *                 (<__pyx_buffer *> &self.view).obj = Py_None
; 10344:  */
; 10345:     __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 347, __pyx_L1_error)

	lea	rdx, QWORD PTR [rbx+72]
	mov	r8d, esi
	mov	rcx, rdi
	call	__Pyx_GetBuffer
	cmp	eax, -1
	jne	SHORT $LN8@pyx_memory@42
	mov	r8d, 347				; 0000015bH
	mov	edx, 10345				; 00002869H
	jmp	SHORT $LN24@pyx_memory@42
$LN8@pyx_memory@42:

; 10346: 
; 10347:     /* "View.MemoryView":348
; 10348:  *         if type(self) is memoryview or obj is not None:
; 10349:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10350:  *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
; 10351:  *                 (<__pyx_buffer *> &self.view).obj = Py_None
; 10352:  *                 Py_INCREF(Py_None)
; 10353:  */
; 10354:     __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);

	cmp	QWORD PTR [rbx+80], 0

; 10355:     if (__pyx_t_1) {

	jne	SHORT $LN7@pyx_memory@42

; 10356: 
; 10357:       /* "View.MemoryView":349
; 10358:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10359:  *             if <PyObject *> self.view.obj == NULL:
; 10360:  *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
; 10361:  *                 Py_INCREF(Py_None)
; 10362:  * 
; 10363:  */
; 10364:       ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbx+80], rax

; 10365: 
; 10366:       /* "View.MemoryView":350
; 10367:  *             if <PyObject *> self.view.obj == NULL:
; 10368:  *                 (<__pyx_buffer *> &self.view).obj = Py_None
; 10369:  *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
; 10370:  * 
; 10371:  *         global __pyx_memoryview_thread_locks_used
; 10372:  */
; 10373:       Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
$LN7@pyx_memory@42:

; 10374: 
; 10375:       /* "View.MemoryView":348
; 10376:  *         if type(self) is memoryview or obj is not None:
; 10377:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10378:  *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
; 10379:  *                 (<__pyx_buffer *> &self.view).obj = Py_None
; 10380:  *                 Py_INCREF(Py_None)
; 10381:  */
; 10382:     }
; 10383: 
; 10384:     /* "View.MemoryView":346
; 10385:  *         self.obj = obj
; 10386:  *         self.flags = flags
; 10387:  *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
; 10388:  *             __Pyx_GetBuffer(obj, &self.view, flags)
; 10389:  *             if <PyObject *> self.view.obj == NULL:
; 10390:  */
; 10391:   }
; 10392: 
; 10393:   /* "View.MemoryView":353
; 10394:  * 
; 10395:  *         global __pyx_memoryview_thread_locks_used
; 10396:  *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
; 10397:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
; 10398:  *             __pyx_memoryview_thread_locks_used += 1
; 10399:  */
; 10400:   __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);

	movsxd	rcx, DWORD PTR __pyx_memoryview_thread_locks_used
	cmp	ecx, 8

; 10401:   if (__pyx_t_1) {

	jge	SHORT $LN6@pyx_memory@42

; 10402: 
; 10403:     /* "View.MemoryView":354
; 10404:  *         global __pyx_memoryview_thread_locks_used
; 10405:  *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
; 10406:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
; 10407:  *             __pyx_memoryview_thread_locks_used += 1
; 10408:  *         if self.lock is NULL:
; 10409:  */
; 10410:     __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

	lea	rdx, OFFSET FLAT:__pyx_memoryview_thread_locks
	mov	rax, QWORD PTR [rdx+rcx*8]

; 10411: 
; 10412:     /* "View.MemoryView":355
; 10413:  *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
; 10414:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
; 10415:  *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
; 10416:  *         if self.lock is NULL:
; 10417:  *             self.lock = PyThread_allocate_lock()
; 10418:  */
; 10419:     __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

	inc	ecx
	mov	QWORD PTR [rbx+48], rax
	mov	DWORD PTR __pyx_memoryview_thread_locks_used, ecx
$LN6@pyx_memory@42:

; 10420: 
; 10421:     /* "View.MemoryView":353
; 10422:  * 
; 10423:  *         global __pyx_memoryview_thread_locks_used
; 10424:  *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
; 10425:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
; 10426:  *             __pyx_memoryview_thread_locks_used += 1
; 10427:  */
; 10428:   }
; 10429: 
; 10430:   /* "View.MemoryView":356
; 10431:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
; 10432:  *             __pyx_memoryview_thread_locks_used += 1
; 10433:  *         if self.lock is NULL:             # <<<<<<<<<<<<<<
; 10434:  *             self.lock = PyThread_allocate_lock()
; 10435:  *             if self.lock is NULL:
; 10436:  */
; 10437:   __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);

	cmp	QWORD PTR [rbx+48], 0

; 10438:   if (__pyx_t_1) {

	jne	SHORT $LN4@pyx_memory@42

; 10439: 
; 10440:     /* "View.MemoryView":357
; 10441:  *             __pyx_memoryview_thread_locks_used += 1
; 10442:  *         if self.lock is NULL:
; 10443:  *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
; 10444:  *             if self.lock is NULL:
; 10445:  *                 raise MemoryError
; 10446:  */
; 10447:     __pyx_v_self->lock = PyThread_allocate_lock();

	call	QWORD PTR __imp_PyThread_allocate_lock
	mov	QWORD PTR [rbx+48], rax

; 10448: 
; 10449:     /* "View.MemoryView":358
; 10450:  *         if self.lock is NULL:
; 10451:  *             self.lock = PyThread_allocate_lock()
; 10452:  *             if self.lock is NULL:             # <<<<<<<<<<<<<<
; 10453:  *                 raise MemoryError
; 10454:  * 
; 10455:  */
; 10456:     __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);

	test	rax, rax

; 10457:     if (__pyx_t_1) {

	jne	SHORT $LN4@pyx_memory@42

; 10458: 
; 10459:       /* "View.MemoryView":359
; 10460:  *             self.lock = PyThread_allocate_lock()
; 10461:  *             if self.lock is NULL:
; 10462:  *                 raise MemoryError             # <<<<<<<<<<<<<<
; 10463:  * 
; 10464:  *         if flags & PyBUF_FORMAT:
; 10465:  */
; 10466:       PyErr_NoMemory(); __PYX_ERR(2, 359, __pyx_L1_error)

	call	QWORD PTR __imp_PyErr_NoMemory
	mov	r8d, 359				; 00000167H
	mov	edx, 10466				; 000028e2H
$LN24@pyx_memory@42:
	mov	r9, QWORD PTR __pyx_f+16

; 10553: 
; 10554:   /* "View.MemoryView":343
; 10555:  *     cdef __Pyx_TypeInfo *typeinfo
; 10556:  * 
; 10557:  *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
; 10558:  *         self.obj = obj
; 10559:  *         self.flags = flags
; 10560:  */
; 10561: 
; 10562:   /* function exit code */
; 10563:   __pyx_r = 0;
; 10564:   goto __pyx_L0;
; 10565:   __pyx_L1_error:;
; 10566:   __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CF@KAMCKACK@View?4MemoryView?4memoryview?4__cin@
	mov	DWORD PTR __pyx_clineno, edx
	mov	DWORD PTR __pyx_lineno, r8d
$__pyx_L1_error$20915:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 10567:   __pyx_r = -1;
; 10568:   __pyx_L0:;
; 10569:   __Pyx_RefNannyFinishContext();
; 10570:   return __pyx_r;

	or	eax, -1
	jmp	SHORT $__pyx_L0$20935
$LN4@pyx_memory@42:

; 10467: 
; 10468:       /* "View.MemoryView":358
; 10469:  *         if self.lock is NULL:
; 10470:  *             self.lock = PyThread_allocate_lock()
; 10471:  *             if self.lock is NULL:             # <<<<<<<<<<<<<<
; 10472:  *                 raise MemoryError
; 10473:  * 
; 10474:  */
; 10475:     }
; 10476: 
; 10477:     /* "View.MemoryView":356
; 10478:  *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
; 10479:  *             __pyx_memoryview_thread_locks_used += 1
; 10480:  *         if self.lock is NULL:             # <<<<<<<<<<<<<<
; 10481:  *             self.lock = PyThread_allocate_lock()
; 10482:  *             if self.lock is NULL:
; 10483:  */
; 10484:   }
; 10485: 
; 10486:   /* "View.MemoryView":361
; 10487:  *                 raise MemoryError
; 10488:  * 
; 10489:  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 10490:  *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
; 10491:  *         else:
; 10492:  */
; 10493:   __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
; 10494:   if (__pyx_t_1) {

	test	sil, 4
	je	SHORT $LN3@pyx_memory@42

; 10495: 
; 10496:     /* "View.MemoryView":362
; 10497:  * 
; 10498:  *         if flags & PyBUF_FORMAT:
; 10499:  *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
; 10500:  *         else:
; 10501:  *             self.dtype_is_object = dtype_is_object
; 10502:  */
; 10503:     __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);

	mov	rcx, QWORD PTR [rbx+112]
	xor	eax, eax
	cmp	BYTE PTR [rcx], 79			; 0000004fH
	sete	al

; 10504:     if (__pyx_t_2) {

	test	eax, eax
	je	SHORT $LN2@pyx_memory@42

; 10507:       goto __pyx_L11_bool_binop_done;
; 10508:     }
; 10509:     __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);

	xor	eax, eax
	cmp	BYTE PTR [rcx+1], al
	sete	al

; 10510:     __pyx_t_1 = __pyx_t_2;
; 10511:     __pyx_L11_bool_binop_done:;
; 10512:     __pyx_v_self->dtype_is_object = __pyx_t_1;

	mov	DWORD PTR [rbx+172], eax

; 10513: 
; 10514:     /* "View.MemoryView":361
; 10515:  *                 raise MemoryError
; 10516:  * 
; 10517:  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 10518:  *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
; 10519:  *         else:
; 10520:  */
; 10521:     goto __pyx_L10;

	jmp	SHORT $__pyx_L10$20930
$LN2@pyx_memory@42:

; 10505:     } else {
; 10506:       __pyx_t_1 = __pyx_t_2;

	xor	eax, eax
$__pyx_L11_bool_binop_done$20929:

; 10510:     __pyx_t_1 = __pyx_t_2;
; 10511:     __pyx_L11_bool_binop_done:;
; 10512:     __pyx_v_self->dtype_is_object = __pyx_t_1;

	mov	DWORD PTR [rbx+172], eax

; 10513: 
; 10514:     /* "View.MemoryView":361
; 10515:  *                 raise MemoryError
; 10516:  * 
; 10517:  *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
; 10518:  *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
; 10519:  *         else:
; 10520:  */
; 10521:     goto __pyx_L10;

	jmp	SHORT $__pyx_L10$20930
$LN3@pyx_memory@42:

; 10522:   }
; 10523: 
; 10524:   /* "View.MemoryView":364
; 10525:  *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
; 10526:  *         else:
; 10527:  *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
; 10528:  * 
; 10529:  *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
; 10530:  */
; 10531:   /*else*/ {
; 10532:     __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;

	mov	DWORD PTR [rbx+172], ebp
$__pyx_L10$20930:

; 10533:   }
; 10534:   __pyx_L10:;
; 10535: 
; 10536:   /* "View.MemoryView":366
; 10537:  *             self.dtype_is_object = dtype_is_object
; 10538:  * 
; 10539:  *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
; 10540:  *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
; 10541:  *         self.typeinfo = NULL
; 10542:  */
; 10543:   __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

	lea	rdx, QWORD PTR [rbx+56]
	mov	r8, rdx
	and	r8d, 3
	jbe	SHORT $LN19@pyx_memory@42
	mov	ecx, 4
	sub	rcx, r8
	add	rdx, rcx
$LN19@pyx_memory@42:
	mov	QWORD PTR [rbx+64], rdx

; 10544: 
; 10545:   /* "View.MemoryView":368
; 10546:  *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
; 10547:  *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
; 10548:  *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
; 10549:  * 
; 10550:  *     def __dealloc__(memoryview self):
; 10551:  */
; 10552:   __pyx_v_self->typeinfo = NULL;

	mov	QWORD PTR [rbx+176], 0

; 10567:   __pyx_r = -1;
; 10568:   __pyx_L0:;
; 10569:   __Pyx_RefNannyFinishContext();
; 10570:   return __pyx_r;

	xor	eax, eax
$__pyx_L0$45433:
$__pyx_L0$20935:

; 10571: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview___getitem__
_TEXT	SEGMENT
__pyx_v_self$ = 8
__pyx_v_index$ = 16
__pyx_memoryview___getitem__ PROC			; COMDAT

; 10909:   PyObject *__pyx_r = 0;
; 10910:   __Pyx_RefNannyDeclarations
; 10911:   __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
; 10912:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));
; 10913: 
; 10914:   /* function exit code */
; 10915:   __Pyx_RefNannyFinishContext();
; 10916:   return __pyx_r;
; 10917: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__
__pyx_memoryview___getitem__ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_copy
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_memoryview_copy PROC				; COMDAT

; 13892:   PyObject *__pyx_r = 0;
; 13893:   __Pyx_RefNannyDeclarations
; 13894:   __Pyx_RefNannySetupContext("copy (wrapper)", 0);
; 13895:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13896: 
; 13897:   /* function exit code */
; 13898:   __Pyx_RefNannyFinishContext();
; 13899:   return __pyx_r;
; 13900: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy
__pyx_memoryview_copy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __pyx_memoryview_copy_fortran
_TEXT	SEGMENT
__pyx_v_self$ = 8
unused$ = 16
__pyx_memoryview_copy_fortran PROC			; COMDAT

; 13983:   PyObject *__pyx_r = 0;
; 13984:   __Pyx_RefNannyDeclarations
; 13985:   __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
; 13986:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));
; 13987: 
; 13988:   /* function exit code */
; 13989:   __Pyx_RefNannyFinishContext();
; 13990:   return __pyx_r;
; 13991: }

	jmp	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran
__pyx_memoryview_copy_fortran ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@BPKKNION@Item?5size?5of?5buffer?5?$CI?$CFzd?5byte?$CFs?$CJ@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__Pyx__GetBufferAndValidate DD imagerel __Pyx__GetBufferAndValidate
	DD	imagerel __Pyx__GetBufferAndValidate+351
	DD	imagerel $unwind$__Pyx__GetBufferAndValidate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__Pyx__GetBufferAndValidate DD 071201H
	DD	0156412H
	DD	0143412H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT ??_C@_0EK@BPKKNION@Item?5size?5of?5buffer?5?$CI?$CFzd?5byte?$CFs?$CJ@
CONST	SEGMENT
??_C@_0EK@BPKKNION@Item?5size?5of?5buffer?5?$CI?$CFzd?5byte?$CFs?$CJ@ DB 'I'
	DB	'tem size of buffer (%zd byte%s) does not match size of ''%s'''
	DB	' (%zd byte%s)', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __Pyx__GetBufferAndValidate
_TEXT	SEGMENT
ctx$29805 = 64
buf$ = 160
obj$ = 168
dtype$ = 176
flags$ = 184
nd$ = 192
cast$ = 200
stack$ = 208
__Pyx__GetBufferAndValidate PROC			; COMDAT

; 23208: {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 144				; 00000090H
	mov	rax, rdx
	mov	rdi, r8
	mov	rbx, rcx

; 23209:   buf->buf = NULL;
; 23210:   if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {

	mov	rdx, rcx
	xor	esi, esi
	mov	r8d, r9d
	mov	QWORD PTR [rcx], rsi
	mov	rcx, rax
	call	__Pyx_GetBuffer
	cmp	eax, -1
	jne	SHORT $LN6@Pyx__GetBu

; 23211:     __Pyx_ZeroBuffer(buf);

	lea	rax, OFFSET FLAT:__Pyx_zeros
	mov	QWORD PTR [rbx], rsi
	mov	QWORD PTR [rbx+8], rsi
	mov	QWORD PTR [rbx+56], rax
	mov	QWORD PTR [rbx+48], rax
	lea	rax, OFFSET FLAT:__Pyx_minusones
	mov	QWORD PTR [rbx+64], rax

; 23212:     return -1;

	or	eax, -1
	jmp	$LN7@Pyx__GetBu
$LN6@Pyx__GetBu:

; 23213:   }
; 23214:   if (unlikely(buf->ndim != nd)) {

	mov	r9d, DWORD PTR [rbx+36]
	mov	r8d, DWORD PTR nd$[rsp]
	cmp	r9d, r8d
	je	SHORT $LN5@Pyx__GetBu

; 23215:     PyErr_Format(PyExc_ValueError,
; 23216:                  "Buffer has wrong number of dimensions (expected %d, got %d)",
; 23217:                  nd, buf->ndim);

	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	lea	rdx, OFFSET FLAT:??_C@_0DM@GDDBHIIN@Buffer?5has?5wrong?5number?5of?5dimen@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_Format

; 23218:     goto fail;

	jmp	$fail$29803
$LN5@Pyx__GetBu:

; 23219:   }
; 23220:   if (!cast) {

	cmp	DWORD PTR cast$[rsp], esi
	jne	SHORT $LN3@Pyx__GetBu

; 23221:     __Pyx_BufFmt_Context ctx;
; 23222:     __Pyx_BufFmt_Init(&ctx, stack, dtype);

	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR ctx$29805[rsp]
	mov	r8, rdi
	call	__Pyx_BufFmt_Init

; 23223:     if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;

	mov	rdx, QWORD PTR [rbx+40]
	lea	rcx, QWORD PTR ctx$29805[rsp]
	call	__Pyx_BufFmt_CheckString
	test	rax, rax
	je	SHORT $fail$29803
$LN3@Pyx__GetBu:

; 23224:   }
; 23225:   if (unlikely((unsigned)buf->itemsize != dtype->size)) {

	mov	rcx, QWORD PTR [rdi+16]
	mov	eax, DWORD PTR [rbx+24]
	cmp	rax, rcx
	je	SHORT $LN2@Pyx__GetBu

; 23226:     PyErr_Format(PyExc_ValueError,
; 23227:       "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
; 23228:       buf->itemsize, (buf->itemsize > 1) ? "s" : "",
; 23229:       dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");

	mov	r8, QWORD PTR [rbx+24]
	cmp	rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	lea	r9, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	rax, r9
	cmova	rax, rdx
	cmp	r8, 1
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR __imp_PyExc_ValueError
	cmovg	r9, rdx
	lea	rdx, OFFSET FLAT:??_C@_0EK@BPKKNION@Item?5size?5of?5buffer?5?$CI?$CFzd?5byte?$CFs?$CJ@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$fail$29803:

; 23234: fail:;
; 23235:   __Pyx_SafeReleaseBuffer(buf);

	cmp	QWORD PTR [rbx], rsi
	je	SHORT $LN13@Pyx__GetBu
	lea	rax, OFFSET FLAT:__Pyx_minusones
	cmp	QWORD PTR [rbx+64], rax
	jne	SHORT $LN11@Pyx__GetBu
	mov	QWORD PTR [rbx+64], rsi
$LN11@Pyx__GetBu:
	mov	rcx, rbx
	call	__Pyx_ReleaseBuffer
$LN13@Pyx__GetBu:

; 23236:   return -1;

	or	eax, -1
	jmp	SHORT $LN7@Pyx__GetBu
$LN2@Pyx__GetBu:

; 23230:     goto fail;
; 23231:   }
; 23232:   if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;

	cmp	QWORD PTR [rbx+64], rsi
	jne	SHORT $LN1@Pyx__GetBu
	lea	rax, OFFSET FLAT:__Pyx_minusones
	mov	QWORD PTR [rbx+64], rax
$LN1@Pyx__GetBu:

; 23233:   return 0;

	xor	eax, eax
$LN7@Pyx__GetBu:

; 23237: }

	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
__Pyx__GetBufferAndValidate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@LIFBHLAJ@rsrpsinr?4set_antenna_hv_vv?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+874
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+874
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+1174
	DD	imagerel $chain$1$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+1174
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+1374
	DD	imagerel $chain$2$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD 021H
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+874
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD 041021H
	DD	07dd410H
	DD	07cc408H
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv
	DD	imagerel __pyx_pf_8rsrpsinr_4set_antenna_hv_vv+874
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_8rsrpsinr_4set_antenna_hv_vv DD 091501H
	DD	07e3415H
	DD	0760115H
	DD	0e00cf00eH
	DD	06009700aH
	DD	05008H
xdata	ENDS
;	COMDAT ??_C@_0BL@LIFBHLAJ@rsrpsinr?4set_antenna_hv_vv?$AA@
CONST	SEGMENT
??_C@_0BL@LIFBHLAJ@rsrpsinr?4set_antenna_hv_vv?$AA@ DB 'rsrpsinr.set_ante'
	DB	'nna_hv_vv', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_8rsrpsinr_4set_antenna_hv_vv
_TEXT	SEGMENT
__pyx_t_1$ = 64
__pyx_pybuffer_vv$ = 272
__pyx_pybuffer_hv$ = 384
__pyx_stack$14632 = 496
$T45495 = 528
$T45496 = 736
__pyx_self$ = 992
__pyx_v_hv$ = 1000
__pyx_v_vv$ = 1008
__pyx_pf_8rsrpsinr_4set_antenna_hv_vv PROC		; COMDAT

; 2762 : static PyObject *__pyx_pf_8rsrpsinr_4set_antenna_hv_vv(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_hv, PyArrayObject *__pyx_v_vv) {

	mov	r11, rsp
	mov	QWORD PTR [r11+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 944				; 000003b0H

; 2763 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_hv;
; 2764 :   __Pyx_Buffer __pyx_pybuffer_hv;
; 2765 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_vv;
; 2766 :   __Pyx_Buffer __pyx_pybuffer_vv;
; 2767 :   PyObject *__pyx_r = NULL;
; 2768 :   __Pyx_RefNannyDeclarations
; 2769 :   __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };

	xor	eax, eax
	xor	r14d, r14d
	mov	rbp, r8
	mov	QWORD PTR __pyx_t_1$[rsp+24], rax
	mov	QWORD PTR __pyx_t_1$[rsp+32], rax
	mov	QWORD PTR __pyx_t_1$[rsp+40], rax
	mov	QWORD PTR __pyx_t_1$[rsp+48], rax
	mov	QWORD PTR __pyx_t_1$[rsp+56], rax
	mov	QWORD PTR __pyx_t_1$[rsp], r14
	mov	QWORD PTR __pyx_t_1$[rsp+8], r14
	mov	QWORD PTR __pyx_t_1$[rsp+16], r14
	mov	QWORD PTR [r11-856], rax
	mov	QWORD PTR [r11-848], rax
	mov	QWORD PTR [r11-832], rax
	mov	QWORD PTR [r11-824], rax
	mov	QWORD PTR [r11-816], rax
	mov	QWORD PTR [r11-808], rax
	mov	QWORD PTR [r11-800], rax
	mov	QWORD PTR [r11-792], rax
	mov	QWORD PTR [r11-784], rax
	mov	QWORD PTR [r11-768], rax
	mov	QWORD PTR [r11-760], rax
	mov	QWORD PTR [r11-752], rax
	mov	QWORD PTR [r11-744], rax
	mov	QWORD PTR [r11-736], rax
	mov	QWORD PTR [r11-728], rax
	mov	QWORD PTR [r11-720], rax

; 2770 :   __Pyx_RefNannySetupContext("set_antenna_hv_vv", 0);
; 2771 :   __pyx_pybuffer_hv.pybuffer.buf = NULL;
; 2772 :   __pyx_pybuffer_hv.refcount = 0;
; 2773 :   __pyx_pybuffernd_hv.data = NULL;
; 2774 :   __pyx_pybuffernd_hv.rcbuffer = &__pyx_pybuffer_hv;
; 2775 :   __pyx_pybuffer_vv.pybuffer.buf = NULL;
; 2776 :   __pyx_pybuffer_vv.refcount = 0;
; 2777 :   __pyx_pybuffernd_vv.data = NULL;
; 2778 :   __pyx_pybuffernd_vv.rcbuffer = &__pyx_pybuffer_vv;
; 2779 :   {
; 2780 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 2781 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hv.rcbuffer->pybuffer, (PyObject*)__pyx_v_hv, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 34, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rbx, rdx
	mov	rdi, r14
	mov	QWORD PTR [r11-840], r14
	mov	QWORD PTR [r11-776], r14
	mov	QWORD PTR [r11-592], r14
	mov	QWORD PTR [r11-600], r14
	mov	QWORD PTR [r11-704], r14
	mov	QWORD PTR [r11-712], r14
	lea	r15, OFFSET FLAT:__Pyx_minusones
	lea	rsi, OFFSET FLAT:__Pyx_zeros
	cmp	rdx, rax
	je	SHORT $LN7@pyx_pf_8rs
	test	rdx, rdx
	je	SHORT $LN7@pyx_pf_8rs
	lea	rax, QWORD PTR [r11-472]
	lea	r9d, QWORD PTR [r14+60]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	mov	QWORD PTR [rsp+48], rax
	lea	rcx, QWORD PTR [r11-592]
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN117@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 2781		; 00000addH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14631
$LN117@pyx_pf_8rs:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	jmp	SHORT $LN4@pyx_pf_8rs
$LN7@pyx_pf_8rs:
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+16], r14
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+64], rsi
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+56], rsi
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+72], r15
$LN4@pyx_pf_8rs:

; 2782 :   }
; 2783 :   __pyx_pybuffernd_hv.diminfo[0].strides = __pyx_pybuffernd_hv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hv.diminfo[0].shape = __pyx_pybuffernd_hv.rcbuffer->pybuffer.shape[0];
; 2784 :   {
; 2785 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 2786 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_vv.rcbuffer->pybuffer, (PyObject*)__pyx_v_vv, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 34, __pyx_L1_error)

	cmp	rbp, rax
	je	SHORT $LN9@pyx_pf_8rs
	test	rbp, rbp
	je	SHORT $LN9@pyx_pf_8rs
	lea	rax, QWORD PTR __pyx_stack$14632[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_vv$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 60					; 0000003cH
	mov	rdx, rbp
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN3@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, 2786		; 00000ae2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14631
$LN9@pyx_pf_8rs:
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+16], r14
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+64], rsi
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+56], rsi
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+72], r15
$LN3@pyx_pf_8rs:

; 2787 :   }
; 2788 :   __pyx_pybuffernd_vv.diminfo[0].strides = __pyx_pybuffernd_vv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_vv.diminfo[0].shape = __pyx_pybuffernd_vv.rcbuffer->pybuffer.shape[0];
; 2789 : 
; 2790 :   /* "rsrpsinr.pyx":38
; 2791 :  *     np.ndarray[DTYPE_t, mode='c', ndim=1] vv):
; 2792 :  *     global ahv, avv
; 2793 :  *     ahv = hv #.copy()             # <<<<<<<<<<<<<<
; 2794 :  *     avv = vv #.copy()
; 2795 :  * 
; 2796 :  */
; 2797 :   __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t(((PyObject *)__pyx_v_hv));

	lea	rcx, QWORD PTR $T45495[rsp]
	mov	rdx, rbx
	call	__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy

; 2798 :   if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 38, __pyx_L1_error)

	mov	rdi, QWORD PTR __pyx_t_1$[rsp]
	test	rdi, rdi
	jne	SHORT $LN2@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 38		; 00000026H
	mov	DWORD PTR __pyx_clineno, 2798		; 00000aeeH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14631
$LN2@pyx_pf_8rs:

; 2799 :   __PYX_XDEC_MEMVIEW(&__pyx_v_8rsrpsinr_ahv, 1);

	mov	rbx, QWORD PTR __pyx_v_8rsrpsinr_ahv
	test	rbx, rbx
	je	SHORT $LN28@pyx_pf_8rs
	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN28@pyx_pf_8rs
	mov	rax, QWORD PTR [rbx+64]
	mov	ecx, DWORD PTR [rax]
	test	ecx, ecx
	jg	SHORT $LN37@pyx_pf_8rs
	mov	rax, QWORD PTR [rbx+64]
	lea	rcx, OFFSET FLAT:??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
	mov	r8d, 2799				; 00000aefH
	mov	edx, DWORD PTR [rax]
	call	__pyx_fatalerror
$LN37@pyx_pf_8rs:
	mov	rsi, QWORD PTR [rbx+48]
	mov	rbx, QWORD PTR [rbx+64]
	mov	edx, 1
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	edi, DWORD PTR [rbx]
	dec	DWORD PTR [rbx]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	mov	QWORD PTR __pyx_v_8rsrpsinr_ahv+8, r14
	cmp	edi, 1
	jne	SHORT $LN28@pyx_pf_8rs
	mov	rcx, QWORD PTR __pyx_v_8rsrpsinr_ahv
	test	rcx, rcx
	je	SHORT $LN28@pyx_pf_8rs
	mov	QWORD PTR __pyx_v_8rsrpsinr_ahv, r14
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN28@pyx_pf_8rs
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN28@pyx_pf_8rs:

; 2800 :   __pyx_v_8rsrpsinr_ahv = __pyx_t_1;

	lea	rcx, OFFSET FLAT:__pyx_v_8rsrpsinr_ahv
	lea	rdx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy

; 2801 :   __pyx_t_1.memview = NULL;
; 2802 :   __pyx_t_1.data = NULL;
; 2803 : 
; 2804 :   /* "rsrpsinr.pyx":39
; 2805 :  *     global ahv, avv
; 2806 :  *     ahv = hv #.copy()
; 2807 :  *     avv = vv #.copy()             # <<<<<<<<<<<<<<
; 2808 :  * 
; 2809 :  * cdef inline double antenna_h_rad(double angle):
; 2810 :  */
; 2811 :   __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t(((PyObject *)__pyx_v_vv));

	lea	rcx, QWORD PTR $T45496[rsp]
	mov	rdx, rbp
	call	__Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	mov	rdx, rax
	call	memcpy

; 2812 :   if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 39, __pyx_L1_error)

	mov	rdi, QWORD PTR __pyx_t_1$[rsp]
	test	rdi, rdi
	jne	$LN1@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 39		; 00000027H
	mov	DWORD PTR __pyx_clineno, 2812		; 00000afcH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$14631:
	mov	QWORD PTR [rsp+992], r12
	mov	QWORD PTR [rsp+1000], r13

; 2828 :   goto __pyx_L0;
; 2829 :   __pyx_L1_error:;
; 2830 :   __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);

	test	rdi, rdi
	je	SHORT $LN58@pyx_pf_8rs
	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	je	SHORT $LN58@pyx_pf_8rs
	mov	rax, QWORD PTR [rdi+64]
	mov	r8d, DWORD PTR [rax]
	test	r8d, r8d
	jg	SHORT $LN67@pyx_pf_8rs
	mov	rax, QWORD PTR [rdi+64]
	lea	rcx, OFFSET FLAT:??_C@_0CC@FHHOELBF@Acquisition?5count?5is?5?$CFd?5?$CIline?5?$CFd@
	mov	r8d, 2830				; 00000b0eH
	mov	edx, DWORD PTR [rax]
	call	__pyx_fatalerror
$LN67@pyx_pf_8rs:
	mov	rax, QWORD PTR __pyx_t_1$[rsp]
	mov	rdi, QWORD PTR [rdi+64]
	mov	edx, 1
	mov	rsi, QWORD PTR [rax+48]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_acquire_lock
	mov	ebx, DWORD PTR [rdi]
	dec	DWORD PTR [rdi]
	mov	rcx, rsi
	call	QWORD PTR __imp_PyThread_release_lock
	cmp	ebx, 1
	jne	SHORT $LN58@pyx_pf_8rs
	mov	rcx, QWORD PTR __pyx_t_1$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN58@pyx_pf_8rs
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN58@pyx_pf_8rs:

; 2831 :   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
; 2832 :     __Pyx_PyThreadState_declare
; 2833 :     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rbx, QWORD PTR [rax]

; 2834 :     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

	mov	rbp, QWORD PTR [rbx+72]
	mov	r12, QWORD PTR [rbx+80]
	mov	r13, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+72], r14
	mov	QWORD PTR [rbx+80], r14
	mov	QWORD PTR [rbx+88], r14

; 2835 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hv.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_hv$[rsp+8], r14
	je	SHORT $LN79@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_pybuffer_hv$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_hv$[rsp+8]
	cmp	rax, r15
	cmove	rax, r14
	mov	QWORD PTR __pyx_pybuffer_hv$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN79@pyx_pf_8rs:

; 2836 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vv.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_vv$[rsp+8], r14
	je	SHORT $LN83@pyx_pf_8rs
	mov	rax, QWORD PTR __pyx_pybuffer_vv$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_vv$[rsp+8]
	cmp	rax, r15
	cmove	rax, r14
	mov	QWORD PTR __pyx_pybuffer_vv$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN83@pyx_pf_8rs:

; 2837 :   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

	mov	rcx, QWORD PTR [rbx+72]
	mov	rsi, QWORD PTR [rbx+80]
	mov	rdi, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+80], r12
	mov	r12, QWORD PTR [rsp+992]
	mov	QWORD PTR [rbx+88], r13
	mov	r13, QWORD PTR [rsp+1000]
	mov	QWORD PTR [rbx+72], rbp
	test	rcx, rcx
	je	SHORT $LN107@pyx_pf_8rs
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN107@pyx_pf_8rs
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN107@pyx_pf_8rs:
	test	rsi, rsi
	je	SHORT $LN97@pyx_pf_8rs
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN97@pyx_pf_8rs
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN97@pyx_pf_8rs:
	test	rdi, rdi
	je	SHORT $LN87@pyx_pf_8rs
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN87@pyx_pf_8rs
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN87@pyx_pf_8rs:

; 2838 :   __Pyx_AddTraceback("rsrpsinr.set_antenna_hv_vv", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BL@LIFBHLAJ@rsrpsinr?4set_antenna_hv_vv?$AA@
	call	__Pyx_AddTraceback

; 2844 :   __pyx_L2:;
; 2845 :   __Pyx_XGIVEREF(__pyx_r);
; 2846 :   __Pyx_RefNannyFinishContext();
; 2847 :   return __pyx_r;

	mov	rax, r14
	jmp	SHORT $__pyx_L2$14653
$LN1@pyx_pf_8rs:

; 2813 :   __PYX_XDEC_MEMVIEW(&__pyx_v_8rsrpsinr_avv, 1);

	lea	rcx, OFFSET FLAT:__pyx_v_8rsrpsinr_avv
	mov	edx, 1
	mov	r8d, 2813				; 00000afdH
	call	__Pyx_XDEC_MEMVIEW

; 2814 :   __pyx_v_8rsrpsinr_avv = __pyx_t_1;

	lea	rcx, OFFSET FLAT:__pyx_v_8rsrpsinr_avv
	lea	rdx, QWORD PTR __pyx_t_1$[rsp]
	mov	r8d, 208				; 000000d0H
	call	memcpy

; 2815 :   __pyx_t_1.memview = NULL;
; 2816 :   __pyx_t_1.data = NULL;
; 2817 : 
; 2818 :   /* "rsrpsinr.pyx":34
; 2819 :  *     return d/pi180
; 2820 :  * 
; 2821 :  * def set_antenna_hv_vv(             # <<<<<<<<<<<<<<
; 2822 :  *     np.ndarray[DTYPE_t, mode='c', ndim=1] hv,
; 2823 :  *     np.ndarray[DTYPE_t, mode='c', ndim=1] vv):
; 2824 :  */
; 2825 : 
; 2826 :   /* function exit code */
; 2827 :   __pyx_r = Py_None; __Pyx_INCREF(Py_None);

	mov	rbx, QWORD PTR __imp__Py_NoneStruct

; 2839 :   __pyx_r = NULL;
; 2840 :   goto __pyx_L2;
; 2841 :   __pyx_L0:;
; 2842 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hv.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_hv$[rsp+8]
	inc	QWORD PTR [rbx]
$__pyx_L0$14647:
	call	__Pyx_SafeReleaseBuffer

; 2843 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_vv.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_vv$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 2844 :   __pyx_L2:;
; 2845 :   __Pyx_XGIVEREF(__pyx_r);
; 2846 :   __Pyx_RefNannyFinishContext();
; 2847 :   return __pyx_r;

	mov	rax, rbx
$__pyx_L2$14653:

; 2848 : }

	mov	rbx, QWORD PTR [rsp+1008]
	add	rsp, 944				; 000003b0H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
__pyx_pf_8rsrpsinr_4set_antenna_hv_vv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KHPHIBEA@rsrpsinr?4cget_coverage?$AA@	; `string'
PUBLIC	__real@4051800000000000
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@408f400000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@c05b800000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@408c200000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@c056000000000000
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	atan2:PROC
EXTRN	atan:PROC
EXTRN	exp:PROC
EXTRN	log:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+324
	DD	imagerel $chain$7$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$16$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+324
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17055
	DD	imagerel $chain$16$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$17$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+17055
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17086
	DD	imagerel $chain$17$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$18$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+17086
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17115
	DD	imagerel $chain$18$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$19$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+17115
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17145
	DD	imagerel $chain$19$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$20$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+17145
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17182
	DD	imagerel $chain$20$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$21$__pyx_f_8rsrpsinr_cget_coverage DD imagerel __pyx_f_8rsrpsinr_cget_coverage+17182
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+17340
	DD	imagerel $chain$21$__pyx_f_8rsrpsinr_cget_coverage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$21$__pyx_f_8rsrpsinr_cget_coverage DD 021H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$20$__pyx_f_8rsrpsinr_cget_coverage DD 021H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$19$__pyx_f_8rsrpsinr_cget_coverage DD 020021H
	DD	0124d400H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$18$__pyx_f_8rsrpsinr_cget_coverage DD 040021H
	DD	0123e400H
	DD	0124d400H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$17$__pyx_f_8rsrpsinr_cget_coverage DD 060021H
	DD	0123e400H
	DD	0124d400H
	DD	0125c400H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$16$__pyx_f_8rsrpsinr_cget_coverage DD 0129821H
	DD	087f898H
	DD	088e877H
	DD	089d86eH
	DD	08ac865H
	DD	08bb844H
	DD	08ca83bH
	DD	08d9832H
	DD	08e8811H
	DD	08f7808H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+324
	DD	imagerel $chain$7$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$__pyx_f_8rsrpsinr_cget_coverage DD 0e6621H
	DD	0906866H
	DD	0122f443H
	DD	0123e42eH
	DD	0124d42aH
	DD	0125c426H
	DD	01267408H
	DD	01276404H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+37
	DD	imagerel $chain$0$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$__pyx_f_8rsrpsinr_cget_coverage DD 020421H
	DD	012b3404H
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage
	DD	imagerel __pyx_f_8rsrpsinr_cget_coverage+33
	DD	imagerel $unwind$__pyx_f_8rsrpsinr_cget_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_f_8rsrpsinr_cget_coverage DD 030f01H
	DD	0128010fH
	DD	05008H
xdata	ENDS
;	COMDAT ??_C@_0BH@KHPHIBEA@rsrpsinr?4cget_coverage?$AA@
CONST	SEGMENT
??_C@_0BH@KHPHIBEA@rsrpsinr?4cget_coverage?$AA@ DB 'rsrpsinr.cget_coverag'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT __real@4051800000000000
CONST	SEGMENT
__real@4051800000000000 DQ 04051800000000000r	; 70
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@c05b800000000000
CONST	SEGMENT
__real@c05b800000000000 DQ 0c05b800000000000r	; -110
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@408c200000000000
CONST	SEGMENT
__real@408c200000000000 DQ 0408c200000000000r	; 900
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@c056000000000000
CONST	SEGMENT
__real@c056000000000000 DQ 0c056000000000000r	; -88
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_f_8rsrpsinr_cget_coverage
_TEXT	SEGMENT
__pyx_t_7$1$ = 64
__pyx_t_18$1$ = 72
$T45773 = 72
__pyx_v_Pathloss$1$ = 80
tv7989 = 88
$T45929 = 88
__pyx_v_dis$1$ = 96
tv7990 = 104
$T45851 = 104
__pyx_v_Alpha$1$ = 112
__pyx_v_ys$1$ = 120
$T46192 = 120
__pyx_v_Beta$1$ = 128
tv7996 = 136
__pyx_v_noise$1$ = 144
tv7991 = 152
__pyx_v_sblist$1$ = 160
tv7993 = 168
__pyx_v_rsrp$1$ = 176
__pyx_v_sinr$1$ = 184
__pyx_v_bIndex$1$ = 192
tv7992 = 200
__pyx_v_isCovered$1$ = 208
$T46161 = 216
$T46007 = 216
__pyx_v_TERM_HEIGHT$1$ = 224
__pyx_v_RSRP_TH$1$ = 232
tv7988 = 240
__pyx_v_SINR_TH$1$ = 248
tv7995 = 256
__pyx_v_FREQ$1$ = 264
tv7997 = 272
__pyx_pybuffernd_Alpha$2$ = 280
$T45956 = 288
__pyx_v_es$1$ = 296
$T45800 = 304
__pyx_pybuffernd_Beta$2$ = 312
$T46054 = 320
__pyx_pybuffernd_Pathloss$2$ = 328
$T45878 = 336
__pyx_pybuffernd_S$1$ = 344
$T45898 = 352
__pyx_pybuffernd_dis$1$ = 360
__pyx_pybuffernd_S$2$ = 368
__pyx_pybuffernd_Alpha$1$ = 376
__pyx_pybuffernd_B$2$ = 384
__pyx_pybuffernd_Beta$1$ = 392
$T46034 = 400
$T45976 = 408
__pyx_pybuffernd_Pathloss$1$ = 416
$T46223 = 424
__pyx_pybuffernd_bIndex$1$ = 432
__pyx_pybuffernd_B$1$ = 440
__pyx_pybuffernd_noise$1$ = 448
$T46123 = 456
__pyx_pybuffernd_sinr$1$ = 464
__pyx_pybuffernd_dis$2$ = 472
__pyx_pybuffernd_rsrp$1$ = 480
$T45820 = 488
__pyx_pybuffernd_isCovered$1$ = 496
__pyx_pybuffer_rsrp$ = 512
__pyx_t_51$ = 624
__pyx_pybuffer_noise$ = 640
__pyx_temp$15406 = 752
__pyx_temp$15596 = 776
__pyx_temp$15227 = 800
__pyx_temp$15048 = 824
__pyx_pybuffer_Pathloss$ = 848
__pyx_pybuffer_dis$ = 960
__pyx_pybuffer_Alpha$ = 1072
__pyx_pybuffer_isCovered$ = 1184
__pyx_pybuffer_bIndex$ = 1296
__pyx_pybuffer_sinr$ = 1408
__pyx_pybuffer_Beta$ = 1520
__pyx_pybuffer_S$ = 1632
__pyx_pybuffer_B$ = 1744
__pyx_pybuffer_B_of_S$ = 1856
__pyx_stack$15118 = 1968
__pyx_stack$16053 = 1984
__pyx_stack$14944 = 2000
__pyx_stack$15487 = 2016
__pyx_stack$15834 = 2032
__pyx_stack$15666 = 2048
__pyx_stack$15980 = 2064
__pyx_stack$14938 = 2080
__pyx_stack$15907 = 2096
__pyx_stack$15297 = 2112
__pyx_stack$15750 = 2128
__pyx_stack$14931 = 2144
__pyx_v_num_samples$1$ = 2384
$T46300 = 2384
__pyx_v_g$ = 2384
__pyx_v_S$ = 2384
__pyx_v_B$ = 2392
__pyx_v_B_of_S$ = 2400
__pyx_v_covered_s_count$1$ = 2408
__pyx_v_num_bases$1$ = 2408
$T46085 = 2408
__pyx_optional_args$ = 2408
__pyx_f_8rsrpsinr_cget_coverage PROC			; COMDAT

; 3270 : static PyObject *__pyx_f_8rsrpsinr_cget_coverage(PyArrayObject *__pyx_v_S, PyArrayObject *__pyx_v_B, PyArrayObject *__pyx_v_B_of_S, struct __pyx_opt_args_8rsrpsinr_cget_coverage *__pyx_optional_args) {

	mov	rax, rsp
	mov	QWORD PTR [rax+24], r8
	push	rbp
	sub	rsp, 2368				; 00000940H

; 3271 :   double __pyx_v_RSRP_TH = ((double)-88.0);

	movsdx	xmm0, QWORD PTR __real@c056000000000000

; 3272 :   double __pyx_v_SINR_TH = ((double)-3.0);

	movsdx	xmm1, QWORD PTR __real@c008000000000000

; 3273 :   double __pyx_v_TERM_HEIGHT = ((double)1.5);
; 3274 :   double __pyx_v_FREQ = ((double)900.0);
; 3275 :   double __pyx_v_NOISE = ((double)-110.0);
; 3276 :   unsigned int __pyx_v_num_samples;
; 3277 :   unsigned int __pyx_v_num_bases;
; 3278 :   PyArrayObject *__pyx_v_Alpha = 0;

	xor	ebp, ebp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax-16], rsi
	mov	QWORD PTR [rax-24], rdi
	movsdx	QWORD PTR __pyx_v_RSRP_TH$1$[rsp], xmm0
	movsdx	xmm0, QWORD PTR __real@408c200000000000
	movsdx	QWORD PTR __pyx_v_SINR_TH$1$[rsp], xmm1
	mov	QWORD PTR [rax-32], r12
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-48], r14
	movsdx	xmm1, QWORD PTR __real@3ff8000000000000
	movsdx	QWORD PTR __pyx_v_FREQ$1$[rsp], xmm0
	mov	QWORD PTR [rax-56], r15
	mov	r14, r8
	mov	r13, rdx
	movsdx	QWORD PTR __pyx_v_TERM_HEIGHT$1$[rsp], xmm1
	mov	rbx, rcx
	mov	QWORD PTR __pyx_v_Alpha$1$[rsp], rbp

; 3279 :   PyArrayObject *__pyx_v_Beta = 0;

	mov	QWORD PTR __pyx_v_Beta$1$[rsp], rbp
	movaps	XMMWORD PTR [rax-72], xmm6
	movsdx	xmm6, QWORD PTR __real@c05b800000000000

; 3280 :   PyArrayObject *__pyx_v_Pathloss = 0;

	mov	QWORD PTR __pyx_v_Pathloss$1$[rsp], rbp

; 3281 :   PyArrayObject *__pyx_v_dis = 0;

	mov	QWORD PTR __pyx_v_dis$1$[rsp], rbp

; 3282 :   PyArrayObject *__pyx_v_isCovered = 0;

	mov	QWORD PTR __pyx_v_isCovered$1$[rsp], rbp

; 3283 :   PyArrayObject *__pyx_v_bIndex = 0;

	mov	QWORD PTR __pyx_v_bIndex$1$[rsp], rbp

; 3284 :   PyArrayObject *__pyx_v_rsrp = 0;

	mov	QWORD PTR __pyx_v_rsrp$1$[rsp], rbp

; 3285 :   PyArrayObject *__pyx_v_sinr = 0;

	mov	QWORD PTR __pyx_v_sinr$1$[rsp], rbp

; 3286 :   PyArrayObject *__pyx_v_noise = 0;

	mov	QWORD PTR __pyx_v_noise$1$[rsp], rbp

; 3287 :   unsigned int __pyx_v_covered_s_count;
; 3288 :   unsigned int __pyx_v_si;
; 3289 :   unsigned int __pyx_v_bi;
; 3290 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_xs;
; 3291 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_ys;
; 3292 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_es;
; 3293 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_temp;
; 3294 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_xb;
; 3295 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_yb;
; 3296 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_eb;
; 3297 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_hb;
; 3298 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_hm;
; 3299 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_ab;
; 3300 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_tb;
; 3301 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_pb;
; 3302 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_d;
; 3303 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_h_diff;
; 3304 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_tilt_s;
; 3305 :   CYTHON_UNUSED __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_beta;
; 3306 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_azimuth_s;
; 3307 :   CYTHON_UNUSED __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_alpha;
; 3308 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_g;
; 3309 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_pathloss;
; 3310 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_v;
; 3311 :   __pyx_t_8rsrpsinr_DTYPE_t __pyx_v_pow_v;
; 3312 :   PyObject *__pyx_v_sblist = NULL;

	mov	QWORD PTR __pyx_v_sblist$1$[rsp], rbp

; 3313 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_Alpha;
; 3314 :   __Pyx_Buffer __pyx_pybuffer_Alpha;
; 3315 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_B;
; 3316 :   __Pyx_Buffer __pyx_pybuffer_B;
; 3317 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_B_of_S;
; 3318 :   __Pyx_Buffer __pyx_pybuffer_B_of_S;
; 3319 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_Beta;
; 3320 :   __Pyx_Buffer __pyx_pybuffer_Beta;
; 3321 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_Pathloss;
; 3322 :   __Pyx_Buffer __pyx_pybuffer_Pathloss;
; 3323 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_S;
; 3324 :   __Pyx_Buffer __pyx_pybuffer_S;
; 3325 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_bIndex;
; 3326 :   __Pyx_Buffer __pyx_pybuffer_bIndex;
; 3327 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_dis;
; 3328 :   __Pyx_Buffer __pyx_pybuffer_dis;
; 3329 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_isCovered;
; 3330 :   __Pyx_Buffer __pyx_pybuffer_isCovered;
; 3331 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_noise;
; 3332 :   __Pyx_Buffer __pyx_pybuffer_noise;
; 3333 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_rsrp;
; 3334 :   __Pyx_Buffer __pyx_pybuffer_rsrp;
; 3335 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_sinr;
; 3336 :   __Pyx_Buffer __pyx_pybuffer_sinr;
; 3337 :   PyObject *__pyx_r = NULL;
; 3338 :   __Pyx_RefNannyDeclarations
; 3339 :   PyObject *__pyx_t_1 = NULL;
; 3340 :   PyObject *__pyx_t_2 = NULL;
; 3341 :   PyObject *__pyx_t_3 = NULL;

	mov	r12, rbp

; 3342 :   PyObject *__pyx_t_4 = NULL;

	mov	rsi, rbp

; 3343 :   PyObject *__pyx_t_5 = NULL;

	mov	rdi, rbp

; 3344 :   int __pyx_t_6;
; 3345 :   PyObject *__pyx_t_7 = NULL;

	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp

; 3346 :   PyArrayObject *__pyx_t_8 = NULL;
; 3347 :   PyArrayObject *__pyx_t_9 = NULL;
; 3348 :   PyArrayObject *__pyx_t_10 = NULL;
; 3349 :   PyArrayObject *__pyx_t_11 = NULL;
; 3350 :   PyArrayObject *__pyx_t_12 = NULL;
; 3351 :   PyArrayObject *__pyx_t_13 = NULL;
; 3352 :   PyArrayObject *__pyx_t_14 = NULL;
; 3353 :   PyArrayObject *__pyx_t_15 = NULL;
; 3354 :   PyArrayObject *__pyx_t_16 = NULL;
; 3355 :   unsigned int __pyx_t_17;
; 3356 :   unsigned int __pyx_t_18;
; 3357 :   size_t __pyx_t_19;
; 3358 :   Py_ssize_t __pyx_t_20;
; 3359 :   size_t __pyx_t_21;
; 3360 :   Py_ssize_t __pyx_t_22;
; 3361 :   size_t __pyx_t_23;
; 3362 :   Py_ssize_t __pyx_t_24;
; 3363 :   Py_ssize_t __pyx_t_25;
; 3364 :   PyObject *(*__pyx_t_26)(PyObject *);
; 3365 :   unsigned int __pyx_t_27;
; 3366 :   size_t __pyx_t_28;
; 3367 :   Py_ssize_t __pyx_t_29;
; 3368 :   size_t __pyx_t_30;
; 3369 :   Py_ssize_t __pyx_t_31;
; 3370 :   size_t __pyx_t_32;
; 3371 :   Py_ssize_t __pyx_t_33;
; 3372 :   size_t __pyx_t_34;
; 3373 :   Py_ssize_t __pyx_t_35;
; 3374 :   size_t __pyx_t_36;
; 3375 :   Py_ssize_t __pyx_t_37;
; 3376 :   size_t __pyx_t_38;
; 3377 :   Py_ssize_t __pyx_t_39;
; 3378 :   size_t __pyx_t_40;
; 3379 :   Py_ssize_t __pyx_t_41;
; 3380 :   size_t __pyx_t_42;
; 3381 :   size_t __pyx_t_43;
; 3382 :   size_t __pyx_t_44;
; 3383 :   size_t __pyx_t_45;
; 3384 :   size_t __pyx_t_46;
; 3385 :   size_t __pyx_t_47;
; 3386 :   int __pyx_t_48;
; 3387 :   int __pyx_t_49;
; 3388 :   double __pyx_t_50;
; 3389 :   struct __pyx_opt_args_8rsrpsinr_loss __pyx_t_51;
; 3390 :   size_t __pyx_t_52;
; 3391 :   size_t __pyx_t_53;
; 3392 :   size_t __pyx_t_54;
; 3393 :   size_t __pyx_t_55;
; 3394 :   size_t __pyx_t_56;
; 3395 :   size_t __pyx_t_57;
; 3396 :   size_t __pyx_t_58;
; 3397 :   size_t __pyx_t_59;
; 3398 :   size_t __pyx_t_60;
; 3399 :   size_t __pyx_t_61;
; 3400 :   size_t __pyx_t_62;
; 3401 :   size_t __pyx_t_63;
; 3402 :   size_t __pyx_t_64;
; 3403 :   size_t __pyx_t_65;
; 3404 :   size_t __pyx_t_66;
; 3405 :   __pyx_t_5numpy_uint8_t __pyx_t_67;
; 3406 :   size_t __pyx_t_68;
; 3407 :   size_t __pyx_t_69;
; 3408 :   size_t __pyx_t_70;
; 3409 :   size_t __pyx_t_71;
; 3410 :   __Pyx_RefNannySetupContext("cget_coverage", 0);
; 3411 :   if (__pyx_optional_args) {

	test	r9, r9
	je	SHORT $LN808@pyx_f_8rsr@5

; 3412 :     if (__pyx_optional_args->__pyx_n > 0) {

	mov	eax, DWORD PTR [r9]
	test	eax, eax
	jle	SHORT $LN808@pyx_f_8rsr@5

; 3413 :       __pyx_v_RSRP_TH = __pyx_optional_args->RSRP_TH;
; 3414 :       if (__pyx_optional_args->__pyx_n > 1) {

	cmp	eax, 1
	movsdx	xmm0, QWORD PTR [r9+8]
	movsdx	QWORD PTR __pyx_v_RSRP_TH$1$[rsp], xmm0
	jle	SHORT $LN808@pyx_f_8rsr@5

; 3415 :         __pyx_v_SINR_TH = __pyx_optional_args->SINR_TH;
; 3416 :         if (__pyx_optional_args->__pyx_n > 2) {

	cmp	eax, 2
	movsdx	xmm1, QWORD PTR [r9+16]
	movsdx	QWORD PTR __pyx_v_SINR_TH$1$[rsp], xmm1
	jle	SHORT $LN808@pyx_f_8rsr@5

; 3417 :           __pyx_v_TERM_HEIGHT = __pyx_optional_args->TERM_HEIGHT;
; 3418 :           if (__pyx_optional_args->__pyx_n > 3) {

	cmp	eax, 3
	movsdx	xmm0, QWORD PTR [r9+24]
	movsdx	QWORD PTR __pyx_v_TERM_HEIGHT$1$[rsp], xmm0
	jle	SHORT $LN808@pyx_f_8rsr@5

; 3419 :             __pyx_v_FREQ = __pyx_optional_args->FREQ;
; 3420 :             if (__pyx_optional_args->__pyx_n > 4) {

	cmp	eax, 4
	movsdx	xmm0, QWORD PTR [r9+32]
	movsdx	QWORD PTR __pyx_v_FREQ$1$[rsp], xmm0
	jle	SHORT $LN808@pyx_f_8rsr@5

; 3421 :               __pyx_v_NOISE = __pyx_optional_args->NOISE;

	movsdx	xmm6, QWORD PTR [r9+40]
$LN808@pyx_f_8rsr@5:

; 3422 :             }
; 3423 :           }
; 3424 :         }
; 3425 :       }
; 3426 :     }
; 3427 :   }
; 3428 :   __pyx_pybuffer_Alpha.pybuffer.buf = NULL;
; 3429 :   __pyx_pybuffer_Alpha.refcount = 0;
; 3430 :   __pyx_pybuffernd_Alpha.data = NULL;
; 3431 :   __pyx_pybuffernd_Alpha.rcbuffer = &__pyx_pybuffer_Alpha;
; 3432 :   __pyx_pybuffer_Beta.pybuffer.buf = NULL;
; 3433 :   __pyx_pybuffer_Beta.refcount = 0;
; 3434 :   __pyx_pybuffernd_Beta.data = NULL;
; 3435 :   __pyx_pybuffernd_Beta.rcbuffer = &__pyx_pybuffer_Beta;
; 3436 :   __pyx_pybuffer_Pathloss.pybuffer.buf = NULL;
; 3437 :   __pyx_pybuffer_Pathloss.refcount = 0;
; 3438 :   __pyx_pybuffernd_Pathloss.data = NULL;
; 3439 :   __pyx_pybuffernd_Pathloss.rcbuffer = &__pyx_pybuffer_Pathloss;
; 3440 :   __pyx_pybuffer_dis.pybuffer.buf = NULL;
; 3441 :   __pyx_pybuffer_dis.refcount = 0;
; 3442 :   __pyx_pybuffernd_dis.data = NULL;
; 3443 :   __pyx_pybuffernd_dis.rcbuffer = &__pyx_pybuffer_dis;
; 3444 :   __pyx_pybuffer_isCovered.pybuffer.buf = NULL;
; 3445 :   __pyx_pybuffer_isCovered.refcount = 0;
; 3446 :   __pyx_pybuffernd_isCovered.data = NULL;
; 3447 :   __pyx_pybuffernd_isCovered.rcbuffer = &__pyx_pybuffer_isCovered;
; 3448 :   __pyx_pybuffer_bIndex.pybuffer.buf = NULL;
; 3449 :   __pyx_pybuffer_bIndex.refcount = 0;
; 3450 :   __pyx_pybuffernd_bIndex.data = NULL;
; 3451 :   __pyx_pybuffernd_bIndex.rcbuffer = &__pyx_pybuffer_bIndex;
; 3452 :   __pyx_pybuffer_rsrp.pybuffer.buf = NULL;
; 3453 :   __pyx_pybuffer_rsrp.refcount = 0;
; 3454 :   __pyx_pybuffernd_rsrp.data = NULL;
; 3455 :   __pyx_pybuffernd_rsrp.rcbuffer = &__pyx_pybuffer_rsrp;
; 3456 :   __pyx_pybuffer_sinr.pybuffer.buf = NULL;
; 3457 :   __pyx_pybuffer_sinr.refcount = 0;
; 3458 :   __pyx_pybuffernd_sinr.data = NULL;
; 3459 :   __pyx_pybuffernd_sinr.rcbuffer = &__pyx_pybuffer_sinr;
; 3460 :   __pyx_pybuffer_noise.pybuffer.buf = NULL;
; 3461 :   __pyx_pybuffer_noise.refcount = 0;
; 3462 :   __pyx_pybuffernd_noise.data = NULL;
; 3463 :   __pyx_pybuffernd_noise.rcbuffer = &__pyx_pybuffer_noise;
; 3464 :   __pyx_pybuffer_S.pybuffer.buf = NULL;
; 3465 :   __pyx_pybuffer_S.refcount = 0;
; 3466 :   __pyx_pybuffernd_S.data = NULL;
; 3467 :   __pyx_pybuffernd_S.rcbuffer = &__pyx_pybuffer_S;
; 3468 :   __pyx_pybuffer_B.pybuffer.buf = NULL;
; 3469 :   __pyx_pybuffer_B.refcount = 0;
; 3470 :   __pyx_pybuffernd_B.data = NULL;
; 3471 :   __pyx_pybuffernd_B.rcbuffer = &__pyx_pybuffer_B;
; 3472 :   __pyx_pybuffer_B_of_S.pybuffer.buf = NULL;
; 3473 :   __pyx_pybuffer_B_of_S.refcount = 0;
; 3474 :   __pyx_pybuffernd_B_of_S.data = NULL;
; 3475 :   __pyx_pybuffernd_B_of_S.rcbuffer = &__pyx_pybuffer_B_of_S;
; 3476 :   {
; 3477 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3478 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_S.rcbuffer->pybuffer, (PyObject*)__pyx_v_S, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 107, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	movaps	XMMWORD PTR [rsp+2288], xmm7
	movaps	XMMWORD PTR [rsp+2272], xmm8
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+8], rbp
	movaps	XMMWORD PTR [rsp+2256], xmm9
	movaps	XMMWORD PTR [rsp+2240], xmm10
	movaps	XMMWORD PTR [rsp+2224], xmm11
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp], rbp
	movaps	XMMWORD PTR [rsp+2208], xmm12
	movaps	XMMWORD PTR [rsp+2192], xmm13
	movaps	XMMWORD PTR [rsp+2176], xmm14
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+8], rbp
	movaps	XMMWORD PTR [rsp+2160], xmm15
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp], rbp
	lea	r8, OFFSET FLAT:__Pyx_minusones
	lea	r15, OFFSET FLAT:__Pyx_zeros
	cmp	rcx, rax
	je	SHORT $LN816@pyx_f_8rsr@5
	test	rcx, rcx
	je	SHORT $LN816@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$14931[rsp]
	mov	rdx, rcx
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	mov	QWORD PTR [rsp+48], rax
	lea	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+8]
	mov	r9d, 28
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1287@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 107		; 0000006bH
	mov	DWORD PTR __pyx_clineno, 3478		; 00000d96H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN103@pyx_f_8rsr@5
$LN1287@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+64]
	lea	r8, OFFSET FLAT:__Pyx_minusones
	jmp	SHORT $LN807@pyx_f_8rsr@5
$LN816@pyx_f_8rsr@5:
	mov	rcx, r15
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+72], r8
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+64], rcx
$LN807@pyx_f_8rsr@5:

; 3479 :   }
; 3480 :   __pyx_pybuffernd_S.diminfo[0].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_S.diminfo[0].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_S.diminfo[1].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_S.diminfo[1].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[1];

	mov	rdx, QWORD PTR [rcx]
	mov	QWORD PTR __pyx_pybuffernd_S$1$[rsp], rdx
	mov	rdx, QWORD PTR [rcx+8]
	mov	QWORD PTR __pyx_pybuffernd_S$2$[rsp], rdx

; 3481 :   {
; 3482 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3483 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_B.rcbuffer->pybuffer, (PyObject*)__pyx_v_B, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 107, __pyx_L1_error)

	cmp	r13, rax
	je	SHORT $LN818@pyx_f_8rsr@5
	test	r13, r13
	je	SHORT $LN818@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$14938[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 28
	mov	rdx, r13
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1288@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 107		; 0000006bH
	mov	DWORD PTR __pyx_clineno, 3483		; 00000d9bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN103@pyx_f_8rsr@5
$LN1288@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+64]
	lea	r8, OFFSET FLAT:__Pyx_minusones
	jmp	SHORT $LN806@pyx_f_8rsr@5
$LN818@pyx_f_8rsr@5:
	mov	rcx, r15
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+72], r8
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+64], rcx
$LN806@pyx_f_8rsr@5:

; 3484 :   }
; 3485 :   __pyx_pybuffernd_B.diminfo[0].strides = __pyx_pybuffernd_B.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_B.diminfo[0].shape = __pyx_pybuffernd_B.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_B.diminfo[1].strides = __pyx_pybuffernd_B.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_B.diminfo[1].shape = __pyx_pybuffernd_B.rcbuffer->pybuffer.shape[1];

	mov	rdx, QWORD PTR [rcx]
	mov	QWORD PTR __pyx_pybuffernd_B$1$[rsp], rdx
	mov	rdx, QWORD PTR [rcx+8]
	mov	QWORD PTR __pyx_pybuffernd_B$2$[rsp], rdx

; 3486 :   {
; 3487 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3488 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer, (PyObject*)__pyx_v_B_of_S, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 107, __pyx_L1_error)

	cmp	r14, rax
	je	SHORT $LN820@pyx_f_8rsr@5
	test	r14, r14
	je	SHORT $LN820@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$14944[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 28
	mov	rdx, r14
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN805@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 107		; 0000006bH
	mov	DWORD PTR __pyx_clineno, 3488		; 00000da0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN103@pyx_f_8rsr@5
$LN820@pyx_f_8rsr@5:
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+64], r15
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72], r8
$LN805@pyx_f_8rsr@5:

; 3489 :   }
; 3490 :   __pyx_pybuffernd_B_of_S.diminfo[0].strides = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_B_of_S.diminfo[0].shape = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_B_of_S.diminfo[1].strides = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_B_of_S.diminfo[1].shape = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.shape[1];
; 3491 : 
; 3492 :   /* "rsrpsinr.pyx":144
; 3493 :  *     """
; 3494 :  *     cdef:
; 3495 :  *         unsigned int num_samples = S.shape[0]             # <<<<<<<<<<<<<<
; 3496 :  *         unsigned int num_bases = B.shape[0]
; 3497 :  * 
; 3498 :  */
; 3499 :   __pyx_v_num_samples = (__pyx_v_S->dimensions[0]);

	mov	rax, QWORD PTR [rbx+32]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR __pyx_v_num_samples$1$[rsp], eax

; 3500 : 
; 3501 :   /* "rsrpsinr.pyx":145
; 3502 :  *     cdef:
; 3503 :  *         unsigned int num_samples = S.shape[0]
; 3504 :  *         unsigned int num_bases = B.shape[0]             # <<<<<<<<<<<<<<
; 3505 :  * 
; 3506 :  *     #print(S.shape)
; 3507 :  */
; 3508 :   __pyx_v_num_bases = (__pyx_v_B->dimensions[0]);

	mov	rax, QWORD PTR [r13+32]

; 3509 : 
; 3510 :   /* "rsrpsinr.pyx":152
; 3511 :  * 
; 3512 :  *     cdef:
; 3513 :  *         np.ndarray[DTYPE_t, ndim=2] Alpha = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)             # <<<<<<<<<<<<<<
; 3514 :  *         np.ndarray[DTYPE_t, ndim=2] Beta = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3515 :  *         np.ndarray[DTYPE_t, ndim=2] Pathloss = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)*1000
; 3516 :  */
; 3517 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	r13, QWORD PTR __pyx_n_s_np
	mov	ecx, DWORD PTR [rax]
	mov	rdx, r13
	mov	DWORD PTR __pyx_v_num_bases$1$[rsp], ecx
	mov	rcx, QWORD PTR __pyx_d
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN863@pyx_f_8rsr@5
	inc	QWORD PTR [rax]
	jmp	SHORT $LN862@pyx_f_8rsr@5
$LN863@pyx_f_8rsr@5:
	mov	rcx, r13
	call	__Pyx_GetBuiltinName
	mov	rbx, rax
$LN862@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN804@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3517		; 00000dbdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN804@pyx_f_8rsr@5:

; 3518 :   __Pyx_GOTREF(__pyx_t_2);
; 3519 :   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	rax, QWORD PTR [rbx+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN867@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	r8
	mov	r12, rax
	jmp	SHORT $LN868@pyx_f_8rsr@5
$LN867@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN866@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	r12, rax
	jmp	SHORT $LN868@pyx_f_8rsr@5
$LN866@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r12, rax
$LN868@pyx_f_8rsr@5:
	test	r12, r12
	jne	SHORT $LN802@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3519		; 00000dbfH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN802@pyx_f_8rsr@5:

; 3520 :   __Pyx_GOTREF(__pyx_t_3);
; 3521 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN801@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN801@pyx_f_8rsr@5:

; 3522 :   __pyx_t_2 = __Pyx_PyInt_From_unsigned_int((__pyx_v_num_samples * __pyx_v_num_bases)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	r13d, DWORD PTR __pyx_v_num_bases$1$[rsp]
	mov	r14d, r13d
	imul	r14d, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, r14d
	mov	DWORD PTR $T45773[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN797@pyx_f_8rsr@5
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3522		; 00000dc2H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN153@pyx_f_8rsr@5
$LN797@pyx_f_8rsr@5:

; 3523 :   __Pyx_GOTREF(__pyx_t_2);
; 3524 :   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN796@pyx_f_8rsr@5
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3524		; 00000dc4H
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN153@pyx_f_8rsr@5
$LN796@pyx_f_8rsr@5:

; 3525 :   __Pyx_GOTREF(__pyx_t_4);
; 3526 :   __Pyx_GIVEREF(__pyx_t_2);
; 3527 :   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

	mov	QWORD PTR [rax+24], rbx

; 3528 :   __pyx_t_2 = 0;
; 3529 :   __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN795@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3529		; 00000dc9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN795@pyx_f_8rsr@5:

; 3530 :   __Pyx_GOTREF(__pyx_t_2);
; 3531 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN794@pyx_f_8rsr@5
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3531		; 00000dcbH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN153@pyx_f_8rsr@5
$LN794@pyx_f_8rsr@5:

; 3532 :   __Pyx_GOTREF(__pyx_t_5);
; 3533 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN792@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3533		; 00000dcdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN792@pyx_f_8rsr@5:

; 3534 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN791@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN791@pyx_f_8rsr@5:

; 3535 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rbx
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN787@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3535		; 00000dcfH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN787@pyx_f_8rsr@5:

; 3536 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	r8, rbx
	mov	rdx, rsi
	mov	rcx, r12
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN785@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3536		; 00000dd0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN785@pyx_f_8rsr@5:

; 3537 :   __Pyx_GOTREF(__pyx_t_5);
; 3538 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN784@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN784@pyx_f_8rsr@5:

; 3539 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	r12, rbp
	jne	SHORT $LN779@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN779@pyx_f_8rsr@5:

; 3540 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	mov	rsi, rbp
	jne	SHORT $LN774@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN774@pyx_f_8rsr@5:

; 3541 :   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN883@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN884@pyx_f_8rsr@5
$LN883@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN882@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN884@pyx_f_8rsr@5
$LN882@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN884@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN769@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3541		; 00000dd5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN769@pyx_f_8rsr@5:

; 3542 :   __Pyx_GOTREF(__pyx_t_2);
; 3543 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN768@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN768@pyx_f_8rsr@5:

; 3544 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T45800[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN764@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3544		; 00000dd8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN764@pyx_f_8rsr@5:

; 3545 :   __Pyx_GOTREF(__pyx_t_5);
; 3546 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_bases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)

	mov	ecx, r13d
	mov	DWORD PTR $T45820[rsp], r13d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN763@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3546		; 00000ddaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN763@pyx_f_8rsr@5:

; 3547 :   __Pyx_GOTREF(__pyx_t_4);
; 3548 :   __pyx_t_3 = NULL;
; 3549 :   __pyx_t_6 = 0;
; 3550 :   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	r13d, ebp
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN761@pyx_f_8rsr@5

; 3551 :     __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

	mov	r12, QWORD PTR [rbx+24]

; 3552 :     if (likely(__pyx_t_3)) {

	test	r12, r12
	je	SHORT $LN761@pyx_f_8rsr@5

; 3553 :       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

	mov	rax, QWORD PTR [rbx+16]

; 3554 :       __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [r12]

; 3555 :       __Pyx_INCREF(function);
; 3556 :       __Pyx_DECREF_SET(__pyx_t_2, function);

	mov	rcx, rbx
	inc	QWORD PTR [rax]
	add	QWORD PTR [rcx], -1
	mov	rbx, rax
	jne	SHORT $LN756@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN756@pyx_f_8rsr@5:

; 3557 :       __pyx_t_6 = 1;

	mov	r13d, 1
$LN761@pyx_f_8rsr@5:

; 3558 :     }
; 3559 :   }
; 3560 :   #if CYTHON_FAST_PYCALL
; 3561 :   if (PyFunction_Check(__pyx_t_2)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	$LN752@pyx_f_8rsr@5

; 3562 :     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_4};
; 3563 :     __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)

	movsxd	rax, r13d
	lea	rdx, QWORD PTR __pyx_temp$15048[rsp+8]
	lea	r8d, DWORD PTR [r13+2]
	shl	rax, 3
	xor	r9d, r9d
	mov	rcx, rbx
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$15048[rsp], r12
	mov	QWORD PTR __pyx_temp$15048[rsp+8], rdi
	mov	QWORD PTR __pyx_temp$15048[rsp+16], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN750@pyx_f_8rsr@5
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3563		; 00000debH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$__pyx_L1_error$14937
$LN750@pyx_f_8rsr@5:

; 3564 :     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

	test	r12, r12
	je	SHORT $LN743@pyx_f_8rsr@5
	add	QWORD PTR [r12], -1
	jne	SHORT $LN743@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN743@pyx_f_8rsr@5:

; 3565 :     __Pyx_GOTREF(__pyx_t_1);
; 3566 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	mov	r12, rbp
	jne	SHORT $LN739@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN739@pyx_f_8rsr@5:

; 3567 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	rdi, rbp
	jne	SHORT $LN734@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN734@pyx_f_8rsr@5:
	mov	rsi, rbp

; 3568 :   } else

	jmp	$LN721@pyx_f_8rsr@5
$LN752@pyx_f_8rsr@5:

; 3569 :   #endif
; 3570 :   #if CYTHON_FAST_PYCCALL
; 3571 :   if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
; 3572 :     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_4};
; 3573 :     __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
; 3574 :     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
; 3575 :     __Pyx_GOTREF(__pyx_t_1);
; 3576 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
; 3577 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 3578 :   } else
; 3579 :   #endif
; 3580 :   {
; 3581 :     __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)

	lea	eax, DWORD PTR [r13+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN729@pyx_f_8rsr@5
	mov	rcx, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3581		; 00000dfdH
	mov	QWORD PTR __pyx_filename, rcx
	jmp	$LN153@pyx_f_8rsr@5
$LN729@pyx_f_8rsr@5:

; 3582 :     __Pyx_GOTREF(__pyx_t_7);
; 3583 :     if (__pyx_t_3) {

	test	r12, r12
	je	SHORT $LN728@pyx_f_8rsr@5

; 3584 :       __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;

	mov	QWORD PTR [rax+24], r12
	mov	r12, rbp
$LN728@pyx_f_8rsr@5:

; 3585 :     }
; 3586 :     __Pyx_GIVEREF(__pyx_t_5);
; 3587 :     PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);

	movsxd	rax, r13d

; 3588 :     __Pyx_GIVEREF(__pyx_t_4);
; 3589 :     PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
; 3590 :     __pyx_t_5 = 0;
; 3591 :     __pyx_t_4 = 0;
; 3592 :     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)

	xor	r8d, r8d
	mov	rcx, rbx
	mov	QWORD PTR [rdx+rax*8+24], rdi
	mov	QWORD PTR [rdx+rax*8+32], rsi
	mov	rdi, rbp
	mov	rsi, rbp
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN726@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3592		; 00000e08H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN726@pyx_f_8rsr@5:

; 3593 :     __Pyx_GOTREF(__pyx_t_1);
; 3594 :     __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN725@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN725@pyx_f_8rsr@5:
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
$LN721@pyx_f_8rsr@5:

; 3595 :   }
; 3596 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN720@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN720@pyx_f_8rsr@5:
	mov	rbx, rbp

; 3597 :   if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 152, __pyx_L1_error)

	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	je	$LN822@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, r13
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN716@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3597		; 00000e0dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN716@pyx_f_8rsr@5:

; 3598 :   __pyx_t_8 = ((PyArrayObject *)__pyx_t_1);
; 3599 :   {
; 3600 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3601 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Alpha.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	je	$LN822@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15118[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_Alpha$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, r13
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1289@pyx_f_8rsr@5

; 3602 :       __pyx_v_Alpha = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.buf = NULL;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 3603 :       __PYX_ERR(0, 152, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 152		; 00000098H
	mov	DWORD PTR __pyx_clineno, 3603		; 00000e13H
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_v_Alpha$1$[rsp], rax
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+8], rbp
	jmp	$__pyx_L1_error$14937
$LN1289@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_Alpha$[rsp+64]
	jmp	SHORT $LN715@pyx_f_8rsr@5
$LN822@pyx_f_8rsr@5:

; 3598 :   __pyx_t_8 = ((PyArrayObject *)__pyx_t_1);
; 3599 :   {
; 3600 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3601 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Alpha.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+64], rax
$LN715@pyx_f_8rsr@5:

; 3604 :     } else {__pyx_pybuffernd_Alpha.diminfo[0].strides = __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Alpha.diminfo[0].shape = __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_Alpha.diminfo[1].strides = __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_Alpha.diminfo[1].shape = __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.shape[1];

	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]

; 3605 :     }
; 3606 :   }
; 3607 :   __pyx_t_8 = 0;
; 3608 :   __pyx_v_Alpha = ((PyArrayObject *)__pyx_t_1);

	mov	QWORD PTR __pyx_v_Alpha$1$[rsp], r13
	mov	QWORD PTR __pyx_pybuffernd_Alpha$1$[rsp], rcx

; 3609 :   __pyx_t_1 = 0;
; 3610 : 
; 3611 :   /* "rsrpsinr.pyx":153
; 3612 :  *     cdef:
; 3613 :  *         np.ndarray[DTYPE_t, ndim=2] Alpha = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3614 :  *         np.ndarray[DTYPE_t, ndim=2] Beta = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)             # <<<<<<<<<<<<<<
; 3615 :  *         np.ndarray[DTYPE_t, ndim=2] Pathloss = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)*1000
; 3616 :  *         np.ndarray[DTYPE_t, ndim=2] dis = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3617 :  */
; 3618 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_pybuffernd_Alpha$2$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN713@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3618		; 00000e22H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN713@pyx_f_8rsr@5:

; 3619 :   __Pyx_GOTREF(__pyx_t_2);
; 3620 :   __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN913@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	r8
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	jmp	SHORT $LN914@pyx_f_8rsr@5
$LN913@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN912@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	jmp	SHORT $LN914@pyx_f_8rsr@5
$LN912@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
$LN914@pyx_f_8rsr@5:
	test	rdx, rdx
	jne	SHORT $LN711@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3620		; 00000e24H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN711@pyx_f_8rsr@5:

; 3621 :   __Pyx_GOTREF(__pyx_t_7);
; 3622 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN710@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN710@pyx_f_8rsr@5:

; 3623 :   __pyx_t_2 = __Pyx_PyInt_From_unsigned_int((__pyx_v_num_samples * __pyx_v_num_bases)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T45851[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN706@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3623		; 00000e27H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN706@pyx_f_8rsr@5:

; 3624 :   __Pyx_GOTREF(__pyx_t_2);
; 3625 :   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN705@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3625		; 00000e29H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN705@pyx_f_8rsr@5:

; 3626 :   __Pyx_GOTREF(__pyx_t_4);
; 3627 :   __Pyx_GIVEREF(__pyx_t_2);
; 3628 :   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

	mov	QWORD PTR [rax+24], rbx

; 3629 :   __pyx_t_2 = 0;
; 3630 :   __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN704@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3630		; 00000e2eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN704@pyx_f_8rsr@5:

; 3631 :   __Pyx_GOTREF(__pyx_t_2);
; 3632 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN703@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3632		; 00000e30H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN703@pyx_f_8rsr@5:

; 3633 :   __Pyx_GOTREF(__pyx_t_5);
; 3634 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN701@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3634		; 00000e32H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN701@pyx_f_8rsr@5:

; 3635 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN700@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN700@pyx_f_8rsr@5:

; 3636 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rbx
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN696@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3636		; 00000e34H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN696@pyx_f_8rsr@5:

; 3637 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	r13, QWORD PTR __pyx_t_7$1$[rsp]
	mov	r8, rbx
	mov	rdx, rsi
	mov	rcx, r13
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN694@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3637		; 00000e35H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN694@pyx_f_8rsr@5:

; 3638 :   __Pyx_GOTREF(__pyx_t_5);
; 3639 :   __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN693@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN693@pyx_f_8rsr@5:

; 3640 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
	jne	SHORT $LN688@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN688@pyx_f_8rsr@5:

; 3641 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	mov	rsi, rbp
	jne	SHORT $LN683@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN683@pyx_f_8rsr@5:

; 3642 :   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN929@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN930@pyx_f_8rsr@5
$LN929@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN928@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN930@pyx_f_8rsr@5
$LN928@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN930@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN678@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3642		; 00000e3aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN143@pyx_f_8rsr@5
$LN678@pyx_f_8rsr@5:

; 3643 :   __Pyx_GOTREF(__pyx_t_2);
; 3644 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN677@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN677@pyx_f_8rsr@5:

; 3645 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T45878[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN673@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3645		; 00000e3dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN673@pyx_f_8rsr@5:

; 3646 :   __Pyx_GOTREF(__pyx_t_5);
; 3647 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_bases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)

	mov	ecx, DWORD PTR __pyx_v_num_bases$1$[rsp]
	mov	DWORD PTR $T45898[rsp], ecx
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN672@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3647		; 00000e3fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN672@pyx_f_8rsr@5:

; 3648 :   __Pyx_GOTREF(__pyx_t_4);
; 3649 :   __pyx_t_7 = NULL;
; 3650 :   __pyx_t_6 = 0;
; 3651 :   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	rcx, rbp
	mov	r13d, ebp
	mov	QWORD PTR __pyx_t_7$1$[rsp], rcx
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN670@pyx_f_8rsr@5

; 3652 :     __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);

	mov	rcx, QWORD PTR [rbx+24]
	mov	QWORD PTR __pyx_t_7$1$[rsp], rcx

; 3653 :     if (likely(__pyx_t_7)) {

	test	rcx, rcx
	je	SHORT $LN670@pyx_f_8rsr@5

; 3654 :       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

	mov	rax, QWORD PTR [rbx+16]

; 3655 :       __Pyx_INCREF(__pyx_t_7);

	inc	QWORD PTR [rcx]

; 3656 :       __Pyx_INCREF(function);
; 3657 :       __Pyx_DECREF_SET(__pyx_t_2, function);

	mov	rcx, rbx
	inc	QWORD PTR [rax]
	add	QWORD PTR [rcx], -1
	mov	rbx, rax
	jne	SHORT $LN665@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN665@pyx_f_8rsr@5:
	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]

; 3658 :       __pyx_t_6 = 1;

	mov	r13d, 1
$LN670@pyx_f_8rsr@5:

; 3659 :     }
; 3660 :   }
; 3661 :   #if CYTHON_FAST_PYCALL
; 3662 :   if (PyFunction_Check(__pyx_t_2)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	$LN661@pyx_f_8rsr@5

; 3663 :     PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};

	mov	QWORD PTR __pyx_temp$15227[rsp], rcx

; 3664 :     __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)

	movsxd	rax, r13d
	lea	rdx, QWORD PTR __pyx_temp$15227[rsp+8]
	shl	rax, 3
	lea	r8d, DWORD PTR [r13+2]
	xor	r9d, r9d
	mov	rcx, rbx
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$15227[rsp+8], rdi
	mov	QWORD PTR __pyx_temp$15227[rsp+16], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN659@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3664		; 00000e50H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN659@pyx_f_8rsr@5:

; 3665 :     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN652@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN652@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN652@pyx_f_8rsr@5:

; 3666 :     __Pyx_GOTREF(__pyx_t_1);
; 3667 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
	jne	SHORT $LN648@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN648@pyx_f_8rsr@5:

; 3668 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	rdi, rbp
	jne	SHORT $LN643@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN643@pyx_f_8rsr@5:
	mov	rsi, rbp

; 3669 :   } else

	jmp	$LN630@pyx_f_8rsr@5
$LN661@pyx_f_8rsr@5:

; 3670 :   #endif
; 3671 :   #if CYTHON_FAST_PYCCALL
; 3672 :   if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
; 3673 :     PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};
; 3674 :     __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
; 3675 :     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
; 3676 :     __Pyx_GOTREF(__pyx_t_1);
; 3677 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
; 3678 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 3679 :   } else
; 3680 :   #endif
; 3681 :   {
; 3682 :     __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)

	lea	eax, DWORD PTR [r13+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN638@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3682		; 00000e62H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN638@pyx_f_8rsr@5:

; 3683 :     __Pyx_GOTREF(__pyx_t_3);
; 3684 :     if (__pyx_t_7) {

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN637@pyx_f_8rsr@5

; 3685 :       __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;

	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
$LN637@pyx_f_8rsr@5:

; 3686 :     }
; 3687 :     __Pyx_GIVEREF(__pyx_t_5);
; 3688 :     PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_5);

	movsxd	rax, r13d

; 3689 :     __Pyx_GIVEREF(__pyx_t_4);
; 3690 :     PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_4);
; 3691 :     __pyx_t_5 = 0;
; 3692 :     __pyx_t_4 = 0;
; 3693 :     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, r12
	mov	QWORD PTR [r12+rax*8+24], rdi
	mov	QWORD PTR [r12+rax*8+32], rsi
	mov	rcx, rbx
	mov	rdi, rbp
	mov	rsi, rbp
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN635@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3693		; 00000e6dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN635@pyx_f_8rsr@5:

; 3694 :     __Pyx_GOTREF(__pyx_t_1);
; 3695 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN634@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN634@pyx_f_8rsr@5:
	mov	r12, rbp
$LN630@pyx_f_8rsr@5:

; 3696 :   }
; 3697 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN629@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN629@pyx_f_8rsr@5:
	mov	rbx, rbp

; 3698 :   if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 153, __pyx_L1_error)

	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	je	$LN824@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, r13
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN625@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3698		; 00000e72H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN625@pyx_f_8rsr@5:

; 3699 :   __pyx_t_9 = ((PyArrayObject *)__pyx_t_1);
; 3700 :   {
; 3701 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3702 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Beta.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	cmp	r13, QWORD PTR __imp__Py_NoneStruct
	je	$LN824@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15297[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_Beta$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, r13
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1290@pyx_f_8rsr@5

; 3703 :       __pyx_v_Beta = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_Beta.rcbuffer->pybuffer.buf = NULL;

	mov	rcx, QWORD PTR __imp__Py_NoneStruct

; 3704 :       __PYX_ERR(0, 153, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 153		; 00000099H
	mov	DWORD PTR __pyx_clineno, 3704		; 00000e78H
	inc	QWORD PTR [rcx]
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_v_Beta$1$[rsp], rcx
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+8], rbp
	jmp	$__pyx_L1_error$14937
$LN1290@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_Beta$[rsp+64]
	jmp	SHORT $LN624@pyx_f_8rsr@5
$LN824@pyx_f_8rsr@5:

; 3699 :   __pyx_t_9 = ((PyArrayObject *)__pyx_t_1);
; 3700 :   {
; 3701 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3702 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Beta.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+64], rax
$LN624@pyx_f_8rsr@5:

; 3705 :     } else {__pyx_pybuffernd_Beta.diminfo[0].strides = __pyx_pybuffernd_Beta.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Beta.diminfo[0].shape = __pyx_pybuffernd_Beta.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_Beta.diminfo[1].strides = __pyx_pybuffernd_Beta.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_Beta.diminfo[1].shape = __pyx_pybuffernd_Beta.rcbuffer->pybuffer.shape[1];

	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]

; 3706 :     }
; 3707 :   }
; 3708 :   __pyx_t_9 = 0;
; 3709 :   __pyx_v_Beta = ((PyArrayObject *)__pyx_t_1);

	mov	QWORD PTR __pyx_v_Beta$1$[rsp], r13
	mov	QWORD PTR __pyx_pybuffernd_Beta$1$[rsp], rcx

; 3710 :   __pyx_t_1 = 0;
; 3711 : 
; 3712 :   /* "rsrpsinr.pyx":154
; 3713 :  *         np.ndarray[DTYPE_t, ndim=2] Alpha = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3714 :  *         np.ndarray[DTYPE_t, ndim=2] Beta = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3715 :  *         np.ndarray[DTYPE_t, ndim=2] Pathloss = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)*1000             # <<<<<<<<<<<<<<
; 3716 :  *         np.ndarray[DTYPE_t, ndim=2] dis = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3717 :  *         np.ndarray[np.uint8_t, ndim=1] isCovered = np.zeros(num_samples, dtype=np.uint8, order='C')
; 3718 :  */
; 3719 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_pybuffernd_Beta$2$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN622@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3719		; 00000e87H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN622@pyx_f_8rsr@5:

; 3720 :   __Pyx_GOTREF(__pyx_t_2);
; 3721 :   __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN959@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, rbx
	call	r8
	mov	r12, rax
	jmp	SHORT $LN960@pyx_f_8rsr@5
$LN959@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN958@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	r12, rax
	jmp	SHORT $LN960@pyx_f_8rsr@5
$LN958@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r12, rax
$LN960@pyx_f_8rsr@5:
	test	r12, r12
	jne	SHORT $LN620@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3721		; 00000e89H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN620@pyx_f_8rsr@5:

; 3722 :   __Pyx_GOTREF(__pyx_t_3);
; 3723 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN619@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN619@pyx_f_8rsr@5:

; 3724 :   __pyx_t_2 = __Pyx_PyInt_From_unsigned_int((__pyx_v_num_samples * __pyx_v_num_bases)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T45929[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN615@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3724		; 00000e8cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN615@pyx_f_8rsr@5:

; 3725 :   __Pyx_GOTREF(__pyx_t_2);
; 3726 :   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN614@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3726		; 00000e8eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN614@pyx_f_8rsr@5:

; 3727 :   __Pyx_GOTREF(__pyx_t_4);
; 3728 :   __Pyx_GIVEREF(__pyx_t_2);
; 3729 :   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

	mov	QWORD PTR [rax+24], rbx

; 3730 :   __pyx_t_2 = 0;
; 3731 :   __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN613@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3731		; 00000e93H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN613@pyx_f_8rsr@5:

; 3732 :   __Pyx_GOTREF(__pyx_t_2);
; 3733 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN612@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3733		; 00000e95H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN612@pyx_f_8rsr@5:

; 3734 :   __Pyx_GOTREF(__pyx_t_5);
; 3735 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN610@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3735		; 00000e97H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN610@pyx_f_8rsr@5:

; 3736 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN609@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN609@pyx_f_8rsr@5:

; 3737 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rbx
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN605@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3737		; 00000e99H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN605@pyx_f_8rsr@5:

; 3738 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	r8, rbx
	mov	rdx, rsi
	mov	rcx, r12
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN603@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3738		; 00000e9aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN603@pyx_f_8rsr@5:

; 3739 :   __Pyx_GOTREF(__pyx_t_5);
; 3740 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN602@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN602@pyx_f_8rsr@5:

; 3741 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	r12, rbp
	jne	SHORT $LN597@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN597@pyx_f_8rsr@5:

; 3742 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	mov	rsi, rbp
	jne	SHORT $LN592@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN592@pyx_f_8rsr@5:

; 3743 :   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN975@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN976@pyx_f_8rsr@5
$LN975@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN974@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN976@pyx_f_8rsr@5
$LN974@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN976@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN587@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3743		; 00000e9fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN587@pyx_f_8rsr@5:

; 3744 :   __Pyx_GOTREF(__pyx_t_2);
; 3745 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN586@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN586@pyx_f_8rsr@5:

; 3746 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T45956[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN582@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3746		; 00000ea2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN582@pyx_f_8rsr@5:

; 3747 :   __Pyx_GOTREF(__pyx_t_5);
; 3748 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_bases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_bases$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T45976[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN581@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3748		; 00000ea4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN581@pyx_f_8rsr@5:

; 3749 :   __Pyx_GOTREF(__pyx_t_4);
; 3750 :   __pyx_t_3 = NULL;
; 3751 :   __pyx_t_6 = 0;
; 3752 :   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	r13d, ebp
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN579@pyx_f_8rsr@5

; 3753 :     __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

	mov	r12, QWORD PTR [rbx+24]

; 3754 :     if (likely(__pyx_t_3)) {

	test	r12, r12
	je	SHORT $LN579@pyx_f_8rsr@5

; 3755 :       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

	mov	rax, QWORD PTR [rbx+16]

; 3756 :       __Pyx_INCREF(__pyx_t_3);

	inc	QWORD PTR [r12]

; 3757 :       __Pyx_INCREF(function);
; 3758 :       __Pyx_DECREF_SET(__pyx_t_2, function);

	mov	rcx, rbx
	inc	QWORD PTR [rax]
	add	QWORD PTR [rcx], -1
	mov	rbx, rax
	jne	SHORT $LN574@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN574@pyx_f_8rsr@5:

; 3759 :       __pyx_t_6 = 1;

	mov	r13d, 1
$LN579@pyx_f_8rsr@5:

; 3760 :     }
; 3761 :   }
; 3762 :   #if CYTHON_FAST_PYCALL
; 3763 :   if (PyFunction_Check(__pyx_t_2)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	$LN570@pyx_f_8rsr@5

; 3764 :     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_4};
; 3765 :     __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)

	movsxd	rax, r13d
	lea	rdx, QWORD PTR __pyx_temp$15406[rsp+8]
	lea	r8d, DWORD PTR [r13+2]
	shl	rax, 3
	xor	r9d, r9d
	mov	rcx, rbx
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$15406[rsp], r12
	mov	QWORD PTR __pyx_temp$15406[rsp+8], rdi
	mov	QWORD PTR __pyx_temp$15406[rsp+16], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN568@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3765		; 00000eb5H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN568@pyx_f_8rsr@5:

; 3766 :     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

	test	r12, r12
	je	SHORT $LN561@pyx_f_8rsr@5
	add	QWORD PTR [r12], -1
	jne	SHORT $LN561@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN561@pyx_f_8rsr@5:

; 3767 :     __Pyx_GOTREF(__pyx_t_1);
; 3768 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	mov	r12, rbp
	jne	SHORT $LN557@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN557@pyx_f_8rsr@5:

; 3769 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	rdi, rbp
	jne	SHORT $LN552@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN552@pyx_f_8rsr@5:
	mov	rsi, rbp

; 3770 :   } else

	jmp	$LN539@pyx_f_8rsr@5
$LN570@pyx_f_8rsr@5:

; 3771 :   #endif
; 3772 :   #if CYTHON_FAST_PYCCALL
; 3773 :   if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
; 3774 :     PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_4};
; 3775 :     __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
; 3776 :     __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
; 3777 :     __Pyx_GOTREF(__pyx_t_1);
; 3778 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
; 3779 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 3780 :   } else
; 3781 :   #endif
; 3782 :   {
; 3783 :     __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)

	lea	eax, DWORD PTR [r13+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	test	rax, rax
	jne	SHORT $LN547@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3783		; 00000ec7H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN547@pyx_f_8rsr@5:

; 3784 :     __Pyx_GOTREF(__pyx_t_7);
; 3785 :     if (__pyx_t_3) {

	test	r12, r12
	je	SHORT $LN546@pyx_f_8rsr@5

; 3786 :       __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;

	mov	QWORD PTR [rax+24], r12
	mov	r12, rbp
$LN546@pyx_f_8rsr@5:

; 3787 :     }
; 3788 :     __Pyx_GIVEREF(__pyx_t_5);
; 3789 :     PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);

	movsxd	rax, r13d

; 3790 :     __Pyx_GIVEREF(__pyx_t_4);
; 3791 :     PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
; 3792 :     __pyx_t_5 = 0;
; 3793 :     __pyx_t_4 = 0;
; 3794 :     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)

	xor	r8d, r8d
	mov	rcx, rbx
	mov	QWORD PTR [rdx+rax*8+24], rdi
	mov	QWORD PTR [rdx+rax*8+32], rsi
	mov	rdi, rbp
	mov	rsi, rbp
	call	__Pyx_PyObject_Call
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN544@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3794		; 00000ed2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN544@pyx_f_8rsr@5:

; 3795 :     __Pyx_GOTREF(__pyx_t_1);
; 3796 :     __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN543@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN543@pyx_f_8rsr@5:
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
$LN539@pyx_f_8rsr@5:

; 3797 :   }
; 3798 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN538@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN538@pyx_f_8rsr@5:

; 3799 :   __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_int_1000); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_int_1000
	mov	rcx, r13
	call	QWORD PTR __imp_PyNumber_Multiply
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN533@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3799		; 00000ed7H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN533@pyx_f_8rsr@5:

; 3800 :   __Pyx_GOTREF(__pyx_t_2);
; 3801 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN532@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN532@pyx_f_8rsr@5:

; 3802 :   if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 154, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN826@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rbx
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN528@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3802		; 00000edaH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN528@pyx_f_8rsr@5:

; 3803 :   __pyx_t_10 = ((PyArrayObject *)__pyx_t_2);
; 3804 :   {
; 3805 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3806 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Pathloss.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN826@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15487[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rbx
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1291@pyx_f_8rsr@5

; 3807 :       __pyx_v_Pathloss = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.buf = NULL;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 3808 :       __PYX_ERR(0, 154, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 154		; 0000009aH
	mov	DWORD PTR __pyx_clineno, 3808		; 00000ee0H
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_v_Pathloss$1$[rsp], rax
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8], rbp
	jmp	$LN153@pyx_f_8rsr@5
$LN1291@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+64]
	jmp	SHORT $LN527@pyx_f_8rsr@5
$LN826@pyx_f_8rsr@5:

; 3803 :   __pyx_t_10 = ((PyArrayObject *)__pyx_t_2);
; 3804 :   {
; 3805 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3806 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Pathloss.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+64], rax
$LN527@pyx_f_8rsr@5:

; 3809 :     } else {__pyx_pybuffernd_Pathloss.diminfo[0].strides = __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Pathloss.diminfo[0].shape = __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_Pathloss.diminfo[1].strides = __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_Pathloss.diminfo[1].shape = __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.shape[1];

	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]

; 3810 :     }
; 3811 :   }
; 3812 :   __pyx_t_10 = 0;
; 3813 :   __pyx_v_Pathloss = ((PyArrayObject *)__pyx_t_2);

	mov	QWORD PTR __pyx_v_Pathloss$1$[rsp], rbx
	mov	QWORD PTR __pyx_pybuffernd_Pathloss$1$[rsp], rcx

; 3814 :   __pyx_t_2 = 0;
; 3815 : 
; 3816 :   /* "rsrpsinr.pyx":155
; 3817 :  *         np.ndarray[DTYPE_t, ndim=2] Beta = np.zeros(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3818 :  *         np.ndarray[DTYPE_t, ndim=2] Pathloss = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)*1000
; 3819 :  *         np.ndarray[DTYPE_t, ndim=2] dis = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)             # <<<<<<<<<<<<<<
; 3820 :  *         np.ndarray[np.uint8_t, ndim=1] isCovered = np.zeros(num_samples, dtype=np.uint8, order='C')
; 3821 :  *         np.ndarray[np.int64_t, ndim=1] bIndex = np.zeros(num_samples, dtype=np.int64, order='C')
; 3822 :  */
; 3823 :   __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_pybuffernd_Pathloss$2$[rsp], rax
	mov	rbx, rbp
	call	__Pyx_GetModuleGlobalName
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN525@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3823		; 00000eefH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN525@pyx_f_8rsr@5:

; 3824 :   __Pyx_GOTREF(__pyx_t_1);
; 3825 :   __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ones); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1005@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, r13
	call	r8
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	jmp	SHORT $LN1006@pyx_f_8rsr@5
$LN1005@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1004@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, r13
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
	jmp	SHORT $LN1006@pyx_f_8rsr@5
$LN1004@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_ones
	mov	rcx, r13
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdx, rax
	mov	QWORD PTR __pyx_t_7$1$[rsp], rax
$LN1006@pyx_f_8rsr@5:
	test	rdx, rdx
	jne	SHORT $LN523@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3825		; 00000ef1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN523@pyx_f_8rsr@5:

; 3826 :   __Pyx_GOTREF(__pyx_t_7);
; 3827 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN522@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN522@pyx_f_8rsr@5:

; 3828 :   __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_num_samples * __pyx_v_num_bases)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T46007[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN518@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3828		; 00000ef4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN518@pyx_f_8rsr@5:

; 3829 :   __Pyx_GOTREF(__pyx_t_1);
; 3830 :   __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN517@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3830		; 00000ef6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN517@pyx_f_8rsr@5:

; 3831 :   __Pyx_GOTREF(__pyx_t_4);
; 3832 :   __Pyx_GIVEREF(__pyx_t_1);
; 3833 :   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

	mov	QWORD PTR [rax+24], r13

; 3834 :   __pyx_t_1 = 0;
; 3835 :   __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN516@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3835		; 00000efbH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN516@pyx_f_8rsr@5:

; 3836 :   __Pyx_GOTREF(__pyx_t_1);
; 3837 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN515@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3837		; 00000efdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN515@pyx_f_8rsr@5:

; 3838 :   __Pyx_GOTREF(__pyx_t_5);
; 3839 :   if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN513@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3839		; 00000effH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN513@pyx_f_8rsr@5:

; 3840 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN512@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN512@pyx_f_8rsr@5:

; 3841 :   if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, r13
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN508@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3841		; 00000f01H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN508@pyx_f_8rsr@5:

; 3842 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	r14, QWORD PTR __pyx_t_7$1$[rsp]
	mov	r8, r13
	mov	rdx, rsi
	mov	rcx, r14
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN506@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3842		; 00000f02H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN506@pyx_f_8rsr@5:

; 3843 :   __Pyx_GOTREF(__pyx_t_5);
; 3844 :   __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	add	QWORD PTR [r14], -1
	jne	SHORT $LN505@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN505@pyx_f_8rsr@5:

; 3845 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
	jne	SHORT $LN500@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN500@pyx_f_8rsr@5:

; 3846 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	mov	rsi, rbp
	jne	SHORT $LN495@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN495@pyx_f_8rsr@5:

; 3847 :   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	rax, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1021@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	r8
	mov	r13, rax
	jmp	SHORT $LN1022@pyx_f_8rsr@5
$LN1021@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1020@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	r13, rax
	jmp	SHORT $LN1022@pyx_f_8rsr@5
$LN1020@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_reshape
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r13, rax
$LN1022@pyx_f_8rsr@5:
	test	r13, r13
	jne	SHORT $LN490@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3847		; 00000f07H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN143@pyx_f_8rsr@5
$LN490@pyx_f_8rsr@5:

; 3848 :   __Pyx_GOTREF(__pyx_t_1);
; 3849 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN489@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN489@pyx_f_8rsr@5:

; 3850 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T46034[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN485@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3850		; 00000f0aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN485@pyx_f_8rsr@5:

; 3851 :   __Pyx_GOTREF(__pyx_t_5);
; 3852 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_bases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)

	mov	eax, DWORD PTR __pyx_v_num_bases$1$[rsp]
	mov	ecx, eax
	mov	DWORD PTR $T46054[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN484@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3852		; 00000f0cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN484@pyx_f_8rsr@5:

; 3853 :   __Pyx_GOTREF(__pyx_t_4);
; 3854 :   __pyx_t_7 = NULL;
; 3855 :   __pyx_t_6 = 0;
; 3856 :   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

	mov	rax, QWORD PTR __imp_PyMethod_Type
	mov	rcx, rbp
	mov	r14d, ebp
	mov	QWORD PTR __pyx_t_7$1$[rsp], rcx
	cmp	QWORD PTR [r13+8], rax
	jne	SHORT $LN482@pyx_f_8rsr@5

; 3857 :     __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);

	mov	rcx, QWORD PTR [r13+24]
	mov	QWORD PTR __pyx_t_7$1$[rsp], rcx

; 3858 :     if (likely(__pyx_t_7)) {

	test	rcx, rcx
	je	SHORT $LN482@pyx_f_8rsr@5

; 3859 :       PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

	mov	rax, QWORD PTR [r13+16]

; 3860 :       __Pyx_INCREF(__pyx_t_7);

	inc	QWORD PTR [rcx]

; 3861 :       __Pyx_INCREF(function);
; 3862 :       __Pyx_DECREF_SET(__pyx_t_1, function);

	mov	rcx, r13
	inc	QWORD PTR [rax]
	add	QWORD PTR [rcx], -1
	mov	r13, rax
	jne	SHORT $LN477@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN477@pyx_f_8rsr@5:
	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]

; 3863 :       __pyx_t_6 = 1;

	mov	r14d, 1
$LN482@pyx_f_8rsr@5:

; 3864 :     }
; 3865 :   }
; 3866 :   #if CYTHON_FAST_PYCALL
; 3867 :   if (PyFunction_Check(__pyx_t_1)) {

	mov	rax, QWORD PTR __imp_PyFunction_Type
	cmp	QWORD PTR [r13+8], rax
	jne	$LN473@pyx_f_8rsr@5

; 3868 :     PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};

	mov	QWORD PTR __pyx_temp$15596[rsp], rcx

; 3869 :     __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)

	movsxd	rax, r14d
	lea	rdx, QWORD PTR __pyx_temp$15596[rsp+8]
	shl	rax, 3
	lea	r8d, DWORD PTR [r14+2]
	xor	r9d, r9d
	mov	rcx, r13
	sub	rdx, rax
	mov	QWORD PTR __pyx_temp$15596[rsp+8], rdi
	mov	QWORD PTR __pyx_temp$15596[rsp+16], rsi
	call	__Pyx_PyFunction_FastCallDict
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN471@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3869		; 00000f1dH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN471@pyx_f_8rsr@5:

; 3870 :     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN464@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN464@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN464@pyx_f_8rsr@5:

; 3871 :     __Pyx_GOTREF(__pyx_t_2);
; 3872 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
	jne	SHORT $LN460@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN460@pyx_f_8rsr@5:

; 3873 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	rdi, rbp
	jne	SHORT $LN455@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN455@pyx_f_8rsr@5:
	mov	rsi, rbp

; 3874 :   } else

	jmp	$LN442@pyx_f_8rsr@5
$LN473@pyx_f_8rsr@5:

; 3875 :   #endif
; 3876 :   #if CYTHON_FAST_PYCCALL
; 3877 :   if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
; 3878 :     PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};
; 3879 :     __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
; 3880 :     __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
; 3881 :     __Pyx_GOTREF(__pyx_t_2);
; 3882 :     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
; 3883 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
; 3884 :   } else
; 3885 :   #endif
; 3886 :   {
; 3887 :     __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)

	lea	eax, DWORD PTR [r14+2]
	movsxd	rcx, eax
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN450@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3887		; 00000f2fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN450@pyx_f_8rsr@5:

; 3888 :     __Pyx_GOTREF(__pyx_t_3);
; 3889 :     if (__pyx_t_7) {

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN449@pyx_f_8rsr@5

; 3890 :       __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;

	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR __pyx_t_7$1$[rsp], rbp
$LN449@pyx_f_8rsr@5:

; 3891 :     }
; 3892 :     __Pyx_GIVEREF(__pyx_t_5);
; 3893 :     PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_5);

	movsxd	rax, r14d

; 3894 :     __Pyx_GIVEREF(__pyx_t_4);
; 3895 :     PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_4);
; 3896 :     __pyx_t_5 = 0;
; 3897 :     __pyx_t_4 = 0;
; 3898 :     __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)

	xor	r8d, r8d
	mov	rdx, r12
	mov	QWORD PTR [r12+rax*8+24], rdi
	mov	QWORD PTR [r12+rax*8+32], rsi
	mov	rcx, r13
	mov	rdi, rbp
	mov	rsi, rbp
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN447@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3898		; 00000f3aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN447@pyx_f_8rsr@5:

; 3899 :     __Pyx_GOTREF(__pyx_t_2);
; 3900 :     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN446@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN446@pyx_f_8rsr@5:
	mov	r12, rbp
$LN442@pyx_f_8rsr@5:

; 3901 :   }
; 3902 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN441@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN441@pyx_f_8rsr@5:

; 3903 :   if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 155, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN828@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rbx
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN437@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3903		; 00000f3fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN437@pyx_f_8rsr@5:

; 3904 :   __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
; 3905 :   {
; 3906 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3907 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dis.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN828@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15666[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_dis$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rbx
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1292@pyx_f_8rsr@5

; 3908 :       __pyx_v_dis = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dis.rcbuffer->pybuffer.buf = NULL;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 3909 :       __PYX_ERR(0, 155, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 155		; 0000009bH
	mov	DWORD PTR __pyx_clineno, 3909		; 00000f45H
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_v_dis$1$[rsp], rax
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+8], rbp
	jmp	$LN153@pyx_f_8rsr@5
$LN1292@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_dis$[rsp+64]
	jmp	SHORT $LN436@pyx_f_8rsr@5
$LN828@pyx_f_8rsr@5:

; 3904 :   __pyx_t_11 = ((PyArrayObject *)__pyx_t_2);
; 3905 :   {
; 3906 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3907 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dis.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+64], rax
$LN436@pyx_f_8rsr@5:

; 3910 :     } else {__pyx_pybuffernd_dis.diminfo[0].strides = __pyx_pybuffernd_dis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dis.diminfo[0].shape = __pyx_pybuffernd_dis.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dis.diminfo[1].strides = __pyx_pybuffernd_dis.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dis.diminfo[1].shape = __pyx_pybuffernd_dis.rcbuffer->pybuffer.shape[1];

	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]

; 3911 :     }
; 3912 :   }
; 3913 :   __pyx_t_11 = 0;
; 3914 :   __pyx_v_dis = ((PyArrayObject *)__pyx_t_2);

	mov	QWORD PTR __pyx_v_dis$1$[rsp], rbx
	mov	QWORD PTR __pyx_pybuffernd_dis$1$[rsp], rcx

; 3915 :   __pyx_t_2 = 0;
; 3916 : 
; 3917 :   /* "rsrpsinr.pyx":156
; 3918 :  *         np.ndarray[DTYPE_t, ndim=2] Pathloss = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)*1000
; 3919 :  *         np.ndarray[DTYPE_t, ndim=2] dis = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3920 :  *         np.ndarray[np.uint8_t, ndim=1] isCovered = np.zeros(num_samples, dtype=np.uint8, order='C')             # <<<<<<<<<<<<<<
; 3921 :  *         np.ndarray[np.int64_t, ndim=1] bIndex = np.zeros(num_samples, dtype=np.int64, order='C')
; 3922 :  *         np.ndarray[DTYPE_t, ndim=1] rsrp = np.zeros(num_samples, dtype=DTYPE, order='C')
; 3923 :  */
; 3924 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_pybuffernd_dis$2$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN434@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3924		; 00000f54H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN434@pyx_f_8rsr@5:

; 3925 :   __Pyx_GOTREF(__pyx_t_2);
; 3926 :   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1051@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	r8
	mov	r13, rax
	jmp	SHORT $LN1052@pyx_f_8rsr@5
$LN1051@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1050@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	r13, rax
	jmp	SHORT $LN1052@pyx_f_8rsr@5
$LN1050@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	r13, rax
$LN1052@pyx_f_8rsr@5:
	test	r13, r13
	jne	SHORT $LN432@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3926		; 00000f56H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN432@pyx_f_8rsr@5:

; 3927 :   __Pyx_GOTREF(__pyx_t_1);
; 3928 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN431@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN431@pyx_f_8rsr@5:

; 3929 :   __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	r14d, DWORD PTR __pyx_v_num_samples$1$[rsp]
	mov	ecx, r14d
	mov	DWORD PTR $T46085[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN427@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3929		; 00000f59H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN427@pyx_f_8rsr@5:

; 3930 :   __Pyx_GOTREF(__pyx_t_2);
; 3931 :   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN426@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3931		; 00000f5bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN426@pyx_f_8rsr@5:

; 3932 :   __Pyx_GOTREF(__pyx_t_3);
; 3933 :   __Pyx_GIVEREF(__pyx_t_2);
; 3934 :   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

	mov	QWORD PTR [rax+24], rbx

; 3935 :   __pyx_t_2 = 0;
; 3936 :   __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN425@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3936		; 00000f60H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN425@pyx_f_8rsr@5:

; 3937 :   __Pyx_GOTREF(__pyx_t_2);
; 3938 :   __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	call	__Pyx_GetModuleGlobalName
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN424@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3938		; 00000f62H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN424@pyx_f_8rsr@5:

; 3939 :   __Pyx_GOTREF(__pyx_t_4);
; 3940 :   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1067@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_uint8
	mov	rcx, rsi
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN1068@pyx_f_8rsr@5
$LN1067@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1066@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_uint8
	mov	rcx, rsi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN1068@pyx_f_8rsr@5
$LN1066@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_uint8
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN1068@pyx_f_8rsr@5:
	test	rdi, rdi
	jne	SHORT $LN422@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3940		; 00000f64H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN422@pyx_f_8rsr@5:

; 3941 :   __Pyx_GOTREF(__pyx_t_5);
; 3942 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN421@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN421@pyx_f_8rsr@5:

; 3943 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rdi
	mov	rcx, rbx
	mov	rsi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN416@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3943		; 00000f67H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN416@pyx_f_8rsr@5:

; 3944 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN415@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN415@pyx_f_8rsr@5:

; 3945 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rbx
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN411@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3945		; 00000f69H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN411@pyx_f_8rsr@5:

; 3946 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 156, __pyx_L1_error)

	mov	r8, rbx
	mov	rdx, r12
	mov	rcx, r13
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN409@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3946		; 00000f6aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L1_error$14937
$LN409@pyx_f_8rsr@5:

; 3947 :   __Pyx_GOTREF(__pyx_t_5);
; 3948 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN408@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN408@pyx_f_8rsr@5:

; 3949 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN403@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN403@pyx_f_8rsr@5:

; 3950 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	mov	r12, rbp
	jne	SHORT $LN398@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN398@pyx_f_8rsr@5:

; 3951 :   if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 156, __pyx_L1_error)

	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	je	$LN830@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rdi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN394@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3951		; 00000f6fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN394@pyx_f_8rsr@5:

; 3952 :   __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
; 3953 :   {
; 3954 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3955 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_isCovered.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	je	$LN830@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15750[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t
	lea	rcx, QWORD PTR __pyx_pybuffer_isCovered$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rdi
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1293@pyx_f_8rsr@5

; 3956 :       __pyx_v_isCovered = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_isCovered.rcbuffer->pybuffer.buf = NULL;

	mov	rcx, QWORD PTR __imp__Py_NoneStruct

; 3957 :       __PYX_ERR(0, 156, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 156		; 0000009cH
	mov	DWORD PTR __pyx_clineno, 3957		; 00000f75H
	inc	QWORD PTR [rcx]
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_v_isCovered$1$[rsp], rcx
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+8], rbp
	jmp	$LN123@pyx_f_8rsr@5
$LN1293@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_isCovered$[rsp+64]
	jmp	SHORT $LN393@pyx_f_8rsr@5
$LN830@pyx_f_8rsr@5:

; 3952 :   __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
; 3953 :   {
; 3954 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 3955 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_isCovered.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+64], rax
$LN393@pyx_f_8rsr@5:

; 3958 :     } else {__pyx_pybuffernd_isCovered.diminfo[0].strides = __pyx_pybuffernd_isCovered.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_isCovered.diminfo[0].shape = __pyx_pybuffernd_isCovered.rcbuffer->pybuffer.shape[0];

	mov	rax, QWORD PTR [rax]

; 3959 :     }
; 3960 :   }
; 3961 :   __pyx_t_12 = 0;
; 3962 :   __pyx_v_isCovered = ((PyArrayObject *)__pyx_t_5);
; 3963 :   __pyx_t_5 = 0;
; 3964 : 
; 3965 :   /* "rsrpsinr.pyx":157
; 3966 :  *         np.ndarray[DTYPE_t, ndim=2] dis = np.ones(num_samples * num_bases, dtype=DTYPE, order='C').reshape(num_samples, num_bases)
; 3967 :  *         np.ndarray[np.uint8_t, ndim=1] isCovered = np.zeros(num_samples, dtype=np.uint8, order='C')
; 3968 :  *         np.ndarray[np.int64_t, ndim=1] bIndex = np.zeros(num_samples, dtype=np.int64, order='C')             # <<<<<<<<<<<<<<
; 3969 :  *         np.ndarray[DTYPE_t, ndim=1] rsrp = np.zeros(num_samples, dtype=DTYPE, order='C')
; 3970 :  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')
; 3971 :  */
; 3972 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_v_isCovered$1$[rsp], rdi
	mov	QWORD PTR __pyx_pybuffernd_isCovered$1$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN391@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3972		; 00000f84H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN391@pyx_f_8rsr@5:

; 3973 :   __Pyx_GOTREF(__pyx_t_5);
; 3974 :   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1073@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN1074@pyx_f_8rsr@5
$LN1073@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1072@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN1074@pyx_f_8rsr@5
$LN1072@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN1074@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN389@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3974		; 00000f86H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN389@pyx_f_8rsr@5:

; 3975 :   __Pyx_GOTREF(__pyx_t_2);
; 3976 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN388@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN388@pyx_f_8rsr@5:

; 3977 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T46123[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN384@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3977		; 00000f89H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN384@pyx_f_8rsr@5:

; 3978 :   __Pyx_GOTREF(__pyx_t_5);
; 3979 :   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN383@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3979		; 00000f8bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN383@pyx_f_8rsr@5:

; 3980 :   __Pyx_GOTREF(__pyx_t_3);
; 3981 :   __Pyx_GIVEREF(__pyx_t_5);
; 3982 :   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

	mov	QWORD PTR [rax+24], rdi

; 3983 :   __pyx_t_5 = 0;
; 3984 :   __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN382@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3984		; 00000f90H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN382@pyx_f_8rsr@5:

; 3985 :   __Pyx_GOTREF(__pyx_t_5);
; 3986 :   __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	call	__Pyx_GetModuleGlobalName
	mov	r13, rax
	test	rax, rax
	jne	SHORT $LN381@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3986		; 00000f92H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $__pyx_L1_error$14937
$LN381@pyx_f_8rsr@5:

; 3987 :   __Pyx_GOTREF(__pyx_t_1);
; 3988 :   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1089@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_int64
	mov	rcx, r13
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN1090@pyx_f_8rsr@5
$LN1089@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1088@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_int64
	mov	rcx, r13
	add	rdx, 32					; 00000020H
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN1090@pyx_f_8rsr@5
$LN1088@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_int64
	mov	rcx, r13
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rsi, rax
$LN1090@pyx_f_8rsr@5:
	test	rsi, rsi
	jne	SHORT $LN379@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3988		; 00000f94H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$14937:

; 4827 :   __pyx_t_4 = 0;
; 4828 :   __pyx_r = __pyx_t_5;
; 4829 :   __pyx_t_5 = 0;
; 4830 :   goto __pyx_L0;
; 4831 : 
; 4832 :   /* "rsrpsinr.pyx":107
; 4833 :  * cdef double log10_10 = 0.23025850929940458 # log(10)/10.
; 4834 :  * 
; 4835 :  * cdef object cget_coverage(             # <<<<<<<<<<<<<<
; 4836 :  *     np.ndarray[DTYPE_t, ndim=2] S,
; 4837 :  *     np.ndarray[DTYPE_t, ndim=2] B,
; 4838 :  */
; 4839 : 
; 4840 :   /* function exit code */
; 4841 :   __pyx_L1_error:;
; 4842 :   __Pyx_XDECREF(__pyx_t_1);

	test	r13, r13
	je	$LN153@pyx_f_8rsr@5
	add	QWORD PTR [r13], -1
	jne	$LN153@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
	jmp	$LN153@pyx_f_8rsr@5
$LN379@pyx_f_8rsr@5:

; 3989 :   __Pyx_GOTREF(__pyx_t_4);
; 3990 :   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	add	QWORD PTR [r13], -1
	jne	SHORT $LN378@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN378@pyx_f_8rsr@5:

; 3991 :   if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rsi
	mov	rcx, rdi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN373@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3991		; 00000f97H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN373@pyx_f_8rsr@5:

; 3992 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN372@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN372@pyx_f_8rsr@5:

; 3993 :   if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rdi
	mov	rsi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN368@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3993		; 00000f99H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN368@pyx_f_8rsr@5:

; 3994 :   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)

	mov	r8, rdi
	mov	rdx, r12
	mov	rcx, rbx
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN366@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3994		; 00000f9aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN366@pyx_f_8rsr@5:

; 3995 :   __Pyx_GOTREF(__pyx_t_4);
; 3996 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN365@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN365@pyx_f_8rsr@5:

; 3997 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN360@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN360@pyx_f_8rsr@5:

; 3998 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN355@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN355@pyx_f_8rsr@5:
	mov	rdi, rbp

; 3999 :   if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 157, __pyx_L1_error)

	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	je	$LN832@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rsi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN351@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 3999		; 00000f9fH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN351@pyx_f_8rsr@5:

; 4000 :   __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
; 4001 :   {
; 4002 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4003 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bIndex.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	je	$LN832@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15834[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t
	lea	rcx, QWORD PTR __pyx_pybuffer_bIndex$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rsi
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1294@pyx_f_8rsr@5

; 4004 :       __pyx_v_bIndex = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_bIndex.rcbuffer->pybuffer.buf = NULL;

	mov	r13, QWORD PTR __imp__Py_NoneStruct

; 4005 :       __PYX_ERR(0, 157, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 157		; 0000009dH
	mov	DWORD PTR __pyx_clineno, 4005		; 00000fa5H
	inc	QWORD PTR [r13]
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_v_bIndex$1$[rsp], r13
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+8], rbp
	jmp	$LN133@pyx_f_8rsr@5
$LN1294@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_bIndex$[rsp+64]
	jmp	SHORT $LN350@pyx_f_8rsr@5
$LN832@pyx_f_8rsr@5:

; 4000 :   __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
; 4001 :   {
; 4002 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4003 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bIndex.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+64], rax
$LN350@pyx_f_8rsr@5:

; 4006 :     } else {__pyx_pybuffernd_bIndex.diminfo[0].strides = __pyx_pybuffernd_bIndex.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bIndex.diminfo[0].shape = __pyx_pybuffernd_bIndex.rcbuffer->pybuffer.shape[0];

	mov	rax, QWORD PTR [rax]

; 4007 :     }
; 4008 :   }
; 4009 :   __pyx_t_13 = 0;
; 4010 :   __pyx_v_bIndex = ((PyArrayObject *)__pyx_t_4);
; 4011 :   __pyx_t_4 = 0;
; 4012 : 
; 4013 :   /* "rsrpsinr.pyx":158
; 4014 :  *         np.ndarray[np.uint8_t, ndim=1] isCovered = np.zeros(num_samples, dtype=np.uint8, order='C')
; 4015 :  *         np.ndarray[np.int64_t, ndim=1] bIndex = np.zeros(num_samples, dtype=np.int64, order='C')
; 4016 :  *         np.ndarray[DTYPE_t, ndim=1] rsrp = np.zeros(num_samples, dtype=DTYPE, order='C')             # <<<<<<<<<<<<<<
; 4017 :  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4018 :  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4019 :  */
; 4020 :   __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	r13, rsi
	mov	QWORD PTR __pyx_pybuffernd_bIndex$1$[rsp], rax
	mov	QWORD PTR __pyx_v_bIndex$1$[rsp], rsi
	call	__Pyx_GetModuleGlobalName
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN348@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4020		; 00000fb4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN348@pyx_f_8rsr@5:

; 4021 :   __Pyx_GOTREF(__pyx_t_4);
; 4022 :   __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1095@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rsi
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN1096@pyx_f_8rsr@5
$LN1095@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1094@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rsi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rdi, rax
	jmp	SHORT $LN1096@pyx_f_8rsr@5
$LN1094@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rdi, rax
$LN1096@pyx_f_8rsr@5:
	test	rdi, rdi
	jne	SHORT $LN346@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4022		; 00000fb6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN346@pyx_f_8rsr@5:

; 4023 :   __Pyx_GOTREF(__pyx_t_5);
; 4024 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN345@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN345@pyx_f_8rsr@5:

; 4025 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T46161[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN341@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4025		; 00000fb9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN341@pyx_f_8rsr@5:

; 4026 :   __Pyx_GOTREF(__pyx_t_4);
; 4027 :   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN340@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4027		; 00000fbbH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN143@pyx_f_8rsr@5
$LN340@pyx_f_8rsr@5:

; 4028 :   __Pyx_GOTREF(__pyx_t_3);
; 4029 :   __Pyx_GIVEREF(__pyx_t_4);
; 4030 :   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

	mov	QWORD PTR [rax+24], rsi

; 4031 :   __pyx_t_4 = 0;
; 4032 :   __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN339@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4032		; 00000fc0H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN143@pyx_f_8rsr@5
$LN339@pyx_f_8rsr@5:

; 4033 :   __Pyx_GOTREF(__pyx_t_4);
; 4034 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN338@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4034		; 00000fc2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN338@pyx_f_8rsr@5:

; 4035 :   __Pyx_GOTREF(__pyx_t_2);
; 4036 :   if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN336@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4036		; 00000fc4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN336@pyx_f_8rsr@5:

; 4037 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN335@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN335@pyx_f_8rsr@5:

; 4038 :   if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rsi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN331@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4038		; 00000fc6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN143@pyx_f_8rsr@5
$LN331@pyx_f_8rsr@5:

; 4039 :   __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)

	mov	r8, rsi
	mov	rdx, r12
	mov	rcx, rdi
	call	__Pyx_PyObject_Call
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN329@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4039		; 00000fc7H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN329@pyx_f_8rsr@5:

; 4040 :   __Pyx_GOTREF(__pyx_t_2);
; 4041 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN328@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN328@pyx_f_8rsr@5:

; 4042 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	mov	rdi, rbp
	jne	SHORT $LN323@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN323@pyx_f_8rsr@5:

; 4043 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	mov	r12, rbp
	jne	SHORT $LN318@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN318@pyx_f_8rsr@5:
	mov	rsi, rbp

; 4044 :   if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 158, __pyx_L1_error)

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN834@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rbx
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN314@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4044		; 00000fccH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN314@pyx_f_8rsr@5:

; 4045 :   __pyx_t_14 = ((PyArrayObject *)__pyx_t_2);
; 4046 :   {
; 4047 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4048 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rsrp.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	je	$LN834@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15907[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rbx
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1295@pyx_f_8rsr@5

; 4049 :       __pyx_v_rsrp = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf = NULL;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 4050 :       __PYX_ERR(0, 158, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 158		; 0000009eH
	mov	DWORD PTR __pyx_clineno, 4050		; 00000fd2H
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_v_rsrp$1$[rsp], rax
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+8], rbp
	jmp	$LN153@pyx_f_8rsr@5
$LN1295@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+64]
	jmp	SHORT $LN313@pyx_f_8rsr@5
$LN834@pyx_f_8rsr@5:

; 4045 :   __pyx_t_14 = ((PyArrayObject *)__pyx_t_2);
; 4046 :   {
; 4047 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4048 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_rsrp.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+64], rax
$LN313@pyx_f_8rsr@5:

; 4051 :     } else {__pyx_pybuffernd_rsrp.diminfo[0].strides = __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_rsrp.diminfo[0].shape = __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.shape[0];

	mov	rax, QWORD PTR [rax]

; 4052 :     }
; 4053 :   }
; 4054 :   __pyx_t_14 = 0;
; 4055 :   __pyx_v_rsrp = ((PyArrayObject *)__pyx_t_2);
; 4056 :   __pyx_t_2 = 0;
; 4057 : 
; 4058 :   /* "rsrpsinr.pyx":159
; 4059 :  *         np.ndarray[np.int64_t, ndim=1] bIndex = np.zeros(num_samples, dtype=np.int64, order='C')
; 4060 :  *         np.ndarray[DTYPE_t, ndim=1] rsrp = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4061 :  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')             # <<<<<<<<<<<<<<
; 4062 :  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4063 :  *     bIndex[:] = -1
; 4064 :  */
; 4065 :   __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_v_rsrp$1$[rsp], rbx
	mov	QWORD PTR __pyx_pybuffernd_rsrp$1$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN311@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4065		; 00000fe1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN311@pyx_f_8rsr@5:

; 4066 :   __Pyx_GOTREF(__pyx_t_2);
; 4067 :   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1113@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN1114@pyx_f_8rsr@5
$LN1113@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1112@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	add	rdx, 32					; 00000020H
	call	r8
	mov	rsi, rax
	jmp	SHORT $LN1114@pyx_f_8rsr@5
$LN1112@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rsi, rax
$LN1114@pyx_f_8rsr@5:
	test	rsi, rsi
	jne	SHORT $LN309@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4067		; 00000fe3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN309@pyx_f_8rsr@5:

; 4068 :   __Pyx_GOTREF(__pyx_t_4);
; 4069 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN308@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN308@pyx_f_8rsr@5:

; 4070 :   __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T46192[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN304@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4070		; 00000fe6H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN304@pyx_f_8rsr@5:

; 4071 :   __Pyx_GOTREF(__pyx_t_2);
; 4072 :   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN303@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4072		; 00000fe8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN303@pyx_f_8rsr@5:

; 4073 :   __Pyx_GOTREF(__pyx_t_3);
; 4074 :   __Pyx_GIVEREF(__pyx_t_2);
; 4075 :   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

	mov	QWORD PTR [rax+24], rbx

; 4076 :   __pyx_t_2 = 0;
; 4077 :   __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN302@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4077		; 00000fedH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN302@pyx_f_8rsr@5:

; 4078 :   __Pyx_GOTREF(__pyx_t_2);
; 4079 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN301@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4079		; 00000fefH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN301@pyx_f_8rsr@5:

; 4080 :   __Pyx_GOTREF(__pyx_t_5);
; 4081 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN299@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4081		; 00000ff1H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN299@pyx_f_8rsr@5:

; 4082 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN298@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN298@pyx_f_8rsr@5:

; 4083 :   if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rbx
	mov	rdi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN294@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4083		; 00000ff3H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN294@pyx_f_8rsr@5:

; 4084 :   __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)

	mov	r8, rbx
	mov	rdx, r12
	mov	rcx, rsi
	call	__Pyx_PyObject_Call
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN292@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4084		; 00000ff4H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN292@pyx_f_8rsr@5:

; 4085 :   __Pyx_GOTREF(__pyx_t_5);
; 4086 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN291@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN291@pyx_f_8rsr@5:

; 4087 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	mov	rsi, rbp
	jne	SHORT $LN286@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN286@pyx_f_8rsr@5:

; 4088 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	mov	r12, rbp
	jne	SHORT $LN281@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN281@pyx_f_8rsr@5:

; 4089 :   if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 159, __pyx_L1_error)

	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	je	$LN836@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rdi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN277@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4089		; 00000ff9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN277@pyx_f_8rsr@5:

; 4090 :   __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
; 4091 :   {
; 4092 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4093 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sinr.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	cmp	rdi, QWORD PTR __imp__Py_NoneStruct
	je	$LN836@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$15980[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_sinr$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rdi
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1296@pyx_f_8rsr@5

; 4094 :       __pyx_v_sinr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_sinr.rcbuffer->pybuffer.buf = NULL;

	mov	rax, QWORD PTR __imp__Py_NoneStruct

; 4095 :       __PYX_ERR(0, 159, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 159		; 0000009fH
	mov	DWORD PTR __pyx_clineno, 4095		; 00000fffH
	inc	QWORD PTR [rax]
	mov	QWORD PTR __pyx_v_sinr$1$[rsp], rax
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+8], rbp
	jmp	$LN123@pyx_f_8rsr@5
$LN1296@pyx_f_8rsr@5:
	mov	rax, QWORD PTR __pyx_pybuffer_sinr$[rsp+64]
	jmp	SHORT $LN276@pyx_f_8rsr@5
$LN836@pyx_f_8rsr@5:

; 4090 :   __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
; 4091 :   {
; 4092 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4093 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sinr.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	lea	rcx, OFFSET FLAT:__Pyx_minusones
	mov	rax, r15
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+72], rcx
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+64], rax
$LN276@pyx_f_8rsr@5:

; 4096 :     } else {__pyx_pybuffernd_sinr.diminfo[0].strides = __pyx_pybuffernd_sinr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sinr.diminfo[0].shape = __pyx_pybuffernd_sinr.rcbuffer->pybuffer.shape[0];

	mov	rax, QWORD PTR [rax]

; 4097 :     }
; 4098 :   }
; 4099 :   __pyx_t_15 = 0;
; 4100 :   __pyx_v_sinr = ((PyArrayObject *)__pyx_t_5);
; 4101 :   __pyx_t_5 = 0;
; 4102 : 
; 4103 :   /* "rsrpsinr.pyx":160
; 4104 :  *         np.ndarray[DTYPE_t, ndim=1] rsrp = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4105 :  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4106 :  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')             # <<<<<<<<<<<<<<
; 4107 :  *     bIndex[:] = -1
; 4108 :  *     noise[:] = pow(10., NOISE/10.0)
; 4109 :  */
; 4110 :   __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_np
	mov	QWORD PTR __pyx_v_sinr$1$[rsp], rdi
	mov	QWORD PTR __pyx_pybuffernd_sinr$1$[rsp], rax
	call	__Pyx_GetModuleGlobalName
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN274@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4110		; 0000100eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN274@pyx_f_8rsr@5:

; 4111 :   __Pyx_GOTREF(__pyx_t_5);
; 4112 :   __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r8, QWORD PTR [rax+144]
	test	r8, r8
	je	SHORT $LN1131@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN1132@pyx_f_8rsr@5
$LN1131@pyx_f_8rsr@5:
	mov	r8, QWORD PTR [rax+64]
	test	r8, r8
	je	SHORT $LN1130@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	add	rdx, 32					; 00000020H
	call	r8
	mov	rbx, rax
	jmp	SHORT $LN1132@pyx_f_8rsr@5
$LN1130@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR __pyx_n_s_zeros
	mov	rcx, rdi
	call	QWORD PTR __imp_PyObject_GetAttr
	mov	rbx, rax
$LN1132@pyx_f_8rsr@5:
	test	rbx, rbx
	jne	SHORT $LN272@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4112		; 00001010H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN123@pyx_f_8rsr@5
$LN272@pyx_f_8rsr@5:

; 4113 :   __Pyx_GOTREF(__pyx_t_2);
; 4114 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN271@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN271@pyx_f_8rsr@5:

; 4115 :   __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_num_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	ecx, r14d
	mov	DWORD PTR $T46223[rsp], r14d
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN267@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4115		; 00001013H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN267@pyx_f_8rsr@5:

; 4116 :   __Pyx_GOTREF(__pyx_t_5);
; 4117 :   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	ecx, 1
	call	QWORD PTR __imp_PyTuple_New
	mov	r12, rax
	test	rax, rax
	jne	SHORT $LN266@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4117		; 00001015H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN266@pyx_f_8rsr@5:

; 4118 :   __Pyx_GOTREF(__pyx_t_3);
; 4119 :   __Pyx_GIVEREF(__pyx_t_5);
; 4120 :   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

	mov	QWORD PTR [rax+24], rdi

; 4121 :   __pyx_t_5 = 0;
; 4122 :   __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)

	call	QWORD PTR __imp_PyDict_New
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LN265@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4122		; 0000101aH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN265@pyx_f_8rsr@5:

; 4123 :   __Pyx_GOTREF(__pyx_t_5);
; 4124 :   __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	rcx, QWORD PTR __pyx_n_s_DTYPE
	call	__Pyx_GetModuleGlobalName
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN264@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4124		; 0000101cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN264@pyx_f_8rsr@5:

; 4125 :   __Pyx_GOTREF(__pyx_t_4);
; 4126 :   if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_n_s_dtype
	mov	r8, rax
	mov	rcx, rdi
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN262@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4126		; 0000101eH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN153@pyx_f_8rsr@5
$LN262@pyx_f_8rsr@5:

; 4127 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN261@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN261@pyx_f_8rsr@5:

; 4128 :   if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_n_s_C
	mov	rdx, QWORD PTR __pyx_n_s_order
	mov	rcx, rdi
	mov	rsi, rbp
	call	QWORD PTR __imp_PyDict_SetItem
	test	eax, eax
	jns	SHORT $LN257@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4128		; 00001020H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN153@pyx_f_8rsr@5
$LN257@pyx_f_8rsr@5:

; 4129 :   __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)

	mov	r8, rdi
	mov	rdx, r12
	mov	rcx, rbx
	call	__Pyx_PyObject_Call
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN255@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4129		; 00001021H
	mov	QWORD PTR __pyx_filename, rax
$LN153@pyx_f_8rsr@5:

; 4843 :   __Pyx_XDECREF(__pyx_t_2);

	test	rbx, rbx
	je	SHORT $LN143@pyx_f_8rsr@5
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN143@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN143@pyx_f_8rsr@5:

; 4844 :   __Pyx_XDECREF(__pyx_t_3);

	test	r12, r12
	je	$LN133@pyx_f_8rsr@5
	add	QWORD PTR [r12], -1
	jne	$LN133@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
	jmp	$LN133@pyx_f_8rsr@5
$LN255@pyx_f_8rsr@5:

; 4130 :   __Pyx_GOTREF(__pyx_t_4);
; 4131 :   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN254@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN254@pyx_f_8rsr@5:

; 4132 :   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

	add	QWORD PTR [r12], -1
	jne	SHORT $LN249@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN249@pyx_f_8rsr@5:

; 4133 :   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN244@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN244@pyx_f_8rsr@5:
	mov	rdi, rbp

; 4134 :   if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 160, __pyx_L1_error)

	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	je	$LN838@pyx_f_8rsr@5
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	mov	rcx, rsi
	call	__Pyx_TypeTest
	test	eax, eax
	jne	SHORT $LN240@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4134		; 00001026H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN240@pyx_f_8rsr@5:

; 4135 :   __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
; 4136 :   {
; 4137 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4138 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_noise.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	cmp	rsi, QWORD PTR __imp__Py_NoneStruct
	je	$LN838@pyx_f_8rsr@5
	lea	rax, QWORD PTR __pyx_stack$16053[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_noise$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 29
	mov	rdx, rsi
	mov	DWORD PTR [rsp+40], ebp
	mov	DWORD PTR [rsp+32], 1
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN1297@pyx_f_8rsr@5

; 4139 :       __pyx_v_noise = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf = NULL;

	mov	rbx, QWORD PTR __imp__Py_NoneStruct

; 4140 :       __PYX_ERR(0, 160, __pyx_L1_error)

	mov	DWORD PTR __pyx_lineno, 160		; 000000a0H
	mov	DWORD PTR __pyx_clineno, 4140		; 0000102cH
	inc	QWORD PTR [rbx]
	mov	rax, QWORD PTR __pyx_f
	mov	QWORD PTR __pyx_v_noise$1$[rsp], rbx
	mov	QWORD PTR __pyx_filename, rax
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+8], rbp
	jmp	$LN133@pyx_f_8rsr@5
$LN1297@pyx_f_8rsr@5:
	mov	r15, QWORD PTR __pyx_pybuffer_noise$[rsp+64]
	jmp	SHORT $LN239@pyx_f_8rsr@5
$LN838@pyx_f_8rsr@5:

; 4135 :   __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
; 4136 :   {
; 4137 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 4138 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_noise.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

	lea	rax, OFFSET FLAT:__Pyx_minusones
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+8], rbp
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+16], rbp
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+64], r15
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+56], r15
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+72], rax
$LN239@pyx_f_8rsr@5:

; 4141 :     } else {__pyx_pybuffernd_noise.diminfo[0].strides = __pyx_pybuffernd_noise.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_noise.diminfo[0].shape = __pyx_pybuffernd_noise.rcbuffer->pybuffer.shape[0];

	mov	rax, QWORD PTR [r15]

; 4142 :     }
; 4143 :   }
; 4144 :   __pyx_t_16 = 0;
; 4145 :   __pyx_v_noise = ((PyArrayObject *)__pyx_t_4);
; 4146 :   __pyx_t_4 = 0;
; 4147 : 
; 4148 :   /* "rsrpsinr.pyx":161
; 4149 :  *         np.ndarray[DTYPE_t, ndim=1] sinr = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4150 :  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4151 :  *     bIndex[:] = -1             # <<<<<<<<<<<<<<
; 4152 :  *     noise[:] = pow(10., NOISE/10.0)
; 4153 :  * 
; 4154 :  */
; 4155 :   if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_bIndex), __pyx_slice_, __pyx_int_neg_1) < 0)) __PYX_ERR(0, 161, __pyx_L1_error)

	mov	r8, QWORD PTR __pyx_int_neg_1
	mov	rdx, QWORD PTR __pyx_slice_
	mov	rbx, rsi
	mov	rcx, r13
	mov	QWORD PTR __pyx_pybuffernd_noise$1$[rsp], rax
	mov	QWORD PTR __pyx_v_noise$1$[rsp], rbx
	call	QWORD PTR __imp_PyObject_SetItem
	test	eax, eax
	jns	SHORT $LN237@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 161		; 000000a1H
	mov	DWORD PTR __pyx_clineno, 4155		; 0000103bH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN113@pyx_f_8rsr@5
$LN237@pyx_f_8rsr@5:

; 4156 : 
; 4157 :   /* "rsrpsinr.pyx":162
; 4158 :  *         np.ndarray[DTYPE_t, ndim=1] noise = np.zeros(num_samples, dtype=DTYPE, order='C')
; 4159 :  *     bIndex[:] = -1
; 4160 :  *     noise[:] = pow(10., NOISE/10.0)             # <<<<<<<<<<<<<<
; 4161 :  * 
; 4162 :  *     cdef:
; 4163 :  */
; 4164 :   __pyx_t_4 = PyFloat_FromDouble(pow(10., (__pyx_v_NOISE / 10.0))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)

	movsdx	xmm14, QWORD PTR __real@4024000000000000
	movapd	xmm0, xmm14
	divsd	xmm6, xmm14
	movapd	xmm1, xmm6
	call	pow
	call	QWORD PTR __imp_PyFloat_FromDouble
	mov	rsi, rax
	test	rax, rax
	jne	SHORT $LN236@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 4164		; 00001044H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN236@pyx_f_8rsr@5:

; 4165 :   __Pyx_GOTREF(__pyx_t_4);
; 4166 :   if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_noise), __pyx_slice__2, __pyx_t_4) < 0)) __PYX_ERR(0, 162, __pyx_L1_error)

	mov	rdx, QWORD PTR __pyx_slice__2
	mov	r8, rax
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_SetItem
	test	eax, eax
	jns	SHORT $LN234@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 162		; 000000a2H
	mov	DWORD PTR __pyx_clineno, 4166		; 00001046H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN234@pyx_f_8rsr@5:

; 4167 :   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN233@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN233@pyx_f_8rsr@5:

; 4168 : 
; 4169 :   /* "rsrpsinr.pyx":165
; 4170 :  * 
; 4171 :  *     cdef:
; 4172 :  *         unsigned int covered_s_count = 0             # <<<<<<<<<<<<<<
; 4173 :  *         unsigned int si, bi
; 4174 :  *         DTYPE_t xs, ys, es, temp
; 4175 :  */
; 4176 :   __pyx_v_covered_s_count = 0;

	mov	eax, ebp

; 4177 : 
; 4178 :   /* "rsrpsinr.pyx":171
; 4179 :  *         DTYPE_t d, h_diff, tilt_s, beta, azimuth_s, alpha, g, pathloss, v, pow_v
; 4180 :  * 
; 4181 :  *     for si in range(num_samples):             # <<<<<<<<<<<<<<
; 4182 :  *         xs = S[si, 0]
; 4183 :  *         ys = S[si, 1]
; 4184 :  */
; 4185 :   __pyx_t_17 = __pyx_v_num_samples;
; 4186 :   for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {

	mov	edx, ebp
	mov	DWORD PTR __pyx_v_covered_s_count$1$[rsp], eax
	mov	DWORD PTR __pyx_t_18$1$[rsp], edx
	test	r14d, r14d
	je	$LN165@pyx_f_8rsr@5
	movsdx	xmm13, QWORD PTR __real@408f400000000000
	movsdx	xmm12, QWORD PTR __real@3ff0000000000000
	mov	rcx, rbp
	mov	QWORD PTR tv7997[rsp], rbp
	mov	QWORD PTR tv7996[rsp], rbp
	mov	QWORD PTR tv7995[rsp], rbp
	mov	QWORD PTR tv7988[rsp], rcx
	mov	r14, rbp
	mov	QWORD PTR tv7993[rsp], rbp
	mov	QWORD PTR tv7992[rsp], rbp
	mov	QWORD PTR tv7991[rsp], rbp
	mov	QWORD PTR tv7990[rsp], rbp
	mov	QWORD PTR tv7989[rsp], rbp
	npad	5
$LL229@pyx_f_8rsr@5:

; 4187 :     __pyx_v_si = __pyx_t_18;
; 4188 : 
; 4189 :     /* "rsrpsinr.pyx":172
; 4190 :  * 
; 4191 :  *     for si in range(num_samples):
; 4192 :  *         xs = S[si, 0]             # <<<<<<<<<<<<<<
; 4193 :  *         ys = S[si, 1]
; 4194 :  *         es = S[si, 2]
; 4195 :  */
; 4196 :     __pyx_t_19 = __pyx_v_si;
; 4197 :     __pyx_t_20 = 0;
; 4198 :     __pyx_v_xs = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_S.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_S.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_S.diminfo[1].strides));

	mov	rax, QWORD PTR __pyx_pybuffer_S$[rsp+8]

; 4199 : 
; 4200 :     /* "rsrpsinr.pyx":173
; 4201 :  *     for si in range(num_samples):
; 4202 :  *         xs = S[si, 0]
; 4203 :  *         ys = S[si, 1]             # <<<<<<<<<<<<<<
; 4204 :  *         es = S[si, 2]
; 4205 :  *         sblist = B_of_S[si]
; 4206 :  */
; 4207 :     __pyx_t_21 = __pyx_v_si;
; 4208 :     __pyx_t_22 = 1;
; 4209 :     __pyx_v_ys = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_S.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_S.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_S.diminfo[1].strides));
; 4210 : 
; 4211 :     /* "rsrpsinr.pyx":174
; 4212 :  *         xs = S[si, 0]
; 4213 :  *         ys = S[si, 1]
; 4214 :  *         es = S[si, 2]             # <<<<<<<<<<<<<<
; 4215 :  *         sblist = B_of_S[si]
; 4216 :  *         for bi in sblist:
; 4217 :  */
; 4218 :     __pyx_t_23 = __pyx_v_si;
; 4219 :     __pyx_t_24 = 2;
; 4220 :     __pyx_v_es = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_S.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_S.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_S.diminfo[1].strides));
; 4221 : 
; 4222 :     /* "rsrpsinr.pyx":175
; 4223 :  *         ys = S[si, 1]
; 4224 :  *         es = S[si, 2]
; 4225 :  *         sblist = B_of_S[si]             # <<<<<<<<<<<<<<
; 4226 :  *         for bi in sblist:
; 4227 :  *         #for bi in range(num_bases):
; 4228 :  */
; 4229 :     __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_B_of_S), __pyx_v_si, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)

	mov	rsi, QWORD PTR __pyx_v_B_of_S$[rsp]
	add	rcx, rax
	mov	rax, QWORD PTR __pyx_pybuffernd_S$2$[rsp]
	movsdx	xmm15, QWORD PTR [rcx]
	movsdx	xmm10, QWORD PTR [rcx+rax]
	movsdx	xmm0, QWORD PTR [rcx+rax*2]
	mov	rax, QWORD PTR [rsi+8]
	mov	ecx, edx
	movsdx	QWORD PTR __pyx_v_ys$1$[rsp], xmm10
	movsdx	QWORD PTR __pyx_v_es$1$[rsp], xmm0
	cmp	rax, QWORD PTR __imp_PyList_Type
	jne	SHORT $LN1161@pyx_f_8rsr@5
	test	rcx, rcx
	mov	eax, ebp
	setns	al
	or	eax, 1
	jne	SHORT $LN1165@pyx_f_8rsr@5
	add	rcx, QWORD PTR [rsi+16]
$LN1165@pyx_f_8rsr@5:
	mov	rax, QWORD PTR [rsi+24]
	mov	rsi, QWORD PTR [rax+rcx*8]
	inc	QWORD PTR [rsi]
	jmp	SHORT $LN1171@pyx_f_8rsr@5
$LN1161@pyx_f_8rsr@5:
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	jne	SHORT $LN1156@pyx_f_8rsr@5
	test	rcx, rcx
	mov	eax, ebp
	setns	al
	or	eax, 1
	jne	SHORT $LN1167@pyx_f_8rsr@5
	add	rcx, QWORD PTR [rsi+16]
$LN1167@pyx_f_8rsr@5:
	mov	rsi, QWORD PTR [rsi+rcx*8+24]
	inc	QWORD PTR [rsi]
	jmp	SHORT $LN1171@pyx_f_8rsr@5
$LN1156@pyx_f_8rsr@5:
	mov	rdx, QWORD PTR [rax+104]
	test	rdx, rdx
	je	SHORT $LN1152@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdx+24]
	test	rax, rax
	je	SHORT $LN1152@pyx_f_8rsr@5
	mov	rdx, rcx
	mov	rcx, rsi
	call	rax
	mov	rsi, rax
	jmp	SHORT $LN1171@pyx_f_8rsr@5
$LN1152@pyx_f_8rsr@5:
	call	QWORD PTR __imp_PyInt_FromSsize_t
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LN1173@pyx_f_8rsr@5
	mov	rsi, rbp
	jmp	SHORT $LN1171@pyx_f_8rsr@5
$LN1173@pyx_f_8rsr@5:
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_PyObject_GetItem
	add	QWORD PTR [rbx], -1
	mov	rsi, rax
	jne	SHORT $LN1171@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN1171@pyx_f_8rsr@5:
	test	rsi, rsi
	je	$LN1277@pyx_f_8rsr@5

; 4230 :     __Pyx_GOTREF(__pyx_t_4);
; 4231 :     __Pyx_XDECREF_SET(__pyx_v_sblist, __pyx_t_4);

	mov	rcx, QWORD PTR __pyx_v_sblist$1$[rsp]
	mov	QWORD PTR __pyx_v_sblist$1$[rsp], rsi
	test	rcx, rcx
	je	SHORT $LN215@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN215@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN215@pyx_f_8rsr@5:

; 4232 :     __pyx_t_4 = 0;
; 4233 : 
; 4234 :     /* "rsrpsinr.pyx":176
; 4235 :  *         es = S[si, 2]
; 4236 :  *         sblist = B_of_S[si]
; 4237 :  *         for bi in sblist:             # <<<<<<<<<<<<<<
; 4238 :  *         #for bi in range(num_bases):
; 4239 :  *             xb = B[bi,0]
; 4240 :  */
; 4241 :     if (likely(PyList_CheckExact(__pyx_v_sblist)) || PyTuple_CheckExact(__pyx_v_sblist)) {

	mov	rax, QWORD PTR [rsi+8]
	cmp	rax, QWORD PTR __imp_PyList_Type
	je	SHORT $LN211@pyx_f_8rsr@5
	cmp	rax, QWORD PTR __imp_PyTuple_Type
	je	SHORT $LN211@pyx_f_8rsr@5

; 4244 :     } else {
; 4245 :       __pyx_t_25 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_sblist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rcx, rsi
	or	rbx, -1
	call	QWORD PTR __imp_PyObject_GetIter
	mov	rsi, rax
	test	rax, rax
	je	$LN1278@pyx_f_8rsr@5

; 4246 :       __Pyx_GOTREF(__pyx_t_4);
; 4247 :       __pyx_t_26 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rax, QWORD PTR [rax+8]
	mov	r15, QWORD PTR [rax+224]
	test	r15, r15
	jne	SHORT $LN1285@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 176		; 000000b0H
	mov	DWORD PTR __pyx_clineno, 4247		; 00001097H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN211@pyx_f_8rsr@5:

; 4242 :       __pyx_t_4 = __pyx_v_sblist; __Pyx_INCREF(__pyx_t_4); __pyx_t_25 = 0;

	inc	QWORD PTR [rsi]
	mov	rbx, rbp

; 4243 :       __pyx_t_26 = NULL;

	mov	r15, rbp
$LN1285@pyx_f_8rsr@5:

; 4261 :           #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 4262 :           __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_5); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)

	lea	r13, QWORD PTR [rsi+rbx*8+24]
	npad	4
$LL207@pyx_f_8rsr@5:

; 4248 :     }
; 4249 :     for (;;) {
; 4250 :       if (likely(!__pyx_t_26)) {

	test	r15, r15
	jne	SHORT $LN205@pyx_f_8rsr@5

; 4251 :         if (likely(PyList_CheckExact(__pyx_t_4))) {

	mov	rax, QWORD PTR __imp_PyList_Type
	cmp	QWORD PTR [rsi+8], rax
	jne	SHORT $LN204@pyx_f_8rsr@5

; 4252 :           if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_4)) break;

	cmp	rbx, QWORD PTR [rsi+16]
	jge	$LN180@pyx_f_8rsr@5

; 4253 :           #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 4254 :           __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_5); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rax, QWORD PTR [rsi+24]
	inc	rbx
	mov	rdi, QWORD PTR [rax+rbx*8-8]
	inc	QWORD PTR [rdi]
	add	r13, 8

; 4255 :           #else
; 4256 :           __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
; 4257 :           __Pyx_GOTREF(__pyx_t_5);
; 4258 :           #endif
; 4259 :         } else {

	jmp	SHORT $LN197@pyx_f_8rsr@5
$LN204@pyx_f_8rsr@5:

; 4260 :           if (__pyx_t_25 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

	cmp	rbx, QWORD PTR [rsi+16]
	jge	$LN180@pyx_f_8rsr@5

; 4261 :           #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
; 4262 :           __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_5); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rdi, QWORD PTR [r13]
	inc	rbx
	inc	QWORD PTR [rdi]
	add	r13, 8

; 4263 :           #else
; 4264 :           __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
; 4265 :           __Pyx_GOTREF(__pyx_t_5);
; 4266 :           #endif
; 4267 :         }
; 4268 :       } else {

	jmp	SHORT $LN197@pyx_f_8rsr@5
$LN205@pyx_f_8rsr@5:

; 4269 :         __pyx_t_5 = __pyx_t_26(__pyx_t_4);

	mov	rcx, rsi
	call	r15
	mov	rdi, rax

; 4270 :         if (unlikely(!__pyx_t_5)) {

	test	rax, rax
	je	$LN1275@pyx_f_8rsr@5
$LN197@pyx_f_8rsr@5:

; 4275 :           }
; 4276 :           break;
; 4277 :         }
; 4278 :         __Pyx_GOTREF(__pyx_t_5);
; 4279 :       }
; 4280 :       __pyx_t_27 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_27 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rcx, rdi
	call	__Pyx_PyInt_As_unsigned_int
	mov	r12d, eax
	cmp	eax, -1					; ffffffffH
	jne	SHORT $LN192@pyx_f_8rsr@5
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	jne	$LN1276@pyx_f_8rsr@5
$LN192@pyx_f_8rsr@5:

; 4281 :       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

	add	QWORD PTR [rdi], -1
	jne	SHORT $LN191@pyx_f_8rsr@5
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN191@pyx_f_8rsr@5:

; 4282 :       __pyx_v_bi = __pyx_t_27;
; 4283 : 
; 4284 :       /* "rsrpsinr.pyx":178
; 4285 :  *         for bi in sblist:
; 4286 :  *         #for bi in range(num_bases):
; 4287 :  *             xb = B[bi,0]             # <<<<<<<<<<<<<<
; 4288 :  *             yb = B[bi,1]
; 4289 :  *             eb = B[bi,2]
; 4290 :  */
; 4291 :       __pyx_t_28 = __pyx_v_bi;
; 4292 :       __pyx_t_29 = 0;
; 4293 :       __pyx_v_xb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_B.diminfo[1].strides));
; 4294 : 
; 4295 :       /* "rsrpsinr.pyx":179
; 4296 :  *         #for bi in range(num_bases):
; 4297 :  *             xb = B[bi,0]
; 4298 :  *             yb = B[bi,1]             # <<<<<<<<<<<<<<
; 4299 :  *             eb = B[bi,2]
; 4300 :  *             hb = B[bi,3]
; 4301 :  */
; 4302 :       __pyx_t_30 = __pyx_v_bi;
; 4303 :       __pyx_t_31 = 1;
; 4304 :       __pyx_v_yb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_31, __pyx_pybuffernd_B.diminfo[1].strides));

	mov	rcx, QWORD PTR __pyx_pybuffernd_B$2$[rsp]
	mov	rax, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	mov	rdx, r12
	imul	rdx, QWORD PTR __pyx_pybuffernd_B$1$[rsp]
	add	rdx, rax
	mov	rdi, rbp

; 4305 : 
; 4306 :       /* "rsrpsinr.pyx":180
; 4307 :  *             xb = B[bi,0]
; 4308 :  *             yb = B[bi,1]
; 4309 :  *             eb = B[bi,2]             # <<<<<<<<<<<<<<
; 4310 :  *             hb = B[bi,3]
; 4311 :  *             ab = B[bi,4]
; 4312 :  */
; 4313 :       __pyx_t_32 = __pyx_v_bi;
; 4314 :       __pyx_t_33 = 2;
; 4315 :       __pyx_v_eb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_33, __pyx_pybuffernd_B.diminfo[1].strides));
; 4316 : 
; 4317 :       /* "rsrpsinr.pyx":181
; 4318 :  *             yb = B[bi,1]
; 4319 :  *             eb = B[bi,2]
; 4320 :  *             hb = B[bi,3]             # <<<<<<<<<<<<<<
; 4321 :  *             ab = B[bi,4]
; 4322 :  *             tb = B[bi,5]
; 4323 :  */
; 4324 :       __pyx_t_34 = __pyx_v_bi;
; 4325 :       __pyx_t_35 = 3;
; 4326 :       __pyx_v_hb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_34, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_35, __pyx_pybuffernd_B.diminfo[1].strides));

	lea	rax, QWORD PTR [rdx+rcx*2]
	movsdx	xmm6, QWORD PTR [rdx]
	movsdx	xmm7, QWORD PTR [rdx+rcx]
	movsdx	xmm9, QWORD PTR [rdx+rcx*2]
	movsdx	xmm8, QWORD PTR [rcx+rax]

; 4327 : 
; 4328 :       /* "rsrpsinr.pyx":182
; 4329 :  *             eb = B[bi,2]
; 4330 :  *             hb = B[bi,3]
; 4331 :  *             ab = B[bi,4]             # <<<<<<<<<<<<<<
; 4332 :  *             tb = B[bi,5]
; 4333 :  *             pb = B[bi,6]
; 4334 :  */
; 4335 :       __pyx_t_36 = __pyx_v_bi;
; 4336 :       __pyx_t_37 = 4;
; 4337 :       __pyx_v_ab = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_36, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_37, __pyx_pybuffernd_B.diminfo[1].strides));
; 4338 : 
; 4339 :       /* "rsrpsinr.pyx":183
; 4340 :  *             hb = B[bi,3]
; 4341 :  *             ab = B[bi,4]
; 4342 :  *             tb = B[bi,5]             # <<<<<<<<<<<<<<
; 4343 :  *             pb = B[bi,6]
; 4344 :  *             ## get rssi
; 4345 :  */
; 4346 :       __pyx_t_38 = __pyx_v_bi;
; 4347 :       __pyx_t_39 = 5;
; 4348 :       __pyx_v_tb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_39, __pyx_pybuffernd_B.diminfo[1].strides));
; 4349 : 
; 4350 :       /* "rsrpsinr.pyx":184
; 4351 :  *             ab = B[bi,4]
; 4352 :  *             tb = B[bi,5]
; 4353 :  *             pb = B[bi,6]             # <<<<<<<<<<<<<<
; 4354 :  *             ## get rssi
; 4355 :  *             d = sqrt((xb-xs)*(xb-xs)+(yb-ys)*(yb-ys)) # in km
; 4356 :  */
; 4357 :       __pyx_t_40 = __pyx_v_bi;
; 4358 :       __pyx_t_41 = 6;
; 4359 :       __pyx_v_pb = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_B.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_B.diminfo[0].strides, __pyx_t_41, __pyx_pybuffernd_B.diminfo[1].strides));
; 4360 : 
; 4361 :       /* "rsrpsinr.pyx":186
; 4362 :  *             pb = B[bi,6]
; 4363 :  *             ## get rssi
; 4364 :  *             d = sqrt((xb-xs)*(xb-xs)+(yb-ys)*(yb-ys)) # in km             # <<<<<<<<<<<<<<
; 4365 :  *             dis[si, bi] = d
; 4366 :  *             h_diff = hb + eb - ( TERM_HEIGHT + es ) #
; 4367 :  */
; 4368 :       __pyx_v_d = sqrt((((__pyx_v_xb - __pyx_v_xs) * (__pyx_v_xb - __pyx_v_xs)) + ((__pyx_v_yb - __pyx_v_ys) * (__pyx_v_yb - __pyx_v_ys))));

	movapd	xmm1, xmm7
	movapd	xmm0, xmm6
	lea	rax, QWORD PTR [rcx+rcx*2]
	movsdx	xmm11, QWORD PTR [rdx+rax*2]
	subsd	xmm0, xmm15
	subsd	xmm1, xmm10
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	addsd	xmm0, xmm1
	call	sqrt

; 4369 : 
; 4370 :       /* "rsrpsinr.pyx":187
; 4371 :  *             ## get rssi
; 4372 :  *             d = sqrt((xb-xs)*(xb-xs)+(yb-ys)*(yb-ys)) # in km
; 4373 :  *             dis[si, bi] = d             # <<<<<<<<<<<<<<
; 4374 :  *             h_diff = hb + eb - ( TERM_HEIGHT + es ) #
; 4375 :  *             tilt_s = atan( h_diff / (d*1E3) )
; 4376 :  */
; 4377 :       __pyx_t_42 = __pyx_v_si;
; 4378 :       __pyx_t_43 = __pyx_v_bi;
; 4379 :       *__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_dis.rcbuffer->pybuffer.buf, __pyx_t_42, __pyx_pybuffernd_dis.diminfo[0].strides, __pyx_t_43, __pyx_pybuffernd_dis.diminfo[1].strides) = __pyx_v_d;

	mov	rax, QWORD PTR __pyx_pybuffer_dis$[rsp+8]

; 4380 : 
; 4381 :       /* "rsrpsinr.pyx":188
; 4382 :  *             d = sqrt((xb-xs)*(xb-xs)+(yb-ys)*(yb-ys)) # in km
; 4383 :  *             dis[si, bi] = d
; 4384 :  *             h_diff = hb + eb - ( TERM_HEIGHT + es ) #             # <<<<<<<<<<<<<<
; 4385 :  *             tilt_s = atan( h_diff / (d*1E3) )
; 4386 :  *             azimuth_s = atan2( xs-xb, ys-yb)
; 4387 :  */
; 4388 :       __pyx_v_h_diff = ((__pyx_v_hb + __pyx_v_eb) - (__pyx_v_TERM_HEIGHT + __pyx_v_es));
; 4389 : 
; 4390 :       /* "rsrpsinr.pyx":189
; 4391 :  *             dis[si, bi] = d
; 4392 :  *             h_diff = hb + eb - ( TERM_HEIGHT + es ) #
; 4393 :  *             tilt_s = atan( h_diff / (d*1E3) )             # <<<<<<<<<<<<<<
; 4394 :  *             azimuth_s = atan2( xs-xb, ys-yb)
; 4395 :  * 
; 4396 :  */
; 4397 :       __pyx_v_tilt_s = atan((__pyx_v_h_diff / (__pyx_v_d * 1E3)));
; 4398 : 
; 4399 :       /* "rsrpsinr.pyx":190
; 4400 :  *             h_diff = hb + eb - ( TERM_HEIGHT + es ) #
; 4401 :  *             tilt_s = atan( h_diff / (d*1E3) )
; 4402 :  *             azimuth_s = atan2( xs-xb, ys-yb)             # <<<<<<<<<<<<<<
; 4403 :  * 
; 4404 :  *             beta = tb - tilt_s
; 4405 :  */
; 4406 :       __pyx_v_azimuth_s = atan2((__pyx_v_xs - __pyx_v_xb), (__pyx_v_ys - __pyx_v_yb));

	movsdx	xmm1, QWORD PTR __pyx_v_ys$1$[rsp]
	mov	rcx, r12
	subsd	xmm1, xmm7
	movapd	xmm10, xmm0
	imul	rcx, QWORD PTR __pyx_pybuffernd_dis$2$[rsp]
	add	rcx, QWORD PTR tv7989[rsp]
	movsdx	QWORD PTR [rcx+rax], xmm0
	movapd	xmm0, xmm15
	subsd	xmm0, xmm6
	call	atan2

; 4407 : 
; 4408 :       /* "rsrpsinr.pyx":192
; 4409 :  *             azimuth_s = atan2( xs-xb, ys-yb)
; 4410 :  * 
; 4411 :  *             beta = tb - tilt_s             # <<<<<<<<<<<<<<
; 4412 :  *             alpha =  azimuth_s - ab
; 4413 :  *             Alpha[si, bi] = azimuth_s
; 4414 :  */
; 4415 :       __pyx_v_beta = (__pyx_v_tb - __pyx_v_tilt_s);
; 4416 : 
; 4417 :       /* "rsrpsinr.pyx":193
; 4418 :  * 
; 4419 :  *             beta = tb - tilt_s
; 4420 :  *             alpha =  azimuth_s - ab             # <<<<<<<<<<<<<<
; 4421 :  *             Alpha[si, bi] = azimuth_s
; 4422 :  *             Beta[si, bi] = tilt_s
; 4423 :  */
; 4424 :       __pyx_v_alpha = (__pyx_v_azimuth_s - __pyx_v_ab);
; 4425 : 
; 4426 :       /* "rsrpsinr.pyx":194
; 4427 :  *             beta = tb - tilt_s
; 4428 :  *             alpha =  azimuth_s - ab
; 4429 :  *             Alpha[si, bi] = azimuth_s             # <<<<<<<<<<<<<<
; 4430 :  *             Beta[si, bi] = tilt_s
; 4431 :  *             #g = cgain(alpha, beta)
; 4432 :  */
; 4433 :       __pyx_t_44 = __pyx_v_si;
; 4434 :       __pyx_t_45 = __pyx_v_bi;
; 4435 :       *__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_Alpha.rcbuffer->pybuffer.buf, __pyx_t_44, __pyx_pybuffernd_Alpha.diminfo[0].strides, __pyx_t_45, __pyx_pybuffernd_Alpha.diminfo[1].strides) = __pyx_v_azimuth_s;

	mov	rax, QWORD PTR __pyx_pybuffer_Alpha$[rsp+8]
	movsdx	xmm6, QWORD PTR __pyx_v_es$1$[rsp]
	addsd	xmm6, QWORD PTR __pyx_v_TERM_HEIGHT$1$[rsp]
	movapd	xmm1, xmm10
	mov	rcx, r12
	mulsd	xmm1, xmm13
	imul	rcx, QWORD PTR __pyx_pybuffernd_Alpha$2$[rsp]
	add	rcx, QWORD PTR tv7990[rsp]
	movsdx	QWORD PTR [rcx+rax], xmm0
	movapd	xmm0, xmm8
	addsd	xmm0, xmm9
	subsd	xmm0, xmm6
	divsd	xmm0, xmm1
	call	atan

; 4436 : 
; 4437 :       /* "rsrpsinr.pyx":195
; 4438 :  *             alpha =  azimuth_s - ab
; 4439 :  *             Alpha[si, bi] = azimuth_s
; 4440 :  *             Beta[si, bi] = tilt_s             # <<<<<<<<<<<<<<
; 4441 :  *             #g = cgain(alpha, beta)
; 4442 :  * 
; 4443 :  */
; 4444 :       __pyx_t_46 = __pyx_v_si;
; 4445 :       __pyx_t_47 = __pyx_v_bi;
; 4446 :       *__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_Beta.rcbuffer->pybuffer.buf, __pyx_t_46, __pyx_pybuffernd_Beta.diminfo[0].strides, __pyx_t_47, __pyx_pybuffernd_Beta.diminfo[1].strides) = __pyx_v_tilt_s;

	mov	rax, QWORD PTR __pyx_pybuffer_Beta$[rsp+8]
	mov	rcx, r12
	imul	rcx, QWORD PTR __pyx_pybuffernd_Beta$2$[rsp]
	add	rcx, QWORD PTR tv7991[rsp]
	movsdx	QWORD PTR [rcx+rax], xmm0

; 4447 : 
; 4448 :       /* "rsrpsinr.pyx":198
; 4449 :  *             #g = cgain(alpha, beta)
; 4450 :  * 
; 4451 :  *             if d < 0.030:             # <<<<<<<<<<<<<<
; 4452 :  *                 pathloss = 70
; 4453 :  *             elif d > 1.0:
; 4454 :  */
; 4455 :       __pyx_t_48 = ((__pyx_v_d < 0.030) != 0);

	movsdx	xmm0, QWORD PTR __real@3f9eb851eb851eb8
	comisd	xmm0, xmm10
	jbe	SHORT $LN187@pyx_f_8rsr@5

; 4456 :       if (__pyx_t_48) {
; 4457 : 
; 4458 :         /* "rsrpsinr.pyx":199
; 4459 :  * 
; 4460 :  *             if d < 0.030:
; 4461 :  *                 pathloss = 70             # <<<<<<<<<<<<<<
; 4462 :  *             elif d > 1.0:
; 4463 :  *                 pathloss = 1000
; 4464 :  */
; 4465 :         __pyx_v_pathloss = 70.0;

	movsdx	xmm1, QWORD PTR __real@4051800000000000

; 4466 : 
; 4467 :         /* "rsrpsinr.pyx":198
; 4468 :  *             #g = cgain(alpha, beta)
; 4469 :  * 
; 4470 :  *             if d < 0.030:             # <<<<<<<<<<<<<<
; 4471 :  *                 pathloss = 70
; 4472 :  *             elif d > 1.0:
; 4473 :  */
; 4474 :         goto __pyx_L7;

	jmp	$__pyx_L7$16205
$LN187@pyx_f_8rsr@5:

; 4475 :       }
; 4476 : 
; 4477 :       /* "rsrpsinr.pyx":200
; 4478 :  *             if d < 0.030:
; 4479 :  *                 pathloss = 70
; 4480 :  *             elif d > 1.0:             # <<<<<<<<<<<<<<
; 4481 :  *                 pathloss = 1000
; 4482 :  *             else:
; 4483 :  */
; 4484 :       __pyx_t_48 = ((__pyx_v_d > 1.0) != 0);

	comisd	xmm10, xmm12
	jbe	SHORT $LN186@pyx_f_8rsr@5

; 4485 :       if (__pyx_t_48) {
; 4486 : 
; 4487 :         /* "rsrpsinr.pyx":201
; 4488 :  *                 pathloss = 70
; 4489 :  *             elif d > 1.0:
; 4490 :  *                 pathloss = 1000             # <<<<<<<<<<<<<<
; 4491 :  *             else:
; 4492 :  *                 hm = TERM_HEIGHT + es - eb #+1.5m-
; 4493 :  */
; 4494 :         __pyx_v_pathloss = 1000.0;

	movapd	xmm1, xmm13

; 4495 : 
; 4496 :         /* "rsrpsinr.pyx":200
; 4497 :  *             if d < 0.030:
; 4498 :  *                 pathloss = 70
; 4499 :  *             elif d > 1.0:             # <<<<<<<<<<<<<<
; 4500 :  *                 pathloss = 1000
; 4501 :  *             else:
; 4502 :  */
; 4503 :         goto __pyx_L7;

	jmp	$__pyx_L7$16205
$LN186@pyx_f_8rsr@5:

; 4504 :       }
; 4505 : 
; 4506 :       /* "rsrpsinr.pyx":203
; 4507 :  *                 pathloss = 1000
; 4508 :  *             else:
; 4509 :  *                 hm = TERM_HEIGHT + es - eb #+1.5m-             # <<<<<<<<<<<<<<
; 4510 :  *                 if hb < hm: #hbhm
; 4511 :  *                     temp = hb
; 4512 :  */
; 4513 :       /*else*/ {
; 4514 :         __pyx_v_hm = ((__pyx_v_TERM_HEIGHT + __pyx_v_es) - __pyx_v_eb);

	subsd	xmm6, xmm9

; 4515 : 
; 4516 :         /* "rsrpsinr.pyx":204
; 4517 :  *             else:
; 4518 :  *                 hm = TERM_HEIGHT + es - eb #+1.5m-
; 4519 :  *                 if hb < hm: #hbhm             # <<<<<<<<<<<<<<
; 4520 :  *                     temp = hb
; 4521 :  *                     hb = hm
; 4522 :  */
; 4523 :         __pyx_t_48 = ((__pyx_v_hb < __pyx_v_hm) != 0);

	comisd	xmm6, xmm8
	jbe	SHORT $LN185@pyx_f_8rsr@5

; 4524 :         if (__pyx_t_48) {
; 4525 : 
; 4526 :           /* "rsrpsinr.pyx":205
; 4527 :  *                 hm = TERM_HEIGHT + es - eb #+1.5m-
; 4528 :  *                 if hb < hm: #hbhm
; 4529 :  *                     temp = hb             # <<<<<<<<<<<<<<
; 4530 :  *                     hb = hm
; 4531 :  *                     hm = temp
; 4532 :  */
; 4533 :           __pyx_v_temp = __pyx_v_hb;

	movapd	xmm0, xmm8

; 4534 : 
; 4535 :           /* "rsrpsinr.pyx":206
; 4536 :  *                 if hb < hm: #hbhm
; 4537 :  *                     temp = hb
; 4538 :  *                     hb = hm             # <<<<<<<<<<<<<<
; 4539 :  *                     hm = temp
; 4540 :  *                 if hm>10 or hm<1:
; 4541 :  */
; 4542 :           __pyx_v_hb = __pyx_v_hm;

	movapd	xmm8, xmm6

; 4543 : 
; 4544 :           /* "rsrpsinr.pyx":207
; 4545 :  *                     temp = hb
; 4546 :  *                     hb = hm
; 4547 :  *                     hm = temp             # <<<<<<<<<<<<<<
; 4548 :  *                 if hm>10 or hm<1:
; 4549 :  *                     hm = 1.5
; 4550 :  */
; 4551 :           __pyx_v_hm = __pyx_v_temp;

	movapd	xmm6, xmm0
$LN185@pyx_f_8rsr@5:

; 4552 : 
; 4553 :           /* "rsrpsinr.pyx":204
; 4554 :  *             else:
; 4555 :  *                 hm = TERM_HEIGHT + es - eb #+1.5m-
; 4556 :  *                 if hb < hm: #hbhm             # <<<<<<<<<<<<<<
; 4557 :  *                     temp = hb
; 4558 :  *                     hb = hm
; 4559 :  */
; 4560 :         }
; 4561 : 
; 4562 :         /* "rsrpsinr.pyx":208
; 4563 :  *                     hb = hm
; 4564 :  *                     hm = temp
; 4565 :  *                 if hm>10 or hm<1:             # <<<<<<<<<<<<<<
; 4566 :  *                     hm = 1.5
; 4567 :  *                 pathloss = loss(d, hb, hm, FREQ, C=3)
; 4568 :  */
; 4569 :         __pyx_t_49 = ((__pyx_v_hm > 10.0) != 0);

	comisd	xmm6, xmm14
	jbe	SHORT $LN846@pyx_f_8rsr@5
	mov	ecx, 1
	jmp	SHORT $LN847@pyx_f_8rsr@5
$LN846@pyx_f_8rsr@5:
	mov	ecx, ebp
$LN847@pyx_f_8rsr@5:
	test	ecx, ecx
	mov	eax, ebp
	setne	al

; 4570 :         if (!__pyx_t_49) {

	test	eax, eax
	jne	SHORT $__pyx_L10_bool_binop_done$16210

; 4571 :         } else {
; 4572 :           __pyx_t_48 = __pyx_t_49;
; 4573 :           goto __pyx_L10_bool_binop_done;
; 4574 :         }
; 4575 :         __pyx_t_49 = ((__pyx_v_hm < 1.0) != 0);

	comisd	xmm12, xmm6
	jbe	SHORT $LN848@pyx_f_8rsr@5
	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN849@pyx_f_8rsr@5
$LN848@pyx_f_8rsr@5:
	mov	ecx, ebp
$LN849@pyx_f_8rsr@5:
	test	ecx, ecx
	mov	eax, ebp
	setne	al
$__pyx_L10_bool_binop_done$16210:

; 4576 :         __pyx_t_48 = __pyx_t_49;
; 4577 :         __pyx_L10_bool_binop_done:;
; 4578 :         if (__pyx_t_48) {

	test	eax, eax
	je	SHORT $LN182@pyx_f_8rsr@5

; 4579 : 
; 4580 :           /* "rsrpsinr.pyx":209
; 4581 :  *                     hm = temp
; 4582 :  *                 if hm>10 or hm<1:
; 4583 :  *                     hm = 1.5             # <<<<<<<<<<<<<<
; 4584 :  *                 pathloss = loss(d, hb, hm, FREQ, C=3)
; 4585 :  *                 Pathloss[si, bi] = pathloss
; 4586 :  */
; 4587 :           __pyx_v_hm = 1.5;

	movsdx	xmm6, QWORD PTR __real@3ff8000000000000
$LN182@pyx_f_8rsr@5:

; 4588 : 
; 4589 :           /* "rsrpsinr.pyx":208
; 4590 :  *                     hb = hm
; 4591 :  *                     hm = temp
; 4592 :  *                 if hm>10 or hm<1:             # <<<<<<<<<<<<<<
; 4593 :  *                     hm = 1.5
; 4594 :  *                 pathloss = loss(d, hb, hm, FREQ, C=3)
; 4595 :  */
; 4596 :         }
; 4597 : 
; 4598 :         /* "rsrpsinr.pyx":210
; 4599 :  *                 if hm>10 or hm<1:
; 4600 :  *                     hm = 1.5
; 4601 :  *                 pathloss = loss(d, hb, hm, FREQ, C=3)             # <<<<<<<<<<<<<<
; 4602 :  *                 Pathloss[si, bi] = pathloss
; 4603 :  * 
; 4604 :  */
; 4605 :         __pyx_t_51.__pyx_n = 1;
; 4606 :         __pyx_t_51.C = 3.0;

	movsdx	xmm0, QWORD PTR __real@4008000000000000

; 4607 :         __pyx_t_50 = __pyx_f_8rsrpsinr_loss(__pyx_v_d, __pyx_v_hb, __pyx_v_hm, __pyx_v_FREQ, &__pyx_t_51); 

	movsdx	xmm3, QWORD PTR __pyx_v_FREQ$1$[rsp]
	lea	rax, QWORD PTR __pyx_t_51$[rsp]
	mov	DWORD PTR __pyx_t_51$[rsp], 1
	mov	QWORD PTR [rsp+32], rax
	movsdx	QWORD PTR __pyx_t_51$[rsp+8], xmm0
	movapd	xmm2, xmm6
	movapd	xmm1, xmm8
	movapd	xmm0, xmm10
	call	__pyx_f_8rsrpsinr_loss

; 4608 :         __pyx_v_pathloss = __pyx_t_50;
; 4609 : 
; 4610 :         /* "rsrpsinr.pyx":211
; 4611 :  *                     hm = 1.5
; 4612 :  *                 pathloss = loss(d, hb, hm, FREQ, C=3)
; 4613 :  *                 Pathloss[si, bi] = pathloss             # <<<<<<<<<<<<<<
; 4614 :  * 
; 4615 :  *             v = pb + g - pathloss
; 4616 :  */
; 4617 :         __pyx_t_52 = __pyx_v_si;
; 4618 :         __pyx_t_53 = __pyx_v_bi;
; 4619 :         *__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_Pathloss.rcbuffer->pybuffer.buf, __pyx_t_52, __pyx_pybuffernd_Pathloss.diminfo[0].strides, __pyx_t_53, __pyx_pybuffernd_Pathloss.diminfo[1].strides) = __pyx_v_pathloss;

	mov	rax, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8]
	mov	rcx, r12
	imul	rcx, QWORD PTR __pyx_pybuffernd_Pathloss$2$[rsp]
	add	rcx, QWORD PTR tv7992[rsp]
	movapd	xmm1, xmm0
	movsdx	QWORD PTR [rcx+rax], xmm0
$__pyx_L7$16205:

; 4620 :       }
; 4621 :       __pyx_L7:;
; 4622 : 
; 4623 :       /* "rsrpsinr.pyx":213
; 4624 :  *                 Pathloss[si, bi] = pathloss
; 4625 :  * 
; 4626 :  *             v = pb + g - pathloss             # <<<<<<<<<<<<<<
; 4627 :  *             pow_v = exp(v * log10_10)       #pow(10.0, v/10.0)
; 4628 :  *             if pow_v > rsrp[si]: # b is better
; 4629 :  */
; 4630 :       __pyx_v_v = ((__pyx_v_pb + __pyx_v_g) - __pyx_v_pathloss);

	movsdx	xmm0, QWORD PTR __pyx_v_g$[rsp]
	addsd	xmm0, xmm11
	subsd	xmm0, xmm1

; 4631 : 
; 4632 :       /* "rsrpsinr.pyx":214
; 4633 :  * 
; 4634 :  *             v = pb + g - pathloss
; 4635 :  *             pow_v = exp(v * log10_10)       #pow(10.0, v/10.0)             # <<<<<<<<<<<<<<
; 4636 :  *             if pow_v > rsrp[si]: # b is better
; 4637 :  *                 noise[si] += rsrp[si]
; 4638 :  */
; 4639 :       __pyx_v_pow_v = exp((__pyx_v_v * __pyx_v_8rsrpsinr_log10_10));

	mulsd	xmm0, QWORD PTR __pyx_v_8rsrpsinr_log10_10
	call	exp

; 4640 : 
; 4641 :       /* "rsrpsinr.pyx":215
; 4642 :  *             v = pb + g - pathloss
; 4643 :  *             pow_v = exp(v * log10_10)       #pow(10.0, v/10.0)
; 4644 :  *             if pow_v > rsrp[si]: # b is better             # <<<<<<<<<<<<<<
; 4645 :  *                 noise[si] += rsrp[si]
; 4646 :  *                 rsrp[si] = pow_v
; 4647 :  */
; 4648 :       __pyx_t_54 = __pyx_v_si;
; 4649 :       __pyx_t_48 = ((__pyx_v_pow_v > (*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_54, __pyx_pybuffernd_rsrp.diminfo[0].strides))) != 0);

	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	mov	rcx, QWORD PTR tv7996[rsp]
	movsdx	xmm1, QWORD PTR [rcx+rax]
	comisd	xmm0, xmm1
	jbe	SHORT $LN181@pyx_f_8rsr@5

; 4650 :       if (__pyx_t_48) {
; 4651 : 
; 4652 :         /* "rsrpsinr.pyx":216
; 4653 :  *             pow_v = exp(v * log10_10)       #pow(10.0, v/10.0)
; 4654 :  *             if pow_v > rsrp[si]: # b is better
; 4655 :  *                 noise[si] += rsrp[si]             # <<<<<<<<<<<<<<
; 4656 :  *                 rsrp[si] = pow_v
; 4657 :  *                 bIndex[si] = bi  # TODO:
; 4658 :  */
; 4659 :         __pyx_t_55 = __pyx_v_si;
; 4660 :         __pyx_t_56 = __pyx_v_si;
; 4661 :         *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf, __pyx_t_56, __pyx_pybuffernd_noise.diminfo[0].strides) += (*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_55, __pyx_pybuffernd_rsrp.diminfo[0].strides));

	mov	rax, QWORD PTR __pyx_pybuffer_noise$[rsp+8]

; 4662 : 
; 4663 :         /* "rsrpsinr.pyx":217
; 4664 :  *             if pow_v > rsrp[si]: # b is better
; 4665 :  *                 noise[si] += rsrp[si]
; 4666 :  *                 rsrp[si] = pow_v             # <<<<<<<<<<<<<<
; 4667 :  *                 bIndex[si] = bi  # TODO:
; 4668 :  *             else:
; 4669 :  */
; 4670 :         __pyx_t_57 = __pyx_v_si;
; 4671 :         *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_57, __pyx_pybuffernd_rsrp.diminfo[0].strides) = __pyx_v_pow_v;
; 4672 : 
; 4673 :         /* "rsrpsinr.pyx":218
; 4674 :  *                 noise[si] += rsrp[si]
; 4675 :  *                 rsrp[si] = pow_v
; 4676 :  *                 bIndex[si] = bi  # TODO:             # <<<<<<<<<<<<<<
; 4677 :  *             else:
; 4678 :  *                 noise[si] += pow_v
; 4679 :  */
; 4680 :         __pyx_t_58 = __pyx_v_si;
; 4681 :         *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_bIndex.rcbuffer->pybuffer.buf, __pyx_t_58, __pyx_pybuffernd_bIndex.diminfo[0].strides) = __pyx_v_bi;
; 4682 : 
; 4683 :         /* "rsrpsinr.pyx":215
; 4684 :  *             v = pb + g - pathloss
; 4685 :  *             pow_v = exp(v * log10_10)       #pow(10.0, v/10.0)
; 4686 :  *             if pow_v > rsrp[si]: # b is better             # <<<<<<<<<<<<<<
; 4687 :  *                 noise[si] += rsrp[si]
; 4688 :  *                 rsrp[si] = pow_v
; 4689 :  */
; 4690 :         goto __pyx_L12;

	movsdx	xmm10, QWORD PTR __pyx_v_ys$1$[rsp]
	addsd	xmm1, QWORD PTR [r14+rax]
	movsdx	QWORD PTR [r14+rax], xmm1
	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	movsdx	QWORD PTR [rcx+rax], xmm0
	mov	rax, QWORD PTR __pyx_pybuffer_bIndex$[rsp+8]
	mov	rcx, QWORD PTR tv7993[rsp]
	mov	QWORD PTR [rcx+rax], r12
	jmp	$LL207@pyx_f_8rsr@5
$LN181@pyx_f_8rsr@5:

; 4691 :       }
; 4692 : 
; 4693 :       /* "rsrpsinr.pyx":220
; 4694 :  *                 bIndex[si] = bi  # TODO:
; 4695 :  *             else:
; 4696 :  *                 noise[si] += pow_v             # <<<<<<<<<<<<<<
; 4697 :  * 
; 4698 :  *         # end of for-loop b
; 4699 :  */
; 4700 :       /*else*/ {
; 4701 :         __pyx_t_59 = __pyx_v_si;
; 4702 :         *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf, __pyx_t_59, __pyx_pybuffernd_noise.diminfo[0].strides) += __pyx_v_pow_v;

	mov	rax, QWORD PTR __pyx_pybuffer_noise$[rsp+8]

; 4703 :       }
; 4704 :       __pyx_L12:;
; 4705 : 
; 4706 :       /* "rsrpsinr.pyx":176
; 4707 :  *         es = S[si, 2]
; 4708 :  *         sblist = B_of_S[si]
; 4709 :  *         for bi in sblist:             # <<<<<<<<<<<<<<
; 4710 :  *         #for bi in range(num_bases):
; 4711 :  *             xb = B[bi,0]
; 4712 :  */
; 4713 :     }

	movsdx	xmm10, QWORD PTR __pyx_v_ys$1$[rsp]
$__pyx_L12$16225:
	addsd	xmm0, QWORD PTR [r14+rax]
	movsdx	QWORD PTR [r14+rax], xmm0
	jmp	$LL207@pyx_f_8rsr@5
$LN1275@pyx_f_8rsr@5:

; 4271 :           PyObject* exc_type = PyErr_Occurred();

	call	QWORD PTR __imp_PyErr_Occurred

; 4272 :           if (exc_type) {

	test	rax, rax
	je	SHORT $LN180@pyx_f_8rsr@5

; 4273 :             if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

	mov	rdx, QWORD PTR __imp_PyExc_StopIteration
	mov	rcx, rax
	mov	rdx, QWORD PTR [rdx]
	call	__Pyx_PyErr_GivenExceptionMatches
	test	eax, eax
	je	$LN195@pyx_f_8rsr@5
	call	QWORD PTR __imp_PyErr_Clear
$LN180@pyx_f_8rsr@5:

; 4714 :     __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	add	QWORD PTR [rsi], -1
	jne	SHORT $LN179@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN179@pyx_f_8rsr@5:

; 4715 : 
; 4716 :     /* "rsrpsinr.pyx":223
; 4717 :  * 
; 4718 :  *         # end of for-loop b
; 4719 :  *         rsrp[si] = log(rsrp[si]) / log10_10 # 10.0 * log10( rsrp[si] )             # <<<<<<<<<<<<<<
; 4720 :  *         noise[si] = log(noise[si]) / log10_10
; 4721 :  * 
; 4722 :  */
; 4723 :     __pyx_t_60 = __pyx_v_si;
; 4724 :     __pyx_t_61 = __pyx_v_si;
; 4725 :     *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_61, __pyx_pybuffernd_rsrp.diminfo[0].strides) = (log((*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_60, __pyx_pybuffernd_rsrp.diminfo[0].strides))) / __pyx_v_8rsrpsinr_log10_10);

	mov	rbx, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	mov	r12, QWORD PTR tv7996[rsp]
	movsdx	xmm0, QWORD PTR [r12+rbx]
	call	log
	movsdx	xmm6, QWORD PTR __pyx_v_8rsrpsinr_log10_10
	divsd	xmm0, xmm6
	movsdx	QWORD PTR [r12+rbx], xmm0

; 4726 : 
; 4727 :     /* "rsrpsinr.pyx":224
; 4728 :  *         # end of for-loop b
; 4729 :  *         rsrp[si] = log(rsrp[si]) / log10_10 # 10.0 * log10( rsrp[si] )
; 4730 :  *         noise[si] = log(noise[si]) / log10_10             # <<<<<<<<<<<<<<
; 4731 :  * 
; 4732 :  *         sinr[si] = rsrp[si] - noise[si]
; 4733 :  */
; 4734 :     __pyx_t_62 = __pyx_v_si;
; 4735 :     __pyx_t_63 = __pyx_v_si;
; 4736 :     *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf, __pyx_t_63, __pyx_pybuffernd_noise.diminfo[0].strides) = (log((*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf, __pyx_t_62, __pyx_pybuffernd_noise.diminfo[0].strides))) / __pyx_v_8rsrpsinr_log10_10);

	mov	rbx, QWORD PTR __pyx_pybuffer_noise$[rsp+8]
	movsdx	xmm0, QWORD PTR [r14+rbx]
	call	log

; 4737 : 
; 4738 :     /* "rsrpsinr.pyx":226
; 4739 :  *         noise[si] = log(noise[si]) / log10_10
; 4740 :  * 
; 4741 :  *         sinr[si] = rsrp[si] - noise[si]             # <<<<<<<<<<<<<<
; 4742 :  *         isCovered[si] = sinr[si]>=SINR_TH and rsrp[si] >= RSRP_TH
; 4743 :  *         if isCovered[si]:
; 4744 :  */
; 4745 :     __pyx_t_64 = __pyx_v_si;
; 4746 :     __pyx_t_65 = __pyx_v_si;
; 4747 :     __pyx_t_66 = __pyx_v_si;
; 4748 :     *__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_sinr.rcbuffer->pybuffer.buf, __pyx_t_66, __pyx_pybuffernd_sinr.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_64, __pyx_pybuffernd_rsrp.diminfo[0].strides)) - (*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_noise.rcbuffer->pybuffer.buf, __pyx_t_65, __pyx_pybuffernd_noise.diminfo[0].strides)));

	mov	r9, QWORD PTR tv7995[rsp]
	divsd	xmm0, xmm6
	movsdx	QWORD PTR [r14+rbx], xmm0
	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	movsdx	xmm1, QWORD PTR [r12+rax]
	mov	rax, QWORD PTR __pyx_pybuffer_noise$[rsp+8]
	subsd	xmm1, QWORD PTR [r14+rax]
	mov	rax, QWORD PTR __pyx_pybuffer_sinr$[rsp+8]

; 4749 : 
; 4750 :     /* "rsrpsinr.pyx":227
; 4751 :  * 
; 4752 :  *         sinr[si] = rsrp[si] - noise[si]
; 4753 :  *         isCovered[si] = sinr[si]>=SINR_TH and rsrp[si] >= RSRP_TH             # <<<<<<<<<<<<<<
; 4754 :  *         if isCovered[si]:
; 4755 :  *             covered_s_count += 1
; 4756 :  */
; 4757 :     __pyx_t_68 = __pyx_v_si;
; 4758 :     __pyx_t_48 = ((*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_sinr.rcbuffer->pybuffer.buf, __pyx_t_68, __pyx_pybuffernd_sinr.diminfo[0].strides)) >= __pyx_v_SINR_TH);

	comisd	xmm1, QWORD PTR __pyx_v_SINR_TH$1$[rsp]
	movsdx	QWORD PTR [r9+rax], xmm1

; 4759 :     if (__pyx_t_48) {

	jb	SHORT $LN175@pyx_f_8rsr@5

; 4762 :       goto __pyx_L13_bool_binop_done;
; 4763 :     }
; 4764 :     __pyx_t_69 = __pyx_v_si;
; 4765 :     __pyx_t_48 = ((*__Pyx_BufPtrStrided1d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_rsrp.rcbuffer->pybuffer.buf, __pyx_t_69, __pyx_pybuffernd_rsrp.diminfo[0].strides)) >= __pyx_v_RSRP_TH);

	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	movsdx	xmm0, QWORD PTR [r12+rax]
	comisd	xmm0, QWORD PTR __pyx_v_RSRP_TH$1$[rsp]
	jb	SHORT $LN854@pyx_f_8rsr@5
	mov	ecx, 1
	jmp	SHORT $__pyx_L13_bool_binop_done$16256
$LN854@pyx_f_8rsr@5:
	mov	ecx, ebp

; 4766 :     __pyx_t_67 = __pyx_t_48;

	jmp	SHORT $__pyx_L13_bool_binop_done$16256
$LN175@pyx_f_8rsr@5:

; 4760 :     } else {
; 4761 :       __pyx_t_67 = __pyx_t_48;

	xor	cl, cl
$__pyx_L13_bool_binop_done$16256:

; 4767 :     __pyx_L13_bool_binop_done:;
; 4768 :     __pyx_t_70 = __pyx_v_si;
; 4769 :     *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_isCovered.rcbuffer->pybuffer.buf, __pyx_t_70, __pyx_pybuffernd_isCovered.diminfo[0].strides) = __pyx_t_67;

	mov	rax, QWORD PTR __pyx_pybuffer_isCovered$[rsp+8]
	mov	r8, QWORD PTR tv7997[rsp]
	mov	BYTE PTR [r8+rax], cl

; 4770 : 
; 4771 :     /* "rsrpsinr.pyx":228
; 4772 :  *         sinr[si] = rsrp[si] - noise[si]
; 4773 :  *         isCovered[si] = sinr[si]>=SINR_TH and rsrp[si] >= RSRP_TH
; 4774 :  *         if isCovered[si]:             # <<<<<<<<<<<<<<
; 4775 :  *             covered_s_count += 1
; 4776 :  *     #end of for-loop s
; 4777 :  */
; 4778 :     __pyx_t_71 = __pyx_v_si;
; 4779 :     __pyx_t_48 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_isCovered.rcbuffer->pybuffer.buf, __pyx_t_71, __pyx_pybuffernd_isCovered.diminfo[0].strides)) != 0);

	test	cl, cl

; 4780 :     if (__pyx_t_48) {

	je	SHORT $LN1300@pyx_f_8rsr@5

; 4781 : 
; 4782 :       /* "rsrpsinr.pyx":229
; 4783 :  *         isCovered[si] = sinr[si]>=SINR_TH and rsrp[si] >= RSRP_TH
; 4784 :  *         if isCovered[si]:
; 4785 :  *             covered_s_count += 1             # <<<<<<<<<<<<<<
; 4786 :  *     #end of for-loop s
; 4787 :  * 
; 4788 :  */
; 4789 :       __pyx_v_covered_s_count = (__pyx_v_covered_s_count + 1);

	mov	eax, DWORD PTR __pyx_v_covered_s_count$1$[rsp]
	inc	eax
	mov	DWORD PTR __pyx_v_covered_s_count$1$[rsp], eax
	jmp	SHORT $LN228@pyx_f_8rsr@5
$LN1300@pyx_f_8rsr@5:
	mov	eax, DWORD PTR __pyx_v_covered_s_count$1$[rsp]
$LN228@pyx_f_8rsr@5:

; 4177 : 
; 4178 :   /* "rsrpsinr.pyx":171
; 4179 :  *         DTYPE_t d, h_diff, tilt_s, beta, azimuth_s, alpha, g, pathloss, v, pow_v
; 4180 :  * 
; 4181 :  *     for si in range(num_samples):             # <<<<<<<<<<<<<<
; 4182 :  *         xs = S[si, 0]
; 4183 :  *         ys = S[si, 1]
; 4184 :  */
; 4185 :   __pyx_t_17 = __pyx_v_num_samples;
; 4186 :   for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {

	mov	r10, QWORD PTR __pyx_pybuffernd_dis$1$[rsp]
	mov	rcx, QWORD PTR tv7988[rsp]
	mov	edx, DWORD PTR __pyx_t_18$1$[rsp]
	add	QWORD PTR tv7989[rsp], r10
	mov	r10, QWORD PTR __pyx_pybuffernd_Alpha$1$[rsp]
	add	rcx, QWORD PTR __pyx_pybuffernd_S$1$[rsp]
	add	QWORD PTR tv7990[rsp], r10
	mov	r10, QWORD PTR __pyx_pybuffernd_Beta$1$[rsp]
	add	r9, QWORD PTR __pyx_pybuffernd_sinr$1$[rsp]
	add	QWORD PTR tv7991[rsp], r10
	mov	r10, QWORD PTR __pyx_pybuffernd_Pathloss$1$[rsp]
	add	r12, QWORD PTR __pyx_pybuffernd_rsrp$1$[rsp]
	add	QWORD PTR tv7992[rsp], r10
	add	r8, QWORD PTR __pyx_pybuffernd_isCovered$1$[rsp]
	mov	r10, QWORD PTR __pyx_pybuffernd_bIndex$1$[rsp]
	add	QWORD PTR tv7993[rsp], r10
	add	r14, QWORD PTR __pyx_pybuffernd_noise$1$[rsp]
	inc	edx
	mov	DWORD PTR __pyx_t_18$1$[rsp], edx
	mov	QWORD PTR tv7988[rsp], rcx
	mov	QWORD PTR tv7995[rsp], r9
	mov	QWORD PTR tv7996[rsp], r12
	mov	QWORD PTR tv7997[rsp], r8
	cmp	edx, DWORD PTR __pyx_v_num_samples$1$[rsp]
	jb	$LL229@pyx_f_8rsr@5
$LN165@pyx_f_8rsr@5:

; 4790 : 
; 4791 :       /* "rsrpsinr.pyx":228
; 4792 :  *         sinr[si] = rsrp[si] - noise[si]
; 4793 :  *         isCovered[si] = sinr[si]>=SINR_TH and rsrp[si] >= RSRP_TH
; 4794 :  *         if isCovered[si]:             # <<<<<<<<<<<<<<
; 4795 :  *             covered_s_count += 1
; 4796 :  *     #end of for-loop s
; 4797 :  */
; 4798 :     }
; 4799 :   }
; 4800 : 
; 4801 :   /* "rsrpsinr.pyx":232
; 4802 :  *     #end of for-loop s
; 4803 :  * 
; 4804 :  *     return [Pathloss, dis, Alpha, Beta, covered_s_count]             # <<<<<<<<<<<<<<
; 4805 :  * 
; 4806 :  * 
; 4807 :  */
; 4808 :   __Pyx_XDECREF(__pyx_r);
; 4809 :   __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_covered_s_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)

	mov	ecx, eax
	mov	DWORD PTR $T46300[rsp], eax
	call	QWORD PTR __imp_PyLong_FromUnsignedLong
	mov	rsi, rax
	test	rax, rax
	jne	$LN162@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 232		; 000000e8H
	mov	DWORD PTR __pyx_clineno, 4809		; 000012c9H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN1278@pyx_f_8rsr@5:

; 4244 :     } else {
; 4245 :       __pyx_t_25 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_sblist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 176		; 000000b0H
	mov	DWORD PTR __pyx_clineno, 4245		; 00001095H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN1276@pyx_f_8rsr@5:

; 4275 :           }
; 4276 :           break;
; 4277 :         }
; 4278 :         __Pyx_GOTREF(__pyx_t_5);
; 4279 :       }
; 4280 :       __pyx_t_27 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_27 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 176		; 000000b0H
	mov	DWORD PTR __pyx_clineno, 4280		; 000010b8H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN133@pyx_f_8rsr@5
$LN195@pyx_f_8rsr@5:

; 4274 :             else __PYX_ERR(0, 176, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 176		; 000000b0H
	mov	DWORD PTR __pyx_clineno, 4274		; 000010b2H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN133@pyx_f_8rsr@5
$LN1277@pyx_f_8rsr@5:

; 4199 : 
; 4200 :     /* "rsrpsinr.pyx":173
; 4201 :  *     for si in range(num_samples):
; 4202 :  *         xs = S[si, 0]
; 4203 :  *         ys = S[si, 1]             # <<<<<<<<<<<<<<
; 4204 :  *         es = S[si, 2]
; 4205 :  *         sblist = B_of_S[si]
; 4206 :  */
; 4207 :     __pyx_t_21 = __pyx_v_si;
; 4208 :     __pyx_t_22 = 1;
; 4209 :     __pyx_v_ys = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_S.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_S.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_S.diminfo[1].strides));
; 4210 : 
; 4211 :     /* "rsrpsinr.pyx":174
; 4212 :  *         xs = S[si, 0]
; 4213 :  *         ys = S[si, 1]
; 4214 :  *         es = S[si, 2]             # <<<<<<<<<<<<<<
; 4215 :  *         sblist = B_of_S[si]
; 4216 :  *         for bi in sblist:
; 4217 :  */
; 4218 :     __pyx_t_23 = __pyx_v_si;
; 4219 :     __pyx_t_24 = 2;
; 4220 :     __pyx_v_es = (*__Pyx_BufPtrStrided2d(__pyx_t_8rsrpsinr_DTYPE_t *, __pyx_pybuffernd_S.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_S.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_S.diminfo[1].strides));
; 4221 : 
; 4222 :     /* "rsrpsinr.pyx":175
; 4223 :  *         ys = S[si, 1]
; 4224 :  *         es = S[si, 2]
; 4225 :  *         sblist = B_of_S[si]             # <<<<<<<<<<<<<<
; 4226 :  *         for bi in sblist:
; 4227 :  *         #for bi in range(num_bases):
; 4228 :  */
; 4229 :     __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_B_of_S), __pyx_v_si, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)

	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 175		; 000000afH
	mov	DWORD PTR __pyx_clineno, 4229		; 00001085H
	mov	QWORD PTR __pyx_filename, rax
	jmp	SHORT $LN113@pyx_f_8rsr@5
$LN162@pyx_f_8rsr@5:

; 4810 :   __Pyx_GOTREF(__pyx_t_4);
; 4811 :   __pyx_t_5 = PyList_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 232, __pyx_L1_error)

	mov	ecx, 5
	call	QWORD PTR __imp_PyList_New
	mov	rdi, rax
	test	rax, rax
	jne	$LN161@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 232		; 000000e8H
	mov	DWORD PTR __pyx_clineno, 4811		; 000012cbH
	mov	QWORD PTR __pyx_filename, rax
$LN133@pyx_f_8rsr@5:

; 4845 :   __Pyx_XDECREF(__pyx_t_4);

	test	rsi, rsi
	je	SHORT $LN123@pyx_f_8rsr@5
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN123@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN123@pyx_f_8rsr@5:

; 4846 :   __Pyx_XDECREF(__pyx_t_5);

	test	rdi, rdi
	je	SHORT $LN113@pyx_f_8rsr@5
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN113@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN113@pyx_f_8rsr@5:

; 4847 :   __Pyx_XDECREF(__pyx_t_7);

	mov	rcx, QWORD PTR __pyx_t_7$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN103@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN103@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN103@pyx_f_8rsr@5:

; 4848 :   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
; 4849 :     __Pyx_PyThreadState_declare
; 4850 :     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	rbx, QWORD PTR [rax]

; 4851 :     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

	mov	r12, QWORD PTR [rbx+72]
	mov	r13, QWORD PTR [rbx+80]
	mov	r14, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+72], rbp
	mov	QWORD PTR [rbx+80], rbp
	mov	QWORD PTR [rbx+88], rbp

; 4852 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Alpha.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_Alpha$[rsp+8], rbp
	je	SHORT $LN1301@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_Alpha$[rsp+72]
	lea	rdi, OFFSET FLAT:__Pyx_minusones
	lea	rcx, QWORD PTR __pyx_pybuffer_Alpha$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_Alpha$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
	jmp	SHORT $LN1192@pyx_f_8rsr@5
$LN1301@pyx_f_8rsr@5:

; 3479 :   }
; 3480 :   __pyx_pybuffernd_S.diminfo[0].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_S.diminfo[0].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_S.diminfo[1].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_S.diminfo[1].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[1];

	lea	rdi, OFFSET FLAT:__Pyx_minusones

; 4852 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Alpha.rcbuffer->pybuffer);

$LN1192@pyx_f_8rsr@5:

; 4853 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_B$[rsp+8], rbp
	je	SHORT $LN1196@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_B$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1196@pyx_f_8rsr@5:

; 4854 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8], rbp
	je	SHORT $LN1200@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1200@pyx_f_8rsr@5:

; 4855 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Beta.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_Beta$[rsp+8], rbp
	je	SHORT $LN1204@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_Beta$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_Beta$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_Beta$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1204@pyx_f_8rsr@5:

; 4856 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Pathloss.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8], rbp
	je	SHORT $LN1208@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_Pathloss$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1208@pyx_f_8rsr@5:

; 4857 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_S.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_S$[rsp+8], rbp
	je	SHORT $LN1212@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_S$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1212@pyx_f_8rsr@5:

; 4858 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bIndex.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_bIndex$[rsp+8], rbp
	je	SHORT $LN1216@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_bIndex$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_bIndex$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_bIndex$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1216@pyx_f_8rsr@5:

; 4859 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dis.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_dis$[rsp+8], rbp
	je	SHORT $LN1220@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_dis$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_dis$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_dis$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1220@pyx_f_8rsr@5:

; 4860 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_isCovered.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_isCovered$[rsp+8], rbp
	je	SHORT $LN1224@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_isCovered$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_isCovered$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_isCovered$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1224@pyx_f_8rsr@5:

; 4861 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_noise.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_noise$[rsp+8], rbp
	je	SHORT $LN1228@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_noise$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_noise$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_noise$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1228@pyx_f_8rsr@5:

; 4862 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rsrp.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_rsrp$[rsp+8], rbp
	je	SHORT $LN1232@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_rsrp$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_rsrp$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1232@pyx_f_8rsr@5:

; 4863 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sinr.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_sinr$[rsp+8], rbp
	je	SHORT $LN1236@pyx_f_8rsr@5
	mov	rax, QWORD PTR __pyx_pybuffer_sinr$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_sinr$[rsp+8]
	cmp	rax, rdi
	cmove	rax, rbp
	mov	QWORD PTR __pyx_pybuffer_sinr$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN1236@pyx_f_8rsr@5:

; 4864 :   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

	mov	rcx, QWORD PTR [rbx+72]
	mov	rdi, QWORD PTR [rbx+80]
	mov	rsi, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+72], r12
	mov	QWORD PTR [rbx+80], r13
	mov	QWORD PTR [rbx+88], r14
	test	rcx, rcx
	je	SHORT $LN1260@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN1260@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN1260@pyx_f_8rsr@5:
	test	rdi, rdi
	je	SHORT $LN1250@pyx_f_8rsr@5
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN1250@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rax+48]
$LN1250@pyx_f_8rsr@5:
	test	rsi, rsi
	je	SHORT $LN1240@pyx_f_8rsr@5
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN1240@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN1240@pyx_f_8rsr@5:

; 4865 :   __Pyx_AddTraceback("rsrpsinr.cget_coverage", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BH@KHPHIBEA@rsrpsinr?4cget_coverage?$AA@
	call	__Pyx_AddTraceback

; 4866 :   __pyx_r = 0;
; 4867 :   goto __pyx_L2;

	mov	rbx, QWORD PTR __pyx_v_dis$1$[rsp]
	mov	r12, QWORD PTR __pyx_v_Alpha$1$[rsp]
	mov	r13, QWORD PTR __pyx_v_Pathloss$1$[rsp]
	mov	r14, QWORD PTR __pyx_v_Beta$1$[rsp]
	jmp	$__pyx_L2$16401
$LN161@pyx_f_8rsr@5:

; 4812 :   __Pyx_GOTREF(__pyx_t_5);
; 4813 :   __Pyx_INCREF(((PyObject *)__pyx_v_Pathloss));

	mov	r13, QWORD PTR __pyx_v_Pathloss$1$[rsp]

; 4814 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_Pathloss));
; 4815 :   PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_Pathloss));
; 4816 :   __Pyx_INCREF(((PyObject *)__pyx_v_dis));

	mov	rbx, QWORD PTR __pyx_v_dis$1$[rsp]

; 4817 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_dis));
; 4818 :   PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_dis));
; 4819 :   __Pyx_INCREF(((PyObject *)__pyx_v_Alpha));

	mov	r12, QWORD PTR __pyx_v_Alpha$1$[rsp]
	inc	QWORD PTR [r13]
	mov	rax, QWORD PTR [rax+24]

; 4820 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_Alpha));
; 4821 :   PyList_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_Alpha));
; 4822 :   __Pyx_INCREF(((PyObject *)__pyx_v_Beta));

	mov	r14, QWORD PTR __pyx_v_Beta$1$[rsp]
	mov	QWORD PTR [rax], r13
	inc	QWORD PTR [rbx]
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+8], rbx
	inc	QWORD PTR [r12]
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+16], r12
	inc	QWORD PTR [r14]

; 4823 :   __Pyx_GIVEREF(((PyObject *)__pyx_v_Beta));
; 4824 :   PyList_SET_ITEM(__pyx_t_5, 3, ((PyObject *)__pyx_v_Beta));

	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+24], r14

; 4825 :   __Pyx_GIVEREF(__pyx_t_4);
; 4826 :   PyList_SET_ITEM(__pyx_t_5, 4, __pyx_t_4);

	mov	rax, QWORD PTR [rdi+24]

; 4868 :   __pyx_L0:;
; 4869 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Alpha.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_Alpha$[rsp+8]
	mov	rbp, rdi
$__pyx_L0$16299:
	mov	QWORD PTR [rax+32], rsi
	call	__Pyx_SafeReleaseBuffer

; 4870 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4871 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4872 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Beta.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_Beta$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4873 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Pathloss.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_Pathloss$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4874 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_S.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4875 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bIndex.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_bIndex$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4876 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dis.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_dis$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4877 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_isCovered.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_isCovered$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4878 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_noise.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_noise$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4879 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_rsrp.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_rsrp$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 4880 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sinr.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_sinr$[rsp+8]
	call	__Pyx_SafeReleaseBuffer
$__pyx_L2$16401:
	movaps	xmm15, XMMWORD PTR [rsp+2160]
	movaps	xmm14, XMMWORD PTR [rsp+2176]
	movaps	xmm13, XMMWORD PTR [rsp+2192]
	mov	r15, QWORD PTR [rsp+2320]
	mov	rdi, QWORD PTR [rsp+2352]
	mov	rsi, QWORD PTR [rsp+2360]
	movaps	xmm12, XMMWORD PTR [rsp+2208]
	movaps	xmm11, XMMWORD PTR [rsp+2224]
	movaps	xmm10, XMMWORD PTR [rsp+2240]
	movaps	xmm9, XMMWORD PTR [rsp+2256]
	movaps	xmm8, XMMWORD PTR [rsp+2272]
	movaps	xmm7, XMMWORD PTR [rsp+2288]
	movaps	xmm6, XMMWORD PTR [rsp+2304]

; 4881 :   __pyx_L2:;
; 4882 :   __Pyx_XDECREF((PyObject *)__pyx_v_Alpha);

	test	r12, r12
	je	SHORT $LN93@pyx_f_8rsr@5
	add	QWORD PTR [r12], -1
	jne	SHORT $LN93@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r12+8]
	mov	rcx, r12
	call	QWORD PTR [rax+48]
$LN93@pyx_f_8rsr@5:
	mov	r12, QWORD PTR [rsp+2344]

; 4883 :   __Pyx_XDECREF((PyObject *)__pyx_v_Beta);

	test	r14, r14
	je	SHORT $LN83@pyx_f_8rsr@5
	add	QWORD PTR [r14], -1
	jne	SHORT $LN83@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r14+8]
	mov	rcx, r14
	call	QWORD PTR [rax+48]
$LN83@pyx_f_8rsr@5:
	mov	r14, QWORD PTR [rsp+2328]

; 4884 :   __Pyx_XDECREF((PyObject *)__pyx_v_Pathloss);

	test	r13, r13
	je	SHORT $LN73@pyx_f_8rsr@5
	add	QWORD PTR [r13], -1
	jne	SHORT $LN73@pyx_f_8rsr@5
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r13
	call	QWORD PTR [rax+48]
$LN73@pyx_f_8rsr@5:
	mov	r13, QWORD PTR [rsp+2336]

; 4885 :   __Pyx_XDECREF((PyObject *)__pyx_v_dis);

	test	rbx, rbx
	je	SHORT $LN63@pyx_f_8rsr@5
	add	QWORD PTR [rbx], -1
	jne	SHORT $LN63@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN63@pyx_f_8rsr@5:

; 4886 :   __Pyx_XDECREF((PyObject *)__pyx_v_isCovered);

	mov	rcx, QWORD PTR __pyx_v_isCovered$1$[rsp]
	mov	rbx, QWORD PTR [rsp+2392]
	test	rcx, rcx
	je	SHORT $LN53@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN53@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN53@pyx_f_8rsr@5:

; 4887 :   __Pyx_XDECREF((PyObject *)__pyx_v_bIndex);

	mov	rcx, QWORD PTR __pyx_v_bIndex$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN43@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN43@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN43@pyx_f_8rsr@5:

; 4888 :   __Pyx_XDECREF((PyObject *)__pyx_v_rsrp);

	mov	rcx, QWORD PTR __pyx_v_rsrp$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN33@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN33@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN33@pyx_f_8rsr@5:

; 4889 :   __Pyx_XDECREF((PyObject *)__pyx_v_sinr);

	mov	rcx, QWORD PTR __pyx_v_sinr$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN23@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN23@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN23@pyx_f_8rsr@5:

; 4890 :   __Pyx_XDECREF((PyObject *)__pyx_v_noise);

	mov	rcx, QWORD PTR __pyx_v_noise$1$[rsp]
	test	rcx, rcx
	je	SHORT $LN13@pyx_f_8rsr@5
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN13@pyx_f_8rsr@5
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN13@pyx_f_8rsr@5:

; 4891 :   __Pyx_XDECREF(__pyx_v_sblist);

	mov	rax, QWORD PTR __pyx_v_sblist$1$[rsp]
	test	rax, rax
	je	SHORT $LN1286@pyx_f_8rsr@5
	add	QWORD PTR [rax], -1
	jne	SHORT $LN1286@pyx_f_8rsr@5
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, rax
	call	QWORD PTR [rdx+48]
$LN1286@pyx_f_8rsr@5:

; 4892 :   __Pyx_XGIVEREF(__pyx_r);
; 4893 :   __Pyx_RefNannyFinishContext();
; 4894 :   return __pyx_r;

	mov	rax, rbp

; 4895 : }

	add	rsp, 2368				; 00000940H
	pop	rbp
	ret	0
__pyx_f_8rsrpsinr_cget_coverage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BHEBIBGE@rsrpsinr?4get_coverage?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pf_8rsrpsinr_8get_coverage DD imagerel __pyx_pf_8rsrpsinr_8get_coverage
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage+696
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_8get_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$__pyx_pf_8rsrpsinr_8get_coverage DD imagerel __pyx_pf_8rsrpsinr_8get_coverage+696
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage+916
	DD	imagerel $chain$1$__pyx_pf_8rsrpsinr_8get_coverage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$__pyx_pf_8rsrpsinr_8get_coverage DD imagerel __pyx_pf_8rsrpsinr_8get_coverage+916
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage+1070
	DD	imagerel $chain$2$__pyx_pf_8rsrpsinr_8get_coverage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$__pyx_pf_8rsrpsinr_8get_coverage DD 021H
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage+696
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_8get_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$__pyx_pf_8rsrpsinr_8get_coverage DD 041021H
	DD	045d410H
	DD	044c408H
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage
	DD	imagerel __pyx_pf_8rsrpsinr_8get_coverage+696
	DD	imagerel $unwind$__pyx_pf_8rsrpsinr_8get_coverage
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pf_8rsrpsinr_8get_coverage DD 091501H
	DD	0463415H
	DD	03e0115H
	DD	0e00cf00eH
	DD	06009700aH
	DD	05008H
xdata	ENDS
;	COMDAT ??_C@_0BG@BHEBIBGE@rsrpsinr?4get_coverage?$AA@
CONST	SEGMENT
??_C@_0BG@BHEBIBGE@rsrpsinr?4get_coverage?$AA@ DB 'rsrpsinr.get_coverage', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pf_8rsrpsinr_8get_coverage
_TEXT	SEGMENT
__pyx_t_2$ = 64
__pyx_pybuffer_B$ = 112
__pyx_pybuffer_S$ = 224
__pyx_pybuffer_B_of_S$ = 336
__pyx_stack$16933 = 464
__pyx_stack$16939 = 480
__pyx_self$ = 544
__pyx_v_S$ = 552
__pyx_v_B$ = 560
__pyx_v_B_of_S$ = 568
__pyx_v_RSRP_TH$ = 576
__pyx_v_SINR_TH$ = 584
__pyx_v_TERM_HEIGHT$ = 592
__pyx_v_FREQ$ = 600
__pyx_v_NOISE$ = 608
__pyx_pf_8rsrpsinr_8get_coverage PROC			; COMDAT

; 5176 : static PyObject *__pyx_pf_8rsrpsinr_8get_coverage(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_S, PyArrayObject *__pyx_v_B, PyArrayObject *__pyx_v_B_of_S, double __pyx_v_RSRP_TH, double __pyx_v_SINR_TH, double __pyx_v_TERM_HEIGHT, double __pyx_v_FREQ, double __pyx_v_NOISE) {

	mov	r11, rsp
	mov	QWORD PTR [r11+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 496				; 000001f0H

; 5177 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_B;
; 5178 :   __Pyx_Buffer __pyx_pybuffer_B;
; 5179 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_B_of_S;
; 5180 :   __Pyx_Buffer __pyx_pybuffer_B_of_S;
; 5181 :   __Pyx_LocalBuf_ND __pyx_pybuffernd_S;
; 5182 :   __Pyx_Buffer __pyx_pybuffer_S;
; 5183 :   PyObject *__pyx_r = NULL;
; 5184 :   __Pyx_RefNannyDeclarations
; 5185 :   PyObject *__pyx_t_1 = NULL;
; 5186 :   struct __pyx_opt_args_8rsrpsinr_cget_coverage __pyx_t_2;
; 5187 :   __Pyx_RefNannySetupContext("get_coverage", 0);
; 5188 :   __pyx_pybuffer_S.pybuffer.buf = NULL;
; 5189 :   __pyx_pybuffer_S.refcount = 0;
; 5190 :   __pyx_pybuffernd_S.data = NULL;
; 5191 :   __pyx_pybuffernd_S.rcbuffer = &__pyx_pybuffer_S;
; 5192 :   __pyx_pybuffer_B.pybuffer.buf = NULL;
; 5193 :   __pyx_pybuffer_B.refcount = 0;
; 5194 :   __pyx_pybuffernd_B.data = NULL;
; 5195 :   __pyx_pybuffernd_B.rcbuffer = &__pyx_pybuffer_B;
; 5196 :   __pyx_pybuffer_B_of_S.pybuffer.buf = NULL;
; 5197 :   __pyx_pybuffer_B_of_S.refcount = 0;
; 5198 :   __pyx_pybuffernd_B_of_S.data = NULL;
; 5199 :   __pyx_pybuffernd_B_of_S.rcbuffer = &__pyx_pybuffer_B_of_S;
; 5200 :   {
; 5201 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 5202 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_S.rcbuffer->pybuffer, (PyObject*)__pyx_v_S, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 241, __pyx_L1_error)

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	xor	r14d, r14d
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	lea	r15, OFFSET FLAT:__Pyx_minusones
	mov	QWORD PTR [r11-304], r14
	mov	QWORD PTR [r11-312], r14
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_B$[rsp], r14
	mov	QWORD PTR [r11-192], r14
	mov	QWORD PTR [r11-200], r14
	lea	rbp, OFFSET FLAT:__Pyx_zeros
	cmp	rdx, rax
	je	SHORT $LN27@pyx_pf_8rs@2
	test	rdx, rdx
	je	SHORT $LN27@pyx_pf_8rs@2
	lea	rax, QWORD PTR [r11-88]
	lea	r9d, QWORD PTR [r14+28]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	mov	QWORD PTR [rsp+48], rax
	lea	rcx, QWORD PTR [r11-304]
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN85@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 5202		; 00001452H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_8rs@2
$LN85@pyx_pf_8rs@2:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	jmp	SHORT $LN24@pyx_pf_8rs@2
$LN27@pyx_pf_8rs@2:
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+16], r14
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+64], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+56], rbp
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+72], r15
$LN24@pyx_pf_8rs@2:

; 5203 :   }
; 5204 :   __pyx_pybuffernd_S.diminfo[0].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_S.diminfo[0].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_S.diminfo[1].strides = __pyx_pybuffernd_S.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_S.diminfo[1].shape = __pyx_pybuffernd_S.rcbuffer->pybuffer.shape[1];
; 5205 :   {
; 5206 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 5207 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_B.rcbuffer->pybuffer, (PyObject*)__pyx_v_B, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 241, __pyx_L1_error)

	cmp	rdi, rax
	je	SHORT $LN29@pyx_pf_8rs@2
	test	rdi, rdi
	je	SHORT $LN29@pyx_pf_8rs@2
	lea	rax, QWORD PTR __pyx_stack$16933[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 28
	mov	rdx, rdi
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN86@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 5207		; 00001457H
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_8rs@2
$LN86@pyx_pf_8rs@2:
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	jmp	SHORT $LN23@pyx_pf_8rs@2
$LN29@pyx_pf_8rs@2:
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+16], r14
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+64], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+56], rbp
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+72], r15
$LN23@pyx_pf_8rs@2:

; 5208 :   }
; 5209 :   __pyx_pybuffernd_B.diminfo[0].strides = __pyx_pybuffernd_B.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_B.diminfo[0].shape = __pyx_pybuffernd_B.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_B.diminfo[1].strides = __pyx_pybuffernd_B.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_B.diminfo[1].shape = __pyx_pybuffernd_B.rcbuffer->pybuffer.shape[1];
; 5210 :   {
; 5211 :     __Pyx_BufFmt_StackElem __pyx_stack[1];
; 5212 :     if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer, (PyObject*)__pyx_v_B_of_S, &__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 241, __pyx_L1_error)

	cmp	rbx, rax
	je	SHORT $LN31@pyx_pf_8rs@2
	test	rbx, rbx
	je	SHORT $LN31@pyx_pf_8rs@2
	lea	rax, QWORD PTR __pyx_stack$16939[rsp]
	lea	r8, OFFSET FLAT:__Pyx_TypeInfo_nn___pyx_t_8rsrpsinr_DTYPE_t
	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 28
	mov	rdx, rbx
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], 2
	call	__Pyx__GetBufferAndValidate
	cmp	eax, -1
	jne	SHORT $LN14@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 241		; 000000f1H
	mov	DWORD PTR __pyx_clineno, 5212		; 0000145cH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$LN3@pyx_pf_8rs@2
$LN31@pyx_pf_8rs@2:
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8], r14
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+16], r14
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+64], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+56], rbp
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72], r15
$LN14@pyx_pf_8rs@2:

; 5213 :   }
; 5214 :   __pyx_pybuffernd_B_of_S.diminfo[0].strides = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_B_of_S.diminfo[0].shape = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_B_of_S.diminfo[1].strides = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_B_of_S.diminfo[1].shape = __pyx_pybuffernd_B_of_S.rcbuffer->pybuffer.shape[1];
; 5215 : 
; 5216 :   /* "rsrpsinr.pyx":251
; 5217 :  *     double FREQ=900,
; 5218 :  *     double NOISE=-110):
; 5219 :  *     return cget_coverage(S, B, B_of_S,             # <<<<<<<<<<<<<<
; 5220 :  *          RSRP_TH, SINR_TH, TERM_HEIGHT, FREQ, NOISE)
; 5221 :  * 
; 5222 :  */
; 5223 :   __Pyx_XDECREF(__pyx_r);
; 5224 : 
; 5225 :   /* "rsrpsinr.pyx":252
; 5226 :  *     double NOISE=-110):
; 5227 :  *     return cget_coverage(S, B, B_of_S,
; 5228 :  *          RSRP_TH, SINR_TH, TERM_HEIGHT, FREQ, NOISE)             # <<<<<<<<<<<<<<
; 5229 :  * 
; 5230 :  * #in-place
; 5231 :  */
; 5232 :   __pyx_t_2.__pyx_n = 5;
; 5233 :   __pyx_t_2.RSRP_TH = __pyx_v_RSRP_TH;

	movsdx	xmm0, QWORD PTR __pyx_v_RSRP_TH$[rsp]

; 5234 :   __pyx_t_2.SINR_TH = __pyx_v_SINR_TH;

	movsdx	xmm1, QWORD PTR __pyx_v_SINR_TH$[rsp]

; 5235 :   __pyx_t_2.TERM_HEIGHT = __pyx_v_TERM_HEIGHT;
; 5236 :   __pyx_t_2.FREQ = __pyx_v_FREQ;
; 5237 :   __pyx_t_2.NOISE = __pyx_v_NOISE;
; 5238 :   __pyx_t_1 = __pyx_f_8rsrpsinr_cget_coverage(((PyArrayObject *)__pyx_v_S), ((PyArrayObject *)__pyx_v_B), ((PyArrayObject *)__pyx_v_B_of_S), &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)

	lea	r9, QWORD PTR __pyx_t_2$[rsp]
	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	mov	DWORD PTR __pyx_t_2$[rsp], 5
	movsdx	QWORD PTR __pyx_t_2$[rsp+8], xmm0
	movsdx	xmm0, QWORD PTR __pyx_v_TERM_HEIGHT$[rsp]
	movsdx	QWORD PTR __pyx_t_2$[rsp+16], xmm1
	movsdx	xmm1, QWORD PTR __pyx_v_FREQ$[rsp]
	movsdx	QWORD PTR __pyx_t_2$[rsp+24], xmm0
	movsdx	xmm0, QWORD PTR __pyx_v_NOISE$[rsp]
	movsdx	QWORD PTR __pyx_t_2$[rsp+40], xmm0
	movsdx	QWORD PTR __pyx_t_2$[rsp+32], xmm1
	call	__pyx_f_8rsrpsinr_cget_coverage
	mov	rbx, rax
	test	rax, rax
	jne	$LN11@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 251		; 000000fbH
	mov	DWORD PTR __pyx_clineno, 5238		; 00001476H
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$16932:
$LN3@pyx_pf_8rs@2:

; 5239 :   __Pyx_GOTREF(__pyx_t_1);
; 5240 :   __pyx_r = __pyx_t_1;
; 5241 :   __pyx_t_1 = 0;
; 5242 :   goto __pyx_L0;
; 5243 : 
; 5244 :   /* "rsrpsinr.pyx":241
; 5245 :  *     return cgain(alpha, beta)
; 5246 :  * 
; 5247 :  * def get_coverage(             # <<<<<<<<<<<<<<
; 5248 :  *     np.ndarray[DTYPE_t, ndim=2] S,
; 5249 :  *     np.ndarray[DTYPE_t, ndim=2] B,
; 5250 :  */
; 5251 : 
; 5252 :   /* function exit code */
; 5253 :   __pyx_L1_error:;
; 5254 :   __Pyx_XDECREF(__pyx_t_1);
; 5255 :   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
; 5256 :     __Pyx_PyThreadState_declare
; 5257 :     __Pyx_PyThreadState_assign

	mov	rax, QWORD PTR __imp__PyThreadState_Current
	mov	QWORD PTR [rsp+544], r12
	mov	QWORD PTR [rsp+552], r13
	mov	rbx, QWORD PTR [rax]

; 5258 :     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

	mov	rbp, QWORD PTR [rbx+72]
	mov	r12, QWORD PTR [rbx+80]
	mov	r13, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+72], r14
	mov	QWORD PTR [rbx+80], r14
	mov	QWORD PTR [rbx+88], r14

; 5259 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_B$[rsp+8], r14
	je	SHORT $LN43@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_pybuffer_B$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
	cmp	rax, r15
	cmove	rax, r14
	mov	QWORD PTR __pyx_pybuffer_B$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN43@pyx_pf_8rs@2:

; 5260 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8], r14
	je	SHORT $LN47@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	cmp	rax, r15
	cmove	rax, r14
	mov	QWORD PTR __pyx_pybuffer_B_of_S$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN47@pyx_pf_8rs@2:

; 5261 :     __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_S.rcbuffer->pybuffer);

	cmp	QWORD PTR __pyx_pybuffer_S$[rsp+8], r14
	je	SHORT $LN51@pyx_pf_8rs@2
	mov	rax, QWORD PTR __pyx_pybuffer_S$[rsp+72]
	lea	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+8]
	cmp	rax, r15
	cmove	rax, r14
	mov	QWORD PTR __pyx_pybuffer_S$[rsp+72], rax
	call	__Pyx_ReleaseBuffer
$LN51@pyx_pf_8rs@2:

; 5262 :   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

	mov	rcx, QWORD PTR [rbx+72]
	mov	rsi, QWORD PTR [rbx+80]
	mov	rdi, QWORD PTR [rbx+88]
	mov	QWORD PTR [rbx+80], r12
	mov	r12, QWORD PTR [rsp+544]
	mov	QWORD PTR [rbx+88], r13
	mov	r13, QWORD PTR [rsp+552]
	mov	QWORD PTR [rbx+72], rbp
	test	rcx, rcx
	je	SHORT $LN75@pyx_pf_8rs@2
	add	QWORD PTR [rcx], -1
	jne	SHORT $LN75@pyx_pf_8rs@2
	mov	rax, QWORD PTR [rcx+8]
	call	QWORD PTR [rax+48]
$LN75@pyx_pf_8rs@2:
	test	rsi, rsi
	je	SHORT $LN65@pyx_pf_8rs@2
	add	QWORD PTR [rsi], -1
	jne	SHORT $LN65@pyx_pf_8rs@2
	mov	rax, QWORD PTR [rsi+8]
	mov	rcx, rsi
	call	QWORD PTR [rax+48]
$LN65@pyx_pf_8rs@2:
	test	rdi, rdi
	je	SHORT $LN55@pyx_pf_8rs@2
	add	QWORD PTR [rdi], -1
	jne	SHORT $LN55@pyx_pf_8rs@2
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, rdi
	call	QWORD PTR [rdx+48]
$LN55@pyx_pf_8rs@2:

; 5263 :   __Pyx_AddTraceback("rsrpsinr.get_coverage", __pyx_clineno, __pyx_lineno, __pyx_filename);

	mov	r9, QWORD PTR __pyx_filename
	mov	r8d, DWORD PTR __pyx_lineno
	mov	edx, DWORD PTR __pyx_clineno
	lea	rcx, OFFSET FLAT:??_C@_0BG@BHEBIBGE@rsrpsinr?4get_coverage?$AA@
	call	__Pyx_AddTraceback

; 5270 :   __pyx_L2:;
; 5271 :   __Pyx_XGIVEREF(__pyx_r);
; 5272 :   __Pyx_RefNannyFinishContext();
; 5273 :   return __pyx_r;

	mov	rax, r14
	jmp	SHORT $__pyx_L2$16987
$LN11@pyx_pf_8rs@2:

; 5264 :   __pyx_r = NULL;
; 5265 :   goto __pyx_L2;
; 5266 :   __pyx_L0:;
; 5267 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_B$[rsp+8]
$__pyx_L0$16965:
	call	__Pyx_SafeReleaseBuffer

; 5268 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_B_of_S.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_B_of_S$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 5269 :   __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_S.rcbuffer->pybuffer);

	lea	rcx, QWORD PTR __pyx_pybuffer_S$[rsp+8]
	call	__Pyx_SafeReleaseBuffer

; 5270 :   __pyx_L2:;
; 5271 :   __Pyx_XGIVEREF(__pyx_r);
; 5272 :   __Pyx_RefNannyFinishContext();
; 5273 :   return __pyx_r;

	mov	rax, rbx
$__pyx_L2$16987:

; 5274 : }

	mov	rbx, QWORD PTR [rsp+560]
	add	rsp, 496				; 000001f0H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
__pyx_pf_8rsrpsinr_8get_coverage ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_memoryview___cinit__ DD imagerel __pyx_memoryview___cinit__
	DD	imagerel __pyx_memoryview___cinit__+806
	DD	imagerel $unwind$__pyx_memoryview___cinit__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_memoryview___cinit__ DD 0c2001H
	DD	0156420H
	DD	0145420H
	DD	0133420H
	DD	0f01cb220H
	DD	0d018e01aH
	DD	07014c016H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_memoryview___cinit__
_TEXT	SEGMENT
values$20822 = 64
__pyx_v_self$ = 144
__pyx_args$ = 152
__pyx_kwds$ = 160
__pyx_memoryview___cinit__ PROC				; COMDAT

; 10210: static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	r11, rsp
	mov	QWORD PTR [r11+16], rbx
	mov	QWORD PTR [r11+24], rbp
	mov	QWORD PTR [r11+32], rsi
	mov	QWORD PTR [r11+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 10211:   PyObject *__pyx_v_obj = 0;
; 10212:   int __pyx_v_flags;
; 10213:   int __pyx_v_dtype_is_object;
; 10214:   int __pyx_r;
; 10215:   __Pyx_RefNannyDeclarations
; 10216:   __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
; 10217:   {
; 10218:     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
; 10219:     PyObject* values[3] = {0,0,0};

	xor	r13d, r13d
	mov	r14, r8
	mov	rdi, rdx
	mov	rbx, r13
	mov	r15, rcx
	mov	r12, r13
	mov	QWORD PTR [r11-72], r13
	mov	rbp, r13
	mov	QWORD PTR [r11-64], r13
	mov	QWORD PTR [r11-56], rbx

; 10220:     if (unlikely(__pyx_kwds)) {

	test	r8, r8
	je	$LN31@pyx_memory@43

; 10221:       Py_ssize_t kw_args;
; 10222:       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	r15, QWORD PTR [rdx+16]

; 10223:       switch (pos_args) {

	mov	rax, r15
	test	r15, r15
	je	SHORT $LN25@pyx_memory@43
	sub	rax, 1
	je	SHORT $LN26@pyx_memory@43
	sub	rax, 1
	je	SHORT $LN27@pyx_memory@43
	cmp	rax, 1
	jne	$__pyx_L5_argtuple_error$20839

; 10224:         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rbx, QWORD PTR [rdx+40]
	mov	QWORD PTR [r11-56], rbx
$LN27@pyx_memory@43:

; 10225:         CYTHON_FALLTHROUGH;
; 10226:         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbp, QWORD PTR [rdx+32]
	mov	QWORD PTR values$20822[rsp+8], rbp
$LN26@pyx_memory@43:

; 10227:         CYTHON_FALLTHROUGH;
; 10228:         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	r12, QWORD PTR [rdx+24]
	mov	QWORD PTR values$20822[rsp], r12
$LN25@pyx_memory@43:

; 10229:         CYTHON_FALLTHROUGH;
; 10230:         case  0: break;
; 10231:         default: goto __pyx_L5_argtuple_error;
; 10232:       }
; 10233:       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	rsi, rax

; 10234:       switch (pos_args) {

	mov	rax, r15
	test	r15, r15
	je	SHORT $LN21@pyx_memory@43
	sub	rax, 1
	je	SHORT $LN19@pyx_memory@43
	cmp	rax, 1
	je	SHORT $LN16@pyx_memory@43
	jmp	SHORT $LN13@pyx_memory@43
$LN21@pyx_memory@43:

; 10235:         case  0:
; 10236:         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_obj
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem
	mov	r12, rax
	mov	QWORD PTR values$20822[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$20839
	dec	rsi
$LN19@pyx_memory@43:

; 10237:         else goto __pyx_L5_argtuple_error;
; 10238:         CYTHON_FALLTHROUGH;
; 10239:         case  1:
; 10240:         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_flags
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbp, rax
	mov	QWORD PTR values$20822[rsp+8], rax
	test	rax, rax
	je	$LN17@pyx_memory@43
	dec	rsi
$LN16@pyx_memory@43:

; 10243:         }
; 10244:         CYTHON_FALLTHROUGH;
; 10245:         case  2:
; 10246:         if (kw_args > 0) {

	test	rsi, rsi
	jle	SHORT $LN50@pyx_memory@43

; 10247:           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);

	mov	rdx, QWORD PTR __pyx_n_s_dtype_is_object
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 10248:           if (value) { values[2] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN13@pyx_memory@43
	mov	rbx, rax
	mov	QWORD PTR values$20822[rsp+16], rax
	dec	rsi
$LN13@pyx_memory@43:

; 10249:         }
; 10250:       }
; 10251:       if (unlikely(kw_args > 0)) {

	test	rsi, rsi
	jle	SHORT $LN50@pyx_memory@43

; 10252:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 343, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	lea	r9, QWORD PTR values$20822[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_memoryview___cinit__@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r14
	mov	QWORD PTR [rsp+32], r15
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN48@pyx_memory@43
	mov	edx, 10252				; 0000280cH
	jmp	$LN51@pyx_memory@43
$LN48@pyx_memory@43:

; 10259:         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR values$20822[rsp+16]
	mov	rbp, QWORD PTR values$20822[rsp+8]
	mov	r12, QWORD PTR values$20822[rsp]
$LN50@pyx_memory@43:
	mov	r15, QWORD PTR __pyx_v_self$[rsp]
$LN8@pyx_memory@43:

; 10260:         break;
; 10261:         default: goto __pyx_L5_argtuple_error;
; 10262:       }
; 10263:     }
; 10264:     __pyx_v_obj = values[0];
; 10265:     __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 343, __pyx_L3_error)

	mov	rcx, rbp
	call	__Pyx_PyInt_As_int
	mov	esi, eax
	cmp	eax, -1
	jne	$LN4@pyx_memory@43
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	$LN4@pyx_memory@43
	mov	edx, 10265				; 00002819H
	jmp	$LN51@pyx_memory@43
$LN17@pyx_memory@43:

; 10241:         else {
; 10242:           __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 343, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rdx
	mov	eax, 2
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 10242				; 00002802H
	jmp	$LN51@pyx_memory@43
$LN31@pyx_memory@43:

; 10253:       }
; 10254:     } else {
; 10255:       switch (PyTuple_GET_SIZE(__pyx_args)) {

	mov	rax, QWORD PTR [rdx+16]
	sub	rax, 2
	je	SHORT $LN6@pyx_memory@43
	cmp	rax, 1
	je	SHORT $LN7@pyx_memory@43
$__pyx_L5_argtuple_error$20839:

; 10268:     } else {
; 10269:       __pyx_v_dtype_is_object = ((int)0);
; 10270:     }
; 10271:   }
; 10272:   goto __pyx_L4_argument_unpacking_done;
; 10273:   __pyx_L5_argtuple_error:;
; 10274:   __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 343, __pyx_L3_error)

	mov	rcx, QWORD PTR [rdi+16]
	cmp	rcx, 2
	jge	SHORT $LN45@pyx_memory@43
	mov	eax, 2
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	jmp	SHORT $LN44@pyx_memory@43
$LN45@pyx_memory@43:
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_07IGBEEPOP@at?5most?$AA@
$LN44@pyx_memory@43:
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	rcx, QWORD PTR [rcx]
	cmp	rax, 1
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	cmove	rdx, r8
	lea	r8, OFFSET FLAT:??_C@_09KBIJAOEO@__cinit__?$AA@
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 10274				; 00002822H
	jmp	SHORT $LN51@pyx_memory@43
$LN7@pyx_memory@43:

; 10256:         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rbx, QWORD PTR [rdx+40]
$LN6@pyx_memory@43:

; 10257:         CYTHON_FALLTHROUGH;
; 10258:         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbp, QWORD PTR [rdx+32]

; 10259:         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	r12, QWORD PTR [rdx+24]
	jmp	$LN8@pyx_memory@43
$LN4@pyx_memory@43:

; 10266:     if (values[2]) {
; 10267:       __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 343, __pyx_L3_error)

	mov	edi, r13d
	test	rbx, rbx
	je	SHORT $__pyx_L4_argument_unpacking_done$20876
	cmp	rbx, QWORD PTR __imp__Py_TrueStruct
	mov	eax, r13d
	sete	dil
	cmp	rbx, QWORD PTR __imp__Py_NoneStruct
	sete	al
	cmp	rbx, QWORD PTR __imp__Py_ZeroStruct
	sete	r13b
	or	eax, r13d
	or	eax, edi
	jne	SHORT $LN39@pyx_memory@43
	mov	rcx, rbx
	call	QWORD PTR __imp_PyObject_IsTrue
	mov	edi, eax
$LN39@pyx_memory@43:
	cmp	edi, -1
	jne	SHORT $__pyx_L4_argument_unpacking_done$20876
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$20876
	mov	edx, 10267				; 0000281bH
$LN51@pyx_memory@43:
	mov	r9, QWORD PTR __pyx_f+16

; 10275:   __pyx_L3_error:;
; 10276:   __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0CF@KAMCKACK@View?4MemoryView?4memoryview?4__cin@
	mov	r8d, 343				; 00000157H
	mov	DWORD PTR __pyx_lineno, 343		; 00000157H
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L3_error$20850:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 10277:   __Pyx_RefNannyFinishContext();
; 10278:   return -1;

	or	eax, -1
	jmp	SHORT $LN32@pyx_memory@43
$__pyx_L4_argument_unpacking_done$20876:

; 10279:   __pyx_L4_argument_unpacking_done:;
; 10280:   __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

	mov	r9d, edi
	mov	r8d, esi
	mov	rdx, r12
	mov	rcx, r15
	call	__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__
$LN32@pyx_memory@43:

; 10281: 
; 10282:   /* function exit code */
; 10283:   __Pyx_RefNannyFinishContext();
; 10284:   return __pyx_r;
; 10285: }

	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+56]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_memoryview___cinit__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_new_memoryview DD imagerel __pyx_tp_new_memoryview
	DD	imagerel __pyx_tp_new_memoryview+228
	DD	imagerel $unwind$__pyx_tp_new_memoryview
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_new_memoryview DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_new_memoryview
_TEXT	SEGMENT
t$ = 48
a$ = 56
k$ = 64
__pyx_tp_new_memoryview PROC				; COMDAT

; 20952: static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 20953:   struct __pyx_memoryview_obj *p;
; 20954:   PyObject *o;
; 20955:   if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

	bt	DWORD PTR [rcx+168], 20
	mov	rdi, r8
	mov	rsi, rdx
	mov	rax, rcx
	jb	SHORT $LN9@pyx_tp_new@3

; 20956:     o = (*t->tp_alloc)(t, 0);

	xor	edx, edx
	call	QWORD PTR [rax+304]

; 20957:   } else {

	jmp	SHORT $LN12@pyx_tp_new@3
$LN9@pyx_tp_new@3:

; 20958:     o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

	mov	rax, QWORD PTR __imp_PyBaseObject_Type
	mov	rdx, QWORD PTR __pyx_empty_tuple
	xor	r8d, r8d
	call	QWORD PTR [rax+312]
$LN12@pyx_tp_new@3:
	mov	rbx, rax

; 20959:   }
; 20960:   if (unlikely(!o)) return 0;

	test	rax, rax
	je	SHORT $LN4@pyx_tp_new@3

; 20961:   p = ((struct __pyx_memoryview_obj *)o);
; 20962:   p->__pyx_vtab = __pyx_vtabptr_memoryview;

	mov	rax, QWORD PTR __pyx_vtabptr_memoryview

; 20963:   p->obj = Py_None; Py_INCREF(Py_None);
; 20964:   p->_size = Py_None; Py_INCREF(Py_None);
; 20965:   p->_array_interface = Py_None; Py_INCREF(Py_None);
; 20966:   p->view.obj = NULL;
; 20967:   if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;

	mov	r8, rdi
	mov	rdx, rsi
	mov	QWORD PTR [rbx+16], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	rcx, rbx
	mov	QWORD PTR [rbx+24], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbx+32], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [rbx+40], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]
	mov	QWORD PTR [rbx+80], 0
	call	__pyx_memoryview___cinit__
	test	eax, eax
	jns	SHORT $LN6@pyx_tp_new@3
$bad$28245:

; 20968:   return o;
; 20969:   bad:
; 20970:   Py_DECREF(o); o = 0;

	add	QWORD PTR [rbx], -1
	jne	SHORT $LN4@pyx_tp_new@3
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	QWORD PTR [rax+48]
$LN4@pyx_tp_new@3:

; 20971:   return NULL;

	xor	eax, eax

; 20972: }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@pyx_tp_new@3:
	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
__pyx_tp_new_memoryview ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_tp_new__memoryviewslice DD imagerel __pyx_tp_new__memoryviewslice
	DD	imagerel __pyx_tp_new__memoryviewslice+76
	DD	imagerel $unwind$__pyx_tp_new__memoryviewslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_tp_new__memoryviewslice DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT __pyx_tp_new__memoryviewslice
_TEXT	SEGMENT
t$ = 48
a$ = 56
k$ = 64
__pyx_tp_new__memoryviewslice PROC			; COMDAT

; 21202: static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {

	sub	rsp, 40					; 00000028H

; 21203:   struct __pyx_memoryviewslice_obj *p;
; 21204:   PyObject *o = __pyx_tp_new_memoryview(t, a, k);

	call	__pyx_tp_new_memoryview
	mov	r11, rax

; 21205:   if (unlikely(!o)) return 0;

	test	rax, rax
	jne	SHORT $LN1@pyx_tp_new@4

; 21211: }

	add	rsp, 40					; 00000028H
	ret	0
$LN1@pyx_tp_new@4:

; 21206:   p = ((struct __pyx_memoryviewslice_obj *)o);
; 21207:   p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;

	mov	rax, QWORD PTR __pyx_vtabptr__memoryviewslice
	mov	QWORD PTR [r11+16], rax

; 21208:   p->from_object = Py_None; Py_INCREF(Py_None);

	mov	rax, QWORD PTR __imp__Py_NoneStruct
	mov	QWORD PTR [r11+392], rax
	mov	rax, QWORD PTR __imp__Py_NoneStruct
	inc	QWORD PTR [rax]

; 21209:   p->from_slice.memview = NULL;

	mov	QWORD PTR [r11+184], 0

; 21210:   return o;

	mov	rax, r11

; 21211: }

	add	rsp, 40					; 00000028H
	ret	0
__pyx_tp_new__memoryviewslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_02CJKHOMHP@vv?$AA@			; `string'
PUBLIC	??_C@_02DPBPGCAF@hv?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_8rsrpsinr_5set_antenna_hv_vv DD imagerel __pyx_pw_8rsrpsinr_5set_antenna_hv_vv
	DD	imagerel __pyx_pw_8rsrpsinr_5set_antenna_hv_vv+862
	DD	imagerel $unwind$__pyx_pw_8rsrpsinr_5set_antenna_hv_vv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_8rsrpsinr_5set_antenna_hv_vv DD 0c1c01H
	DD	012641cH
	DD	011541cH
	DD	010341cH
	DD	0f018921cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT ??_C@_02CJKHOMHP@vv?$AA@
CONST	SEGMENT
??_C@_02CJKHOMHP@vv?$AA@ DB 'vv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPBPGCAF@hv?$AA@
CONST	SEGMENT
??_C@_02DPBPGCAF@hv?$AA@ DB 'hv', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pw_8rsrpsinr_5set_antenna_hv_vv
_TEXT	SEGMENT
values$14551 = 64
__pyx_self$ = 128
__pyx_args$ = 136
__pyx_kwds$ = 144
__pyx_pw_8rsrpsinr_5set_antenna_hv_vv PROC		; COMDAT

; 2697 : static PyObject *__pyx_pw_8rsrpsinr_5set_antenna_hv_vv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 2698 :   PyArrayObject *__pyx_v_hv = 0;
; 2699 :   PyArrayObject *__pyx_v_vv = 0;
; 2700 :   PyObject *__pyx_r = 0;
; 2701 :   __Pyx_RefNannyDeclarations
; 2702 :   __Pyx_RefNannySetupContext("set_antenna_hv_vv (wrapper)", 0);
; 2703 :   {
; 2704 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hv,&__pyx_n_s_vv,0};
; 2705 :     PyObject* values[2] = {0,0};

	xor	r12d, r12d
	mov	r13, r8
	mov	rsi, rdx
	mov	rbx, r12
	mov	r15, rcx
	mov	rdi, r12
	mov	QWORD PTR values$14551[rsp], r12
	mov	QWORD PTR values$14551[rsp+8], rbx

; 2706 :     if (unlikely(__pyx_kwds)) {

	test	r8, r8
	je	$LN22@pyx_pw_8rs@4

; 2707 :       Py_ssize_t kw_args;
; 2708 :       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	r14, QWORD PTR [rdx+16]

; 2709 :       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN17@pyx_pw_8rs@4
	sub	rax, 1
	je	SHORT $LN18@pyx_pw_8rs@4
	cmp	rax, 1
	jne	$__pyx_L5_argtuple_error$14566

; 2710 :         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbx, QWORD PTR [rdx+32]
	mov	QWORD PTR values$14551[rsp+8], rbx
$LN18@pyx_pw_8rs@4:

; 2711 :         CYTHON_FALLTHROUGH;
; 2712 :         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rdi, QWORD PTR [rdx+24]
	mov	QWORD PTR values$14551[rsp], rdi
$LN17@pyx_pw_8rs@4:

; 2713 :         CYTHON_FALLTHROUGH;
; 2714 :         case  0: break;
; 2715 :         default: goto __pyx_L5_argtuple_error;
; 2716 :       }
; 2717 :       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	rbp, rax

; 2718 :       switch (pos_args) {

	mov	rax, r14
	test	r14, r14
	je	SHORT $LN13@pyx_pw_8rs@4
	cmp	rax, 1
	je	SHORT $LN11@pyx_pw_8rs@4
	jmp	SHORT $LN8@pyx_pw_8rs@4
$LN13@pyx_pw_8rs@4:

; 2719 :         case  0:
; 2720 :         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hv)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_hv
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rdi, rax
	mov	QWORD PTR values$14551[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$14566
	dec	rbp
$LN11@pyx_pw_8rs@4:

; 2721 :         else goto __pyx_L5_argtuple_error;
; 2722 :         CYTHON_FALLTHROUGH;
; 2723 :         case  1:
; 2724 :         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vv)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_vv
	mov	rcx, r13
	call	QWORD PTR __imp_PyDict_GetItem
	mov	rbx, rax
	mov	QWORD PTR values$14551[rsp+8], rax
	test	rax, rax
	je	SHORT $LN9@pyx_pw_8rs@4
	dec	rbp
$LN8@pyx_pw_8rs@4:

; 2727 :         }
; 2728 :       }
; 2729 :       if (unlikely(kw_args > 0)) {

	test	rbp, rbp
	jle	$LN3@pyx_pw_8rs@4

; 2730 :         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_antenna_hv_vv") < 0)) __PYX_ERR(0, 34, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@
	lea	r9, QWORD PTR values$14551[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_5set_antenna_hv_vv@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r13
	mov	QWORD PTR [rsp+32], r14
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	SHORT $LN63@pyx_pw_8rs@4
	mov	edx, 2730				; 00000aaaH
	jmp	$LN64@pyx_pw_8rs@4
$LN63@pyx_pw_8rs@4:

; 2736 :       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbx, QWORD PTR values$14551[rsp+8]
	mov	rdi, QWORD PTR values$14551[rsp]
	jmp	$LN3@pyx_pw_8rs@4
$LN9@pyx_pw_8rs@4:

; 2725 :         else {
; 2726 :           __Pyx_RaiseArgtupleInvalid("set_antenna_hv_vv", 1, 2, 2, 1); __PYX_ERR(0, 34, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	lea	r8, OFFSET FLAT:??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 2
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 2726				; 00000aa6H
	jmp	SHORT $LN64@pyx_pw_8rs@4
$LN22@pyx_pw_8rs@4:

; 2731 :       }
; 2732 :     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

	cmp	QWORD PTR [rdx+16], 2
	je	SHORT $LN4@pyx_pw_8rs@4
$__pyx_L5_argtuple_error$14566:

; 2737 :     }
; 2738 :     __pyx_v_hv = ((PyArrayObject *)values[0]);
; 2739 :     __pyx_v_vv = ((PyArrayObject *)values[1]);
; 2740 :   }
; 2741 :   goto __pyx_L4_argument_unpacking_done;
; 2742 :   __pyx_L5_argtuple_error:;
; 2743 :   __Pyx_RaiseArgtupleInvalid("set_antenna_hv_vv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 34, __pyx_L3_error)

	mov	rax, QWORD PTR [rsi+16]
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r9, OFFSET FLAT:??_C@_07JLAGAGFH@exactly?$AA@
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+40], rax
	lea	r8, OFFSET FLAT:??_C@_0BC@LEBODINL@set_antenna_hv_vv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], 2
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 2743				; 00000ab7H
$LN64@pyx_pw_8rs@4:
	mov	r9, QWORD PTR __pyx_f

; 2744 :   __pyx_L3_error:;
; 2745 :   __Pyx_AddTraceback("rsrpsinr.set_antenna_hv_vv", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0BL@LIFBHLAJ@rsrpsinr?4set_antenna_hv_vv?$AA@
	mov	r8d, 34					; 00000022H
	mov	DWORD PTR __pyx_lineno, 34		; 00000022H
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L3_error$14577:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 2746 :   __Pyx_RefNannyFinishContext();
; 2747 :   return NULL;

	xor	eax, eax
	jmp	$LN23@pyx_pw_8rs@4
$LN4@pyx_pw_8rs@4:

; 2733 :       goto __pyx_L5_argtuple_error;
; 2734 :     } else {
; 2735 :       values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rdi, QWORD PTR [rdx+24]

; 2736 :       values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbx, QWORD PTR [rdx+32]
$LN3@pyx_pw_8rs@4:

; 2748 :   __pyx_L4_argument_unpacking_done:;
; 2749 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hv), __pyx_ptype_5numpy_ndarray, 1, "hv", 0))) __PYX_ERR(0, 35, __pyx_L1_error)

	mov	r11, QWORD PTR __imp__Py_NoneStruct
	mov	r10, QWORD PTR [rdi+8]
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	cmp	rdi, r11
	mov	ecx, r12d
	mov	eax, r12d
	sete	cl
	cmp	r10, rdx
$__pyx_L4_argument_unpacking_done$14588:
	sete	al
	or	eax, ecx
	jne	SHORT $LN2@pyx_pw_8rs@4
	test	rdx, rdx
	jne	SHORT $LN49@pyx_pw_8rs@4
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN61@pyx_pw_8rs@4
$LN49@pyx_pw_8rs@4:
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN2@pyx_pw_8rs@4
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rax, QWORD PTR [r10+24]
	mov	r9, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_02DPBPGCAF@hv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN61@pyx_pw_8rs@4:
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 35		; 00000023H
	mov	DWORD PTR __pyx_clineno, 2749		; 00000abdH
	mov	QWORD PTR __pyx_filename, rax
	jmp	$__pyx_L0$14605
$LN2@pyx_pw_8rs@4:

; 2750 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vv), __pyx_ptype_5numpy_ndarray, 1, "vv", 0))) __PYX_ERR(0, 36, __pyx_L1_error)

	mov	r10, QWORD PTR [rbx+8]
	cmp	rbx, r11
	mov	ecx, r12d
	sete	cl
	cmp	r10, rdx
	mov	eax, r12d
	sete	al
	or	eax, ecx
	jne	SHORT $LN1@pyx_pw_8rs@4
	test	rdx, rdx
	jne	SHORT $LN58@pyx_pw_8rs@4
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN62@pyx_pw_8rs@4
$LN58@pyx_pw_8rs@4:
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN1@pyx_pw_8rs@4
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rax, QWORD PTR [r10+24]
	mov	r9, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_02CJKHOMHP@vv?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN62@pyx_pw_8rs@4:
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 36		; 00000024H
	mov	DWORD PTR __pyx_clineno, 2750		; 00000abeH
	mov	QWORD PTR __pyx_filename, rax
$__pyx_L1_error$14598:

; 2752 : 
; 2753 :   /* function exit code */
; 2754 :   goto __pyx_L0;
; 2755 :   __pyx_L1_error:;
; 2756 :   __pyx_r = NULL;

	jmp	SHORT $__pyx_L0$14605
$LN1@pyx_pw_8rs@4:

; 2751 :   __pyx_r = __pyx_pf_8rsrpsinr_4set_antenna_hv_vv(__pyx_self, __pyx_v_hv, __pyx_v_vv);

	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, r15
	call	__pyx_pf_8rsrpsinr_4set_antenna_hv_vv
	mov	r12, rax
$__pyx_L0$14605:

; 2757 :   __pyx_L0:;
; 2758 :   __Pyx_RefNannyFinishContext();
; 2759 :   return __pyx_r;

	mov	rax, r12
$LN23@pyx_pw_8rs@4:

; 2760 : }

	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
__pyx_pw_8rsrpsinr_5set_antenna_hv_vv ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LPIGNBKK@B_of_S?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$__pyx_pw_8rsrpsinr_9get_coverage DD imagerel __pyx_pw_8rsrpsinr_9get_coverage
	DD	imagerel __pyx_pw_8rsrpsinr_9get_coverage+2364
	DD	imagerel $unwind$__pyx_pw_8rsrpsinr_9get_coverage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__pyx_pw_8rsrpsinr_9get_coverage DD 0176701H
	DD	0bb867H
	DD	0ca84aH
	DD	0d9842H
	DD	0e883dH
	DD	0f7827H
	DD	0106823H
	DD	02b341dH
	DD	022011dH
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0500cH
xdata	ENDS
;	COMDAT ??_C@_06LPIGNBKK@B_of_S?$AA@
CONST	SEGMENT
??_C@_06LPIGNBKK@B_of_S?$AA@ DB 'B_of_S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT __pyx_pw_8rsrpsinr_9get_coverage
_TEXT	SEGMENT
values$2$ = 80
values$3$ = 88
pos_args$1$ = 96
values$16742 = 112
__pyx_self$ = 336
__pyx_args$ = 344
values$6$ = 352
__pyx_kwds$ = 352
values$7$ = 360
__pyx_pw_8rsrpsinr_9get_coverage PROC			; COMDAT

; 5017 : static PyObject *__pyx_pw_8rsrpsinr_9get_coverage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 272				; 00000110H

; 5018 :   PyArrayObject *__pyx_v_S = 0;
; 5019 :   PyArrayObject *__pyx_v_B = 0;
; 5020 :   PyArrayObject *__pyx_v_B_of_S = 0;
; 5021 :   double __pyx_v_RSRP_TH;
; 5022 :   double __pyx_v_SINR_TH;
; 5023 :   double __pyx_v_TERM_HEIGHT;
; 5024 :   double __pyx_v_FREQ;
; 5025 :   double __pyx_v_NOISE;
; 5026 :   PyObject *__pyx_r = 0;
; 5027 :   __Pyx_RefNannyDeclarations
; 5028 :   __Pyx_RefNannySetupContext("get_coverage (wrapper)", 0);
; 5029 :   {
; 5030 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_S,&__pyx_n_s_B,&__pyx_n_s_B_of_S,&__pyx_n_s_RSRP_TH,&__pyx_n_s_SINR_TH,&__pyx_n_s_TERM_HEIGHT,&__pyx_n_s_FREQ,&__pyx_n_s_NOISE,0};
; 5031 :     PyObject* values[8] = {0,0,0,0,0,0,0,0};

	xor	ecx, ecx
	movaps	XMMWORD PTR [rax-72], xmm6
	movaps	XMMWORD PTR [rax-88], xmm7
	mov	QWORD PTR values$16742[rsp], rcx
	mov	QWORD PTR values$16742[rsp+8], rcx
	mov	QWORD PTR [rax-200], rcx
	movaps	XMMWORD PTR [rax-104], xmm8
	movaps	XMMWORD PTR [rax-120], xmm9
	movaps	XMMWORD PTR [rax-136], xmm10
	mov	QWORD PTR [rax-192], rcx
	mov	QWORD PTR [rax-184], rcx
	mov	QWORD PTR [rax-176], rcx
	movaps	XMMWORD PTR [rax-152], xmm11
	mov	QWORD PTR [rax-168], rcx
	mov	QWORD PTR [rax-160], rcx

; 5032 :     if (unlikely(__pyx_kwds)) {
; 5033 :       Py_ssize_t kw_args;
; 5034 :       const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

	mov	rax, QWORD PTR [rdx+16]
	mov	r14, r8
	mov	rbx, rdx
	mov	QWORD PTR values$3$[rsp], rcx
	mov	QWORD PTR values$2$[rsp], rcx
	mov	QWORD PTR values$7$[rsp], rcx
	mov	rsi, rcx
	mov	r12, rcx
	mov	r13, rcx
	mov	r15, rcx
	mov	QWORD PTR values$6$[rsp], rcx
	test	r8, r8
	je	$LN69@pyx_pw_8rs@5
	mov	QWORD PTR pos_args$1$[rsp], rax

; 5035 :       switch (pos_args) {

	cmp	rax, 8
	ja	$__pyx_L5_argtuple_error$16769
	lea	rbp, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN141@pyx_pw_8rs@5[rbp+rax*4]
	add	rax, rbp
	jmp	rax
$LN66@pyx_pw_8rs@5:

; 5036 :         case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

	mov	rax, QWORD PTR [rdx+80]
	mov	QWORD PTR values$6$[rsp], rax
	mov	QWORD PTR values$16742[rsp+56], rax
$LN65@pyx_pw_8rs@5:

; 5037 :         CYTHON_FALLTHROUGH;
; 5038 :         case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

	mov	r15, QWORD PTR [rdx+72]
	mov	QWORD PTR values$16742[rsp+48], r15
$LN64@pyx_pw_8rs@5:

; 5039 :         CYTHON_FALLTHROUGH;
; 5040 :         case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

	mov	r13, QWORD PTR [rdx+64]
	mov	QWORD PTR values$16742[rsp+40], r13
$LN63@pyx_pw_8rs@5:

; 5041 :         CYTHON_FALLTHROUGH;
; 5042 :         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

	mov	r12, QWORD PTR [rdx+56]
	mov	QWORD PTR values$16742[rsp+32], r12
$LN62@pyx_pw_8rs@5:

; 5043 :         CYTHON_FALLTHROUGH;
; 5044 :         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

	mov	rsi, QWORD PTR [rdx+48]
	mov	QWORD PTR values$16742[rsp+24], rsi
$LN61@pyx_pw_8rs@5:

; 5045 :         CYTHON_FALLTHROUGH;
; 5046 :         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rax, QWORD PTR [rdx+40]
	mov	QWORD PTR values$7$[rsp], rax
	mov	QWORD PTR values$16742[rsp+16], rax
$LN60@pyx_pw_8rs@5:

; 5047 :         CYTHON_FALLTHROUGH;
; 5048 :         case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR values$2$[rsp], rax
	mov	QWORD PTR values$16742[rsp+8], rax
$LN59@pyx_pw_8rs@5:

; 5049 :         CYTHON_FALLTHROUGH;
; 5050 :         case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rax, QWORD PTR [rdx+24]
	mov	QWORD PTR values$3$[rsp], rax
	mov	QWORD PTR values$16742[rsp], rax
$LN58@pyx_pw_8rs@5:

; 5051 :         CYTHON_FALLTHROUGH;
; 5052 :         case  0: break;
; 5053 :         default: goto __pyx_L5_argtuple_error;
; 5054 :       }
; 5055 :       kw_args = PyDict_Size(__pyx_kwds);

	mov	rcx, r8
	call	QWORD PTR __imp_PyDict_Size
	mov	rdi, rax

; 5056 :       switch (pos_args) {

	mov	rax, QWORD PTR pos_args$1$[rsp]
	cmp	rax, 7
	ja	$LN31@pyx_pw_8rs@5
	mov	eax, DWORD PTR $LN140@pyx_pw_8rs@5[rbp+rax*4]
	add	rax, rbp
	jmp	rax
$LN54@pyx_pw_8rs@5:

; 5057 :         case  0:
; 5058 :         if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_S
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem
	mov	QWORD PTR values$3$[rsp], rax
	mov	QWORD PTR values$16742[rsp], rax
	test	rax, rax
	je	$__pyx_L5_argtuple_error$16769
	dec	rdi
$LN52@pyx_pw_8rs@5:

; 5059 :         else goto __pyx_L5_argtuple_error;
; 5060 :         CYTHON_FALLTHROUGH;
; 5061 :         case  1:
; 5062 :         if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_B
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem
	mov	QWORD PTR values$2$[rsp], rax
	mov	QWORD PTR values$16742[rsp+8], rax
	test	rax, rax
	je	$LN50@pyx_pw_8rs@5
	dec	rdi
$LN49@pyx_pw_8rs@5:

; 5065 :         }
; 5066 :         CYTHON_FALLTHROUGH;
; 5067 :         case  2:
; 5068 :         if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_B_of_S)) != 0)) kw_args--;

	mov	rdx, QWORD PTR __pyx_n_s_B_of_S
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem
	mov	QWORD PTR values$7$[rsp], rax
	mov	QWORD PTR values$16742[rsp+16], rax
	test	rax, rax
	je	$LN47@pyx_pw_8rs@5
	dec	rdi
$LN46@pyx_pw_8rs@5:

; 5071 :         }
; 5072 :         CYTHON_FALLTHROUGH;
; 5073 :         case  3:
; 5074 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5075 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_RSRP_TH);

	mov	rdx, QWORD PTR __pyx_n_s_RSRP_TH
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 5076 :           if (value) { values[3] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN43@pyx_pw_8rs@5
	mov	rsi, rax
	mov	QWORD PTR values$16742[rsp+24], rax
	dec	rdi
$LN43@pyx_pw_8rs@5:

; 5077 :         }
; 5078 :         CYTHON_FALLTHROUGH;
; 5079 :         case  4:
; 5080 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5081 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_SINR_TH);

	mov	rdx, QWORD PTR __pyx_n_s_SINR_TH
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 5082 :           if (value) { values[4] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN40@pyx_pw_8rs@5
	mov	r12, rax
	mov	QWORD PTR values$16742[rsp+32], rax
	dec	rdi
$LN40@pyx_pw_8rs@5:

; 5083 :         }
; 5084 :         CYTHON_FALLTHROUGH;
; 5085 :         case  5:
; 5086 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5087 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_TERM_HEIGHT);

	mov	rdx, QWORD PTR __pyx_n_s_TERM_HEIGHT
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 5088 :           if (value) { values[5] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN37@pyx_pw_8rs@5
	mov	r13, rax
	mov	QWORD PTR values$16742[rsp+40], rax
	dec	rdi
$LN37@pyx_pw_8rs@5:

; 5089 :         }
; 5090 :         CYTHON_FALLTHROUGH;
; 5091 :         case  6:
; 5092 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5093 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_FREQ);

	mov	rdx, QWORD PTR __pyx_n_s_FREQ
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 5094 :           if (value) { values[6] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN34@pyx_pw_8rs@5
	mov	r15, rax
	mov	QWORD PTR values$16742[rsp+48], rax
	dec	rdi
$LN34@pyx_pw_8rs@5:

; 5095 :         }
; 5096 :         CYTHON_FALLTHROUGH;
; 5097 :         case  7:
; 5098 :         if (kw_args > 0) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5099 :           PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_NOISE);

	mov	rdx, QWORD PTR __pyx_n_s_NOISE
	mov	rcx, r14
	call	QWORD PTR __imp_PyDict_GetItem

; 5100 :           if (value) { values[7] = value; kw_args--; }

	test	rax, rax
	je	SHORT $LN154@pyx_pw_8rs@5
	mov	QWORD PTR values$6$[rsp], rax
	mov	QWORD PTR values$16742[rsp+56], rax
	dec	rdi
$LN154@pyx_pw_8rs@5:

; 5018 :   PyArrayObject *__pyx_v_S = 0;
; 5019 :   PyArrayObject *__pyx_v_B = 0;
; 5020 :   PyArrayObject *__pyx_v_B_of_S = 0;
; 5021 :   double __pyx_v_RSRP_TH;
; 5022 :   double __pyx_v_SINR_TH;
; 5023 :   double __pyx_v_TERM_HEIGHT;
; 5024 :   double __pyx_v_FREQ;
; 5025 :   double __pyx_v_NOISE;
; 5026 :   PyObject *__pyx_r = 0;
; 5027 :   __Pyx_RefNannyDeclarations
; 5028 :   __Pyx_RefNannySetupContext("get_coverage (wrapper)", 0);
; 5029 :   {
; 5030 :     static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_S,&__pyx_n_s_B,&__pyx_n_s_B_of_S,&__pyx_n_s_RSRP_TH,&__pyx_n_s_SINR_TH,&__pyx_n_s_TERM_HEIGHT,&__pyx_n_s_FREQ,&__pyx_n_s_NOISE,0};
; 5031 :     PyObject* values[8] = {0,0,0,0,0,0,0,0};

	mov	rax, QWORD PTR pos_args$1$[rsp]
$LN31@pyx_pw_8rs@5:

; 5101 :         }
; 5102 :       }
; 5103 :       if (unlikely(kw_args > 0)) {

	test	rdi, rdi
	jle	$LN152@pyx_pw_8rs@5

; 5104 :         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_coverage") < 0)) __PYX_ERR(0, 241, __pyx_L3_error)

	lea	r8, OFFSET FLAT:??_C@_0N@NLCAJHNH@get_coverage?$AA@
	lea	r9, QWORD PTR values$16742[rsp]
	lea	rdx, OFFSET FLAT:?__pyx_pyargnames@?2??__pyx_pw_8rsrpsinr_9get_coverage@@9@9
	mov	QWORD PTR [rsp+40], r8
	xor	r8d, r8d
	mov	rcx, r14
	mov	QWORD PTR [rsp+32], rax
	call	__Pyx_ParseOptionalKeywords
	test	eax, eax
	jns	$LN142@pyx_pw_8rs@5
	mov	edx, 5104				; 000013f0H
	jmp	$LN155@pyx_pw_8rs@5
$LN50@pyx_pw_8rs@5:

; 5063 :         else {
; 5064 :           __Pyx_RaiseArgtupleInvalid("get_coverage", 0, 3, 8, 1); __PYX_ERR(0, 241, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rdx
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	lea	r8, OFFSET FLAT:??_C@_0N@NLCAJHNH@get_coverage?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 5064				; 000013c8H
	jmp	$LN155@pyx_pw_8rs@5
$LN47@pyx_pw_8rs@5:

; 5069 :         else {
; 5070 :           __Pyx_RaiseArgtupleInvalid("get_coverage", 0, 3, 8, 2); __PYX_ERR(0, 241, __pyx_L3_error)

	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	mov	QWORD PTR [rsp+48], 2
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+40], rdx
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	lea	r8, OFFSET FLAT:??_C@_0N@NLCAJHNH@get_coverage?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 5070				; 000013ceH
	jmp	$LN155@pyx_pw_8rs@5
$LN142@pyx_pw_8rs@5:

; 5120 :         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	rbx, QWORD PTR values$16742[rsp+56]
	mov	r15, QWORD PTR values$16742[rsp+48]
	mov	r13, QWORD PTR values$16742[rsp+40]
	mov	r12, QWORD PTR values$16742[rsp+32]
	mov	rsi, QWORD PTR values$16742[rsp+24]
	mov	rdi, QWORD PTR values$16742[rsp+16]
	mov	rbp, QWORD PTR values$16742[rsp+8]
	mov	r14, QWORD PTR values$16742[rsp]
	jmp	SHORT $LN26@pyx_pw_8rs@5
$LN69@pyx_pw_8rs@5:

; 5105 :       }
; 5106 :     } else {
; 5107 :       switch (PyTuple_GET_SIZE(__pyx_args)) {

	add	rax, -3
	cmp	rax, 5
	ja	$__pyx_L5_argtuple_error$16769
	lea	rbp, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN139@pyx_pw_8rs@5[rbp+rax*4]
	add	rax, rbp
	jmp	rax
$LN25@pyx_pw_8rs@5:

; 5108 :         case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

	mov	rax, QWORD PTR [rdx+80]
	mov	QWORD PTR values$6$[rsp], rax
$LN24@pyx_pw_8rs@5:

; 5109 :         CYTHON_FALLTHROUGH;
; 5110 :         case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

	mov	r15, QWORD PTR [rdx+72]
$LN23@pyx_pw_8rs@5:

; 5111 :         CYTHON_FALLTHROUGH;
; 5112 :         case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

	mov	r13, QWORD PTR [rdx+64]
$LN22@pyx_pw_8rs@5:

; 5113 :         CYTHON_FALLTHROUGH;
; 5114 :         case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

	mov	r12, QWORD PTR [rdx+56]
$LN21@pyx_pw_8rs@5:

; 5115 :         CYTHON_FALLTHROUGH;
; 5116 :         case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

	mov	rsi, QWORD PTR [rdx+48]
$LN20@pyx_pw_8rs@5:

; 5117 :         CYTHON_FALLTHROUGH;
; 5118 :         case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

	mov	rdi, QWORD PTR [rdx+40]

; 5119 :         values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

	mov	rbp, QWORD PTR [rdx+32]

; 5120 :         values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

	mov	r14, QWORD PTR [rdx+24]
	jmp	SHORT $LN156@pyx_pw_8rs@5
$LN152@pyx_pw_8rs@5:

; 5108 :         case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

	mov	r14, QWORD PTR values$3$[rsp]
	mov	rbp, QWORD PTR values$2$[rsp]
	mov	rdi, QWORD PTR values$7$[rsp]
$LN156@pyx_pw_8rs@5:
	mov	rbx, QWORD PTR values$6$[rsp]
$LN26@pyx_pw_8rs@5:

; 5121 :         break;
; 5122 :         default: goto __pyx_L5_argtuple_error;
; 5123 :       }
; 5124 :     }
; 5125 :     __pyx_v_S = ((PyArrayObject *)values[0]);
; 5126 :     __pyx_v_B = ((PyArrayObject *)values[1]);
; 5127 :     __pyx_v_B_of_S = ((PyArrayObject *)values[2]);
; 5128 :     if (values[3]) {

	movsdx	xmm8, QWORD PTR __real@bff0000000000000
	test	rsi, rsi
	je	SHORT $LN18@pyx_pw_8rs@5

; 5129 :       __pyx_v_RSRP_TH = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_RSRP_TH == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [rsi+8], rax
	jne	SHORT $LN72@pyx_pw_8rs@5
	movsdx	xmm11, QWORD PTR [rsi+16]
	jmp	SHORT $LN73@pyx_pw_8rs@5
$LN72@pyx_pw_8rs@5:
	mov	rcx, rsi
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm11, xmm0
$LN73@pyx_pw_8rs@5:
	ucomisd	xmm11, xmm8
	jp	SHORT $LN16@pyx_pw_8rs@5
	jne	SHORT $LN16@pyx_pw_8rs@5
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN16@pyx_pw_8rs@5
	mov	r8d, 246				; 000000f6H
	mov	edx, 5129				; 00001409H
	jmp	$LN157@pyx_pw_8rs@5
$LN18@pyx_pw_8rs@5:

; 5130 :     } else {
; 5131 :       __pyx_v_RSRP_TH = ((double)-88.0);

	movsdx	xmm11, QWORD PTR __real@c056000000000000
$LN16@pyx_pw_8rs@5:

; 5132 :     }
; 5133 :     if (values[4]) {

	test	r12, r12
	je	SHORT $LN15@pyx_pw_8rs@5

; 5134 :       __pyx_v_SINR_TH = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_SINR_TH == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [r12+8], rax
	jne	SHORT $LN74@pyx_pw_8rs@5
	movsdx	xmm10, QWORD PTR [r12+16]
	jmp	SHORT $LN75@pyx_pw_8rs@5
$LN74@pyx_pw_8rs@5:
	mov	rcx, r12
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm10, xmm0
$LN75@pyx_pw_8rs@5:
	ucomisd	xmm10, xmm8
	jp	SHORT $LN13@pyx_pw_8rs@5
	jne	SHORT $LN13@pyx_pw_8rs@5
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN13@pyx_pw_8rs@5
	mov	r8d, 247				; 000000f7H
	mov	edx, 5134				; 0000140eH
	jmp	$LN157@pyx_pw_8rs@5
$LN15@pyx_pw_8rs@5:

; 5135 :     } else {
; 5136 :       __pyx_v_SINR_TH = ((double)-3.0);

	movsdx	xmm10, QWORD PTR __real@c008000000000000
$LN13@pyx_pw_8rs@5:

; 5137 :     }
; 5138 :     if (values[5]) {

	test	r13, r13
	je	SHORT $LN12@pyx_pw_8rs@5

; 5139 :       __pyx_v_TERM_HEIGHT = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_TERM_HEIGHT == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [r13+8], rax
	jne	SHORT $LN76@pyx_pw_8rs@5
	movsdx	xmm9, QWORD PTR [r13+16]
	jmp	SHORT $LN77@pyx_pw_8rs@5
$LN76@pyx_pw_8rs@5:
	mov	rcx, r13
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm9, xmm0
$LN77@pyx_pw_8rs@5:
	ucomisd	xmm9, xmm8
	jp	SHORT $LN10@pyx_pw_8rs@5
	jne	SHORT $LN10@pyx_pw_8rs@5
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN10@pyx_pw_8rs@5
	mov	r8d, 248				; 000000f8H
	mov	edx, 5139				; 00001413H
	jmp	$LN157@pyx_pw_8rs@5
$LN12@pyx_pw_8rs@5:

; 5140 :     } else {
; 5141 :       __pyx_v_TERM_HEIGHT = ((double)1.5);

	movsdx	xmm9, QWORD PTR __real@3ff8000000000000
$LN10@pyx_pw_8rs@5:

; 5142 :     }
; 5143 :     if (values[6]) {

	test	r15, r15
	je	SHORT $LN9@pyx_pw_8rs@5

; 5144 :       __pyx_v_FREQ = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_FREQ == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [r15+8], rax
	jne	SHORT $LN78@pyx_pw_8rs@5
	movsdx	xmm7, QWORD PTR [r15+16]
	jmp	SHORT $LN79@pyx_pw_8rs@5
$LN78@pyx_pw_8rs@5:
	mov	rcx, r15
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm7, xmm0
$LN79@pyx_pw_8rs@5:
	ucomisd	xmm7, xmm8
	jp	SHORT $LN7@pyx_pw_8rs@5
	jne	SHORT $LN7@pyx_pw_8rs@5
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $LN7@pyx_pw_8rs@5
	mov	r8d, 249				; 000000f9H
	mov	edx, 5144				; 00001418H
	jmp	$LN157@pyx_pw_8rs@5
$LN9@pyx_pw_8rs@5:

; 5145 :     } else {
; 5146 :       __pyx_v_FREQ = ((double)900.0);

	movsdx	xmm7, QWORD PTR __real@408c200000000000
$LN7@pyx_pw_8rs@5:

; 5147 :     }
; 5148 :     if (values[7]) {

	test	rbx, rbx
	je	SHORT $LN6@pyx_pw_8rs@5

; 5149 :       __pyx_v_NOISE = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_NOISE == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L3_error)

	mov	rax, QWORD PTR __imp_PyFloat_Type
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN80@pyx_pw_8rs@5
	movsdx	xmm6, QWORD PTR [rbx+16]
	jmp	SHORT $LN81@pyx_pw_8rs@5
$LN80@pyx_pw_8rs@5:
	mov	rcx, rbx
	call	QWORD PTR __imp_PyFloat_AsDouble
	movapd	xmm6, xmm0
$LN81@pyx_pw_8rs@5:
	ucomisd	xmm6, xmm8
	jp	SHORT $__pyx_L4_argument_unpacking_done$16865
	jne	SHORT $__pyx_L4_argument_unpacking_done$16865
	call	QWORD PTR __imp_PyErr_Occurred
	test	rax, rax
	je	SHORT $__pyx_L4_argument_unpacking_done$16865
	mov	r8d, 250				; 000000faH
	mov	edx, 5149				; 0000141dH
	jmp	$LN157@pyx_pw_8rs@5
$LN6@pyx_pw_8rs@5:

; 5150 :     } else {
; 5151 :       __pyx_v_NOISE = ((double)-110.0);

	movsdx	xmm6, QWORD PTR __real@c05b800000000000
$__pyx_L4_argument_unpacking_done$16865:

; 5161 :   __pyx_L4_argument_unpacking_done:;
; 5162 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_S), __pyx_ptype_5numpy_ndarray, 1, "S", 0))) __PYX_ERR(0, 242, __pyx_L1_error)

	mov	r11, QWORD PTR __imp__Py_NoneStruct
	mov	r10, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR __pyx_ptype_5numpy_ndarray
	xor	ebx, ebx
	cmp	r14, r11
	mov	ecx, ebx
	sete	cl
	cmp	r10, rdx
	mov	eax, ebx
	sete	al
	or	eax, ecx
	jne	SHORT $LN3@pyx_pw_8rs@5
	test	rdx, rdx
	jne	SHORT $LN115@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN136@pyx_pw_8rs@5
$LN115@pyx_pw_8rs@5:
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN3@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rax, QWORD PTR [r10+24]
	mov	r9, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_01CPLAODJH@S?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN136@pyx_pw_8rs@5:
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 242		; 000000f2H
	mov	DWORD PTR __pyx_clineno, 5162		; 0000142aH
	mov	QWORD PTR __pyx_filename, rax

; 5166 : 
; 5167 :   /* function exit code */
; 5168 :   goto __pyx_L0;
; 5169 :   __pyx_L1_error:;
; 5170 :   __pyx_r = NULL;
; 5171 :   __pyx_L0:;
; 5172 :   __Pyx_RefNannyFinishContext();
; 5173 :   return __pyx_r;

	mov	rax, rbx
	jmp	$LN70@pyx_pw_8rs@5
$LN3@pyx_pw_8rs@5:

; 5163 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_ptype_5numpy_ndarray, 1, "B", 0))) __PYX_ERR(0, 243, __pyx_L1_error)

	mov	r10, QWORD PTR [rbp+8]
	cmp	rbp, r11
	mov	ecx, ebx
	sete	cl
	cmp	r10, rdx
	mov	eax, ebx
	sete	al
	or	eax, ecx
	jne	SHORT $LN2@pyx_pw_8rs@5
	test	rdx, rdx
	jne	SHORT $LN124@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN137@pyx_pw_8rs@5
$LN124@pyx_pw_8rs@5:
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN2@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rax, QWORD PTR [r10+24]
	mov	r9, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_01HMGJMAIH@B?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN137@pyx_pw_8rs@5:
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 243		; 000000f3H
	mov	DWORD PTR __pyx_clineno, 5163		; 0000142bH
	mov	QWORD PTR __pyx_filename, rax

; 5166 : 
; 5167 :   /* function exit code */
; 5168 :   goto __pyx_L0;
; 5169 :   __pyx_L1_error:;
; 5170 :   __pyx_r = NULL;
; 5171 :   __pyx_L0:;
; 5172 :   __Pyx_RefNannyFinishContext();
; 5173 :   return __pyx_r;

	mov	rax, rbx
	jmp	$LN70@pyx_pw_8rs@5
$LN2@pyx_pw_8rs@5:

; 5164 :   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B_of_S), __pyx_ptype_5numpy_ndarray, 1, "B_of_S", 0))) __PYX_ERR(0, 244, __pyx_L1_error)

	mov	r10, QWORD PTR [rdi+8]
	cmp	rdi, r11
	mov	ecx, ebx
	sete	cl
	cmp	r10, rdx
	mov	eax, ebx
	sete	al
	or	eax, ecx
	jne	SHORT $LN1@pyx_pw_8rs@5
	test	rdx, rdx
	jne	SHORT $LN133@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_SystemError
	lea	rdx, OFFSET FLAT:??_C@_0BE@JOAHGPPF@Missing?5type?5object?$AA@
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp_PyErr_SetString
	jmp	SHORT $LN138@pyx_pw_8rs@5
$LN133@pyx_pw_8rs@5:
	mov	rcx, r10
	call	__Pyx_IsSubtype
	test	eax, eax
	jne	SHORT $LN1@pyx_pw_8rs@5
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	mov	rax, QWORD PTR [r10+24]
	mov	r9, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rcx]
	lea	r8, OFFSET FLAT:??_C@_06LPIGNBKK@B_of_S?$AA@
	lea	rdx, OFFSET FLAT:??_C@_0ED@MGGMNKAN@Argument?5?8?$CF?4200s?8?5has?5incorrect?5@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
$LN138@pyx_pw_8rs@5:
	mov	rax, QWORD PTR __pyx_f
	mov	DWORD PTR __pyx_lineno, 244		; 000000f4H
	mov	DWORD PTR __pyx_clineno, 5164		; 0000142cH
	mov	QWORD PTR __pyx_filename, rax

; 5166 : 
; 5167 :   /* function exit code */
; 5168 :   goto __pyx_L0;
; 5169 :   __pyx_L1_error:;
; 5170 :   __pyx_r = NULL;
; 5171 :   __pyx_L0:;
; 5172 :   __Pyx_RefNannyFinishContext();
; 5173 :   return __pyx_r;

	mov	rax, rbx
$__pyx_L1_error$16875:
	jmp	$LN70@pyx_pw_8rs@5
$LN1@pyx_pw_8rs@5:

; 5165 :   __pyx_r = __pyx_pf_8rsrpsinr_8get_coverage(__pyx_self, __pyx_v_S, __pyx_v_B, __pyx_v_B_of_S, __pyx_v_RSRP_TH, __pyx_v_SINR_TH, __pyx_v_TERM_HEIGHT, __pyx_v_FREQ, __pyx_v_NOISE);

	mov	rcx, QWORD PTR __pyx_self$[rsp]
	movsdx	QWORD PTR [rsp+64], xmm6
	movsdx	QWORD PTR [rsp+56], xmm7
	mov	r9, rdi
	mov	r8, rbp
	mov	rdx, r14
	movsdx	QWORD PTR [rsp+48], xmm9
	movsdx	QWORD PTR [rsp+40], xmm10
	movsdx	QWORD PTR [rsp+32], xmm11
	call	__pyx_pf_8rsrpsinr_8get_coverage
$__pyx_L0$16888:
	mov	rbx, rax

; 5166 : 
; 5167 :   /* function exit code */
; 5168 :   goto __pyx_L0;
; 5169 :   __pyx_L1_error:;
; 5170 :   __pyx_r = NULL;
; 5171 :   __pyx_L0:;
; 5172 :   __Pyx_RefNannyFinishContext();
; 5173 :   return __pyx_r;

	jmp	$LN70@pyx_pw_8rs@5
$__pyx_L5_argtuple_error$16769:

; 5152 :     }
; 5153 :   }
; 5154 :   goto __pyx_L4_argument_unpacking_done;
; 5155 :   __pyx_L5_argtuple_error:;
; 5156 :   __Pyx_RaiseArgtupleInvalid("get_coverage", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 241, __pyx_L3_error)

	mov	rcx, QWORD PTR [rbx+16]
	cmp	rcx, 3
	jge	SHORT $LN106@pyx_pw_8rs@5
	mov	eax, 3
	lea	r9, OFFSET FLAT:??_C@_08FNDBFMB@at?5least?$AA@
	jmp	SHORT $LN105@pyx_pw_8rs@5
$LN106@pyx_pw_8rs@5:
	mov	eax, 8
	lea	r9, OFFSET FLAT:??_C@_07IGBEEPOP@at?5most?$AA@
$LN105@pyx_pw_8rs@5:
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR __imp_PyExc_TypeError
	lea	r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
	mov	rcx, QWORD PTR [rcx]
	cmp	rax, 1
	lea	rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
	cmove	rdx, r8
	lea	r8, OFFSET FLAT:??_C@_0N@NLCAJHNH@get_coverage?$AA@
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:??_C@_0DM@NNBILEHH@?$CF?4200s?$CI?$CJ?5takes?5?$CF?48s?5?$CFzd?5position@
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR __imp_PyErr_Format
	mov	edx, 5156				; 00001424H
$LN155@pyx_pw_8rs@5:
	mov	r8d, 241				; 000000f1H
$LN157@pyx_pw_8rs@5:
	mov	r9, QWORD PTR __pyx_f

; 5157 :   __pyx_L3_error:;
; 5158 :   __Pyx_AddTraceback("rsrpsinr.get_coverage", __pyx_clineno, __pyx_lineno, __pyx_filename);

	lea	rcx, OFFSET FLAT:??_C@_0BG@BHEBIBGE@rsrpsinr?4get_coverage?$AA@
	mov	DWORD PTR __pyx_lineno, r8d
	mov	DWORD PTR __pyx_clineno, edx
$__pyx_L3_error$16780:
	mov	QWORD PTR __pyx_filename, r9
	call	__Pyx_AddTraceback

; 5159 :   __Pyx_RefNannyFinishContext();
; 5160 :   return NULL;

	xor	eax, eax
$LN70@pyx_pw_8rs@5:

; 5174 : }

	lea	r11, QWORD PTR [rsp+272]
	mov	rbx, QWORD PTR [r11+72]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN141@pyx_pw_8rs@5:
	DD	$LN58@pyx_pw_8rs@5
	DD	$LN59@pyx_pw_8rs@5
	DD	$LN60@pyx_pw_8rs@5
	DD	$LN61@pyx_pw_8rs@5
	DD	$LN62@pyx_pw_8rs@5
	DD	$LN63@pyx_pw_8rs@5
	DD	$LN64@pyx_pw_8rs@5
	DD	$LN65@pyx_pw_8rs@5
	DD	$LN66@pyx_pw_8rs@5
$LN140@pyx_pw_8rs@5:
	DD	$LN54@pyx_pw_8rs@5
	DD	$LN52@pyx_pw_8rs@5
	DD	$LN49@pyx_pw_8rs@5
	DD	$LN46@pyx_pw_8rs@5
	DD	$LN43@pyx_pw_8rs@5
	DD	$LN40@pyx_pw_8rs@5
	DD	$LN37@pyx_pw_8rs@5
	DD	$LN34@pyx_pw_8rs@5
$LN139@pyx_pw_8rs@5:
	DD	$LN20@pyx_pw_8rs@5
	DD	$LN21@pyx_pw_8rs@5
	DD	$LN22@pyx_pw_8rs@5
	DD	$LN23@pyx_pw_8rs@5
	DD	$LN24@pyx_pw_8rs@5
	DD	$LN25@pyx_pw_8rs@5
__pyx_pw_8rsrpsinr_9get_coverage ENDP
_TEXT	ENDS
END
